//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// This code was generated by XmlSchemaClassGenerator version 2.1.1142.0 using the following command:
// xscgen -n OpenUtau.Core.Format.MusicXMLSchema musicxml-4.0/schema/musicxml.xsd
namespace OpenUtau.Core.Format.MusicXMLSchema
{


    /// <summary>
    /// <para>The above-below type is used to indicate whether one element appears above or below another element.</paxra>
    /// </summary>
    [System.ComponentModel.DescriptionAttribute("The above-below type is used to indicate whether one element appears above or bel" +
        "ow another element.")]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XmlSchemaClassGenerator", "2.1.1142.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute("above-below", Namespace="")]
    public enum AboveBelow
    {

        [System.Xml.Serialization.XmlEnumAttribute("above")]
        Above,

        [System.Xml.Serialization.XmlEnumAttribute("below")]
        Below,
    }

    /// <summary>
    /// <para>The css-font-size type includes the CSS font sizes used as an alternative to a numeric point size.</para>
    /// </summary>
    [System.ComponentModel.DescriptionAttribute("The css-font-size type includes the CSS font sizes used as an alternative to a nu" +
        "meric point size.")]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XmlSchemaClassGenerator", "2.1.1142.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute("css-font-size", Namespace="")]
    public enum CssFontSize
    {

        [System.Xml.Serialization.XmlEnumAttribute("xx-small")]
        XxSmall,

        [System.Xml.Serialization.XmlEnumAttribute("x-small")]
        XSmall,

        [System.Xml.Serialization.XmlEnumAttribute("small")]
        Small,

        [System.Xml.Serialization.XmlEnumAttribute("medium")]
        Medium,

        [System.Xml.Serialization.XmlEnumAttribute("large")]
        Large,

        [System.Xml.Serialization.XmlEnumAttribute("x-large")]
        XLarge,

        [System.Xml.Serialization.XmlEnumAttribute("xx-large")]
        XxLarge,
    }

    /// <summary>
    /// <para>The enclosure-shape type describes the shape and presence / absence of an enclosure around text or symbols. A bracket enclosure is similar to a rectangle with the bottom line missing, as is common in jazz notation. An inverted-bracket enclosure is similar to a rectangle with the top line missing.</para>
    /// </summary>
    [System.ComponentModel.DescriptionAttribute(@"The enclosure-shape type describes the shape and presence / absence of an enclosure around text or symbols. A bracket enclosure is similar to a rectangle with the bottom line missing, as is common in jazz notation. An inverted-bracket enclosure is similar to a rectangle with the top line missing.")]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XmlSchemaClassGenerator", "2.1.1142.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute("enclosure-shape", Namespace="")]
    public enum EnclosureShape
    {

        [System.Xml.Serialization.XmlEnumAttribute("rectangle")]
        Rectangle,

        [System.Xml.Serialization.XmlEnumAttribute("square")]
        Square,

        [System.Xml.Serialization.XmlEnumAttribute("oval")]
        Oval,

        [System.Xml.Serialization.XmlEnumAttribute("circle")]
        Circle,

        [System.Xml.Serialization.XmlEnumAttribute("bracket")]
        Bracket,

        [System.Xml.Serialization.XmlEnumAttribute("inverted-bracket")]
        InvertedBracket,

        [System.Xml.Serialization.XmlEnumAttribute("triangle")]
        Triangle,

        [System.Xml.Serialization.XmlEnumAttribute("diamond")]
        Diamond,

        [System.Xml.Serialization.XmlEnumAttribute("pentagon")]
        Pentagon,

        [System.Xml.Serialization.XmlEnumAttribute("hexagon")]
        Hexagon,

        [System.Xml.Serialization.XmlEnumAttribute("heptagon")]
        Heptagon,

        [System.Xml.Serialization.XmlEnumAttribute("octagon")]
        Octagon,

        [System.Xml.Serialization.XmlEnumAttribute("nonagon")]
        Nonagon,

        [System.Xml.Serialization.XmlEnumAttribute("decagon")]
        Decagon,

        [System.Xml.Serialization.XmlEnumAttribute("none")]
        None,
    }

    /// <summary>
    /// <para>The fermata-shape type represents the shape of the fermata sign. The empty value is equivalent to the normal value.</para>
    /// </summary>
    [System.ComponentModel.DescriptionAttribute("The fermata-shape type represents the shape of the fermata sign. The empty value " +
        "is equivalent to the normal value.")]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XmlSchemaClassGenerator", "2.1.1142.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute("fermata-shape", Namespace="")]
    public enum FermataShape
    {

        [System.Xml.Serialization.XmlEnumAttribute("normal")]
        Normal,

        [System.Xml.Serialization.XmlEnumAttribute("angled")]
        Angled,

        [System.Xml.Serialization.XmlEnumAttribute("square")]
        Square,

        [System.Xml.Serialization.XmlEnumAttribute("double-angled")]
        DoubleAngled,

        [System.Xml.Serialization.XmlEnumAttribute("double-square")]
        DoubleSquare,

        [System.Xml.Serialization.XmlEnumAttribute("double-dot")]
        DoubleDot,

        [System.Xml.Serialization.XmlEnumAttribute("half-curve")]
        HalfCurve,

        [System.Xml.Serialization.XmlEnumAttribute("curlew")]
        Curlew,

        [System.Xml.Serialization.XmlEnumAttribute("")]
        Empty,
    }

    /// <summary>
    /// <para>The font-style type represents a simplified version of the CSS font-style property.</para>
    /// </summary>
    [System.ComponentModel.DescriptionAttribute("The font-style type represents a simplified version of the CSS font-style propert" +
        "y.")]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XmlSchemaClassGenerator", "2.1.1142.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute("font-style", Namespace="")]
    public enum FontStyle
    {

        [System.Xml.Serialization.XmlEnumAttribute("normal")]
        Normal,

        [System.Xml.Serialization.XmlEnumAttribute("italic")]
        Italic,
    }

    /// <summary>
    /// <para>The font-weight type represents a simplified version of the CSS font-weight property.</para>
    /// </summary>
    [System.ComponentModel.DescriptionAttribute("The font-weight type represents a simplified version of the CSS font-weight prope" +
        "rty.")]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XmlSchemaClassGenerator", "2.1.1142.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute("font-weight", Namespace="")]
    public enum FontWeight
    {

        [System.Xml.Serialization.XmlEnumAttribute("normal")]
        Normal,

        [System.Xml.Serialization.XmlEnumAttribute("bold")]
        Bold,
    }

    /// <summary>
    /// <para>The left-center-right type is used to define horizontal alignment and text justification.</para>
    /// </summary>
    [System.ComponentModel.DescriptionAttribute("The left-center-right type is used to define horizontal alignment and text justif" +
        "ication.")]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XmlSchemaClassGenerator", "2.1.1142.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute("left-center-right", Namespace="")]
    public enum LeftCenterRight
    {

        [System.Xml.Serialization.XmlEnumAttribute("left")]
        Left,

        [System.Xml.Serialization.XmlEnumAttribute("center")]
        Center,

        [System.Xml.Serialization.XmlEnumAttribute("right")]
        Right,
    }

    /// <summary>
    /// <para>The left-right type is used to indicate whether one element appears to the left or the right of another element.</para>
    /// </summary>
    [System.ComponentModel.DescriptionAttribute("The left-right type is used to indicate whether one element appears to the left o" +
        "r the right of another element.")]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XmlSchemaClassGenerator", "2.1.1142.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute("left-right", Namespace="")]
    public enum LeftRight
    {

        [System.Xml.Serialization.XmlEnumAttribute("left")]
        Left,

        [System.Xml.Serialization.XmlEnumAttribute("right")]
        Right,
    }

    /// <summary>
    /// <para>The line-length type distinguishes between different line lengths for doit, falloff, plop, and scoop articulations.</para>
    /// </summary>
    [System.ComponentModel.DescriptionAttribute("The line-length type distinguishes between different line lengths for doit, fallo" +
        "ff, plop, and scoop articulations.")]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XmlSchemaClassGenerator", "2.1.1142.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute("line-length", Namespace="")]
    public enum LineLength
    {

        [System.Xml.Serialization.XmlEnumAttribute("short")]
        Short,

        [System.Xml.Serialization.XmlEnumAttribute("medium")]
        Medium,

        [System.Xml.Serialization.XmlEnumAttribute("long")]
        Long,
    }

    /// <summary>
    /// <para>The line-shape type distinguishes between straight and curved lines.</para>
    /// </summary>
    [System.ComponentModel.DescriptionAttribute("The line-shape type distinguishes between straight and curved lines.")]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XmlSchemaClassGenerator", "2.1.1142.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute("line-shape", Namespace="")]
    public enum LineShape
    {

        [System.Xml.Serialization.XmlEnumAttribute("straight")]
        Straight,

        [System.Xml.Serialization.XmlEnumAttribute("curved")]
        Curved,
    }

    /// <summary>
    /// <para>The line-type type distinguishes between solid, dashed, dotted, and wavy lines.</para>
    /// </summary>
    [System.ComponentModel.DescriptionAttribute("The line-type type distinguishes between solid, dashed, dotted, and wavy lines.")]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XmlSchemaClassGenerator", "2.1.1142.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute("line-type", Namespace="")]
    public enum LineType
    {

        [System.Xml.Serialization.XmlEnumAttribute("solid")]
        Solid,

        [System.Xml.Serialization.XmlEnumAttribute("dashed")]
        Dashed,

        [System.Xml.Serialization.XmlEnumAttribute("dotted")]
        Dotted,

        [System.Xml.Serialization.XmlEnumAttribute("wavy")]
        Wavy,
    }

    /// <summary>
    /// <para>The mute type represents muting for different instruments, including brass, winds, and strings. The on and off values are used for undifferentiated mutes. The remaining values represent specific mutes.</para>
    /// </summary>
    [System.ComponentModel.DescriptionAttribute("The mute type represents muting for different instruments, including brass, winds" +
        ", and strings. The on and off values are used for undifferentiated mutes. The re" +
        "maining values represent specific mutes.")]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XmlSchemaClassGenerator", "2.1.1142.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute("mute", Namespace="")]
    public enum Mute
    {

        [System.Xml.Serialization.XmlEnumAttribute("on")]
        On,

        [System.Xml.Serialization.XmlEnumAttribute("off")]
        Off,

        [System.Xml.Serialization.XmlEnumAttribute("straight")]
        Straight,

        [System.Xml.Serialization.XmlEnumAttribute("cup")]
        Cup,

        [System.Xml.Serialization.XmlEnumAttribute("harmon-no-stem")]
        HarmonNoStem,

        [System.Xml.Serialization.XmlEnumAttribute("harmon-stem")]
        HarmonStem,

        [System.Xml.Serialization.XmlEnumAttribute("bucket")]
        Bucket,

        [System.Xml.Serialization.XmlEnumAttribute("plunger")]
        Plunger,

        [System.Xml.Serialization.XmlEnumAttribute("hat")]
        Hat,

        [System.Xml.Serialization.XmlEnumAttribute("solotone")]
        Solotone,

        [System.Xml.Serialization.XmlEnumAttribute("practice")]
        Practice,

        [System.Xml.Serialization.XmlEnumAttribute("stop-mute")]
        StopMute,

        [System.Xml.Serialization.XmlEnumAttribute("stop-hand")]
        StopHand,

        [System.Xml.Serialization.XmlEnumAttribute("echo")]
        Echo,

        [System.Xml.Serialization.XmlEnumAttribute("palm")]
        Palm,
    }

    /// <summary>
    /// <para>The over-under type is used to indicate whether the tips of curved lines such as slurs and ties are overhand (tips down) or underhand (tips up).</para>
    /// </summary>
    [System.ComponentModel.DescriptionAttribute("The over-under type is used to indicate whether the tips of curved lines such as " +
        "slurs and ties are overhand (tips down) or underhand (tips up).")]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XmlSchemaClassGenerator", "2.1.1142.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute("over-under", Namespace="")]
    public enum OverUnder
    {

        [System.Xml.Serialization.XmlEnumAttribute("over")]
        Over,

        [System.Xml.Serialization.XmlEnumAttribute("under")]
        Under,
    }

    /// <summary>
    /// <para>The semi-pitched type represents categories of indefinite pitch for percussion instruments.</para>
    /// </summary>
    [System.ComponentModel.DescriptionAttribute("The semi-pitched type represents categories of indefinite pitch for percussion in" +
        "struments.")]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XmlSchemaClassGenerator", "2.1.1142.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute("semi-pitched", Namespace="")]
    public enum SemiPitched
    {

        [System.Xml.Serialization.XmlEnumAttribute("high")]
        High,

        [System.Xml.Serialization.XmlEnumAttribute("medium-high")]
        MediumHigh,

        [System.Xml.Serialization.XmlEnumAttribute("medium")]
        Medium,

        [System.Xml.Serialization.XmlEnumAttribute("medium-low")]
        MediumLow,

        [System.Xml.Serialization.XmlEnumAttribute("low")]
        Low,

        [System.Xml.Serialization.XmlEnumAttribute("very-low")]
        VeryLow,
    }

    /// <summary>
    /// <para>The start-note type describes the starting note of trills and mordents for playback, relative to the current note.</para>
    /// </summary>
    [System.ComponentModel.DescriptionAttribute("The start-note type describes the starting note of trills and mordents for playba" +
        "ck, relative to the current note.")]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XmlSchemaClassGenerator", "2.1.1142.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute("start-note", Namespace="")]
    public enum StartNote
    {

        [System.Xml.Serialization.XmlEnumAttribute("upper")]
        Upper,

        [System.Xml.Serialization.XmlEnumAttribute("main")]
        Main,

        [System.Xml.Serialization.XmlEnumAttribute("below")]
        Below,
    }

    /// <summary>
    /// <para>The start-stop type is used for an attribute of musical elements that can either start or stop, such as tuplets.
    ///
    ///The values of start and stop refer to how an element appears in musical score order, not in MusicXML document order. An element with a stop attribute may precede the corresponding element with a start attribute within a MusicXML document. This is particularly common in multi-staff music. For example, the stopping point for a tuplet may appear in staff 1 before the starting point for the tuplet appears in staff 2 later in the document.
    ///
    ///When multiple elements with the same tag are used within the same note, their order within the MusicXML document should match the musical score order.</para>
    /// </summary>
    [System.ComponentModel.DescriptionAttribute(@"The start-stop type is used for an attribute of musical elements that can either start or stop, such as tuplets. The values of start and stop refer to how an element appears in musical score order, not in MusicXML document order. An element with a stop attribute may precede the corresponding element with a start attribute within a MusicXML document. This is particularly common in multi-staff music. For example, the stopping point for a tuplet may appear in staff 1 before the starting point for the tuplet appears in staff 2 later in the document. When multiple elements with the same tag are used within the same note, their order within the MusicXML document should match the musical score order.")]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XmlSchemaClassGenerator", "2.1.1142.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute("start-stop", Namespace="")]
    public enum StartStop
    {

        [System.Xml.Serialization.XmlEnumAttribute("start")]
        Start,

        [System.Xml.Serialization.XmlEnumAttribute("stop")]
        Stop,
    }

    /// <summary>
    /// <para>The start-stop-continue type is used for an attribute of musical elements that can either start or stop, but also need to refer to an intermediate point in the symbol, as for complex slurs or for formatting of symbols across system breaks.
    ///
    ///The values of start, stop, and continue refer to how an element appears in musical score order, not in MusicXML document order. An element with a stop attribute may precede the corresponding element with a start attribute within a MusicXML document. This is particularly common in multi-staff music. For example, the stopping point for a slur may appear in staff 1 before the starting point for the slur appears in staff 2 later in the document.
    ///
    ///When multiple elements with the same tag are used within the same note, their order within the MusicXML document should match the musical score order. For example, a note that marks both the end of one slur and the start of a new slur should have the incoming slur element with a type of stop precede the outgoing slur element with a type of start.</para>
    /// </summary>
    [System.ComponentModel.DescriptionAttribute(@"The start-stop-continue type is used for an attribute of musical elements that can either start or stop, but also need to refer to an intermediate point in the symbol, as for complex slurs or for formatting of symbols across system breaks. The values of start, stop, and continue refer to how an element appears in musical score order, not in MusicXML document order. An element with a stop attribute may precede the corresponding element with a start attribute within a MusicXML document. This is particularly common in multi-staff music. For example, the stopping point for a slur may appear in staff 1 before the starting point for the slur appears in staff 2 later in the document. When multiple elements with the same tag are used within the same note, their order within the MusicXML document should match the musical score order. For example, a note that marks both the end of one slur and the start of a new slur should have the incoming slur element with a type of stop precede the outgoing slur element with a type of start.")]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XmlSchemaClassGenerator", "2.1.1142.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute("start-stop-continue", Namespace="")]
    public enum StartStopContinue
    {

        [System.Xml.Serialization.XmlEnumAttribute("start")]
        Start,

        [System.Xml.Serialization.XmlEnumAttribute("stop")]
        Stop,

        [System.Xml.Serialization.XmlEnumAttribute("continue")]
        Continue,
    }

    /// <summary>
    /// <para>The start-stop-single type is used for an attribute of musical elements that can be used for either multi-note or single-note musical elements, as for groupings.
    ///
    ///When multiple elements with the same tag are used within the same note, their order within the MusicXML document should match the musical score order.</para>
    /// </summary>
    [System.ComponentModel.DescriptionAttribute(@"The start-stop-single type is used for an attribute of musical elements that can be used for either multi-note or single-note musical elements, as for groupings. When multiple elements with the same tag are used within the same note, their order within the MusicXML document should match the musical score order.")]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XmlSchemaClassGenerator", "2.1.1142.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute("start-stop-single", Namespace="")]
    public enum StartStopSingle
    {

        [System.Xml.Serialization.XmlEnumAttribute("start")]
        Start,

        [System.Xml.Serialization.XmlEnumAttribute("stop")]
        Stop,

        [System.Xml.Serialization.XmlEnumAttribute("single")]
        Single,
    }

    /// <summary>
    /// <para>The symbol-size type is used to distinguish between full, cue sized, grace cue sized, and oversized symbols.</para>
    /// </summary>
    [System.ComponentModel.DescriptionAttribute("The symbol-size type is used to distinguish between full, cue sized, grace cue si" +
        "zed, and oversized symbols.")]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XmlSchemaClassGenerator", "2.1.1142.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute("symbol-size", Namespace="")]
    public enum SymbolSize
    {

        [System.Xml.Serialization.XmlEnumAttribute("full")]
        Full,

        [System.Xml.Serialization.XmlEnumAttribute("cue")]
        Cue,

        [System.Xml.Serialization.XmlEnumAttribute("grace-cue")]
        GraceCue,

        [System.Xml.Serialization.XmlEnumAttribute("large")]
        Large,
    }

    /// <summary>
    /// <para>The text-direction type is used to adjust and override the Unicode bidirectional text algorithm, similar to the Directionality data category in the W3C Internationalization Tag Set recommendation. Values are ltr (left-to-right embed), rtl (right-to-left embed), lro (left-to-right bidi-override), and rlo (right-to-left bidi-override). The default value is ltr. This type is typically used by applications that store text in left-to-right visual order rather than logical order. Such applications can use the lro value to better communicate with other applications that more fully support bidirectional text.</para>
    /// </summary>
    [System.ComponentModel.DescriptionAttribute(@"The text-direction type is used to adjust and override the Unicode bidirectional text algorithm, similar to the Directionality data category in the W3C Internationalization Tag Set recommendation. Values are ltr (left-to-right embed), rtl (right-to-left embed), lro (left-to-right bidi-override), and rlo (right-to-left bidi-override). The default value is ltr. This type is typically used by applications that store text in left-to-right visual order rather than logical order. Such applications can use the lro value to better communicate with other applications that more fully support bidirectional text.")]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XmlSchemaClassGenerator", "2.1.1142.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute("text-direction", Namespace="")]
    public enum TextDirection
    {

        [System.Xml.Serialization.XmlEnumAttribute("ltr")]
        Ltr,

        [System.Xml.Serialization.XmlEnumAttribute("rtl")]
        Rtl,

        [System.Xml.Serialization.XmlEnumAttribute("lro")]
        Lro,

        [System.Xml.Serialization.XmlEnumAttribute("rlo")]
        Rlo,
    }

    /// <summary>
    /// <para>The tied-type type is used as an attribute of the tied element to specify where the visual representation of a tie begins and ends. A tied element which joins two notes of the same pitch can be specified with tied-type start on the first note and tied-type stop on the second note. To indicate a note should be undamped, use a single tied element with tied-type let-ring. For other ties that are visually attached to a single note, such as a tie leading into or out of a repeated section or coda, use two tied elements on the same note, one start and one stop.
    ///
    ///In start-stop cases, ties can add more elements using a continue type. This is typically used to specify the formatting of cross-system ties.
    ///
    ///When multiple elements with the same tag are used within the same note, their order within the MusicXML document should match the musical score order. For example, a note with a tie at the end of a first ending should have the tied element with a type of start precede the tied element with a type of stop.</para>
    /// </summary>
    [System.ComponentModel.DescriptionAttribute(@"The tied-type type is used as an attribute of the tied element to specify where the visual representation of a tie begins and ends. A tied element which joins two notes of the same pitch can be specified with tied-type start on the first note and tied-type stop on the second note. To indicate a note should be undamped, use a single tied element with tied-type let-ring. For other ties that are visually attached to a single note, such as a tie leading into or out of a repeated section or coda, use two tied elements on the same note, one start and one stop. In start-stop cases, ties can add more elements using a continue type. This is typically used to specify the formatting of cross-system ties. When multiple elements with the same tag are used within the same note, their order within the MusicXML document should match the musical score order. For example, a note with a tie at the end of a first ending should have the tied element with a type of start precede the tied element with a type of stop.")]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XmlSchemaClassGenerator", "2.1.1142.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute("tied-type", Namespace="")]
    public enum TiedType
    {

        [System.Xml.Serialization.XmlEnumAttribute("start")]
        Start,

        [System.Xml.Serialization.XmlEnumAttribute("stop")]
        Stop,

        [System.Xml.Serialization.XmlEnumAttribute("continue")]
        Continue,

        [System.Xml.Serialization.XmlEnumAttribute("let-ring")]
        LetRing,
    }

    /// <summary>
    /// <para>The top-bottom type is used to indicate the top or bottom part of a vertical shape like non-arpeggiate.</para>
    /// </summary>
    [System.ComponentModel.DescriptionAttribute("The top-bottom type is used to indicate the top or bottom part of a vertical shap" +
        "e like non-arpeggiate.")]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XmlSchemaClassGenerator", "2.1.1142.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute("top-bottom", Namespace="")]
    public enum TopBottom
    {

        [System.Xml.Serialization.XmlEnumAttribute("top")]
        Top,

        [System.Xml.Serialization.XmlEnumAttribute("bottom")]
        Bottom,
    }

    /// <summary>
    /// <para>The tremolo-type is used to distinguish double-note, single-note, and unmeasured tremolos.</para>
    /// </summary>
    [System.ComponentModel.DescriptionAttribute("The tremolo-type is used to distinguish double-note, single-note, and unmeasured " +
        "tremolos.")]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XmlSchemaClassGenerator", "2.1.1142.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute("tremolo-type", Namespace="")]
    public enum TremoloType
    {

        [System.Xml.Serialization.XmlEnumAttribute("start")]
        Start,

        [System.Xml.Serialization.XmlEnumAttribute("stop")]
        Stop,

        [System.Xml.Serialization.XmlEnumAttribute("single")]
        Single,

        [System.Xml.Serialization.XmlEnumAttribute("unmeasured")]
        Unmeasured,
    }

    /// <summary>
    /// <para>The trill-step type describes the alternating note of trills and mordents for playback, relative to the current note.</para>
    /// </summary>
    [System.ComponentModel.DescriptionAttribute("The trill-step type describes the alternating note of trills and mordents for pla" +
        "yback, relative to the current note.")]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XmlSchemaClassGenerator", "2.1.1142.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute("trill-step", Namespace="")]
    public enum TrillStep
    {

        [System.Xml.Serialization.XmlEnumAttribute("whole")]
        Whole,

        [System.Xml.Serialization.XmlEnumAttribute("half")]
        Half,

        [System.Xml.Serialization.XmlEnumAttribute("unison")]
        Unison,
    }

    /// <summary>
    /// <para>The two-note-turn type describes the ending notes of trills and mordents for playback, relative to the current note.</para>
    /// </summary>
    [System.ComponentModel.DescriptionAttribute("The two-note-turn type describes the ending notes of trills and mordents for play" +
        "back, relative to the current note.")]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XmlSchemaClassGenerator", "2.1.1142.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute("two-note-turn", Namespace="")]
    public enum TwoNoteTurn
    {

        [System.Xml.Serialization.XmlEnumAttribute("whole")]
        Whole,

        [System.Xml.Serialization.XmlEnumAttribute("half")]
        Half,

        [System.Xml.Serialization.XmlEnumAttribute("none")]
        None,
    }

    /// <summary>
    /// <para>The up-down type is used for the direction of arrows and other pointed symbols like vertical accents, indicating which way the tip is pointing.</para>
    /// </summary>
    [System.ComponentModel.DescriptionAttribute("The up-down type is used for the direction of arrows and other pointed symbols li" +
        "ke vertical accents, indicating which way the tip is pointing.")]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XmlSchemaClassGenerator", "2.1.1142.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute("up-down", Namespace="")]
    public enum UpDown
    {

        [System.Xml.Serialization.XmlEnumAttribute("up")]
        Up,

        [System.Xml.Serialization.XmlEnumAttribute("down")]
        Down,
    }

    /// <summary>
    /// <para>The upright-inverted type describes the appearance of a fermata element. The value is upright if not specified.</para>
    /// </summary>
    [System.ComponentModel.DescriptionAttribute("The upright-inverted type describes the appearance of a fermata element. The valu" +
        "e is upright if not specified.")]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XmlSchemaClassGenerator", "2.1.1142.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute("upright-inverted", Namespace="")]
    public enum UprightInverted
    {

        [System.Xml.Serialization.XmlEnumAttribute("upright")]
        Upright,

        [System.Xml.Serialization.XmlEnumAttribute("inverted")]
        Inverted,
    }

    /// <summary>
    /// <para>The valign type is used to indicate vertical alignment to the top, middle, bottom, or baseline of the text. If the text is on multiple lines, baseline alignment refers to the baseline of the lowest line of text. Defaults are implementation-dependent.</para>
    /// </summary>
    [System.ComponentModel.DescriptionAttribute("The valign type is used to indicate vertical alignment to the top, middle, bottom" +
        ", or baseline of the text. If the text is on multiple lines, baseline alignment " +
        "refers to the baseline of the lowest line of text. Defaults are implementation-d" +
        "ependent.")]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XmlSchemaClassGenerator", "2.1.1142.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute("valign", Namespace="")]
    public enum Valign
    {

        [System.Xml.Serialization.XmlEnumAttribute("top")]
        Top,

        [System.Xml.Serialization.XmlEnumAttribute("middle")]
        Middle,

        [System.Xml.Serialization.XmlEnumAttribute("bottom")]
        Bottom,

        [System.Xml.Serialization.XmlEnumAttribute("baseline")]
        Baseline,
    }

    /// <summary>
    /// <para>The valign-image type is used to indicate vertical alignment for images and graphics, so it does not include a baseline value. Defaults are implementation-dependent.</para>
    /// </summary>
    [System.ComponentModel.DescriptionAttribute("The valign-image type is used to indicate vertical alignment for images and graph" +
        "ics, so it does not include a baseline value. Defaults are implementation-depend" +
        "ent.")]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XmlSchemaClassGenerator", "2.1.1142.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute("valign-image", Namespace="")]
    public enum ValignImage
    {

        [System.Xml.Serialization.XmlEnumAttribute("top")]
        Top,

        [System.Xml.Serialization.XmlEnumAttribute("middle")]
        Middle,

        [System.Xml.Serialization.XmlEnumAttribute("bottom")]
        Bottom,
    }

    /// <summary>
    /// <para>The yes-no type is used for boolean-like attributes. We cannot use W3C XML Schema booleans due to their restrictions on expression of boolean values.</para>
    /// </summary>
    [System.ComponentModel.DescriptionAttribute("The yes-no type is used for boolean-like attributes. We cannot use W3C XML Schema" +
        " booleans due to their restrictions on expression of boolean values.")]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XmlSchemaClassGenerator", "2.1.1142.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute("yes-no", Namespace="")]
    public enum YesNo
    {

        [System.Xml.Serialization.XmlEnumAttribute("yes")]
        Yes,

        [System.Xml.Serialization.XmlEnumAttribute("no")]
        No,
    }

    /// <summary>
    /// <para>The cancel-location type is used to indicate where a key signature cancellation appears relative to a new key signature: to the left, to the right, or before the barline and to the left. It is left by default. For mid-measure key elements, a cancel-location of before-barline should be treated like a cancel-location of left.</para>
    /// </summary>
    [System.ComponentModel.DescriptionAttribute(@"The cancel-location type is used to indicate where a key signature cancellation appears relative to a new key signature: to the left, to the right, or before the barline and to the left. It is left by default. For mid-measure key elements, a cancel-location of before-barline should be treated like a cancel-location of left.")]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XmlSchemaClassGenerator", "2.1.1142.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute("cancel-location", Namespace="")]
    public enum CancelLocation
    {

        [System.Xml.Serialization.XmlEnumAttribute("left")]
        Left,

        [System.Xml.Serialization.XmlEnumAttribute("right")]
        Right,

        [System.Xml.Serialization.XmlEnumAttribute("before-barline")]
        BeforeBarline,
    }

    /// <summary>
    /// <para>The clef-sign type represents the different clef symbols. The jianpu sign indicates that the music that follows should be in jianpu numbered notation, just as the TAB sign indicates that the music that follows should be in tablature notation. Unlike TAB, a jianpu sign does not correspond to a visual clef notation.
    ///
    ///The none sign is deprecated as of MusicXML 4.0. Use the clef element's print-object attribute instead. When the none sign is used, notes should be displayed as if in treble clef.</para>
    /// </summary>
    [System.ComponentModel.DescriptionAttribute(@"The clef-sign type represents the different clef symbols. The jianpu sign indicates that the music that follows should be in jianpu numbered notation, just as the TAB sign indicates that the music that follows should be in tablature notation. Unlike TAB, a jianpu sign does not correspond to a visual clef notation. The none sign is deprecated as of MusicXML 4.0. Use the clef element's print-object attribute instead. When the none sign is used, notes should be displayed as if in treble clef.")]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XmlSchemaClassGenerator", "2.1.1142.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute("clef-sign", Namespace="")]
    public enum ClefSign
    {

        G,

        F,

        C,

        [System.Xml.Serialization.XmlEnumAttribute("percussion")]
        Percussion,

        [System.Xml.Serialization.XmlEnumAttribute("TAB")]
        Tab,

        [System.Xml.Serialization.XmlEnumAttribute("jianpu")]
        Jianpu,

        [System.Xml.Serialization.XmlEnumAttribute("none")]
        None,
    }

    /// <summary>
    /// <para>The show-frets type indicates whether to show tablature frets as numbers (0, 1, 2) or letters (a, b, c). The default choice is numbers.</para>
    /// </summary>
    [System.ComponentModel.DescriptionAttribute("The show-frets type indicates whether to show tablature frets as numbers (0, 1, 2" +
        ") or letters (a, b, c). The default choice is numbers.")]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XmlSchemaClassGenerator", "2.1.1142.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute("show-frets", Namespace="")]
    public enum ShowFrets
    {

        [System.Xml.Serialization.XmlEnumAttribute("numbers")]
        Numbers,

        [System.Xml.Serialization.XmlEnumAttribute("letters")]
        Letters,
    }

    /// <summary>
    /// <para>The staff-type value can be ossia, editorial, cue, alternate, or regular. An ossia staff represents music that can be played instead of what appears on the regular staff. An editorial staff also represents musical alternatives, but is created by an editor rather than the composer. It can be used for suggested interpretations or alternatives from other sources. A cue staff represents music from another part. An alternate staff shares the same music as the prior staff, but displayed differently (e.g., treble and bass clef, standard notation and tablature). It is not included in playback. An alternate staff provides more information to an application reading a file than encoding the same music in separate parts, so its use is preferred in this situation if feasible. A regular staff is the standard default staff-type.</para>
    /// </summary>
    [System.ComponentModel.DescriptionAttribute(@"The staff-type value can be ossia, editorial, cue, alternate, or regular. An ossia staff represents music that can be played instead of what appears on the regular staff. An editorial staff also represents musical alternatives, but is created by an editor rather than the composer. It can be used for suggested interpretations or alternatives from other sources. A cue staff represents music from another part. An alternate staff shares the same music as the prior staff, but displayed differently (e.g., treble and bass clef, standard notation and tablature). It is not included in playback. An alternate staff provides more information to an application reading a file than encoding the same music in separate parts, so its use is preferred in this situation if feasible. A regular staff is the standard default staff-type.")]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XmlSchemaClassGenerator", "2.1.1142.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute("staff-type", Namespace="")]
    public enum StaffType
    {

        [System.Xml.Serialization.XmlEnumAttribute("ossia")]
        Ossia,

        [System.Xml.Serialization.XmlEnumAttribute("editorial")]
        Editorial,

        [System.Xml.Serialization.XmlEnumAttribute("cue")]
        Cue,

        [System.Xml.Serialization.XmlEnumAttribute("alternate")]
        Alternate,

        [System.Xml.Serialization.XmlEnumAttribute("regular")]
        Regular,
    }

    /// <summary>
    /// <para>The time-relation type indicates the symbol used to represent the interchangeable aspect of dual time signatures.</para>
    /// </summary>
    [System.ComponentModel.DescriptionAttribute("The time-relation type indicates the symbol used to represent the interchangeable" +
        " aspect of dual time signatures.")]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XmlSchemaClassGenerator", "2.1.1142.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute("time-relation", Namespace="")]
    public enum TimeRelation
    {

        [System.Xml.Serialization.XmlEnumAttribute("parentheses")]
        Parentheses,

        [System.Xml.Serialization.XmlEnumAttribute("bracket")]
        Bracket,

        [System.Xml.Serialization.XmlEnumAttribute("equals")]
        Equals,

        [System.Xml.Serialization.XmlEnumAttribute("slash")]
        Slash,

        [System.Xml.Serialization.XmlEnumAttribute("space")]
        Space,

        [System.Xml.Serialization.XmlEnumAttribute("hyphen")]
        Hyphen,
    }

    /// <summary>
    /// <para>The time-separator type indicates how to display the arrangement between the beats and beat-type values in a time signature. The default value is none. The horizontal, diagonal, and vertical values represent horizontal, diagonal lower-left to upper-right, and vertical lines respectively. For these values, the beats and beat-type values are arranged on either side of the separator line. The none value represents no separator with the beats and beat-type arranged vertically. The adjacent value represents no separator with the beats and beat-type arranged horizontally.</para>
    /// </summary>
    [System.ComponentModel.DescriptionAttribute(@"The time-separator type indicates how to display the arrangement between the beats and beat-type values in a time signature. The default value is none. The horizontal, diagonal, and vertical values represent horizontal, diagonal lower-left to upper-right, and vertical lines respectively. For these values, the beats and beat-type values are arranged on either side of the separator line. The none value represents no separator with the beats and beat-type arranged vertically. The adjacent value represents no separator with the beats and beat-type arranged horizontally.")]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XmlSchemaClassGenerator", "2.1.1142.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute("time-separator", Namespace="")]
    public enum TimeSeparator
    {

        [System.Xml.Serialization.XmlEnumAttribute("none")]
        None,

        [System.Xml.Serialization.XmlEnumAttribute("horizontal")]
        Horizontal,

        [System.Xml.Serialization.XmlEnumAttribute("diagonal")]
        Diagonal,

        [System.Xml.Serialization.XmlEnumAttribute("vertical")]
        Vertical,

        [System.Xml.Serialization.XmlEnumAttribute("adjacent")]
        Adjacent,
    }

    /// <summary>
    /// <para>The time-symbol type indicates how to display a time signature. The normal value is the usual fractional display, and is the implied symbol type if none is specified. Other options are the common and cut time symbols, as well as a single number with an implied denominator. The note symbol indicates that the beat-type should be represented with the corresponding downstem note rather than a number. The dotted-note symbol indicates that the beat-type should be represented with a dotted downstem note that corresponds to three times the beat-type value, and a numerator that is one third the beats value.</para>
    /// </summary>
    [System.ComponentModel.DescriptionAttribute(@"The time-symbol type indicates how to display a time signature. The normal value is the usual fractional display, and is the implied symbol type if none is specified. Other options are the common and cut time symbols, as well as a single number with an implied denominator. The note symbol indicates that the beat-type should be represented with the corresponding downstem note rather than a number. The dotted-note symbol indicates that the beat-type should be represented with a dotted downstem note that corresponds to three times the beat-type value, and a numerator that is one third the beats value.")]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XmlSchemaClassGenerator", "2.1.1142.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute("time-symbol", Namespace="")]
    public enum TimeSymbol
    {

        [System.Xml.Serialization.XmlEnumAttribute("common")]
        Common,

        [System.Xml.Serialization.XmlEnumAttribute("cut")]
        Cut,

        [System.Xml.Serialization.XmlEnumAttribute("single-number")]
        SingleNumber,

        [System.Xml.Serialization.XmlEnumAttribute("note")]
        Note,

        [System.Xml.Serialization.XmlEnumAttribute("dotted-note")]
        DottedNote,

        [System.Xml.Serialization.XmlEnumAttribute("normal")]
        Normal,
    }

    /// <summary>
    /// <para>The backward-forward type is used to specify repeat directions. The start of the repeat has a forward direction while the end of the repeat has a backward direction.</para>
    /// </summary>
    [System.ComponentModel.DescriptionAttribute("The backward-forward type is used to specify repeat directions. The start of the " +
        "repeat has a forward direction while the end of the repeat has a backward direct" +
        "ion.")]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XmlSchemaClassGenerator", "2.1.1142.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute("backward-forward", Namespace="")]
    public enum BackwardForward
    {

        [System.Xml.Serialization.XmlEnumAttribute("backward")]
        Backward,

        [System.Xml.Serialization.XmlEnumAttribute("forward")]
        Forward,
    }

    /// <summary>
    /// <para>The bar-style type represents barline style information. Choices are regular, dotted, dashed, heavy, light-light, light-heavy, heavy-light, heavy-heavy, tick (a short stroke through the top line), short (a partial barline between the 2nd and 4th lines), and none.</para>
    /// </summary>
    [System.ComponentModel.DescriptionAttribute(@"The bar-style type represents barline style information. Choices are regular, dotted, dashed, heavy, light-light, light-heavy, heavy-light, heavy-heavy, tick (a short stroke through the top line), short (a partial barline between the 2nd and 4th lines), and none.")]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XmlSchemaClassGenerator", "2.1.1142.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute("bar-style", Namespace="")]
    public enum BarStyle
    {

        [System.Xml.Serialization.XmlEnumAttribute("regular")]
        Regular,

        [System.Xml.Serialization.XmlEnumAttribute("dotted")]
        Dotted,

        [System.Xml.Serialization.XmlEnumAttribute("dashed")]
        Dashed,

        [System.Xml.Serialization.XmlEnumAttribute("heavy")]
        Heavy,

        [System.Xml.Serialization.XmlEnumAttribute("light-light")]
        LightLight,

        [System.Xml.Serialization.XmlEnumAttribute("light-heavy")]
        LightHeavy,

        [System.Xml.Serialization.XmlEnumAttribute("heavy-light")]
        HeavyLight,

        [System.Xml.Serialization.XmlEnumAttribute("heavy-heavy")]
        HeavyHeavy,

        [System.Xml.Serialization.XmlEnumAttribute("tick")]
        Tick,

        [System.Xml.Serialization.XmlEnumAttribute("short")]
        Short,

        [System.Xml.Serialization.XmlEnumAttribute("none")]
        None,
    }

    /// <summary>
    /// <para>The right-left-middle type is used to specify barline location.</para>
    /// </summary>
    [System.ComponentModel.DescriptionAttribute("The right-left-middle type is used to specify barline location.")]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XmlSchemaClassGenerator", "2.1.1142.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute("right-left-middle", Namespace="")]
    public enum RightLeftMiddle
    {

        [System.Xml.Serialization.XmlEnumAttribute("right")]
        Right,

        [System.Xml.Serialization.XmlEnumAttribute("left")]
        Left,

        [System.Xml.Serialization.XmlEnumAttribute("middle")]
        Middle,
    }

    /// <summary>
    /// <para>The start-stop-discontinue type is used to specify ending types. Typically, the start type is associated with the left barline of the first measure in an ending. The stop and discontinue types are associated with the right barline of the last measure in an ending. Stop is used when the ending mark concludes with a downward jog, as is typical for first endings. Discontinue is used when there is no downward jog, as is typical for second endings that do not conclude a piece.</para>
    /// </summary>
    [System.ComponentModel.DescriptionAttribute(@"The start-stop-discontinue type is used to specify ending types. Typically, the start type is associated with the left barline of the first measure in an ending. The stop and discontinue types are associated with the right barline of the last measure in an ending. Stop is used when the ending mark concludes with a downward jog, as is typical for first endings. Discontinue is used when there is no downward jog, as is typical for second endings that do not conclude a piece.")]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XmlSchemaClassGenerator", "2.1.1142.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute("start-stop-discontinue", Namespace="")]
    public enum StartStopDiscontinue
    {

        [System.Xml.Serialization.XmlEnumAttribute("start")]
        Start,

        [System.Xml.Serialization.XmlEnumAttribute("stop")]
        Stop,

        [System.Xml.Serialization.XmlEnumAttribute("discontinue")]
        Discontinue,
    }

    /// <summary>
    /// <para>The winged attribute indicates whether the repeat has winged extensions that appear above and below the barline. The straight and curved values represent single wings, while the double-straight and double-curved values represent double wings. The none value indicates no wings and is the default.</para>
    /// </summary>
    [System.ComponentModel.DescriptionAttribute(@"The winged attribute indicates whether the repeat has winged extensions that appear above and below the barline. The straight and curved values represent single wings, while the double-straight and double-curved values represent double wings. The none value indicates no wings and is the default.")]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XmlSchemaClassGenerator", "2.1.1142.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute("winged", Namespace="")]
    public enum Winged
    {

        [System.Xml.Serialization.XmlEnumAttribute("none")]
        None,

        [System.Xml.Serialization.XmlEnumAttribute("straight")]
        Straight,

        [System.Xml.Serialization.XmlEnumAttribute("curved")]
        Curved,

        [System.Xml.Serialization.XmlEnumAttribute("double-straight")]
        DoubleStraight,

        [System.Xml.Serialization.XmlEnumAttribute("double-curved")]
        DoubleCurved,
    }

    /// <summary>
    /// <para>The beater-value type represents pictograms for beaters, mallets, and sticks that do not have different materials represented in the pictogram. The finger and hammer values are in addition to Stone's list.</para>
    /// </summary>
    [System.ComponentModel.DescriptionAttribute("The beater-value type represents pictograms for beaters, mallets, and sticks that" +
        " do not have different materials represented in the pictogram. The finger and ha" +
        "mmer values are in addition to Stone\'s list.")]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XmlSchemaClassGenerator", "2.1.1142.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute("beater-value", Namespace="")]
    public enum BeaterValue
    {

        [System.Xml.Serialization.XmlEnumAttribute("bow")]
        Bow,

        [System.Xml.Serialization.XmlEnumAttribute("chime hammer")]
        ChimeHammer,

        [System.Xml.Serialization.XmlEnumAttribute("coin")]
        Coin,

        [System.Xml.Serialization.XmlEnumAttribute("drum stick")]
        DrumStick,

        [System.Xml.Serialization.XmlEnumAttribute("finger")]
        Finger,

        [System.Xml.Serialization.XmlEnumAttribute("fingernail")]
        Fingernail,

        [System.Xml.Serialization.XmlEnumAttribute("fist")]
        Fist,

        [System.Xml.Serialization.XmlEnumAttribute("guiro scraper")]
        GuiroScraper,

        [System.Xml.Serialization.XmlEnumAttribute("hammer")]
        Hammer,

        [System.Xml.Serialization.XmlEnumAttribute("hand")]
        Hand,

        [System.Xml.Serialization.XmlEnumAttribute("jazz stick")]
        JazzStick,

        [System.Xml.Serialization.XmlEnumAttribute("knitting needle")]
        KnittingNeedle,

        [System.Xml.Serialization.XmlEnumAttribute("metal hammer")]
        MetalHammer,

        [System.Xml.Serialization.XmlEnumAttribute("slide brush on gong")]
        SlideBrushOnGong,

        [System.Xml.Serialization.XmlEnumAttribute("snare stick")]
        SnareStick,

        [System.Xml.Serialization.XmlEnumAttribute("spoon mallet")]
        SpoonMallet,

        [System.Xml.Serialization.XmlEnumAttribute("superball")]
        Superball,

        [System.Xml.Serialization.XmlEnumAttribute("triangle beater")]
        TriangleBeater,

        [System.Xml.Serialization.XmlEnumAttribute("triangle beater plain")]
        TriangleBeaterPlain,

        [System.Xml.Serialization.XmlEnumAttribute("wire brush")]
        WireBrush,
    }

    /// <summary>
    /// <para>The degree-symbol-value type indicates which symbol should be used in specifying a degree.</para>
    /// </summary>
    [System.ComponentModel.DescriptionAttribute("The degree-symbol-value type indicates which symbol should be used in specifying " +
        "a degree.")]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XmlSchemaClassGenerator", "2.1.1142.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute("degree-symbol-value", Namespace="")]
    public enum DegreeSymbolValue
    {

        [System.Xml.Serialization.XmlEnumAttribute("major")]
        Major,

        [System.Xml.Serialization.XmlEnumAttribute("minor")]
        Minor,

        [System.Xml.Serialization.XmlEnumAttribute("augmented")]
        Augmented,

        [System.Xml.Serialization.XmlEnumAttribute("diminished")]
        Diminished,

        [System.Xml.Serialization.XmlEnumAttribute("half-diminished")]
        HalfDiminished,
    }

    /// <summary>
    /// <para>The degree-type-value type indicates whether the current degree element is an addition, alteration, or subtraction to the kind of the current chord in the harmony element.</para>
    /// </summary>
    [System.ComponentModel.DescriptionAttribute("The degree-type-value type indicates whether the current degree element is an add" +
        "ition, alteration, or subtraction to the kind of the current chord in the harmon" +
        "y element.")]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XmlSchemaClassGenerator", "2.1.1142.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute("degree-type-value", Namespace="")]
    public enum DegreeTypeValue
    {

        [System.Xml.Serialization.XmlEnumAttribute("add")]
        Add,

        [System.Xml.Serialization.XmlEnumAttribute("alter")]
        Alter,

        [System.Xml.Serialization.XmlEnumAttribute("subtract")]
        Subtract,
    }

    /// <summary>
    /// <para>The effect-value type represents pictograms for sound effect percussion instruments. The cannon, lotus flute, and megaphone values are in addition to Stone's list.</para>
    /// </summary>
    [System.ComponentModel.DescriptionAttribute("The effect-value type represents pictograms for sound effect percussion instrumen" +
        "ts. The cannon, lotus flute, and megaphone values are in addition to Stone\'s lis" +
        "t.")]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XmlSchemaClassGenerator", "2.1.1142.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute("effect-value", Namespace="")]
    public enum EffectValue
    {

        [System.Xml.Serialization.XmlEnumAttribute("anvil")]
        Anvil,

        [System.Xml.Serialization.XmlEnumAttribute("auto horn")]
        AutoHorn,

        [System.Xml.Serialization.XmlEnumAttribute("bird whistle")]
        BirdWhistle,

        [System.Xml.Serialization.XmlEnumAttribute("cannon")]
        Cannon,

        [System.Xml.Serialization.XmlEnumAttribute("duck call")]
        DuckCall,

        [System.Xml.Serialization.XmlEnumAttribute("gun shot")]
        GunShot,

        [System.Xml.Serialization.XmlEnumAttribute("klaxon horn")]
        KlaxonHorn,

        [System.Xml.Serialization.XmlEnumAttribute("lions roar")]
        LionsRoar,

        [System.Xml.Serialization.XmlEnumAttribute("lotus flute")]
        LotusFlute,

        [System.Xml.Serialization.XmlEnumAttribute("megaphone")]
        Megaphone,

        [System.Xml.Serialization.XmlEnumAttribute("police whistle")]
        PoliceWhistle,

        [System.Xml.Serialization.XmlEnumAttribute("siren")]
        Siren,

        [System.Xml.Serialization.XmlEnumAttribute("slide whistle")]
        SlideWhistle,

        [System.Xml.Serialization.XmlEnumAttribute("thunder sheet")]
        ThunderSheet,

        [System.Xml.Serialization.XmlEnumAttribute("wind machine")]
        WindMachine,

        [System.Xml.Serialization.XmlEnumAttribute("wind whistle")]
        WindWhistle,
    }

    /// <summary>
    /// <para>The glass-value type represents pictograms for glass percussion instruments.</para>
    /// </summary>
    [System.ComponentModel.DescriptionAttribute("The glass-value type represents pictograms for glass percussion instruments.")]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XmlSchemaClassGenerator", "2.1.1142.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute("glass-value", Namespace="")]
    public enum GlassValue
    {

        [System.Xml.Serialization.XmlEnumAttribute("glass harmonica")]
        GlassHarmonica,

        [System.Xml.Serialization.XmlEnumAttribute("glass harp")]
        GlassHarp,

        [System.Xml.Serialization.XmlEnumAttribute("wind chimes")]
        WindChimes,
    }

    /// <summary>
    /// <para>The harmony-arrangement type indicates how stacked chords and bass notes are displayed within a harmony element. The vertical value specifies that the second element appears below the first. The horizontal value specifies that the second element appears to the right of the first. The diagonal value specifies that the second element appears both below and to the right of the first.</para>
    /// </summary>
    [System.ComponentModel.DescriptionAttribute(@"The harmony-arrangement type indicates how stacked chords and bass notes are displayed within a harmony element. The vertical value specifies that the second element appears below the first. The horizontal value specifies that the second element appears to the right of the first. The diagonal value specifies that the second element appears both below and to the right of the first.")]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XmlSchemaClassGenerator", "2.1.1142.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute("harmony-arrangement", Namespace="")]
    public enum HarmonyArrangement
    {

        [System.Xml.Serialization.XmlEnumAttribute("vertical")]
        Vertical,

        [System.Xml.Serialization.XmlEnumAttribute("horizontal")]
        Horizontal,

        [System.Xml.Serialization.XmlEnumAttribute("diagonal")]
        Diagonal,
    }

    /// <summary>
    /// <para>The harmony-type type differentiates different types of harmonies when alternate harmonies are possible. Explicit harmonies have all note present in the music; implied have some notes missing but implied; alternate represents alternate analyses.</para>
    /// </summary>
    [System.ComponentModel.DescriptionAttribute("The harmony-type type differentiates different types of harmonies when alternate " +
        "harmonies are possible. Explicit harmonies have all note present in the music; i" +
        "mplied have some notes missing but implied; alternate represents alternate analy" +
        "ses.")]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XmlSchemaClassGenerator", "2.1.1142.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute("harmony-type", Namespace="")]
    public enum HarmonyType
    {

        [System.Xml.Serialization.XmlEnumAttribute("explicit")]
        Explicit,

        [System.Xml.Serialization.XmlEnumAttribute("implied")]
        Implied,

        [System.Xml.Serialization.XmlEnumAttribute("alternate")]
        Alternate,
    }

    /// <summary>
    /// <para>A kind-value indicates the type of chord. Degree elements can then add, subtract, or alter from these starting points. Values include:
    ///
    ///Triads:
    ///	major (major third, perfect fifth)
    ///	minor (minor third, perfect fifth)
    ///	augmented (major third, augmented fifth)
    ///	diminished (minor third, diminished fifth)
    ///Sevenths:
    ///	dominant (major triad, minor seventh)
    ///	major-seventh (major triad, major seventh)
    ///	minor-seventh (minor triad, minor seventh)
    ///	diminished-seventh (diminished triad, diminished seventh)
    ///	augmented-seventh (augmented triad, minor seventh)
    ///	half-diminished (diminished triad, minor seventh)
    ///	major-minor (minor triad, major seventh)
    ///Sixths:
    ///	major-sixth (major triad, added sixth)
    ///	minor-sixth (minor triad, added sixth)
    ///Ninths:
    ///	dominant-ninth (dominant-seventh, major ninth)
    ///	major-ninth (major-seventh, major ninth)
    ///	minor-ninth (minor-seventh, major ninth)
    ///11ths (usually as the basis for alteration):
    ///	dominant-11th (dominant-ninth, perfect 11th)
    ///	major-11th (major-ninth, perfect 11th)
    ///	minor-11th (minor-ninth, perfect 11th)
    ///13ths (usually as the basis for alteration):
    ///	dominant-13th (dominant-11th, major 13th)
    ///	major-13th (major-11th, major 13th)
    ///	minor-13th (minor-11th, major 13th)
    ///Suspended:
    ///	suspended-second (major second, perfect fifth)
    ///	suspended-fourth (perfect fourth, perfect fifth)
    ///Functional sixths:
    ///	Neapolitan
    ///	Italian
    ///	French
    ///	German
    ///Other:
    ///	pedal (pedal-point bass)
    ///	power (perfect fifth)
    ///	Tristan
    ///
    ///The "other" kind is used when the harmony is entirely composed of add elements.
    ///
    ///The "none" kind is used to explicitly encode absence of chords or functional harmony. In this case, the root, numeral, or function element has no meaning. When using the root or numeral element, the root-step or numeral-step text attribute should be set to the empty string to keep the root or numeral from being displayed.</para>
    /// </summary>
    [System.ComponentModel.DescriptionAttribute("A kind-value indicates the type of chord. Degree elements can then add, subtract," +
        " or alter from these starting points. Values include: Triads: major (major third" +
        ", perfect fifth) minor (minor third, perfect fifth) augmented (major third, augm" +
        "ented fifth) diminished (minor third, diminished fifth) Sevenths: dominant (majo" +
        "r triad, minor seventh) major-seventh (major triad, major seventh) minor-seventh" +
        " (minor triad, minor seventh) diminished-seventh (diminished triad, diminished s" +
        "eventh) augmented-seventh (augmented triad, minor seventh) half-diminished (dimi" +
        "nished triad, minor seventh) major-minor (minor triad, major seventh) Sixths: ma" +
        "jor-sixth (major triad, added sixth) minor-sixth (minor triad, added sixth) Nint" +
        "hs: dominant-ninth (dominant-seventh, major ninth) major-ninth (major-seventh, m" +
        "ajor ninth) minor-ninth (minor-seventh, major ninth) 11ths (usually as the basis" +
        " for alteration): dominant-11th (dominant-ninth, perfect 11th) major-11th (major" +
        "-ninth, perfect 11th) minor-11th (minor-ninth, perfect 11th) 13ths (usually as t" +
        "he basis for alteration): dominant-13th (dominant-11th, major 13th) major-13th (" +
        "major-11th, major 13th) minor-13th (minor-11th, major 13th) Suspended: suspended" +
        "-second (major second, perfect fifth) suspended-fourth (perfect fourth, perfect " +
        "fifth) Functional sixths: Neapolitan Italian French German Other: pedal (pedal-p" +
        "oint bass) power (perfect fifth) Tristan The \"other\" kind is used when the harmo" +
        "ny is entirely composed of add elements. The \"none\" kind is used to explicitly e" +
        "ncode absence of chords or functional harmony. In this case, the root, numeral, " +
        "or function element has no meaning. When using the root or numeral element, the " +
        "root-step or numeral-step text attribute should be set to the empty string to ke" +
        "ep the root or numeral from being displayed.")]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XmlSchemaClassGenerator", "2.1.1142.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute("kind-value", Namespace="")]
    public enum KindValue
    {

        [System.Xml.Serialization.XmlEnumAttribute("major")]
        Major,

        [System.Xml.Serialization.XmlEnumAttribute("minor")]
        Minor,

        [System.Xml.Serialization.XmlEnumAttribute("augmented")]
        Augmented,

        [System.Xml.Serialization.XmlEnumAttribute("diminished")]
        Diminished,

        [System.Xml.Serialization.XmlEnumAttribute("dominant")]
        Dominant,

        [System.Xml.Serialization.XmlEnumAttribute("major-seventh")]
        MajorSeventh,

        [System.Xml.Serialization.XmlEnumAttribute("minor-seventh")]
        MinorSeventh,

        [System.Xml.Serialization.XmlEnumAttribute("diminished-seventh")]
        DiminishedSeventh,

        [System.Xml.Serialization.XmlEnumAttribute("augmented-seventh")]
        AugmentedSeventh,

        [System.Xml.Serialization.XmlEnumAttribute("half-diminished")]
        HalfDiminished,

        [System.Xml.Serialization.XmlEnumAttribute("major-minor")]
        MajorMinor,

        [System.Xml.Serialization.XmlEnumAttribute("major-sixth")]
        MajorSixth,

        [System.Xml.Serialization.XmlEnumAttribute("minor-sixth")]
        MinorSixth,

        [System.Xml.Serialization.XmlEnumAttribute("dominant-ninth")]
        DominantNinth,

        [System.Xml.Serialization.XmlEnumAttribute("major-ninth")]
        MajorNinth,

        [System.Xml.Serialization.XmlEnumAttribute("minor-ninth")]
        MinorNinth,

        [System.Xml.Serialization.XmlEnumAttribute("dominant-11th")]
        Dominant11Th,

        [System.Xml.Serialization.XmlEnumAttribute("major-11th")]
        Major11Th,

        [System.Xml.Serialization.XmlEnumAttribute("minor-11th")]
        Minor11Th,

        [System.Xml.Serialization.XmlEnumAttribute("dominant-13th")]
        Dominant13Th,

        [System.Xml.Serialization.XmlEnumAttribute("major-13th")]
        Major13Th,

        [System.Xml.Serialization.XmlEnumAttribute("minor-13th")]
        Minor13Th,

        [System.Xml.Serialization.XmlEnumAttribute("suspended-second")]
        SuspendedSecond,

        [System.Xml.Serialization.XmlEnumAttribute("suspended-fourth")]
        SuspendedFourth,

        Neapolitan,

        Italian,

        French,

        German,

        [System.Xml.Serialization.XmlEnumAttribute("pedal")]
        Pedal,

        [System.Xml.Serialization.XmlEnumAttribute("power")]
        Power,

        Tristan,

        [System.Xml.Serialization.XmlEnumAttribute("other")]
        Other,

        [System.Xml.Serialization.XmlEnumAttribute("none")]
        None,
    }

    /// <summary>
    /// <para>The line-end type specifies if there is a jog up or down (or both), an arrow, or nothing at the start or end of a bracket.</para>
    /// </summary>
    [System.ComponentModel.DescriptionAttribute("The line-end type specifies if there is a jog up or down (or both), an arrow, or " +
        "nothing at the start or end of a bracket.")]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XmlSchemaClassGenerator", "2.1.1142.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute("line-end", Namespace="")]
    public enum LineEnd
    {

        [System.Xml.Serialization.XmlEnumAttribute("up")]
        Up,

        [System.Xml.Serialization.XmlEnumAttribute("down")]
        Down,

        [System.Xml.Serialization.XmlEnumAttribute("both")]
        Both,

        [System.Xml.Serialization.XmlEnumAttribute("arrow")]
        Arrow,

        [System.Xml.Serialization.XmlEnumAttribute("none")]
        None,
    }

    /// <summary>
    /// <para>The measure-numbering-value type describes how measure numbers are displayed on this part: no numbers, numbers every measure, or numbers every system.</para>
    /// </summary>
    [System.ComponentModel.DescriptionAttribute("The measure-numbering-value type describes how measure numbers are displayed on t" +
        "his part: no numbers, numbers every measure, or numbers every system.")]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XmlSchemaClassGenerator", "2.1.1142.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute("measure-numbering-value", Namespace="")]
    public enum MeasureNumberingValue
    {

        [System.Xml.Serialization.XmlEnumAttribute("none")]
        None,

        [System.Xml.Serialization.XmlEnumAttribute("measure")]
        Measure,

        [System.Xml.Serialization.XmlEnumAttribute("system")]
        System,
    }

    /// <summary>
    /// <para>The membrane-value type represents pictograms for membrane percussion instruments.</para>
    /// </summary>
    [System.ComponentModel.DescriptionAttribute("The membrane-value type represents pictograms for membrane percussion instruments" +
        ".")]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XmlSchemaClassGenerator", "2.1.1142.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute("membrane-value", Namespace="")]
    public enum MembraneValue
    {

        [System.Xml.Serialization.XmlEnumAttribute("bass drum")]
        BassDrum,

        [System.Xml.Serialization.XmlEnumAttribute("bass drum on side")]
        BassDrumOnSide,

        [System.Xml.Serialization.XmlEnumAttribute("bongos")]
        Bongos,

        [System.Xml.Serialization.XmlEnumAttribute("Chinese tomtom")]
        ChineseTomtom,

        [System.Xml.Serialization.XmlEnumAttribute("conga drum")]
        CongaDrum,

        [System.Xml.Serialization.XmlEnumAttribute("cuica")]
        Cuica,

        [System.Xml.Serialization.XmlEnumAttribute("goblet drum")]
        GobletDrum,

        [System.Xml.Serialization.XmlEnumAttribute("Indo-American tomtom")]
        IndoAmericanTomtom,

        [System.Xml.Serialization.XmlEnumAttribute("Japanese tomtom")]
        JapaneseTomtom,

        [System.Xml.Serialization.XmlEnumAttribute("military drum")]
        MilitaryDrum,

        [System.Xml.Serialization.XmlEnumAttribute("snare drum")]
        SnareDrum,

        [System.Xml.Serialization.XmlEnumAttribute("snare drum snares off")]
        SnareDrumSnaresOff,

        [System.Xml.Serialization.XmlEnumAttribute("tabla")]
        Tabla,

        [System.Xml.Serialization.XmlEnumAttribute("tambourine")]
        Tambourine,

        [System.Xml.Serialization.XmlEnumAttribute("tenor drum")]
        TenorDrum,

        [System.Xml.Serialization.XmlEnumAttribute("timbales")]
        Timbales,

        [System.Xml.Serialization.XmlEnumAttribute("tomtom")]
        Tomtom,
    }

    /// <summary>
    /// <para>The metal-value type represents pictograms for metal percussion instruments. The hi-hat value refers to a pictogram like Stone's high-hat cymbals but without the long vertical line at the bottom.</para>
    /// </summary>
    [System.ComponentModel.DescriptionAttribute("The metal-value type represents pictograms for metal percussion instruments. The " +
        "hi-hat value refers to a pictogram like Stone\'s high-hat cymbals but without the" +
        " long vertical line at the bottom.")]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XmlSchemaClassGenerator", "2.1.1142.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute("metal-value", Namespace="")]
    public enum MetalValue
    {

        [System.Xml.Serialization.XmlEnumAttribute("agogo")]
        Agogo,

        [System.Xml.Serialization.XmlEnumAttribute("almglocken")]
        Almglocken,

        [System.Xml.Serialization.XmlEnumAttribute("bell")]
        Bell,

        [System.Xml.Serialization.XmlEnumAttribute("bell plate")]
        BellPlate,

        [System.Xml.Serialization.XmlEnumAttribute("bell tree")]
        BellTree,

        [System.Xml.Serialization.XmlEnumAttribute("brake drum")]
        BrakeDrum,

        [System.Xml.Serialization.XmlEnumAttribute("cencerro")]
        Cencerro,

        [System.Xml.Serialization.XmlEnumAttribute("chain rattle")]
        ChainRattle,

        [System.Xml.Serialization.XmlEnumAttribute("Chinese cymbal")]
        ChineseCymbal,

        [System.Xml.Serialization.XmlEnumAttribute("cowbell")]
        Cowbell,

        [System.Xml.Serialization.XmlEnumAttribute("crash cymbals")]
        CrashCymbals,

        [System.Xml.Serialization.XmlEnumAttribute("crotale")]
        Crotale,

        [System.Xml.Serialization.XmlEnumAttribute("cymbal tongs")]
        CymbalTongs,

        [System.Xml.Serialization.XmlEnumAttribute("domed gong")]
        DomedGong,

        [System.Xml.Serialization.XmlEnumAttribute("finger cymbals")]
        FingerCymbals,

        [System.Xml.Serialization.XmlEnumAttribute("flexatone")]
        Flexatone,

        [System.Xml.Serialization.XmlEnumAttribute("gong")]
        Gong,

        [System.Xml.Serialization.XmlEnumAttribute("hi-hat")]
        HiHat,

        [System.Xml.Serialization.XmlEnumAttribute("high-hat cymbals")]
        HighHatCymbals,

        [System.Xml.Serialization.XmlEnumAttribute("handbell")]
        Handbell,

        [System.Xml.Serialization.XmlEnumAttribute("jaw harp")]
        JawHarp,

        [System.Xml.Serialization.XmlEnumAttribute("jingle bells")]
        JingleBells,

        [System.Xml.Serialization.XmlEnumAttribute("musical saw")]
        MusicalSaw,

        [System.Xml.Serialization.XmlEnumAttribute("shell bells")]
        ShellBells,

        [System.Xml.Serialization.XmlEnumAttribute("sistrum")]
        Sistrum,

        [System.Xml.Serialization.XmlEnumAttribute("sizzle cymbal")]
        SizzleCymbal,

        [System.Xml.Serialization.XmlEnumAttribute("sleigh bells")]
        SleighBells,

        [System.Xml.Serialization.XmlEnumAttribute("suspended cymbal")]
        SuspendedCymbal,

        [System.Xml.Serialization.XmlEnumAttribute("tam tam")]
        TamTam,

        [System.Xml.Serialization.XmlEnumAttribute("tam tam with beater")]
        TamTamWithBeater,

        [System.Xml.Serialization.XmlEnumAttribute("triangle")]
        Triangle,

        [System.Xml.Serialization.XmlEnumAttribute("Vietnamese hat")]
        VietnameseHat,
    }

    /// <summary>
    /// <para>The numeral-mode type specifies the mode similar to the mode type, but with a restricted set of values. The different minor values are used to interpret numeral-root values of 6 and 7 when present in a minor key. The harmonic minor value sharpens the 7 and the melodic minor value sharpens both 6 and 7. If a minor mode is used without qualification, either in the mode or numeral-mode elements, natural minor is used.</para>
    /// </summary>
    [System.ComponentModel.DescriptionAttribute(@"The numeral-mode type specifies the mode similar to the mode type, but with a restricted set of values. The different minor values are used to interpret numeral-root values of 6 and 7 when present in a minor key. The harmonic minor value sharpens the 7 and the melodic minor value sharpens both 6 and 7. If a minor mode is used without qualification, either in the mode or numeral-mode elements, natural minor is used.")]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XmlSchemaClassGenerator", "2.1.1142.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute("numeral-mode", Namespace="")]
    public enum NumeralMode
    {

        [System.Xml.Serialization.XmlEnumAttribute("major")]
        Major,

        [System.Xml.Serialization.XmlEnumAttribute("minor")]
        Minor,

        [System.Xml.Serialization.XmlEnumAttribute("natural minor")]
        NaturalMinor,

        [System.Xml.Serialization.XmlEnumAttribute("melodic minor")]
        MelodicMinor,

        [System.Xml.Serialization.XmlEnumAttribute("harmonic minor")]
        HarmonicMinor,
    }

    /// <summary>
    /// <para>The on-off type is used for notation elements such as string mutes.</para>
    /// </summary>
    [System.ComponentModel.DescriptionAttribute("The on-off type is used for notation elements such as string mutes.")]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XmlSchemaClassGenerator", "2.1.1142.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute("on-off", Namespace="")]
    public enum OnOff
    {

        [System.Xml.Serialization.XmlEnumAttribute("on")]
        On,

        [System.Xml.Serialization.XmlEnumAttribute("off")]
        Off,
    }

    /// <summary>
    /// <para>The pedal-type simple type is used to distinguish types of pedal directions. The start value indicates the start of a damper pedal, while the sostenuto value indicates the start of a sostenuto pedal. The other values can be used with either the damper or sostenuto pedal. The soft pedal is not included here because there is no special symbol or graphic used for it beyond what can be specified with words and bracket elements.
    ///
    ///The change, continue, discontinue, and resume types are used when the line attribute is yes. The change type indicates a pedal lift and retake indicated with an inverted V marking. The continue type allows more precise formatting across system breaks and for more complex pedaling lines. The discontinue type indicates the end of a pedal line that does not include the explicit lift represented by the stop type. The resume type indicates the start of a pedal line that does not include the downstroke represented by the start type. It can be used when a line resumes after being discontinued, or to start a pedal line that is preceded by a text or symbol representation of the pedal.</para>
    /// </summary>
    [System.ComponentModel.DescriptionAttribute(@"The pedal-type simple type is used to distinguish types of pedal directions. The start value indicates the start of a damper pedal, while the sostenuto value indicates the start of a sostenuto pedal. The other values can be used with either the damper or sostenuto pedal. The soft pedal is not included here because there is no special symbol or graphic used for it beyond what can be specified with words and bracket elements. The change, continue, discontinue, and resume types are used when the line attribute is yes. The change type indicates a pedal lift and retake indicated with an inverted V marking. The continue type allows more precise formatting across system breaks and for more complex pedaling lines. The discontinue type indicates the end of a pedal line that does not include the explicit lift represented by the stop type. The resume type indicates the start of a pedal line that does not include the downstroke represented by the start type. It can be used when a line resumes after being discontinued, or to start a pedal line that is preceded by a text or symbol representation of the pedal.")]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XmlSchemaClassGenerator", "2.1.1142.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute("pedal-type", Namespace="")]
    public enum PedalType
    {

        [System.Xml.Serialization.XmlEnumAttribute("start")]
        Start,

        [System.Xml.Serialization.XmlEnumAttribute("stop")]
        Stop,

        [System.Xml.Serialization.XmlEnumAttribute("sostenuto")]
        Sostenuto,

        [System.Xml.Serialization.XmlEnumAttribute("change")]
        Change,

        [System.Xml.Serialization.XmlEnumAttribute("continue")]
        Continue,

        [System.Xml.Serialization.XmlEnumAttribute("discontinue")]
        Discontinue,

        [System.Xml.Serialization.XmlEnumAttribute("resume")]
        Resume,
    }

    /// <summary>
    /// <para>The pitched-value type represents pictograms for pitched percussion instruments. The chimes and tubular chimes values distinguish the single-line and double-line versions of the pictogram.</para>
    /// </summary>
    [System.ComponentModel.DescriptionAttribute("The pitched-value type represents pictograms for pitched percussion instruments. " +
        "The chimes and tubular chimes values distinguish the single-line and double-line" +
        " versions of the pictogram.")]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XmlSchemaClassGenerator", "2.1.1142.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute("pitched-value", Namespace="")]
    public enum PitchedValue
    {

        [System.Xml.Serialization.XmlEnumAttribute("celesta")]
        Celesta,

        [System.Xml.Serialization.XmlEnumAttribute("chimes")]
        Chimes,

        [System.Xml.Serialization.XmlEnumAttribute("glockenspiel")]
        Glockenspiel,

        [System.Xml.Serialization.XmlEnumAttribute("lithophone")]
        Lithophone,

        [System.Xml.Serialization.XmlEnumAttribute("mallet")]
        Mallet,

        [System.Xml.Serialization.XmlEnumAttribute("marimba")]
        Marimba,

        [System.Xml.Serialization.XmlEnumAttribute("steel drums")]
        SteelDrums,

        [System.Xml.Serialization.XmlEnumAttribute("tubaphone")]
        Tubaphone,

        [System.Xml.Serialization.XmlEnumAttribute("tubular chimes")]
        TubularChimes,

        [System.Xml.Serialization.XmlEnumAttribute("vibraphone")]
        Vibraphone,

        [System.Xml.Serialization.XmlEnumAttribute("xylophone")]
        Xylophone,
    }

    /// <summary>
    /// <para>The principal-voice-symbol type represents the type of symbol used to indicate a principal or secondary voice. The "plain" value represents a plain square bracket. The value of "none" is used for analysis markup when the principal-voice element does not have a corresponding appearance in the score.</para>
    /// </summary>
    [System.ComponentModel.DescriptionAttribute(@"The principal-voice-symbol type represents the type of symbol used to indicate a principal or secondary voice. The ""plain"" value represents a plain square bracket. The value of ""none"" is used for analysis markup when the principal-voice element does not have a corresponding appearance in the score.")]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XmlSchemaClassGenerator", "2.1.1142.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute("principal-voice-symbol", Namespace="")]
    public enum PrincipalVoiceSymbol
    {

        Hauptstimme,

        Nebenstimme,

        [System.Xml.Serialization.XmlEnumAttribute("plain")]
        Plain,

        [System.Xml.Serialization.XmlEnumAttribute("none")]
        None,
    }

    /// <summary>
    /// <para>The staff-divide-symbol type is used for staff division symbols. The down, up, and up-down values correspond to SMuFL code points U+E00B, U+E00C, and U+E00D respectively.</para>
    /// </summary>
    [System.ComponentModel.DescriptionAttribute("The staff-divide-symbol type is used for staff division symbols. The down, up, an" +
        "d up-down values correspond to SMuFL code points U+E00B, U+E00C, and U+E00D resp" +
        "ectively.")]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XmlSchemaClassGenerator", "2.1.1142.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute("staff-divide-symbol", Namespace="")]
    public enum StaffDivideSymbol
    {

        [System.Xml.Serialization.XmlEnumAttribute("down")]
        Down,

        [System.Xml.Serialization.XmlEnumAttribute("up")]
        Up,

        [System.Xml.Serialization.XmlEnumAttribute("up-down")]
        UpDown,
    }

    /// <summary>
    /// <para>The start-stop-change-continue type is used to distinguish types of pedal directions.</para>
    /// </summary>
    [System.ComponentModel.DescriptionAttribute("The start-stop-change-continue type is used to distinguish types of pedal directi" +
        "ons.")]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XmlSchemaClassGenerator", "2.1.1142.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute("start-stop-change-continue", Namespace="")]
    public enum StartStopChangeContinue
    {

        [System.Xml.Serialization.XmlEnumAttribute("start")]
        Start,

        [System.Xml.Serialization.XmlEnumAttribute("stop")]
        Stop,

        [System.Xml.Serialization.XmlEnumAttribute("change")]
        Change,

        [System.Xml.Serialization.XmlEnumAttribute("continue")]
        Continue,
    }

    /// <summary>
    /// <para>The sync-type type specifies the style that a score following application should use to synchronize an accompaniment with a performer. The none type indicates no synchronization to the performer. The tempo type indicates synchronization based on the performer tempo rather than individual events in the score. The event type indicates synchronization by following the performance of individual events in the score rather than the performer tempo. The mostly-tempo and mostly-event types combine these two approaches, with mostly-tempo giving more weight to tempo and mostly-event giving more weight to performed events. The always-event type provides the strictest synchronization by not being forgiving of missing performed events.</para>
    /// </summary>
    [System.ComponentModel.DescriptionAttribute(@"The sync-type type specifies the style that a score following application should use to synchronize an accompaniment with a performer. The none type indicates no synchronization to the performer. The tempo type indicates synchronization based on the performer tempo rather than individual events in the score. The event type indicates synchronization by following the performance of individual events in the score rather than the performer tempo. The mostly-tempo and mostly-event types combine these two approaches, with mostly-tempo giving more weight to tempo and mostly-event giving more weight to performed events. The always-event type provides the strictest synchronization by not being forgiving of missing performed events.")]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XmlSchemaClassGenerator", "2.1.1142.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute("sync-type", Namespace="")]
    public enum SyncType
    {

        [System.Xml.Serialization.XmlEnumAttribute("none")]
        None,

        [System.Xml.Serialization.XmlEnumAttribute("tempo")]
        Tempo,

        [System.Xml.Serialization.XmlEnumAttribute("mostly-tempo")]
        MostlyTempo,

        [System.Xml.Serialization.XmlEnumAttribute("mostly-event")]
        MostlyEvent,

        [System.Xml.Serialization.XmlEnumAttribute("event")]
        Event,

        [System.Xml.Serialization.XmlEnumAttribute("always-event")]
        AlwaysEvent,
    }

    /// <summary>
    /// <para>The system-relation-number type distinguishes measure numbers that are associated with a system rather than the particular part where the element appears. A value of only-top or only-bottom indicates that the number should appear only on the top or bottom part of the current system, respectively. A value of also-top or also-bottom indicates that the number should appear on both the current part and the top or bottom part of the current system, respectively. If these values appear in a score, when parts are created the number should only appear once in this part, not twice. A value of none indicates that the number is associated only with the current part, not with the system.</para>
    /// </summary>
    [System.ComponentModel.DescriptionAttribute(@"The system-relation-number type distinguishes measure numbers that are associated with a system rather than the particular part where the element appears. A value of only-top or only-bottom indicates that the number should appear only on the top or bottom part of the current system, respectively. A value of also-top or also-bottom indicates that the number should appear on both the current part and the top or bottom part of the current system, respectively. If these values appear in a score, when parts are created the number should only appear once in this part, not twice. A value of none indicates that the number is associated only with the current part, not with the system.")]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XmlSchemaClassGenerator", "2.1.1142.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute("system-relation-number", Namespace="")]
    public enum SystemRelationNumber
    {

        [System.Xml.Serialization.XmlEnumAttribute("only-top")]
        OnlyTop,

        [System.Xml.Serialization.XmlEnumAttribute("only-bottom")]
        OnlyBottom,

        [System.Xml.Serialization.XmlEnumAttribute("also-top")]
        AlsoTop,

        [System.Xml.Serialization.XmlEnumAttribute("also-bottom")]
        AlsoBottom,

        [System.Xml.Serialization.XmlEnumAttribute("none")]
        None,
    }

    /// <summary>
    /// <para>The system-relation type distinguishes elements that are associated with a system rather than the particular part where the element appears. A value of only-top indicates that the element should appear only on the top part of the current system. A value of also-top indicates that the element should appear on both the current part and the top part of the current system. If this value appears in a score, when parts are created the element should only appear once in this part, not twice. A value of none indicates that the element is associated only with the current part, not with the system.</para>
    /// </summary>
    [System.ComponentModel.DescriptionAttribute(@"The system-relation type distinguishes elements that are associated with a system rather than the particular part where the element appears. A value of only-top indicates that the element should appear only on the top part of the current system. A value of also-top indicates that the element should appear on both the current part and the top part of the current system. If this value appears in a score, when parts are created the element should only appear once in this part, not twice. A value of none indicates that the element is associated only with the current part, not with the system.")]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XmlSchemaClassGenerator", "2.1.1142.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute("system-relation", Namespace="")]
    public enum SystemRelation
    {

        [System.Xml.Serialization.XmlEnumAttribute("only-top")]
        OnlyTop,

        [System.Xml.Serialization.XmlEnumAttribute("only-bottom")]
        OnlyBottom,

        [System.Xml.Serialization.XmlEnumAttribute("also-top")]
        AlsoTop,

        [System.Xml.Serialization.XmlEnumAttribute("also-bottom")]
        AlsoBottom,

        [System.Xml.Serialization.XmlEnumAttribute("none")]
        None,
    }

    /// <summary>
    /// <para>The tip-direction type represents the direction in which the tip of a stick or beater points, using Unicode arrow terminology.</para>
    /// </summary>
    [System.ComponentModel.DescriptionAttribute("The tip-direction type represents the direction in which the tip of a stick or be" +
        "ater points, using Unicode arrow terminology.")]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XmlSchemaClassGenerator", "2.1.1142.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute("tip-direction", Namespace="")]
    public enum TipDirection
    {

        [System.Xml.Serialization.XmlEnumAttribute("up")]
        Up,

        [System.Xml.Serialization.XmlEnumAttribute("down")]
        Down,

        [System.Xml.Serialization.XmlEnumAttribute("left")]
        Left,

        [System.Xml.Serialization.XmlEnumAttribute("right")]
        Right,

        [System.Xml.Serialization.XmlEnumAttribute("northwest")]
        Northwest,

        [System.Xml.Serialization.XmlEnumAttribute("northeast")]
        Northeast,

        [System.Xml.Serialization.XmlEnumAttribute("southeast")]
        Southeast,

        [System.Xml.Serialization.XmlEnumAttribute("southwest")]
        Southwest,
    }

    /// <summary>
    /// <para>The stick-location type represents pictograms for the location of sticks, beaters, or mallets on cymbals, gongs, drums, and other instruments.</para>
    /// </summary>
    [System.ComponentModel.DescriptionAttribute("The stick-location type represents pictograms for the location of sticks, beaters" +
        ", or mallets on cymbals, gongs, drums, and other instruments.")]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XmlSchemaClassGenerator", "2.1.1142.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute("stick-location", Namespace="")]
    public enum StickLocation
    {

        [System.Xml.Serialization.XmlEnumAttribute("center")]
        Center,

        [System.Xml.Serialization.XmlEnumAttribute("rim")]
        Rim,

        [System.Xml.Serialization.XmlEnumAttribute("cymbal bell")]
        CymbalBell,

        [System.Xml.Serialization.XmlEnumAttribute("cymbal edge")]
        CymbalEdge,
    }

    /// <summary>
    /// <para>The stick-material type represents the material being displayed in a stick pictogram.</para>
    /// </summary>
    [System.ComponentModel.DescriptionAttribute("The stick-material type represents the material being displayed in a stick pictog" +
        "ram.")]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XmlSchemaClassGenerator", "2.1.1142.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute("stick-material", Namespace="")]
    public enum StickMaterial
    {

        [System.Xml.Serialization.XmlEnumAttribute("soft")]
        Soft,

        [System.Xml.Serialization.XmlEnumAttribute("medium")]
        Medium,

        [System.Xml.Serialization.XmlEnumAttribute("hard")]
        Hard,

        [System.Xml.Serialization.XmlEnumAttribute("shaded")]
        Shaded,

        [System.Xml.Serialization.XmlEnumAttribute("x")]
        X,
    }

    /// <summary>
    /// <para>The stick-type type represents the shape of pictograms where the material in the stick, mallet, or beater is represented in the pictogram.</para>
    /// </summary>
    [System.ComponentModel.DescriptionAttribute("The stick-type type represents the shape of pictograms where the material in the " +
        "stick, mallet, or beater is represented in the pictogram.")]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XmlSchemaClassGenerator", "2.1.1142.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute("stick-type", Namespace="")]
    public enum StickType
    {

        [System.Xml.Serialization.XmlEnumAttribute("bass drum")]
        BassDrum,

        [System.Xml.Serialization.XmlEnumAttribute("double bass drum")]
        DoubleBassDrum,

        [System.Xml.Serialization.XmlEnumAttribute("glockenspiel")]
        Glockenspiel,

        [System.Xml.Serialization.XmlEnumAttribute("gum")]
        Gum,

        [System.Xml.Serialization.XmlEnumAttribute("hammer")]
        Hammer,

        [System.Xml.Serialization.XmlEnumAttribute("superball")]
        Superball,

        [System.Xml.Serialization.XmlEnumAttribute("timpani")]
        Timpani,

        [System.Xml.Serialization.XmlEnumAttribute("wound")]
        Wound,

        [System.Xml.Serialization.XmlEnumAttribute("xylophone")]
        Xylophone,

        [System.Xml.Serialization.XmlEnumAttribute("yarn")]
        Yarn,
    }

    /// <summary>
    /// <para>The up-down-stop-continue type is used for octave-shift elements, indicating the direction of the shift from their true pitched values because of printing difficulty.</para>
    /// </summary>
    [System.ComponentModel.DescriptionAttribute("The up-down-stop-continue type is used for octave-shift elements, indicating the " +
        "direction of the shift from their true pitched values because of printing diffic" +
        "ulty.")]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XmlSchemaClassGenerator", "2.1.1142.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute("up-down-stop-continue", Namespace="")]
    public enum UpDownStopContinue
    {

        [System.Xml.Serialization.XmlEnumAttribute("up")]
        Up,

        [System.Xml.Serialization.XmlEnumAttribute("down")]
        Down,

        [System.Xml.Serialization.XmlEnumAttribute("stop")]
        Stop,

        [System.Xml.Serialization.XmlEnumAttribute("continue")]
        Continue,
    }

    /// <summary>
    /// <para>The wedge type is crescendo for the start of a wedge that is closed at the left side, diminuendo for the start of a wedge that is closed on the right side, and stop for the end of a wedge. The continue type is used for formatting wedges over a system break, or for other situations where a single wedge is divided into multiple segments.</para>
    /// </summary>
    [System.ComponentModel.DescriptionAttribute(@"The wedge type is crescendo for the start of a wedge that is closed at the left side, diminuendo for the start of a wedge that is closed on the right side, and stop for the end of a wedge. The continue type is used for formatting wedges over a system break, or for other situations where a single wedge is divided into multiple segments.")]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XmlSchemaClassGenerator", "2.1.1142.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute("wedge-type", Namespace="")]
    public enum WedgeType
    {

        [System.Xml.Serialization.XmlEnumAttribute("crescendo")]
        Crescendo,

        [System.Xml.Serialization.XmlEnumAttribute("diminuendo")]
        Diminuendo,

        [System.Xml.Serialization.XmlEnumAttribute("stop")]
        Stop,

        [System.Xml.Serialization.XmlEnumAttribute("continue")]
        Continue,
    }

    /// <summary>
    /// <para>The wood-value type represents pictograms for wood percussion instruments. The maraca and maracas values distinguish the one- and two-maraca versions of the pictogram.</para>
    /// </summary>
    [System.ComponentModel.DescriptionAttribute("The wood-value type represents pictograms for wood percussion instruments. The ma" +
        "raca and maracas values distinguish the one- and two-maraca versions of the pict" +
        "ogram.")]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XmlSchemaClassGenerator", "2.1.1142.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute("wood-value", Namespace="")]
    public enum WoodValue
    {

        [System.Xml.Serialization.XmlEnumAttribute("bamboo scraper")]
        BambooScraper,

        [System.Xml.Serialization.XmlEnumAttribute("board clapper")]
        BoardClapper,

        [System.Xml.Serialization.XmlEnumAttribute("cabasa")]
        Cabasa,

        [System.Xml.Serialization.XmlEnumAttribute("castanets")]
        Castanets,

        [System.Xml.Serialization.XmlEnumAttribute("castanets with handle")]
        CastanetsWithHandle,

        [System.Xml.Serialization.XmlEnumAttribute("claves")]
        Claves,

        [System.Xml.Serialization.XmlEnumAttribute("football rattle")]
        FootballRattle,

        [System.Xml.Serialization.XmlEnumAttribute("guiro")]
        Guiro,

        [System.Xml.Serialization.XmlEnumAttribute("log drum")]
        LogDrum,

        [System.Xml.Serialization.XmlEnumAttribute("maraca")]
        Maraca,

        [System.Xml.Serialization.XmlEnumAttribute("maracas")]
        Maracas,

        [System.Xml.Serialization.XmlEnumAttribute("quijada")]
        Quijada,

        [System.Xml.Serialization.XmlEnumAttribute("rainstick")]
        Rainstick,

        [System.Xml.Serialization.XmlEnumAttribute("ratchet")]
        Ratchet,

        [System.Xml.Serialization.XmlEnumAttribute("reco-reco")]
        RecoReco,

        [System.Xml.Serialization.XmlEnumAttribute("sandpaper blocks")]
        SandpaperBlocks,

        [System.Xml.Serialization.XmlEnumAttribute("slit drum")]
        SlitDrum,

        [System.Xml.Serialization.XmlEnumAttribute("temple block")]
        TempleBlock,

        [System.Xml.Serialization.XmlEnumAttribute("vibraslap")]
        Vibraslap,

        [System.Xml.Serialization.XmlEnumAttribute("whip")]
        Whip,

        [System.Xml.Serialization.XmlEnumAttribute("wood block")]
        WoodBlock,
    }

    /// <summary>
    /// <para>The margin-type type specifies whether margins apply to even page, odd pages, or both.</para>
    /// </summary>
    [System.ComponentModel.DescriptionAttribute("The margin-type type specifies whether margins apply to even page, odd pages, or " +
        "both.")]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XmlSchemaClassGenerator", "2.1.1142.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute("margin-type", Namespace="")]
    public enum MarginType
    {

        [System.Xml.Serialization.XmlEnumAttribute("odd")]
        Odd,

        [System.Xml.Serialization.XmlEnumAttribute("even")]
        Even,

        [System.Xml.Serialization.XmlEnumAttribute("both")]
        Both,
    }

    /// <summary>
    /// <para>The note-size-type type indicates the type of note being defined by a note-size element. The grace-cue type is used for notes of grace-cue size. The grace type is used for notes of cue size that include a grace element. The cue type is used for all other notes with cue size, whether defined explicitly or implicitly via a cue element. The large type is used for notes of large size.</para>
    /// </summary>
    [System.ComponentModel.DescriptionAttribute(@"The note-size-type type indicates the type of note being defined by a note-size element. The grace-cue type is used for notes of grace-cue size. The grace type is used for notes of cue size that include a grace element. The cue type is used for all other notes with cue size, whether defined explicitly or implicitly via a cue element. The large type is used for notes of large size.")]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XmlSchemaClassGenerator", "2.1.1142.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute("note-size-type", Namespace="")]
    public enum NoteSizeType
    {

        [System.Xml.Serialization.XmlEnumAttribute("cue")]
        Cue,

        [System.Xml.Serialization.XmlEnumAttribute("grace")]
        Grace,

        [System.Xml.Serialization.XmlEnumAttribute("grace-cue")]
        GraceCue,

        [System.Xml.Serialization.XmlEnumAttribute("large")]
        Large,
    }

    /// <summary>
    /// <para>The accidental-value type represents notated accidentals supported by MusicXML. In the MusicXML 2.0 DTD this was a string with values that could be included. The XSD strengthens the data typing to an enumerated list. The quarter- and three-quarters- accidentals are Tartini-style quarter-tone accidentals. The -down and -up accidentals are quarter-tone accidentals that include arrows pointing down or up. The slash- accidentals are used in Turkish classical music. The numbered sharp and flat accidentals are superscripted versions of the accidental signs, used in Turkish folk music. The sori and koron accidentals are microtonal sharp and flat accidentals used in Iranian and Persian music. The other accidental covers accidentals other than those listed here. It is usually used in combination with the smufl attribute to specify a particular SMuFL accidental. The smufl attribute may be used with any accidental value to help specify the appearance of symbols that share the same MusicXML semantics.</para>
    /// </summary>
    [System.ComponentModel.DescriptionAttribute(@"The accidental-value type represents notated accidentals supported by MusicXML. In the MusicXML 2.0 DTD this was a string with values that could be included. The XSD strengthens the data typing to an enumerated list. The quarter- and three-quarters- accidentals are Tartini-style quarter-tone accidentals. The -down and -up accidentals are quarter-tone accidentals that include arrows pointing down or up. The slash- accidentals are used in Turkish classical music. The numbered sharp and flat accidentals are superscripted versions of the accidental signs, used in Turkish folk music. The sori and koron accidentals are microtonal sharp and flat accidentals used in Iranian and Persian music. The other accidental covers accidentals other than those listed here. It is usually used in combination with the smufl attribute to specify a particular SMuFL accidental. The smufl attribute may be used with any accidental value to help specify the appearance of symbols that share the same MusicXML semantics.")]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XmlSchemaClassGenerator", "2.1.1142.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute("accidental-value", Namespace="")]
    public enum AccidentalValue
    {

        [System.Xml.Serialization.XmlEnumAttribute("sharp")]
        Sharp,

        [System.Xml.Serialization.XmlEnumAttribute("natural")]
        Natural,

        [System.Xml.Serialization.XmlEnumAttribute("flat")]
        Flat,

        [System.Xml.Serialization.XmlEnumAttribute("double-sharp")]
        DoubleSharp,

        [System.Xml.Serialization.XmlEnumAttribute("sharp-sharp")]
        SharpSharp,

        [System.Xml.Serialization.XmlEnumAttribute("flat-flat")]
        FlatFlat,

        [System.Xml.Serialization.XmlEnumAttribute("natural-sharp")]
        NaturalSharp,

        [System.Xml.Serialization.XmlEnumAttribute("natural-flat")]
        NaturalFlat,

        [System.Xml.Serialization.XmlEnumAttribute("quarter-flat")]
        QuarterFlat,

        [System.Xml.Serialization.XmlEnumAttribute("quarter-sharp")]
        QuarterSharp,

        [System.Xml.Serialization.XmlEnumAttribute("three-quarters-flat")]
        ThreeQuartersFlat,

        [System.Xml.Serialization.XmlEnumAttribute("three-quarters-sharp")]
        ThreeQuartersSharp,

        [System.Xml.Serialization.XmlEnumAttribute("sharp-down")]
        SharpDown,

        [System.Xml.Serialization.XmlEnumAttribute("sharp-up")]
        SharpUp,

        [System.Xml.Serialization.XmlEnumAttribute("natural-down")]
        NaturalDown,

        [System.Xml.Serialization.XmlEnumAttribute("natural-up")]
        NaturalUp,

        [System.Xml.Serialization.XmlEnumAttribute("flat-down")]
        FlatDown,

        [System.Xml.Serialization.XmlEnumAttribute("flat-up")]
        FlatUp,

        [System.Xml.Serialization.XmlEnumAttribute("double-sharp-down")]
        DoubleSharpDown,

        [System.Xml.Serialization.XmlEnumAttribute("double-sharp-up")]
        DoubleSharpUp,

        [System.Xml.Serialization.XmlEnumAttribute("flat-flat-down")]
        FlatFlatDown,

        [System.Xml.Serialization.XmlEnumAttribute("flat-flat-up")]
        FlatFlatUp,

        [System.Xml.Serialization.XmlEnumAttribute("arrow-down")]
        ArrowDown,

        [System.Xml.Serialization.XmlEnumAttribute("arrow-up")]
        ArrowUp,

        [System.Xml.Serialization.XmlEnumAttribute("triple-sharp")]
        TripleSharp,

        [System.Xml.Serialization.XmlEnumAttribute("triple-flat")]
        TripleFlat,

        [System.Xml.Serialization.XmlEnumAttribute("slash-quarter-sharp")]
        SlashQuarterSharp,

        [System.Xml.Serialization.XmlEnumAttribute("slash-sharp")]
        SlashSharp,

        [System.Xml.Serialization.XmlEnumAttribute("slash-flat")]
        SlashFlat,

        [System.Xml.Serialization.XmlEnumAttribute("double-slash-flat")]
        DoubleSlashFlat,

        [System.Xml.Serialization.XmlEnumAttribute("sharp-1")]
        Sharp1,

        [System.Xml.Serialization.XmlEnumAttribute("sharp-2")]
        Sharp2,

        [System.Xml.Serialization.XmlEnumAttribute("sharp-3")]
        Sharp3,

        [System.Xml.Serialization.XmlEnumAttribute("sharp-5")]
        Sharp5,

        [System.Xml.Serialization.XmlEnumAttribute("flat-1")]
        Flat1,

        [System.Xml.Serialization.XmlEnumAttribute("flat-2")]
        Flat2,

        [System.Xml.Serialization.XmlEnumAttribute("flat-3")]
        Flat3,

        [System.Xml.Serialization.XmlEnumAttribute("flat-4")]
        Flat4,

        [System.Xml.Serialization.XmlEnumAttribute("sori")]
        Sori,

        [System.Xml.Serialization.XmlEnumAttribute("koron")]
        Koron,

        [System.Xml.Serialization.XmlEnumAttribute("other")]
        Other,
    }

    /// <summary>
    /// <para>The arrow-direction type represents the direction in which an arrow points, using Unicode arrow terminology.</para>
    /// </summary>
    [System.ComponentModel.DescriptionAttribute("The arrow-direction type represents the direction in which an arrow points, using" +
        " Unicode arrow terminology.")]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XmlSchemaClassGenerator", "2.1.1142.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute("arrow-direction", Namespace="")]
    public enum ArrowDirection
    {

        [System.Xml.Serialization.XmlEnumAttribute("left")]
        Left,

        [System.Xml.Serialization.XmlEnumAttribute("up")]
        Up,

        [System.Xml.Serialization.XmlEnumAttribute("right")]
        Right,

        [System.Xml.Serialization.XmlEnumAttribute("down")]
        Down,

        [System.Xml.Serialization.XmlEnumAttribute("northwest")]
        Northwest,

        [System.Xml.Serialization.XmlEnumAttribute("northeast")]
        Northeast,

        [System.Xml.Serialization.XmlEnumAttribute("southeast")]
        Southeast,

        [System.Xml.Serialization.XmlEnumAttribute("southwest")]
        Southwest,

        [System.Xml.Serialization.XmlEnumAttribute("left right")]
        LeftRight,

        [System.Xml.Serialization.XmlEnumAttribute("up down")]
        UpDown,

        [System.Xml.Serialization.XmlEnumAttribute("northwest southeast")]
        NorthwestSoutheast,

        [System.Xml.Serialization.XmlEnumAttribute("northeast southwest")]
        NortheastSouthwest,

        [System.Xml.Serialization.XmlEnumAttribute("other")]
        Other,
    }

    /// <summary>
    /// <para>The arrow-style type represents the style of an arrow, using Unicode arrow terminology. Filled and hollow arrows indicate polygonal single arrows. Paired arrows are duplicate single arrows in the same direction. Combined arrows apply to double direction arrows like left right, indicating that an arrow in one direction should be combined with an arrow in the other direction.</para>
    /// </summary>
    [System.ComponentModel.DescriptionAttribute(@"The arrow-style type represents the style of an arrow, using Unicode arrow terminology. Filled and hollow arrows indicate polygonal single arrows. Paired arrows are duplicate single arrows in the same direction. Combined arrows apply to double direction arrows like left right, indicating that an arrow in one direction should be combined with an arrow in the other direction.")]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XmlSchemaClassGenerator", "2.1.1142.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute("arrow-style", Namespace="")]
    public enum ArrowStyle
    {

        [System.Xml.Serialization.XmlEnumAttribute("single")]
        Single,

        [System.Xml.Serialization.XmlEnumAttribute("double")]
        Double,

        [System.Xml.Serialization.XmlEnumAttribute("filled")]
        Filled,

        [System.Xml.Serialization.XmlEnumAttribute("hollow")]
        Hollow,

        [System.Xml.Serialization.XmlEnumAttribute("paired")]
        Paired,

        [System.Xml.Serialization.XmlEnumAttribute("combined")]
        Combined,

        [System.Xml.Serialization.XmlEnumAttribute("other")]
        Other,
    }

    /// <summary>
    /// <para>The beam-value type represents the type of beam associated with each of 8 beam levels (up to 1024th notes) available for each note.</para>
    /// </summary>
    [System.ComponentModel.DescriptionAttribute("The beam-value type represents the type of beam associated with each of 8 beam le" +
        "vels (up to 1024th notes) available for each note.")]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XmlSchemaClassGenerator", "2.1.1142.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute("beam-value", Namespace="")]
    public enum BeamValue
    {

        [System.Xml.Serialization.XmlEnumAttribute("begin")]
        Begin,

        [System.Xml.Serialization.XmlEnumAttribute("continue")]
        Continue,

        [System.Xml.Serialization.XmlEnumAttribute("end")]
        End,

        [System.Xml.Serialization.XmlEnumAttribute("forward hook")]
        ForwardHook,

        [System.Xml.Serialization.XmlEnumAttribute("backward hook")]
        BackwardHook,
    }

    /// <summary>
    /// <para>The bend-shape type distinguishes between the angled bend symbols commonly used in standard notation and the curved bend symbols commonly used in both tablature and standard notation.</para>
    /// </summary>
    [System.ComponentModel.DescriptionAttribute("The bend-shape type distinguishes between the angled bend symbols commonly used i" +
        "n standard notation and the curved bend symbols commonly used in both tablature " +
        "and standard notation.")]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XmlSchemaClassGenerator", "2.1.1142.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute("bend-shape", Namespace="")]
    public enum BendShape
    {

        [System.Xml.Serialization.XmlEnumAttribute("angled")]
        Angled,

        [System.Xml.Serialization.XmlEnumAttribute("curved")]
        Curved,
    }

    /// <summary>
    /// <para>The breath-mark-value type represents the symbol used for a breath mark.</para>
    /// </summary>
    [System.ComponentModel.DescriptionAttribute("The breath-mark-value type represents the symbol used for a breath mark.")]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XmlSchemaClassGenerator", "2.1.1142.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute("breath-mark-value", Namespace="")]
    public enum BreathMarkValue
    {

        [System.Xml.Serialization.XmlEnumAttribute("")]
        Empty,

        [System.Xml.Serialization.XmlEnumAttribute("comma")]
        Comma,

        [System.Xml.Serialization.XmlEnumAttribute("tick")]
        Tick,

        [System.Xml.Serialization.XmlEnumAttribute("upbow")]
        Upbow,

        [System.Xml.Serialization.XmlEnumAttribute("salzedo")]
        Salzedo,
    }

    /// <summary>
    /// <para>The caesura-value type represents the shape of the caesura sign.</para>
    /// </summary>
    [System.ComponentModel.DescriptionAttribute("The caesura-value type represents the shape of the caesura sign.")]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XmlSchemaClassGenerator", "2.1.1142.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute("caesura-value", Namespace="")]
    public enum CaesuraValue
    {

        [System.Xml.Serialization.XmlEnumAttribute("normal")]
        Normal,

        [System.Xml.Serialization.XmlEnumAttribute("thick")]
        Thick,

        [System.Xml.Serialization.XmlEnumAttribute("short")]
        Short,

        [System.Xml.Serialization.XmlEnumAttribute("curved")]
        Curved,

        [System.Xml.Serialization.XmlEnumAttribute("single")]
        Single,

        [System.Xml.Serialization.XmlEnumAttribute("")]
        Empty,
    }

    /// <summary>
    /// <para>The circular-arrow type represents the direction in which a circular arrow points, using Unicode arrow terminology.</para>
    /// </summary>
    [System.ComponentModel.DescriptionAttribute("The circular-arrow type represents the direction in which a circular arrow points" +
        ", using Unicode arrow terminology.")]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XmlSchemaClassGenerator", "2.1.1142.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute("circular-arrow", Namespace="")]
    public enum CircularArrow
    {

        [System.Xml.Serialization.XmlEnumAttribute("clockwise")]
        Clockwise,

        [System.Xml.Serialization.XmlEnumAttribute("anticlockwise")]
        Anticlockwise,
    }

    /// <summary>
    /// <para>The fan type represents the type of beam fanning present on a note, used to represent accelerandos and ritardandos.</para>
    /// </summary>
    [System.ComponentModel.DescriptionAttribute("The fan type represents the type of beam fanning present on a note, used to repre" +
        "sent accelerandos and ritardandos.")]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XmlSchemaClassGenerator", "2.1.1142.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute("fan", Namespace="")]
    public enum Fan
    {

        [System.Xml.Serialization.XmlEnumAttribute("accel")]
        Accel,

        [System.Xml.Serialization.XmlEnumAttribute("rit")]
        Rit,

        [System.Xml.Serialization.XmlEnumAttribute("none")]
        None,
    }

    /// <summary>
    /// <para>The handbell-value type represents the type of handbell technique being notated.</para>
    /// </summary>
    [System.ComponentModel.DescriptionAttribute("The handbell-value type represents the type of handbell technique being notated.")]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XmlSchemaClassGenerator", "2.1.1142.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute("handbell-value", Namespace="")]
    public enum HandbellValue
    {

        [System.Xml.Serialization.XmlEnumAttribute("belltree")]
        Belltree,

        [System.Xml.Serialization.XmlEnumAttribute("damp")]
        Damp,

        [System.Xml.Serialization.XmlEnumAttribute("echo")]
        Echo,

        [System.Xml.Serialization.XmlEnumAttribute("gyro")]
        Gyro,

        [System.Xml.Serialization.XmlEnumAttribute("hand martellato")]
        HandMartellato,

        [System.Xml.Serialization.XmlEnumAttribute("mallet lift")]
        MalletLift,

        [System.Xml.Serialization.XmlEnumAttribute("mallet table")]
        MalletTable,

        [System.Xml.Serialization.XmlEnumAttribute("martellato")]
        Martellato,

        [System.Xml.Serialization.XmlEnumAttribute("martellato lift")]
        MartellatoLift,

        [System.Xml.Serialization.XmlEnumAttribute("muted martellato")]
        MutedMartellato,

        [System.Xml.Serialization.XmlEnumAttribute("pluck lift")]
        PluckLift,

        [System.Xml.Serialization.XmlEnumAttribute("swing")]
        Swing,
    }

    /// <summary>
    /// <para>The harmon-closed-location type indicates which portion of the symbol is filled in when the corresponding harmon-closed-value is half.</para>
    /// </summary>
    [System.ComponentModel.DescriptionAttribute("The harmon-closed-location type indicates which portion of the symbol is filled i" +
        "n when the corresponding harmon-closed-value is half.")]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XmlSchemaClassGenerator", "2.1.1142.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute("harmon-closed-location", Namespace="")]
    public enum HarmonClosedLocation
    {

        [System.Xml.Serialization.XmlEnumAttribute("right")]
        Right,

        [System.Xml.Serialization.XmlEnumAttribute("bottom")]
        Bottom,

        [System.Xml.Serialization.XmlEnumAttribute("left")]
        Left,

        [System.Xml.Serialization.XmlEnumAttribute("top")]
        Top,
    }

    /// <summary>
    /// <para>The harmon-closed-value type represents whether the harmon mute is closed, open, or half-open.</para>
    /// </summary>
    [System.ComponentModel.DescriptionAttribute("The harmon-closed-value type represents whether the harmon mute is closed, open, " +
        "or half-open.")]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XmlSchemaClassGenerator", "2.1.1142.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute("harmon-closed-value", Namespace="")]
    public enum HarmonClosedValue
    {

        [System.Xml.Serialization.XmlEnumAttribute("yes")]
        Yes,

        [System.Xml.Serialization.XmlEnumAttribute("no")]
        No,

        [System.Xml.Serialization.XmlEnumAttribute("half")]
        Half,
    }

    /// <summary>
    /// <para>The hole-closed-location type indicates which portion of the hole is filled in when the corresponding hole-closed-value is half.</para>
    /// </summary>
    [System.ComponentModel.DescriptionAttribute("The hole-closed-location type indicates which portion of the hole is filled in wh" +
        "en the corresponding hole-closed-value is half.")]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XmlSchemaClassGenerator", "2.1.1142.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute("hole-closed-location", Namespace="")]
    public enum HoleClosedLocation
    {

        [System.Xml.Serialization.XmlEnumAttribute("right")]
        Right,

        [System.Xml.Serialization.XmlEnumAttribute("bottom")]
        Bottom,

        [System.Xml.Serialization.XmlEnumAttribute("left")]
        Left,

        [System.Xml.Serialization.XmlEnumAttribute("top")]
        Top,
    }

    /// <summary>
    /// <para>The hole-closed-value type represents whether the hole is closed, open, or half-open.</para>
    /// </summary>
    [System.ComponentModel.DescriptionAttribute("The hole-closed-value type represents whether the hole is closed, open, or half-o" +
        "pen.")]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XmlSchemaClassGenerator", "2.1.1142.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute("hole-closed-value", Namespace="")]
    public enum HoleClosedValue
    {

        [System.Xml.Serialization.XmlEnumAttribute("yes")]
        Yes,

        [System.Xml.Serialization.XmlEnumAttribute("no")]
        No,

        [System.Xml.Serialization.XmlEnumAttribute("half")]
        Half,
    }

    /// <summary>
    /// <para>The note-type-value type is used for the MusicXML type element and represents the graphic note type, from 1024th (shortest) to maxima (longest).</para>
    /// </summary>
    [System.ComponentModel.DescriptionAttribute("The note-type-value type is used for the MusicXML type element and represents the" +
        " graphic note type, from 1024th (shortest) to maxima (longest).")]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XmlSchemaClassGenerator", "2.1.1142.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute("note-type-value", Namespace="")]
    public enum NoteTypeValue
    {

        [System.Xml.Serialization.XmlEnumAttribute("1024th")]
        Item1024Th,

        [System.Xml.Serialization.XmlEnumAttribute("512th")]
        Item512Th,

        [System.Xml.Serialization.XmlEnumAttribute("256th")]
        Item256Th,

        [System.Xml.Serialization.XmlEnumAttribute("128th")]
        Item128Th,

        [System.Xml.Serialization.XmlEnumAttribute("64th")]
        Item64Th,

        [System.Xml.Serialization.XmlEnumAttribute("32nd")]
        Item32Nd,

        [System.Xml.Serialization.XmlEnumAttribute("16th")]
        Item16Th,

        [System.Xml.Serialization.XmlEnumAttribute("eighth")]
        Eighth,

        [System.Xml.Serialization.XmlEnumAttribute("quarter")]
        Quarter,

        [System.Xml.Serialization.XmlEnumAttribute("half")]
        Half,

        [System.Xml.Serialization.XmlEnumAttribute("whole")]
        Whole,

        [System.Xml.Serialization.XmlEnumAttribute("breve")]
        Breve,

        [System.Xml.Serialization.XmlEnumAttribute("long")]
        Long,

        [System.Xml.Serialization.XmlEnumAttribute("maxima")]
        Maxima,
    }

    /// <summary>
    /// <para>The notehead-value type indicates shapes other than the open and closed ovals associated with note durations. 
    ///
    ///The values do, re, mi, fa, fa up, so, la, and ti correspond to Aikin's 7-shape system.  The fa up shape is typically used with upstems; the fa shape is typically used with downstems or no stems.
    ///
    ///The arrow shapes differ from triangle and inverted triangle by being centered on the stem. Slashed and back slashed notes include both the normal notehead and a slash. The triangle shape has the tip of the triangle pointing up; the inverted triangle shape has the tip of the triangle pointing down. The left triangle shape is a right triangle with the hypotenuse facing up and to the left.
    ///
    ///The other notehead covers noteheads other than those listed here. It is usually used in combination with the smufl attribute to specify a particular SMuFL notehead. The smufl attribute may be used with any notehead value to help specify the appearance of symbols that share the same MusicXML semantics. Noteheads in the SMuFL Note name noteheads and Note name noteheads supplement ranges (U+E150–U+E1AF and U+EEE0–U+EEFF) should not use the smufl attribute or the "other" value, but instead use the notehead-text element.</para>
    /// </summary>
    [System.ComponentModel.DescriptionAttribute(@"The notehead-value type indicates shapes other than the open and closed ovals associated with note durations. The values do, re, mi, fa, fa up, so, la, and ti correspond to Aikin's 7-shape system. The fa up shape is typically used with upstems; the fa shape is typically used with downstems or no stems. The arrow shapes differ from triangle and inverted triangle by being centered on the stem. Slashed and back slashed notes include both the normal notehead and a slash. The triangle shape has the tip of the triangle pointing up; the inverted triangle shape has the tip of the triangle pointing down. The left triangle shape is a right triangle with the hypotenuse facing up and to the left. The other notehead covers noteheads other than those listed here. It is usually used in combination with the smufl attribute to specify a particular SMuFL notehead. The smufl attribute may be used with any notehead value to help specify the appearance of symbols that share the same MusicXML semantics. Noteheads in the SMuFL Note name noteheads and Note name noteheads supplement ranges (U+E150–U+E1AF and U+EEE0–U+EEFF) should not use the smufl attribute or the ""other"" value, but instead use the notehead-text element.")]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XmlSchemaClassGenerator", "2.1.1142.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute("notehead-value", Namespace="")]
    public enum NoteheadValue
    {

        [System.Xml.Serialization.XmlEnumAttribute("slash")]
        Slash,

        [System.Xml.Serialization.XmlEnumAttribute("triangle")]
        Triangle,

        [System.Xml.Serialization.XmlEnumAttribute("diamond")]
        Diamond,

        [System.Xml.Serialization.XmlEnumAttribute("square")]
        Square,

        [System.Xml.Serialization.XmlEnumAttribute("cross")]
        Cross,

        [System.Xml.Serialization.XmlEnumAttribute("x")]
        X,

        [System.Xml.Serialization.XmlEnumAttribute("circle-x")]
        CircleX,

        [System.Xml.Serialization.XmlEnumAttribute("inverted triangle")]
        InvertedTriangle,

        [System.Xml.Serialization.XmlEnumAttribute("arrow down")]
        ArrowDown,

        [System.Xml.Serialization.XmlEnumAttribute("arrow up")]
        ArrowUp,

        [System.Xml.Serialization.XmlEnumAttribute("circled")]
        Circled,

        [System.Xml.Serialization.XmlEnumAttribute("slashed")]
        Slashed,

        [System.Xml.Serialization.XmlEnumAttribute("back slashed")]
        BackSlashed,

        [System.Xml.Serialization.XmlEnumAttribute("normal")]
        Normal,

        [System.Xml.Serialization.XmlEnumAttribute("cluster")]
        Cluster,

        [System.Xml.Serialization.XmlEnumAttribute("circle dot")]
        CircleDot,

        [System.Xml.Serialization.XmlEnumAttribute("left triangle")]
        LeftTriangle,

        [System.Xml.Serialization.XmlEnumAttribute("rectangle")]
        Rectangle,

        [System.Xml.Serialization.XmlEnumAttribute("none")]
        None,

        [System.Xml.Serialization.XmlEnumAttribute("do")]
        Do,

        [System.Xml.Serialization.XmlEnumAttribute("re")]
        Re,

        [System.Xml.Serialization.XmlEnumAttribute("mi")]
        Mi,

        [System.Xml.Serialization.XmlEnumAttribute("fa")]
        Fa,

        [System.Xml.Serialization.XmlEnumAttribute("fa up")]
        FaUp,

        [System.Xml.Serialization.XmlEnumAttribute("so")]
        So,

        [System.Xml.Serialization.XmlEnumAttribute("la")]
        La,

        [System.Xml.Serialization.XmlEnumAttribute("ti")]
        Ti,

        [System.Xml.Serialization.XmlEnumAttribute("other")]
        Other,
    }

    /// <summary>
    /// <para>The show-tuplet type indicates whether to show a part of a tuplet relating to the tuplet-actual element, both the tuplet-actual and tuplet-normal elements, or neither.</para>
    /// </summary>
    [System.ComponentModel.DescriptionAttribute("The show-tuplet type indicates whether to show a part of a tuplet relating to the" +
        " tuplet-actual element, both the tuplet-actual and tuplet-normal elements, or ne" +
        "ither.")]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XmlSchemaClassGenerator", "2.1.1142.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute("show-tuplet", Namespace="")]
    public enum ShowTuplet
    {

        [System.Xml.Serialization.XmlEnumAttribute("actual")]
        Actual,

        [System.Xml.Serialization.XmlEnumAttribute("both")]
        Both,

        [System.Xml.Serialization.XmlEnumAttribute("none")]
        None,
    }

    /// <summary>
    /// <para>The stem-value type represents the notated stem direction.</para>
    /// </summary>
    [System.ComponentModel.DescriptionAttribute("The stem-value type represents the notated stem direction.")]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XmlSchemaClassGenerator", "2.1.1142.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute("stem-value", Namespace="")]
    public enum StemValue
    {

        [System.Xml.Serialization.XmlEnumAttribute("down")]
        Down,

        [System.Xml.Serialization.XmlEnumAttribute("up")]
        Up,

        [System.Xml.Serialization.XmlEnumAttribute("double")]
        Double,

        [System.Xml.Serialization.XmlEnumAttribute("none")]
        None,
    }

    /// <summary>
    /// <para>The step type represents a step of the diatonic scale, represented using the English letters A through G.</para>
    /// </summary>
    [System.ComponentModel.DescriptionAttribute("The step type represents a step of the diatonic scale, represented using the Engl" +
        "ish letters A through G.")]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XmlSchemaClassGenerator", "2.1.1142.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute("step", Namespace="")]
    public enum Step
    {

        A,

        B,

        C,

        D,

        E,

        F,

        G,
    }

    /// <summary>
    /// <para>Lyric hyphenation is indicated by the syllabic type. The single, begin, end, and middle values represent single-syllable words, word-beginning syllables, word-ending syllables, and mid-word syllables, respectively.</para>
    /// </summary>
    [System.ComponentModel.DescriptionAttribute("Lyric hyphenation is indicated by the syllabic type. The single, begin, end, and " +
        "middle values represent single-syllable words, word-beginning syllables, word-en" +
        "ding syllables, and mid-word syllables, respectively.")]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XmlSchemaClassGenerator", "2.1.1142.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute("syllabic", Namespace="")]
    public enum Syllabic
    {

        [System.Xml.Serialization.XmlEnumAttribute("single")]
        Single,

        [System.Xml.Serialization.XmlEnumAttribute("begin")]
        Begin,

        [System.Xml.Serialization.XmlEnumAttribute("end")]
        End,

        [System.Xml.Serialization.XmlEnumAttribute("middle")]
        Middle,
    }

    /// <summary>
    /// <para>The tap-hand type represents the symbol to use for a tap element. The left and right values refer to the SMuFL guitarLeftHandTapping and guitarRightHandTapping glyphs respectively.</para>
    /// </summary>
    [System.ComponentModel.DescriptionAttribute("The tap-hand type represents the symbol to use for a tap element. The left and ri" +
        "ght values refer to the SMuFL guitarLeftHandTapping and guitarRightHandTapping g" +
        "lyphs respectively.")]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XmlSchemaClassGenerator", "2.1.1142.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute("tap-hand", Namespace="")]
    public enum TapHand
    {

        [System.Xml.Serialization.XmlEnumAttribute("left")]
        Left,

        [System.Xml.Serialization.XmlEnumAttribute("right")]
        Right,
    }

    /// <summary>
    /// <para>The group-barline-value type indicates if the group should have common barlines.</para>
    /// </summary>
    [System.ComponentModel.DescriptionAttribute("The group-barline-value type indicates if the group should have common barlines.")]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XmlSchemaClassGenerator", "2.1.1142.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute("group-barline-value", Namespace="")]
    public enum GroupBarlineValue
    {

        [System.Xml.Serialization.XmlEnumAttribute("yes")]
        Yes,

        [System.Xml.Serialization.XmlEnumAttribute("no")]
        No,

        Mensurstrich,
    }

    /// <summary>
    /// <para>The group-symbol-value type indicates how the symbol for a group or multi-staff part is indicated in the score.</para>
    /// </summary>
    [System.ComponentModel.DescriptionAttribute("The group-symbol-value type indicates how the symbol for a group or multi-staff p" +
        "art is indicated in the score.")]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XmlSchemaClassGenerator", "2.1.1142.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute("group-symbol-value", Namespace="")]
    public enum GroupSymbolValue
    {

        [System.Xml.Serialization.XmlEnumAttribute("none")]
        None,

        [System.Xml.Serialization.XmlEnumAttribute("brace")]
        Brace,

        [System.Xml.Serialization.XmlEnumAttribute("line")]
        Line,

        [System.Xml.Serialization.XmlEnumAttribute("bracket")]
        Bracket,

        [System.Xml.Serialization.XmlEnumAttribute("square")]
        Square,
    }

    /// <summary>
    /// <para>The swing-type-value type specifies the note type, either eighth or 16th, to which the ratio defined in the swing element is applied.</para>
    /// </summary>
    [System.ComponentModel.DescriptionAttribute("The swing-type-value type specifies the note type, either eighth or 16th, to whic" +
        "h the ratio defined in the swing element is applied.")]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XmlSchemaClassGenerator", "2.1.1142.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute("swing-type-value", Namespace="")]
    public enum SwingTypeValue
    {

        [System.Xml.Serialization.XmlEnumAttribute("1024th")]
        Item1024Th,

        [System.Xml.Serialization.XmlEnumAttribute("512th")]
        Item512Th,

        [System.Xml.Serialization.XmlEnumAttribute("256th")]
        Item256Th,

        [System.Xml.Serialization.XmlEnumAttribute("128th")]
        Item128Th,

        [System.Xml.Serialization.XmlEnumAttribute("64th")]
        Item64Th,

        [System.Xml.Serialization.XmlEnumAttribute("32nd")]
        Item32Nd,

        [System.Xml.Serialization.XmlEnumAttribute("16th")]
        Item16Th,

        [System.Xml.Serialization.XmlEnumAttribute("eighth")]
        Eighth,

        [System.Xml.Serialization.XmlEnumAttribute("quarter")]
        Quarter,

        [System.Xml.Serialization.XmlEnumAttribute("half")]
        Half,

        [System.Xml.Serialization.XmlEnumAttribute("whole")]
        Whole,

        [System.Xml.Serialization.XmlEnumAttribute("breve")]
        Breve,

        [System.Xml.Serialization.XmlEnumAttribute("long")]
        Long,

        [System.Xml.Serialization.XmlEnumAttribute("maxima")]
        Maxima,
    }

    /// <summary>
    /// <para>The accidental-text type represents an element with an accidental value and text-formatting attributes.</para>
    /// </summary>
    [System.ComponentModel.DescriptionAttribute("The accidental-text type represents an element with an accidental value and text-" +
        "formatting attributes.")]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XmlSchemaClassGenerator", "2.1.1142.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute("accidental-text", Namespace="")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class AccidentalText : ITextFormatting
    {

        /// <summary>
        /// <para xml:lang="en">Gets or sets the text value.</para>
        /// </summary>
        [System.Xml.Serialization.XmlTextAttribute()]
        public AccidentalValue Value { get; set; }

        [System.Xml.Serialization.XmlAttributeAttribute("justify")]
        public LeftCenterRight Justify { get; set; }

        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the Justify property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool JustifySpecified { get; set; }

        /// <summary>
        /// <para>The tenths type is a number representing tenths of interline staff space (positive or negative). Both integer and decimal values are allowed, such as 5 for a half space and 2.5 for a quarter space. Interline space is measured from the middle of a staff line.
        ///
        ///Distances in a MusicXML file are measured in tenths of staff space. Tenths are then scaled to millimeters within the scaling element, used in the defaults element at the start of a score. Individual staves can apply a scaling factor to adjust staff size. When a MusicXML element or attribute refers to tenths, it means the global tenths defined by the scaling element, not the local tenths as adjusted by the staff-size element.</para>
        /// </summary>
        [System.Xml.Serialization.XmlAttributeAttribute("default-x")]
        public decimal DefaultX { get; set; }

        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the DefaultX property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool DefaultXSpecified { get; set; }

        /// <summary>
        /// <para>The tenths type is a number representing tenths of interline staff space (positive or negative). Both integer and decimal values are allowed, such as 5 for a half space and 2.5 for a quarter space. Interline space is measured from the middle of a staff line.
        ///
        ///Distances in a MusicXML file are measured in tenths of staff space. Tenths are then scaled to millimeters within the scaling element, used in the defaults element at the start of a score. Individual staves can apply a scaling factor to adjust staff size. When a MusicXML element or attribute refers to tenths, it means the global tenths defined by the scaling element, not the local tenths as adjusted by the staff-size element.</para>
        /// </summary>
        [System.Xml.Serialization.XmlAttributeAttribute("default-y")]
        public decimal DefaultY { get; set; }

        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the DefaultY property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool DefaultYSpecified { get; set; }

        /// <summary>
        /// <para>The tenths type is a number representing tenths of interline staff space (positive or negative). Both integer and decimal values are allowed, such as 5 for a half space and 2.5 for a quarter space. Interline space is measured from the middle of a staff line.
        ///
        ///Distances in a MusicXML file are measured in tenths of staff space. Tenths are then scaled to millimeters within the scaling element, used in the defaults element at the start of a score. Individual staves can apply a scaling factor to adjust staff size. When a MusicXML element or attribute refers to tenths, it means the global tenths defined by the scaling element, not the local tenths as adjusted by the staff-size element.</para>
        /// </summary>
        [System.Xml.Serialization.XmlAttributeAttribute("relative-x")]
        public decimal RelativeX { get; set; }

        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the RelativeX property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool RelativeXSpecified { get; set; }

        /// <summary>
        /// <para>The tenths type is a number representing tenths of interline staff space (positive or negative). Both integer and decimal values are allowed, such as 5 for a half space and 2.5 for a quarter space. Interline space is measured from the middle of a staff line.
        ///
        ///Distances in a MusicXML file are measured in tenths of staff space. Tenths are then scaled to millimeters within the scaling element, used in the defaults element at the start of a score. Individual staves can apply a scaling factor to adjust staff size. When a MusicXML element or attribute refers to tenths, it means the global tenths defined by the scaling element, not the local tenths as adjusted by the staff-size element.</para>
        /// </summary>
        [System.Xml.Serialization.XmlAttributeAttribute("relative-y")]
        public decimal RelativeY { get; set; }

        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the RelativeY property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool RelativeYSpecified { get; set; }

        /// <summary>
        /// <para>The font-family is a comma-separated list of font names. These can be specific font styles such as Maestro or Opus, or one of several generic font styles: music, engraved, handwritten, text, serif, sans-serif, handwritten, cursive, fantasy, and monospace. The music, engraved, and handwritten values refer to music fonts; the rest refer to text fonts. The fantasy style refers to decorative text such as found in older German-style printing.</para>
        /// <para xml:lang="en">Pattern: [^,]+(, ?[^,]+)*.</para>
        /// </summary>
        [System.ComponentModel.DataAnnotations.RegularExpressionAttribute("[^,]+(, ?[^,]+)*")]
        [System.Xml.Serialization.XmlAttributeAttribute("font-family")]
        public string FontFamily { get; set; }

        [System.Xml.Serialization.XmlAttributeAttribute("font-style")]
        public FontStyle FontStyle { get; set; }

        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the FontStyle property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool FontStyleSpecified { get; set; }

        /// <summary>
        /// <para>The font-size can be one of the CSS font sizes (xx-small, x-small, small, medium, large, x-large, xx-large) or a numeric point size.</para>
        /// </summary>
        [System.Xml.Serialization.XmlAttributeAttribute("font-size")]
        public string FontSize { get; set; }

        [System.Xml.Serialization.XmlAttributeAttribute("font-weight")]
        public FontWeight FontWeight { get; set; }

        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the FontWeight property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool FontWeightSpecified { get; set; }

        /// <summary>
        /// <para>The color type indicates the color of an element. Color may be represented as hexadecimal RGB triples, as in HTML, or as hexadecimal ARGB tuples, with the A indicating alpha of transparency. An alpha value of 00 is totally transparent; FF is totally opaque. If RGB is used, the A value is assumed to be FF.
        ///
        ///For instance, the RGB value "#800080" represents purple. An ARGB value of "#40800080" would be a transparent purple.
        ///
        ///As in SVG 1.1, colors are defined in terms of the sRGB color space (IEC 61966).</para>
        /// <para xml:lang="en">Pattern: #[\dA-F]{6}([\dA-F][\dA-F])?.</para>
        /// </summary>
        [System.ComponentModel.DataAnnotations.RegularExpressionAttribute("#[\\dA-F]{6}([\\dA-F][\\dA-F])?")]
        [System.Xml.Serialization.XmlAttributeAttribute("color")]
        public string Color { get; set; }

        [System.Xml.Serialization.XmlAttributeAttribute("halign")]
        public LeftCenterRight Halign { get; set; }

        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the Halign property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool HalignSpecified { get; set; }

        [System.Xml.Serialization.XmlAttributeAttribute("valign")]
        public Valign Valign { get; set; }

        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the Valign property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool ValignSpecified { get; set; }

        /// <summary>
        /// <para>The number-of-lines type is used to specify the number of lines in text decoration attributes.</para>
        /// <para xml:lang="en">Minimum inclusive value: 0.</para>
        /// <para xml:lang="en">Maximum inclusive value: 3.</para>
        /// </summary>
        [System.ComponentModel.DataAnnotations.RangeAttribute(typeof(decimal), "0", "3")]
        [System.Xml.Serialization.XmlAttributeAttribute("underline")]
        public byte Underline { get; set; }

        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the Underline property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool UnderlineSpecified { get; set; }

        /// <summary>
        /// <para>The number-of-lines type is used to specify the number of lines in text decoration attributes.</para>
        /// <para xml:lang="en">Minimum inclusive value: 0.</para>
        /// <para xml:lang="en">Maximum inclusive value: 3.</para>
        /// </summary>
        [System.ComponentModel.DataAnnotations.RangeAttribute(typeof(decimal), "0", "3")]
        [System.Xml.Serialization.XmlAttributeAttribute("overline")]
        public byte Overline { get; set; }

        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the Overline property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool OverlineSpecified { get; set; }

        /// <summary>
        /// <para>The number-of-lines type is used to specify the number of lines in text decoration attributes.</para>
        /// <para xml:lang="en">Minimum inclusive value: 0.</para>
        /// <para xml:lang="en">Maximum inclusive value: 3.</para>
        /// </summary>
        [System.ComponentModel.DataAnnotations.RangeAttribute(typeof(decimal), "0", "3")]
        [System.Xml.Serialization.XmlAttributeAttribute("line-through")]
        public byte LineThrough { get; set; }

        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the LineThrough property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool LineThroughSpecified { get; set; }

        /// <summary>
        /// <para>The rotation-degrees type specifies rotation, pan, and elevation values in degrees. Values range from -180 to 180.</para>
        /// <para xml:lang="en">Minimum inclusive value: -180.</para>
        /// <para xml:lang="en">Maximum inclusive value: 180.</para>
        /// </summary>
        [System.ComponentModel.DataAnnotations.RangeAttribute(typeof(decimal), "-180", "180")]
        [System.Xml.Serialization.XmlAttributeAttribute("rotation")]
        public decimal Rotation { get; set; }

        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the Rotation property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool RotationSpecified { get; set; }

        /// <summary>
        /// <para>The number-or-normal values can be either a decimal number or the string "normal". This is used by the line-height and letter-spacing attributes.</para>
        /// </summary>
        [System.Xml.Serialization.XmlAttributeAttribute("letter-spacing")]
        public string LetterSpacing { get; set; }

        /// <summary>
        /// <para>The number-or-normal values can be either a decimal number or the string "normal". This is used by the line-height and letter-spacing attributes.</para>
        /// </summary>
        [System.Xml.Serialization.XmlAttributeAttribute("line-height")]
        public string LineHeight { get; set; }

        [System.Xml.Serialization.XmlAttributeAttribute("lang", Namespace="http://www.w3.org/XML/1998/namespace", Form=System.Xml.Schema.XmlSchemaForm.Qualified)]
        public string Lang { get; set; }

        [System.Xml.Serialization.XmlAttributeAttribute("space", Namespace="http://www.w3.org/XML/1998/namespace", Form=System.Xml.Schema.XmlSchemaForm.Qualified)]
        public OpenUtau.Core.Format.MusicXMLSchema.Space Space { get; set; }

        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the Space property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool SpaceSpecified { get; set; }

        [System.Xml.Serialization.XmlAttributeAttribute("dir")]
        public TextDirection Dir { get; set; }

        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the Dir property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool DirSpecified { get; set; }

        [System.Xml.Serialization.XmlAttributeAttribute("enclosure")]
        public EnclosureShape Enclosure { get; set; }

        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the Enclosure property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool EnclosureSpecified { get; set; }

        /// <summary>
        /// <para>The smufl-accidental-glyph-name type is used to reference a specific Standard Music Font Layout (SMuFL) accidental character. The value is a SMuFL canonical glyph name that starts with one of the strings used at the start of glyph names for SMuFL accidentals.</para>
        /// <para xml:lang="en">Pattern: (acc|medRenFla|medRenNatura|medRenShar|kievanAccidental)(\c+).</para>
        /// </summary>
        [System.ComponentModel.DataAnnotations.RegularExpressionAttribute("(acc|medRenFla|medRenNatura|medRenShar|kievanAccidental)(\\c+)")]
        [System.Xml.Serialization.XmlAttributeAttribute("smufl")]
        public string Smufl { get; set; }
    }

    /// <summary>
    /// <para>The text-formatting attribute group collects the common formatting attributes for text elements. Default values may differ across the elements that use this group.</para>
    /// </summary>
    [System.ComponentModel.DescriptionAttribute("The text-formatting attribute group collects the common formatting attributes for" +
        " text elements. Default values may differ across the elements that use this grou" +
        "p.")]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XmlSchemaClassGenerator", "2.1.1142.0")]
    public partial interface ITextFormatting : IJustify, IPrintStyleAlign, ITextDecoration, ITextRotation, ILetterSpacing, ILineHeight, ITextDirection, IEnclosure
    {

        string Lang
        {
            get;
            set;
        }

        OpenUtau.Core.Format.MusicXMLSchema.Space Space
        {
            get;
            set;
        }
    }

    /// <summary>
    /// <para>The justify attribute is used to indicate left, center, or right justification. The default value varies for different elements. For elements where the justify attribute is present but the halign attribute is not, the justify attribute indicates horizontal alignment as well as justification.</para>
    /// </summary>
    [System.ComponentModel.DescriptionAttribute(@"The justify attribute is used to indicate left, center, or right justification. The default value varies for different elements. For elements where the justify attribute is present but the halign attribute is not, the justify attribute indicates horizontal alignment as well as justification.")]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XmlSchemaClassGenerator", "2.1.1142.0")]
    public partial interface IJustify
    {

        LeftCenterRight Justify
        {
            get;
            set;
        }
    }

    /// <summary>
    /// <para>The print-style-align attribute group adds the halign and valign attributes to the position, font, and color attributes.</para>
    /// </summary>
    [System.ComponentModel.DescriptionAttribute("The print-style-align attribute group adds the halign and valign attributes to th" +
        "e position, font, and color attributes.")]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XmlSchemaClassGenerator", "2.1.1142.0")]
    public partial interface IPrintStyleAlign : IPrintStyle, IHalign, IValign
    {
    }

    /// <summary>
    /// <para>The print-style attribute group collects the most popular combination of printing attributes: position, font, and color.</para>
    /// </summary>
    [System.ComponentModel.DescriptionAttribute("The print-style attribute group collects the most popular combination of printing" +
        " attributes: position, font, and color.")]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XmlSchemaClassGenerator", "2.1.1142.0")]
    public partial interface IPrintStyle : IPosition, IFont, IColor
    {
    }

    /// <summary>
    /// <para>For most elements, any program will compute a default x and y position. The position attributes let this be changed two ways.
    ///
    ///The default-x and default-y attributes change the computation of the default position. For most elements, the origin is changed relative to the left-hand side of the note or the musical position within the bar (x) and the top line of the staff (y).
    ///
    ///For the following elements, the default-x value changes the origin relative to the start of the current measure:
    ///
    ///	- note
    ///	- figured-bass
    ///	- harmony
    ///	- link
    ///	- directive
    ///	- measure-numbering
    ///	- all descendants of the part-list element
    ///	- all children of the direction-type element
    ///
    ///This origin is from the start of the entire measure, at either the left barline or the start of the system.
    ///
    ///When the default-x attribute is used within a child element of the part-name-display, part-abbreviation-display, group-name-display, or group-abbreviation-display elements, it changes the origin relative to the start of the first measure on the system. These values are used when the current measure or a succeeding measure starts a new system. The same change of origin is used for the group-symbol element.
    ///
    ///For the note, figured-bass, and harmony elements, the default-x value is considered to have adjusted the musical position within the bar for its descendant elements.
    ///
    ///Since the credit-words and credit-image elements are not related to a measure, in these cases the default-x and default-y attributes adjust the origin relative to the bottom left-hand corner of the specified page.
    ///
    ///The relative-x and relative-y attributes change the position relative to the default position, either as computed by the individual program, or as overridden by the default-x and default-y attributes.
    ///
    ///Positive x is right, negative x is left; positive y is up, negative y is down. All units are in tenths of interline space. For stems, positive relative-y lengthens a stem while negative relative-y shortens it.
    ///
    ///The default-x and default-y position attributes provide higher-resolution positioning data than related features such as the placement attribute and the offset element. Applications reading a MusicXML file that can understand both features should generally rely on the default-x and default-y attributes for their greater accuracy. For the relative-x and relative-y attributes, the offset element, placement attribute, and directive attribute provide context for the relative position information, so the two features should be interpreted together.
    ///
    ///As elsewhere in the MusicXML format, tenths are the global tenths defined by the scaling element, not the local tenths of a staff resized by the staff-size element.</para>
    /// </summary>
    [System.ComponentModel.DescriptionAttribute("For most elements, any program will compute a default x and y position. The posit" +
        "ion attributes let this be changed two ways. The default-x and default-y attribu" +
        "tes change the computation of the default position. For most elements, the origi" +
        "n is changed relative to the left-hand side of the note or the musical position " +
        "within the bar (x) and the top line of the staff (y). For the following elements" +
        ", the default-x value changes the origin relative to the start of the current me" +
        "asure: - note - figured-bass - harmony - link - directive - measure-numbering - " +
        "all descendants of the part-list element - all children of the direction-type el" +
        "ement This origin is from the start of the entire measure, at either the left ba" +
        "rline or the start of the system. When the default-x attribute is used within a " +
        "child element of the part-name-display, part-abbreviation-display, group-name-di" +
        "splay, or group-abbreviation-display elements, it changes the origin relative to" +
        " the start of the first measure on the system. These values are used when the cu" +
        "rrent measure or a succeeding measure starts a new system. The same change of or" +
        "igin is used for the group-symbol element. For the note, figured-bass, and harmo" +
        "ny elements, the default-x value is considered to have adjusted the musical posi" +
        "tion within the bar for its descendant elements. Since the credit-words and cred" +
        "it-image elements are not related to a measure, in these cases the default-x and" +
        " default-y attributes adjust the origin relative to the bottom left-hand corner " +
        "of the specified page. The relative-x and relative-y attributes change the posit" +
        "ion relative to the default position, either as computed by the individual progr" +
        "am, or as overridden by the default-x and default-y attributes. Positive x is ri" +
        "ght, negative x is left; positive y is up, negative y is down. All units are in " +
        "tenths of interline space. For stems, positive relative-y lengthens a stem while" +
        " negative relative-y shortens it. The default-x and default-y position attribute" +
        "s provide higher-resolution positioning data than related features such as the p" +
        "lacement attribute and the offset element. Applications reading a MusicXML file " +
        "that can understand both features should generally rely on the default-x and def" +
        "ault-y attributes for their greater accuracy. For the relative-x and relative-y " +
        "attributes, the offset element, placement attribute, and directive attribute pro" +
        "vide context for the relative position information, so the two features should b" +
        "e interpreted together. As elsewhere in the MusicXML format, tenths are the glob" +
        "al tenths defined by the scaling element, not the local tenths of a staff resize" +
        "d by the staff-size element.")]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XmlSchemaClassGenerator", "2.1.1142.0")]
    public partial interface IPosition
    {

        /// <summary>
        /// <para>The tenths type is a number representing tenths of interline staff space (positive or negative). Both integer and decimal values are allowed, such as 5 for a half space and 2.5 for a quarter space. Interline space is measured from the middle of a staff line.
        ///
        ///Distances in a MusicXML file are measured in tenths of staff space. Tenths are then scaled to millimeters within the scaling element, used in the defaults element at the start of a score. Individual staves can apply a scaling factor to adjust staff size. When a MusicXML element or attribute refers to tenths, it means the global tenths defined by the scaling element, not the local tenths as adjusted by the staff-size element.</para>
        /// </summary>
        decimal DefaultX
        {
            get;
            set;
        }

        /// <summary>
        /// <para>The tenths type is a number representing tenths of interline staff space (positive or negative). Both integer and decimal values are allowed, such as 5 for a half space and 2.5 for a quarter space. Interline space is measured from the middle of a staff line.
        ///
        ///Distances in a MusicXML file are measured in tenths of staff space. Tenths are then scaled to millimeters within the scaling element, used in the defaults element at the start of a score. Individual staves can apply a scaling factor to adjust staff size. When a MusicXML element or attribute refers to tenths, it means the global tenths defined by the scaling element, not the local tenths as adjusted by the staff-size element.</para>
        /// </summary>
        decimal DefaultY
        {
            get;
            set;
        }

        /// <summary>
        /// <para>The tenths type is a number representing tenths of interline staff space (positive or negative). Both integer and decimal values are allowed, such as 5 for a half space and 2.5 for a quarter space. Interline space is measured from the middle of a staff line.
        ///
        ///Distances in a MusicXML file are measured in tenths of staff space. Tenths are then scaled to millimeters within the scaling element, used in the defaults element at the start of a score. Individual staves can apply a scaling factor to adjust staff size. When a MusicXML element or attribute refers to tenths, it means the global tenths defined by the scaling element, not the local tenths as adjusted by the staff-size element.</para>
        /// </summary>
        decimal RelativeX
        {
            get;
            set;
        }

        /// <summary>
        /// <para>The tenths type is a number representing tenths of interline staff space (positive or negative). Both integer and decimal values are allowed, such as 5 for a half space and 2.5 for a quarter space. Interline space is measured from the middle of a staff line.
        ///
        ///Distances in a MusicXML file are measured in tenths of staff space. Tenths are then scaled to millimeters within the scaling element, used in the defaults element at the start of a score. Individual staves can apply a scaling factor to adjust staff size. When a MusicXML element or attribute refers to tenths, it means the global tenths defined by the scaling element, not the local tenths as adjusted by the staff-size element.</para>
        /// </summary>
        decimal RelativeY
        {
            get;
            set;
        }
    }

    /// <summary>
    /// <para>The font attribute group gathers together attributes for determining the font within a credit or direction. They are based on the text styles for Cascading Style Sheets. The font-family is a comma-separated list of font names.The font-style can be normal or italic. The font-size can be one of the CSS sizes or a numeric point size. The font-weight can be normal or bold. The default is application-dependent, but is a text font vs. a music font.</para>
    /// </summary>
    [System.ComponentModel.DescriptionAttribute(@"The font attribute group gathers together attributes for determining the font within a credit or direction. They are based on the text styles for Cascading Style Sheets. The font-family is a comma-separated list of font names.The font-style can be normal or italic. The font-size can be one of the CSS sizes or a numeric point size. The font-weight can be normal or bold. The default is application-dependent, but is a text font vs. a music font.")]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XmlSchemaClassGenerator", "2.1.1142.0")]
    public partial interface IFont
    {

        /// <summary>
        /// <para>The font-family is a comma-separated list of font names. These can be specific font styles such as Maestro or Opus, or one of several generic font styles: music, engraved, handwritten, text, serif, sans-serif, handwritten, cursive, fantasy, and monospace. The music, engraved, and handwritten values refer to music fonts; the rest refer to text fonts. The fantasy style refers to decorative text such as found in older German-style printing.</para>
        /// <para xml:lang="en">Pattern: [^,]+(, ?[^,]+)*.</para>
        /// </summary>
        [System.ComponentModel.DataAnnotations.RegularExpressionAttribute("[^,]+(, ?[^,]+)*")]
        string FontFamily
        {
            get;
            set;
        }

        FontStyle FontStyle
        {
            get;
            set;
        }

        /// <summary>
        /// <para>The font-size can be one of the CSS font sizes (xx-small, x-small, small, medium, large, x-large, xx-large) or a numeric point size.</para>
        /// </summary>
        string FontSize
        {
            get;
            set;
        }

        FontWeight FontWeight
        {
            get;
            set;
        }
    }

    /// <summary>
    /// <para>The color attribute group indicates the color of an element.</para>
    /// </summary>
    [System.ComponentModel.DescriptionAttribute("The color attribute group indicates the color of an element.")]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XmlSchemaClassGenerator", "2.1.1142.0")]
    public partial interface IColor
    {

        /// <summary>
        /// <para>The color type indicates the color of an element. Color may be represented as hexadecimal RGB triples, as in HTML, or as hexadecimal ARGB tuples, with the A indicating alpha of transparency. An alpha value of 00 is totally transparent; FF is totally opaque. If RGB is used, the A value is assumed to be FF.
        ///
        ///For instance, the RGB value "#800080" represents purple. An ARGB value of "#40800080" would be a transparent purple.
        ///
        ///As in SVG 1.1, colors are defined in terms of the sRGB color space (IEC 61966).</para>
        /// <para xml:lang="en">Pattern: #[\dA-F]{6}([\dA-F][\dA-F])?.</para>
        /// </summary>
        [System.ComponentModel.DataAnnotations.RegularExpressionAttribute("#[\\dA-F]{6}([\\dA-F][\\dA-F])?")]
        string Color
        {
            get;
            set;
        }
    }

    /// <summary>
    /// <para>In cases where text extends over more than one line, horizontal alignment and justify values can be different. The most typical case is for credits, such as:
    ///
    ///	Words and music by
    ///	  Pat Songwriter
    ///
    ///Typically this type of credit is aligned to the right, so that the position information refers to the right-most part of the text. But in this example, the text is center-justified, not right-justified.
    ///
    ///The halign attribute is used in these situations. If it is not present, its value is the same as for the justify attribute. For elements where a justify attribute is not allowed, the default is implementation-dependent.</para>
    /// </summary>
    [System.ComponentModel.DescriptionAttribute(@"In cases where text extends over more than one line, horizontal alignment and justify values can be different. The most typical case is for credits, such as: Words and music by Pat Songwriter Typically this type of credit is aligned to the right, so that the position information refers to the right-most part of the text. But in this example, the text is center-justified, not right-justified. The halign attribute is used in these situations. If it is not present, its value is the same as for the justify attribute. For elements where a justify attribute is not allowed, the default is implementation-dependent.")]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XmlSchemaClassGenerator", "2.1.1142.0")]
    public partial interface IHalign
    {

        LeftCenterRight Halign
        {
            get;
            set;
        }
    }

    /// <summary>
    /// <para>The valign attribute is used to indicate vertical alignment to the top, middle, bottom, or baseline of the text. Defaults are implementation-dependent.</para>
    /// </summary>
    [System.ComponentModel.DescriptionAttribute("The valign attribute is used to indicate vertical alignment to the top, middle, b" +
        "ottom, or baseline of the text. Defaults are implementation-dependent.")]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XmlSchemaClassGenerator", "2.1.1142.0")]
    public partial interface IValign
    {

        Valign Valign
        {
            get;
            set;
        }
    }

    /// <summary>
    /// <para>The text-decoration attribute group is based on the similar feature in XHTML and CSS. It allows for text to be underlined, overlined, or struck-through. It extends the CSS version by allow double or triple lines instead of just being on or off.</para>
    /// </summary>
    [System.ComponentModel.DescriptionAttribute("The text-decoration attribute group is based on the similar feature in XHTML and " +
        "CSS. It allows for text to be underlined, overlined, or struck-through. It exten" +
        "ds the CSS version by allow double or triple lines instead of just being on or o" +
        "ff.")]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XmlSchemaClassGenerator", "2.1.1142.0")]
    public partial interface ITextDecoration
    {

        /// <summary>
        /// <para>The number-of-lines type is used to specify the number of lines in text decoration attributes.</para>
        /// <para xml:lang="en">Minimum inclusive value: 0.</para>
        /// <para xml:lang="en">Maximum inclusive value: 3.</para>
        /// </summary>
        [System.ComponentModel.DataAnnotations.RangeAttribute(typeof(decimal), "0", "3")]
        byte Underline
        {
            get;
            set;
        }

        /// <summary>
        /// <para>The number-of-lines type is used to specify the number of lines in text decoration attributes.</para>
        /// <para xml:lang="en">Minimum inclusive value: 0.</para>
        /// <para xml:lang="en">Maximum inclusive value: 3.</para>
        /// </summary>
        [System.ComponentModel.DataAnnotations.RangeAttribute(typeof(decimal), "0", "3")]
        byte Overline
        {
            get;
            set;
        }

        /// <summary>
        /// <para>The number-of-lines type is used to specify the number of lines in text decoration attributes.</para>
        /// <para xml:lang="en">Minimum inclusive value: 0.</para>
        /// <para xml:lang="en">Maximum inclusive value: 3.</para>
        /// </summary>
        [System.ComponentModel.DataAnnotations.RangeAttribute(typeof(decimal), "0", "3")]
        byte LineThrough
        {
            get;
            set;
        }
    }

    /// <summary>
    /// <para>The rotation attribute is used to rotate text around the alignment point specified by the halign and valign attributes. Positive values are clockwise rotations, while negative values are counter-clockwise rotations.</para>
    /// </summary>
    [System.ComponentModel.DescriptionAttribute("The rotation attribute is used to rotate text around the alignment point specifie" +
        "d by the halign and valign attributes. Positive values are clockwise rotations, " +
        "while negative values are counter-clockwise rotations.")]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XmlSchemaClassGenerator", "2.1.1142.0")]
    public partial interface ITextRotation
    {

        /// <summary>
        /// <para>The rotation-degrees type specifies rotation, pan, and elevation values in degrees. Values range from -180 to 180.</para>
        /// <para xml:lang="en">Minimum inclusive value: -180.</para>
        /// <para xml:lang="en">Maximum inclusive value: 180.</para>
        /// </summary>
        [System.ComponentModel.DataAnnotations.RangeAttribute(typeof(decimal), "-180", "180")]
        decimal Rotation
        {
            get;
            set;
        }
    }

    /// <summary>
    /// <para>The letter-spacing attribute specifies text tracking. Values are either "normal" or a number representing the number of ems to add between each letter. The number may be negative in order to subtract space. The default is normal, which allows flexibility of letter-spacing for purposes of text justification.</para>
    /// </summary>
    [System.ComponentModel.DescriptionAttribute(@"The letter-spacing attribute specifies text tracking. Values are either ""normal"" or a number representing the number of ems to add between each letter. The number may be negative in order to subtract space. The default is normal, which allows flexibility of letter-spacing for purposes of text justification.")]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XmlSchemaClassGenerator", "2.1.1142.0")]
    public partial interface ILetterSpacing
    {

        /// <summary>
        /// <para>The number-or-normal values can be either a decimal number or the string "normal". This is used by the line-height and letter-spacing attributes.</para>
        /// </summary>
        string LetterSpacing
        {
            get;
            set;
        }
    }

    /// <summary>
    /// <para>The line-height attribute specifies text leading. Values are either "normal" or a number representing the percentage of the current font height to use for leading. The default is "normal". The exact normal value is implementation-dependent, but values between 100 and 120 are recommended.</para>
    /// </summary>
    [System.ComponentModel.DescriptionAttribute(@"The line-height attribute specifies text leading. Values are either ""normal"" or a number representing the percentage of the current font height to use for leading. The default is ""normal"". The exact normal value is implementation-dependent, but values between 100 and 120 are recommended.")]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XmlSchemaClassGenerator", "2.1.1142.0")]
    public partial interface ILineHeight
    {

        /// <summary>
        /// <para>The number-or-normal values can be either a decimal number or the string "normal". This is used by the line-height and letter-spacing attributes.</para>
        /// </summary>
        string LineHeight
        {
            get;
            set;
        }
    }

    /// <summary>
    /// <para>The text-direction attribute is used to adjust and override the Unicode bidirectional text algorithm, similar to the Directionality data category in the W3C Internationalization Tag Set recommendation.</para>
    /// </summary>
    [System.ComponentModel.DescriptionAttribute("The text-direction attribute is used to adjust and override the Unicode bidirecti" +
        "onal text algorithm, similar to the Directionality data category in the W3C Inte" +
        "rnationalization Tag Set recommendation.")]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XmlSchemaClassGenerator", "2.1.1142.0")]
    public partial interface ITextDirection
    {

        TextDirection Dir
        {
            get;
            set;
        }
    }

    /// <summary>
    /// <para>The enclosure attribute group is used to specify the formatting of an enclosure around text or symbols.</para>
    /// </summary>
    [System.ComponentModel.DescriptionAttribute("The enclosure attribute group is used to specify the formatting of an enclosure a" +
        "round text or symbols.")]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XmlSchemaClassGenerator", "2.1.1142.0")]
    public partial interface IEnclosure
    {

        EnclosureShape Enclosure
        {
            get;
            set;
        }
    }

    /// <summary>
    /// <para>The coda type is the visual indicator of a coda sign. The exact glyph can be specified with the smufl attribute. A sound element is also needed to guide playback applications reliably.</para>
    /// </summary>
    [System.ComponentModel.DescriptionAttribute("The coda type is the visual indicator of a coda sign. The exact glyph can be spec" +
        "ified with the smufl attribute. A sound element is also needed to guide playback" +
        " applications reliably.")]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XmlSchemaClassGenerator", "2.1.1142.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute("coda", Namespace="")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class Coda : IPrintStyleAlign, IOptionalUniqueId
    {

        /// <summary>
        /// <para>The tenths type is a number representing tenths of interline staff space (positive or negative). Both integer and decimal values are allowed, such as 5 for a half space and 2.5 for a quarter space. Interline space is measured from the middle of a staff line.
        ///
        ///Distances in a MusicXML file are measured in tenths of staff space. Tenths are then scaled to millimeters within the scaling element, used in the defaults element at the start of a score. Individual staves can apply a scaling factor to adjust staff size. When a MusicXML element or attribute refers to tenths, it means the global tenths defined by the scaling element, not the local tenths as adjusted by the staff-size element.</para>
        /// </summary>
        [System.Xml.Serialization.XmlAttributeAttribute("default-x")]
        public decimal DefaultX { get; set; }

        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the DefaultX property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool DefaultXSpecified { get; set; }

        /// <summary>
        /// <para>The tenths type is a number representing tenths of interline staff space (positive or negative). Both integer and decimal values are allowed, such as 5 for a half space and 2.5 for a quarter space. Interline space is measured from the middle of a staff line.
        ///
        ///Distances in a MusicXML file are measured in tenths of staff space. Tenths are then scaled to millimeters within the scaling element, used in the defaults element at the start of a score. Individual staves can apply a scaling factor to adjust staff size. When a MusicXML element or attribute refers to tenths, it means the global tenths defined by the scaling element, not the local tenths as adjusted by the staff-size element.</para>
        /// </summary>
        [System.Xml.Serialization.XmlAttributeAttribute("default-y")]
        public decimal DefaultY { get; set; }

        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the DefaultY property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool DefaultYSpecified { get; set; }

        /// <summary>
        /// <para>The tenths type is a number representing tenths of interline staff space (positive or negative). Both integer and decimal values are allowed, such as 5 for a half space and 2.5 for a quarter space. Interline space is measured from the middle of a staff line.
        ///
        ///Distances in a MusicXML file are measured in tenths of staff space. Tenths are then scaled to millimeters within the scaling element, used in the defaults element at the start of a score. Individual staves can apply a scaling factor to adjust staff size. When a MusicXML element or attribute refers to tenths, it means the global tenths defined by the scaling element, not the local tenths as adjusted by the staff-size element.</para>
        /// </summary>
        [System.Xml.Serialization.XmlAttributeAttribute("relative-x")]
        public decimal RelativeX { get; set; }

        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the RelativeX property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool RelativeXSpecified { get; set; }

        /// <summary>
        /// <para>The tenths type is a number representing tenths of interline staff space (positive or negative). Both integer and decimal values are allowed, such as 5 for a half space and 2.5 for a quarter space. Interline space is measured from the middle of a staff line.
        ///
        ///Distances in a MusicXML file are measured in tenths of staff space. Tenths are then scaled to millimeters within the scaling element, used in the defaults element at the start of a score. Individual staves can apply a scaling factor to adjust staff size. When a MusicXML element or attribute refers to tenths, it means the global tenths defined by the scaling element, not the local tenths as adjusted by the staff-size element.</para>
        /// </summary>
        [System.Xml.Serialization.XmlAttributeAttribute("relative-y")]
        public decimal RelativeY { get; set; }

        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the RelativeY property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool RelativeYSpecified { get; set; }

        /// <summary>
        /// <para>The font-family is a comma-separated list of font names. These can be specific font styles such as Maestro or Opus, or one of several generic font styles: music, engraved, handwritten, text, serif, sans-serif, handwritten, cursive, fantasy, and monospace. The music, engraved, and handwritten values refer to music fonts; the rest refer to text fonts. The fantasy style refers to decorative text such as found in older German-style printing.</para>
        /// <para xml:lang="en">Pattern: [^,]+(, ?[^,]+)*.</para>
        /// </summary>
        [System.ComponentModel.DataAnnotations.RegularExpressionAttribute("[^,]+(, ?[^,]+)*")]
        [System.Xml.Serialization.XmlAttributeAttribute("font-family")]
        public string FontFamily { get; set; }

        [System.Xml.Serialization.XmlAttributeAttribute("font-style")]
        public FontStyle FontStyle { get; set; }

        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the FontStyle property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool FontStyleSpecified { get; set; }

        /// <summary>
        /// <para>The font-size can be one of the CSS font sizes (xx-small, x-small, small, medium, large, x-large, xx-large) or a numeric point size.</para>
        /// </summary>
        [System.Xml.Serialization.XmlAttributeAttribute("font-size")]
        public string FontSize { get; set; }

        [System.Xml.Serialization.XmlAttributeAttribute("font-weight")]
        public FontWeight FontWeight { get; set; }

        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the FontWeight property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool FontWeightSpecified { get; set; }

        /// <summary>
        /// <para>The color type indicates the color of an element. Color may be represented as hexadecimal RGB triples, as in HTML, or as hexadecimal ARGB tuples, with the A indicating alpha of transparency. An alpha value of 00 is totally transparent; FF is totally opaque. If RGB is used, the A value is assumed to be FF.
        ///
        ///For instance, the RGB value "#800080" represents purple. An ARGB value of "#40800080" would be a transparent purple.
        ///
        ///As in SVG 1.1, colors are defined in terms of the sRGB color space (IEC 61966).</para>
        /// <para xml:lang="en">Pattern: #[\dA-F]{6}([\dA-F][\dA-F])?.</para>
        /// </summary>
        [System.ComponentModel.DataAnnotations.RegularExpressionAttribute("#[\\dA-F]{6}([\\dA-F][\\dA-F])?")]
        [System.Xml.Serialization.XmlAttributeAttribute("color")]
        public string Color { get; set; }

        [System.Xml.Serialization.XmlAttributeAttribute("halign")]
        public LeftCenterRight Halign { get; set; }

        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the Halign property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool HalignSpecified { get; set; }

        [System.Xml.Serialization.XmlAttributeAttribute("valign")]
        public Valign Valign { get; set; }

        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the Valign property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool ValignSpecified { get; set; }

        [System.Xml.Serialization.XmlAttributeAttribute("id")]
        public string Id { get; set; }

        /// <summary>
        /// <para>The smufl-coda-glyph-name type is used to reference a specific Standard Music Font Layout (SMuFL) coda character. The value is a SMuFL canonical glyph name that starts with coda.</para>
        /// <para xml:lang="en">Pattern: coda\c*.</para>
        /// </summary>
        [System.ComponentModel.DataAnnotations.RegularExpressionAttribute("coda\\c*")]
        [System.Xml.Serialization.XmlAttributeAttribute("smufl")]
        public string Smufl { get; set; }
    }

    /// <summary>
    /// <para>The optional-unique-id attribute group allows an element to optionally specify an ID that is unique to the entire document. This attribute group is not used for a required id attribute, or for an id attribute that specifies an id reference.</para>
    /// </summary>
    [System.ComponentModel.DescriptionAttribute("The optional-unique-id attribute group allows an element to optionally specify an" +
        " ID that is unique to the entire document. This attribute group is not used for " +
        "a required id attribute, or for an id attribute that specifies an id reference.")]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XmlSchemaClassGenerator", "2.1.1142.0")]
    public partial interface IOptionalUniqueId
    {

        string Id
        {
            get;
            set;
        }
    }

    /// <summary>
    /// <para>Dynamics can be associated either with a note or a general musical direction. To avoid inconsistencies between and amongst the letter abbreviations for dynamics (what is sf vs. sfz, standing alone or with a trailing dynamic that is not always piano), we use the actual letters as the names of these dynamic elements. The other-dynamics element allows other dynamic marks that are not covered here. Dynamics elements may also be combined to create marks not covered by a single element, such as sfmp.
    ///
    ///These letter dynamic symbols are separated from crescendo, decrescendo, and wedge indications. Dynamic representation is inconsistent in scores. Many things are assumed by the composer and left out, such as returns to original dynamics. The MusicXML format captures what is in the score, but does not try to be optimal for analysis or synthesis of dynamics.
    ///
    ///The placement attribute is used when the dynamics are associated with a note. It is ignored when the dynamics are associated with a direction. In that case the direction element's placement attribute is used instead.</para>
    /// </summary>
    [System.ComponentModel.DescriptionAttribute(@"Dynamics can be associated either with a note or a general musical direction. To avoid inconsistencies between and amongst the letter abbreviations for dynamics (what is sf vs. sfz, standing alone or with a trailing dynamic that is not always piano), we use the actual letters as the names of these dynamic elements. The other-dynamics element allows other dynamic marks that are not covered here. Dynamics elements may also be combined to create marks not covered by a single element, such as sfmp. These letter dynamic symbols are separated from crescendo, decrescendo, and wedge indications. Dynamic representation is inconsistent in scores. Many things are assumed by the composer and left out, such as returns to original dynamics. The MusicXML format captures what is in the score, but does not try to be optimal for analysis or synthesis of dynamics. The placement attribute is used when the dynamics are associated with a note. It is ignored when the dynamics are associated with a direction. In that case the direction element's placement attribute is used instead.")]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XmlSchemaClassGenerator", "2.1.1142.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute("dynamics", Namespace="")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class Dynamics : IPrintStyleAlign, IPlacement, ITextDecoration, IEnclosure, IOptionalUniqueId
    {

        [System.Xml.Serialization.XmlIgnoreAttribute()]
        private System.Collections.ObjectModel.Collection<Empty> _p;

        [System.Xml.Serialization.XmlElementAttribute("p")]
        public System.Collections.ObjectModel.Collection<Empty> P
        {
            get
            {
                return _p;
            }
            private set
            {
                _p = value;
            }
        }

        /// <summary>
        /// <para xml:lang="en">Gets a value indicating whether the P collection is empty.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool PSpecified
        {
            get
            {
                return (this.P.Count != 0);
            }
        }

        /// <summary>
        /// <para xml:lang="en">Initializes a new instance of the <see cref="Dynamics" /> class.</para>
        /// </summary>
        public Dynamics()
        {
            this._p = new System.Collections.ObjectModel.Collection<Empty>();
            this._pp = new System.Collections.ObjectModel.Collection<Empty>();
            this._ppp = new System.Collections.ObjectModel.Collection<Empty>();
            this._pppp = new System.Collections.ObjectModel.Collection<Empty>();
            this._ppppp = new System.Collections.ObjectModel.Collection<Empty>();
            this._pppppp = new System.Collections.ObjectModel.Collection<Empty>();
            this._f = new System.Collections.ObjectModel.Collection<Empty>();
            this._ff = new System.Collections.ObjectModel.Collection<Empty>();
            this._fff = new System.Collections.ObjectModel.Collection<Empty>();
            this._ffff = new System.Collections.ObjectModel.Collection<Empty>();
            this._fffff = new System.Collections.ObjectModel.Collection<Empty>();
            this._ffffff = new System.Collections.ObjectModel.Collection<Empty>();
            this._mp = new System.Collections.ObjectModel.Collection<Empty>();
            this._mf = new System.Collections.ObjectModel.Collection<Empty>();
            this._sf = new System.Collections.ObjectModel.Collection<Empty>();
            this._sfp = new System.Collections.ObjectModel.Collection<Empty>();
            this._sfpp = new System.Collections.ObjectModel.Collection<Empty>();
            this._fp = new System.Collections.ObjectModel.Collection<Empty>();
            this._rf = new System.Collections.ObjectModel.Collection<Empty>();
            this._rfz = new System.Collections.ObjectModel.Collection<Empty>();
            this._sfz = new System.Collections.ObjectModel.Collection<Empty>();
            this._sffz = new System.Collections.ObjectModel.Collection<Empty>();
            this._fz = new System.Collections.ObjectModel.Collection<Empty>();
            this._n = new System.Collections.ObjectModel.Collection<Empty>();
            this._pf = new System.Collections.ObjectModel.Collection<Empty>();
            this._sfzp = new System.Collections.ObjectModel.Collection<Empty>();
            this._otherDynamics = new System.Collections.ObjectModel.Collection<OtherText>();
        }

        [System.Xml.Serialization.XmlIgnoreAttribute()]
        private System.Collections.ObjectModel.Collection<Empty> _pp;

        [System.Xml.Serialization.XmlElementAttribute("pp")]
        public System.Collections.ObjectModel.Collection<Empty> Pp
        {
            get
            {
                return _pp;
            }
            private set
            {
                _pp = value;
            }
        }

        /// <summary>
        /// <para xml:lang="en">Gets a value indicating whether the Pp collection is empty.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool PpSpecified
        {
            get
            {
                return (this.Pp.Count != 0);
            }
        }

        [System.Xml.Serialization.XmlIgnoreAttribute()]
        private System.Collections.ObjectModel.Collection<Empty> _ppp;

        [System.Xml.Serialization.XmlElementAttribute("ppp")]
        public System.Collections.ObjectModel.Collection<Empty> Ppp
        {
            get
            {
                return _ppp;
            }
            private set
            {
                _ppp = value;
            }
        }

        /// <summary>
        /// <para xml:lang="en">Gets a value indicating whether the Ppp collection is empty.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool PppSpecified
        {
            get
            {
                return (this.Ppp.Count != 0);
            }
        }

        [System.Xml.Serialization.XmlIgnoreAttribute()]
        private System.Collections.ObjectModel.Collection<Empty> _pppp;

        [System.Xml.Serialization.XmlElementAttribute("pppp")]
        public System.Collections.ObjectModel.Collection<Empty> Pppp
        {
            get
            {
                return _pppp;
            }
            private set
            {
                _pppp = value;
            }
        }

        /// <summary>
        /// <para xml:lang="en">Gets a value indicating whether the Pppp collection is empty.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool PpppSpecified
        {
            get
            {
                return (this.Pppp.Count != 0);
            }
        }

        [System.Xml.Serialization.XmlIgnoreAttribute()]
        private System.Collections.ObjectModel.Collection<Empty> _ppppp;

        [System.Xml.Serialization.XmlElementAttribute("ppppp")]
        public System.Collections.ObjectModel.Collection<Empty> Ppppp
        {
            get
            {
                return _ppppp;
            }
            private set
            {
                _ppppp = value;
            }
        }

        /// <summary>
        /// <para xml:lang="en">Gets a value indicating whether the Ppppp collection is empty.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool PppppSpecified
        {
            get
            {
                return (this.Ppppp.Count != 0);
            }
        }

        [System.Xml.Serialization.XmlIgnoreAttribute()]
        private System.Collections.ObjectModel.Collection<Empty> _pppppp;

        [System.Xml.Serialization.XmlElementAttribute("pppppp")]
        public System.Collections.ObjectModel.Collection<Empty> Pppppp
        {
            get
            {
                return _pppppp;
            }
            private set
            {
                _pppppp = value;
            }
        }

        /// <summary>
        /// <para xml:lang="en">Gets a value indicating whether the Pppppp collection is empty.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool PpppppSpecified
        {
            get
            {
                return (this.Pppppp.Count != 0);
            }
        }

        [System.Xml.Serialization.XmlIgnoreAttribute()]
        private System.Collections.ObjectModel.Collection<Empty> _f;

        [System.Xml.Serialization.XmlElementAttribute("f")]
        public System.Collections.ObjectModel.Collection<Empty> F
        {
            get
            {
                return _f;
            }
            private set
            {
                _f = value;
            }
        }

        /// <summary>
        /// <para xml:lang="en">Gets a value indicating whether the F collection is empty.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool FSpecified
        {
            get
            {
                return (this.F.Count != 0);
            }
        }

        [System.Xml.Serialization.XmlIgnoreAttribute()]
        private System.Collections.ObjectModel.Collection<Empty> _ff;

        [System.Xml.Serialization.XmlElementAttribute("ff")]
        public System.Collections.ObjectModel.Collection<Empty> Ff
        {
            get
            {
                return _ff;
            }
            private set
            {
                _ff = value;
            }
        }

        /// <summary>
        /// <para xml:lang="en">Gets a value indicating whether the Ff collection is empty.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool FfSpecified
        {
            get
            {
                return (this.Ff.Count != 0);
            }
        }

        [System.Xml.Serialization.XmlIgnoreAttribute()]
        private System.Collections.ObjectModel.Collection<Empty> _fff;

        [System.Xml.Serialization.XmlElementAttribute("fff")]
        public System.Collections.ObjectModel.Collection<Empty> Fff
        {
            get
            {
                return _fff;
            }
            private set
            {
                _fff = value;
            }
        }

        /// <summary>
        /// <para xml:lang="en">Gets a value indicating whether the Fff collection is empty.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool FffSpecified
        {
            get
            {
                return (this.Fff.Count != 0);
            }
        }

        [System.Xml.Serialization.XmlIgnoreAttribute()]
        private System.Collections.ObjectModel.Collection<Empty> _ffff;

        [System.Xml.Serialization.XmlElementAttribute("ffff")]
        public System.Collections.ObjectModel.Collection<Empty> Ffff
        {
            get
            {
                return _ffff;
            }
            private set
            {
                _ffff = value;
            }
        }

        /// <summary>
        /// <para xml:lang="en">Gets a value indicating whether the Ffff collection is empty.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool FfffSpecified
        {
            get
            {
                return (this.Ffff.Count != 0);
            }
        }

        [System.Xml.Serialization.XmlIgnoreAttribute()]
        private System.Collections.ObjectModel.Collection<Empty> _fffff;

        [System.Xml.Serialization.XmlElementAttribute("fffff")]
        public System.Collections.ObjectModel.Collection<Empty> Fffff
        {
            get
            {
                return _fffff;
            }
            private set
            {
                _fffff = value;
            }
        }

        /// <summary>
        /// <para xml:lang="en">Gets a value indicating whether the Fffff collection is empty.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool FffffSpecified
        {
            get
            {
                return (this.Fffff.Count != 0);
            }
        }

        [System.Xml.Serialization.XmlIgnoreAttribute()]
        private System.Collections.ObjectModel.Collection<Empty> _ffffff;

        [System.Xml.Serialization.XmlElementAttribute("ffffff")]
        public System.Collections.ObjectModel.Collection<Empty> Ffffff
        {
            get
            {
                return _ffffff;
            }
            private set
            {
                _ffffff = value;
            }
        }

        /// <summary>
        /// <para xml:lang="en">Gets a value indicating whether the Ffffff collection is empty.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool FfffffSpecified
        {
            get
            {
                return (this.Ffffff.Count != 0);
            }
        }

        [System.Xml.Serialization.XmlIgnoreAttribute()]
        private System.Collections.ObjectModel.Collection<Empty> _mp;

        [System.Xml.Serialization.XmlElementAttribute("mp")]
        public System.Collections.ObjectModel.Collection<Empty> Mp
        {
            get
            {
                return _mp;
            }
            private set
            {
                _mp = value;
            }
        }

        /// <summary>
        /// <para xml:lang="en">Gets a value indicating whether the Mp collection is empty.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool MpSpecified
        {
            get
            {
                return (this.Mp.Count != 0);
            }
        }

        [System.Xml.Serialization.XmlIgnoreAttribute()]
        private System.Collections.ObjectModel.Collection<Empty> _mf;

        [System.Xml.Serialization.XmlElementAttribute("mf")]
        public System.Collections.ObjectModel.Collection<Empty> Mf
        {
            get
            {
                return _mf;
            }
            private set
            {
                _mf = value;
            }
        }

        /// <summary>
        /// <para xml:lang="en">Gets a value indicating whether the Mf collection is empty.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool MfSpecified
        {
            get
            {
                return (this.Mf.Count != 0);
            }
        }

        [System.Xml.Serialization.XmlIgnoreAttribute()]
        private System.Collections.ObjectModel.Collection<Empty> _sf;

        [System.Xml.Serialization.XmlElementAttribute("sf")]
        public System.Collections.ObjectModel.Collection<Empty> Sf
        {
            get
            {
                return _sf;
            }
            private set
            {
                _sf = value;
            }
        }

        /// <summary>
        /// <para xml:lang="en">Gets a value indicating whether the Sf collection is empty.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool SfSpecified
        {
            get
            {
                return (this.Sf.Count != 0);
            }
        }

        [System.Xml.Serialization.XmlIgnoreAttribute()]
        private System.Collections.ObjectModel.Collection<Empty> _sfp;

        [System.Xml.Serialization.XmlElementAttribute("sfp")]
        public System.Collections.ObjectModel.Collection<Empty> Sfp
        {
            get
            {
                return _sfp;
            }
            private set
            {
                _sfp = value;
            }
        }

        /// <summary>
        /// <para xml:lang="en">Gets a value indicating whether the Sfp collection is empty.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool SfpSpecified
        {
            get
            {
                return (this.Sfp.Count != 0);
            }
        }

        [System.Xml.Serialization.XmlIgnoreAttribute()]
        private System.Collections.ObjectModel.Collection<Empty> _sfpp;

        [System.Xml.Serialization.XmlElementAttribute("sfpp")]
        public System.Collections.ObjectModel.Collection<Empty> Sfpp
        {
            get
            {
                return _sfpp;
            }
            private set
            {
                _sfpp = value;
            }
        }

        /// <summary>
        /// <para xml:lang="en">Gets a value indicating whether the Sfpp collection is empty.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool SfppSpecified
        {
            get
            {
                return (this.Sfpp.Count != 0);
            }
        }

        [System.Xml.Serialization.XmlIgnoreAttribute()]
        private System.Collections.ObjectModel.Collection<Empty> _fp;

        [System.Xml.Serialization.XmlElementAttribute("fp")]
        public System.Collections.ObjectModel.Collection<Empty> Fp
        {
            get
            {
                return _fp;
            }
            private set
            {
                _fp = value;
            }
        }

        /// <summary>
        /// <para xml:lang="en">Gets a value indicating whether the Fp collection is empty.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool FpSpecified
        {
            get
            {
                return (this.Fp.Count != 0);
            }
        }

        [System.Xml.Serialization.XmlIgnoreAttribute()]
        private System.Collections.ObjectModel.Collection<Empty> _rf;

        [System.Xml.Serialization.XmlElementAttribute("rf")]
        public System.Collections.ObjectModel.Collection<Empty> Rf
        {
            get
            {
                return _rf;
            }
            private set
            {
                _rf = value;
            }
        }

        /// <summary>
        /// <para xml:lang="en">Gets a value indicating whether the Rf collection is empty.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool RfSpecified
        {
            get
            {
                return (this.Rf.Count != 0);
            }
        }

        [System.Xml.Serialization.XmlIgnoreAttribute()]
        private System.Collections.ObjectModel.Collection<Empty> _rfz;

        [System.Xml.Serialization.XmlElementAttribute("rfz")]
        public System.Collections.ObjectModel.Collection<Empty> Rfz
        {
            get
            {
                return _rfz;
            }
            private set
            {
                _rfz = value;
            }
        }

        /// <summary>
        /// <para xml:lang="en">Gets a value indicating whether the Rfz collection is empty.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool RfzSpecified
        {
            get
            {
                return (this.Rfz.Count != 0);
            }
        }

        [System.Xml.Serialization.XmlIgnoreAttribute()]
        private System.Collections.ObjectModel.Collection<Empty> _sfz;

        [System.Xml.Serialization.XmlElementAttribute("sfz")]
        public System.Collections.ObjectModel.Collection<Empty> Sfz
        {
            get
            {
                return _sfz;
            }
            private set
            {
                _sfz = value;
            }
        }

        /// <summary>
        /// <para xml:lang="en">Gets a value indicating whether the Sfz collection is empty.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool SfzSpecified
        {
            get
            {
                return (this.Sfz.Count != 0);
            }
        }

        [System.Xml.Serialization.XmlIgnoreAttribute()]
        private System.Collections.ObjectModel.Collection<Empty> _sffz;

        [System.Xml.Serialization.XmlElementAttribute("sffz")]
        public System.Collections.ObjectModel.Collection<Empty> Sffz
        {
            get
            {
                return _sffz;
            }
            private set
            {
                _sffz = value;
            }
        }

        /// <summary>
        /// <para xml:lang="en">Gets a value indicating whether the Sffz collection is empty.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool SffzSpecified
        {
            get
            {
                return (this.Sffz.Count != 0);
            }
        }

        [System.Xml.Serialization.XmlIgnoreAttribute()]
        private System.Collections.ObjectModel.Collection<Empty> _fz;

        [System.Xml.Serialization.XmlElementAttribute("fz")]
        public System.Collections.ObjectModel.Collection<Empty> Fz
        {
            get
            {
                return _fz;
            }
            private set
            {
                _fz = value;
            }
        }

        /// <summary>
        /// <para xml:lang="en">Gets a value indicating whether the Fz collection is empty.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool FzSpecified
        {
            get
            {
                return (this.Fz.Count != 0);
            }
        }

        [System.Xml.Serialization.XmlIgnoreAttribute()]
        private System.Collections.ObjectModel.Collection<Empty> _n;

        [System.Xml.Serialization.XmlElementAttribute("n")]
        public System.Collections.ObjectModel.Collection<Empty> N
        {
            get
            {
                return _n;
            }
            private set
            {
                _n = value;
            }
        }

        /// <summary>
        /// <para xml:lang="en">Gets a value indicating whether the N collection is empty.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool NSpecified
        {
            get
            {
                return (this.N.Count != 0);
            }
        }

        [System.Xml.Serialization.XmlIgnoreAttribute()]
        private System.Collections.ObjectModel.Collection<Empty> _pf;

        [System.Xml.Serialization.XmlElementAttribute("pf")]
        public System.Collections.ObjectModel.Collection<Empty> Pf
        {
            get
            {
                return _pf;
            }
            private set
            {
                _pf = value;
            }
        }

        /// <summary>
        /// <para xml:lang="en">Gets a value indicating whether the Pf collection is empty.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool PfSpecified
        {
            get
            {
                return (this.Pf.Count != 0);
            }
        }

        [System.Xml.Serialization.XmlIgnoreAttribute()]
        private System.Collections.ObjectModel.Collection<Empty> _sfzp;

        [System.Xml.Serialization.XmlElementAttribute("sfzp")]
        public System.Collections.ObjectModel.Collection<Empty> Sfzp
        {
            get
            {
                return _sfzp;
            }
            private set
            {
                _sfzp = value;
            }
        }

        /// <summary>
        /// <para xml:lang="en">Gets a value indicating whether the Sfzp collection is empty.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool SfzpSpecified
        {
            get
            {
                return (this.Sfzp.Count != 0);
            }
        }

        [System.Xml.Serialization.XmlIgnoreAttribute()]
        private System.Collections.ObjectModel.Collection<OtherText> _otherDynamics;

        [System.Xml.Serialization.XmlElementAttribute("other-dynamics")]
        public System.Collections.ObjectModel.Collection<OtherText> OtherDynamics
        {
            get
            {
                return _otherDynamics;
            }
            private set
            {
                _otherDynamics = value;
            }
        }

        /// <summary>
        /// <para xml:lang="en">Gets a value indicating whether the OtherDynamics collection is empty.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool OtherDynamicsSpecified
        {
            get
            {
                return (this.OtherDynamics.Count != 0);
            }
        }

        /// <summary>
        /// <para>The tenths type is a number representing tenths of interline staff space (positive or negative). Both integer and decimal values are allowed, such as 5 for a half space and 2.5 for a quarter space. Interline space is measured from the middle of a staff line.
        ///
        ///Distances in a MusicXML file are measured in tenths of staff space. Tenths are then scaled to millimeters within the scaling element, used in the defaults element at the start of a score. Individual staves can apply a scaling factor to adjust staff size. When a MusicXML element or attribute refers to tenths, it means the global tenths defined by the scaling element, not the local tenths as adjusted by the staff-size element.</para>
        /// </summary>
        [System.Xml.Serialization.XmlAttributeAttribute("default-x")]
        public decimal DefaultX { get; set; }

        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the DefaultX property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool DefaultXSpecified { get; set; }

        /// <summary>
        /// <para>The tenths type is a number representing tenths of interline staff space (positive or negative). Both integer and decimal values are allowed, such as 5 for a half space and 2.5 for a quarter space. Interline space is measured from the middle of a staff line.
        ///
        ///Distances in a MusicXML file are measured in tenths of staff space. Tenths are then scaled to millimeters within the scaling element, used in the defaults element at the start of a score. Individual staves can apply a scaling factor to adjust staff size. When a MusicXML element or attribute refers to tenths, it means the global tenths defined by the scaling element, not the local tenths as adjusted by the staff-size element.</para>
        /// </summary>
        [System.Xml.Serialization.XmlAttributeAttribute("default-y")]
        public decimal DefaultY { get; set; }

        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the DefaultY property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool DefaultYSpecified { get; set; }

        /// <summary>
        /// <para>The tenths type is a number representing tenths of interline staff space (positive or negative). Both integer and decimal values are allowed, such as 5 for a half space and 2.5 for a quarter space. Interline space is measured from the middle of a staff line.
        ///
        ///Distances in a MusicXML file are measured in tenths of staff space. Tenths are then scaled to millimeters within the scaling element, used in the defaults element at the start of a score. Individual staves can apply a scaling factor to adjust staff size. When a MusicXML element or attribute refers to tenths, it means the global tenths defined by the scaling element, not the local tenths as adjusted by the staff-size element.</para>
        /// </summary>
        [System.Xml.Serialization.XmlAttributeAttribute("relative-x")]
        public decimal RelativeX { get; set; }

        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the RelativeX property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool RelativeXSpecified { get; set; }

        /// <summary>
        /// <para>The tenths type is a number representing tenths of interline staff space (positive or negative). Both integer and decimal values are allowed, such as 5 for a half space and 2.5 for a quarter space. Interline space is measured from the middle of a staff line.
        ///
        ///Distances in a MusicXML file are measured in tenths of staff space. Tenths are then scaled to millimeters within the scaling element, used in the defaults element at the start of a score. Individual staves can apply a scaling factor to adjust staff size. When a MusicXML element or attribute refers to tenths, it means the global tenths defined by the scaling element, not the local tenths as adjusted by the staff-size element.</para>
        /// </summary>
        [System.Xml.Serialization.XmlAttributeAttribute("relative-y")]
        public decimal RelativeY { get; set; }

        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the RelativeY property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool RelativeYSpecified { get; set; }

        /// <summary>
        /// <para>The font-family is a comma-separated list of font names. These can be specific font styles such as Maestro or Opus, or one of several generic font styles: music, engraved, handwritten, text, serif, sans-serif, handwritten, cursive, fantasy, and monospace. The music, engraved, and handwritten values refer to music fonts; the rest refer to text fonts. The fantasy style refers to decorative text such as found in older German-style printing.</para>
        /// <para xml:lang="en">Pattern: [^,]+(, ?[^,]+)*.</para>
        /// </summary>
        [System.ComponentModel.DataAnnotations.RegularExpressionAttribute("[^,]+(, ?[^,]+)*")]
        [System.Xml.Serialization.XmlAttributeAttribute("font-family")]
        public string FontFamily { get; set; }

        [System.Xml.Serialization.XmlAttributeAttribute("font-style")]
        public FontStyle FontStyle { get; set; }

        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the FontStyle property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool FontStyleSpecified { get; set; }

        /// <summary>
        /// <para>The font-size can be one of the CSS font sizes (xx-small, x-small, small, medium, large, x-large, xx-large) or a numeric point size.</para>
        /// </summary>
        [System.Xml.Serialization.XmlAttributeAttribute("font-size")]
        public string FontSize { get; set; }

        [System.Xml.Serialization.XmlAttributeAttribute("font-weight")]
        public FontWeight FontWeight { get; set; }

        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the FontWeight property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool FontWeightSpecified { get; set; }

        /// <summary>
        /// <para>The color type indicates the color of an element. Color may be represented as hexadecimal RGB triples, as in HTML, or as hexadecimal ARGB tuples, with the A indicating alpha of transparency. An alpha value of 00 is totally transparent; FF is totally opaque. If RGB is used, the A value is assumed to be FF.
        ///
        ///For instance, the RGB value "#800080" represents purple. An ARGB value of "#40800080" would be a transparent purple.
        ///
        ///As in SVG 1.1, colors are defined in terms of the sRGB color space (IEC 61966).</para>
        /// <para xml:lang="en">Pattern: #[\dA-F]{6}([\dA-F][\dA-F])?.</para>
        /// </summary>
        [System.ComponentModel.DataAnnotations.RegularExpressionAttribute("#[\\dA-F]{6}([\\dA-F][\\dA-F])?")]
        [System.Xml.Serialization.XmlAttributeAttribute("color")]
        public string Color { get; set; }

        [System.Xml.Serialization.XmlAttributeAttribute("halign")]
        public LeftCenterRight Halign { get; set; }

        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the Halign property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool HalignSpecified { get; set; }

        [System.Xml.Serialization.XmlAttributeAttribute("valign")]
        public Valign Valign { get; set; }

        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the Valign property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool ValignSpecified { get; set; }

        [System.Xml.Serialization.XmlAttributeAttribute("placement")]
        public AboveBelow Placement { get; set; }

        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the Placement property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool PlacementSpecified { get; set; }

        /// <summary>
        /// <para>The number-of-lines type is used to specify the number of lines in text decoration attributes.</para>
        /// <para xml:lang="en">Minimum inclusive value: 0.</para>
        /// <para xml:lang="en">Maximum inclusive value: 3.</para>
        /// </summary>
        [System.ComponentModel.DataAnnotations.RangeAttribute(typeof(decimal), "0", "3")]
        [System.Xml.Serialization.XmlAttributeAttribute("underline")]
        public byte Underline { get; set; }

        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the Underline property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool UnderlineSpecified { get; set; }

        /// <summary>
        /// <para>The number-of-lines type is used to specify the number of lines in text decoration attributes.</para>
        /// <para xml:lang="en">Minimum inclusive value: 0.</para>
        /// <para xml:lang="en">Maximum inclusive value: 3.</para>
        /// </summary>
        [System.ComponentModel.DataAnnotations.RangeAttribute(typeof(decimal), "0", "3")]
        [System.Xml.Serialization.XmlAttributeAttribute("overline")]
        public byte Overline { get; set; }

        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the Overline property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool OverlineSpecified { get; set; }

        /// <summary>
        /// <para>The number-of-lines type is used to specify the number of lines in text decoration attributes.</para>
        /// <para xml:lang="en">Minimum inclusive value: 0.</para>
        /// <para xml:lang="en">Maximum inclusive value: 3.</para>
        /// </summary>
        [System.ComponentModel.DataAnnotations.RangeAttribute(typeof(decimal), "0", "3")]
        [System.Xml.Serialization.XmlAttributeAttribute("line-through")]
        public byte LineThrough { get; set; }

        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the LineThrough property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool LineThroughSpecified { get; set; }

        [System.Xml.Serialization.XmlAttributeAttribute("enclosure")]
        public EnclosureShape Enclosure { get; set; }

        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the Enclosure property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool EnclosureSpecified { get; set; }

        [System.Xml.Serialization.XmlAttributeAttribute("id")]
        public string Id { get; set; }
    }

    /// <summary>
    /// <para>The empty type represents an empty element with no attributes.</para>
    /// </summary>
    [System.ComponentModel.DescriptionAttribute("The empty type represents an empty element with no attributes.")]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XmlSchemaClassGenerator", "2.1.1142.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute("empty", Namespace="")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(Release))]
    public partial class Empty
    {
    }

    /// <summary>
    /// <para>The other-text type represents a text element with a smufl attribute group. This type is used by MusicXML direction extension elements to allow specification of specific SMuFL glyphs without needed to add every glyph as a MusicXML element.</para>
    /// </summary>
    [System.ComponentModel.DescriptionAttribute("The other-text type represents a text element with a smufl attribute group. This " +
        "type is used by MusicXML direction extension elements to allow specification of " +
        "specific SMuFL glyphs without needed to add every glyph as a MusicXML element.")]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XmlSchemaClassGenerator", "2.1.1142.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute("other-text", Namespace="")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class OtherText : ISmufl
    {

        /// <summary>
        /// <para xml:lang="en">Gets or sets the text value.</para>
        /// </summary>
        [System.Xml.Serialization.XmlTextAttribute()]
        public string Value { get; set; }

        /// <summary>
        /// <para>The smufl-glyph-name type is used for attributes that reference a specific Standard Music Font Layout (SMuFL) character. The value is a SMuFL canonical glyph name, not a code point. For instance, the value for a standard piano pedal mark would be keyboardPedalPed, not U+E650.</para>
        /// </summary>
        [System.Xml.Serialization.XmlAttributeAttribute("smufl")]
        public string Smufl { get; set; }
    }

    /// <summary>
    /// <para>The smufl attribute group is used to indicate a particular Standard Music Font Layout (SMuFL) character. Sometimes this is a formatting choice, and sometimes this is a refinement of the semantic meaning of an element.</para>
    /// </summary>
    [System.ComponentModel.DescriptionAttribute("The smufl attribute group is used to indicate a particular Standard Music Font La" +
        "yout (SMuFL) character. Sometimes this is a formatting choice, and sometimes thi" +
        "s is a refinement of the semantic meaning of an element.")]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XmlSchemaClassGenerator", "2.1.1142.0")]
    public partial interface ISmufl
    {

        /// <summary>
        /// <para>The smufl-glyph-name type is used for attributes that reference a specific Standard Music Font Layout (SMuFL) character. The value is a SMuFL canonical glyph name, not a code point. For instance, the value for a standard piano pedal mark would be keyboardPedalPed, not U+E650.</para>
        /// </summary>
        string Smufl
        {
            get;
            set;
        }
    }

    /// <summary>
    /// <para>The placement attribute indicates whether something is above or below another element, such as a note or a notation.</para>
    /// </summary>
    [System.ComponentModel.DescriptionAttribute("The placement attribute indicates whether something is above or below another ele" +
        "ment, such as a note or a notation.")]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XmlSchemaClassGenerator", "2.1.1142.0")]
    public partial interface IPlacement
    {

        AboveBelow Placement
        {
            get;
            set;
        }
    }

    /// <summary>
    /// <para>The empty-placement type represents an empty element with print-style and placement attributes.</para>
    /// </summary>
    [System.ComponentModel.DescriptionAttribute("The empty-placement type represents an empty element with print-style and placeme" +
        "nt attributes.")]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XmlSchemaClassGenerator", "2.1.1142.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute("empty-placement", Namespace="")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(HeelToe))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(StrongAccent))]
    public partial class EmptyPlacement : IPrintStyle, IPlacement
    {

        /// <summary>
        /// <para>The tenths type is a number representing tenths of interline staff space (positive or negative). Both integer and decimal values are allowed, such as 5 for a half space and 2.5 for a quarter space. Interline space is measured from the middle of a staff line.
        ///
        ///Distances in a MusicXML file are measured in tenths of staff space. Tenths are then scaled to millimeters within the scaling element, used in the defaults element at the start of a score. Individual staves can apply a scaling factor to adjust staff size. When a MusicXML element or attribute refers to tenths, it means the global tenths defined by the scaling element, not the local tenths as adjusted by the staff-size element.</para>
        /// </summary>
        [System.Xml.Serialization.XmlAttributeAttribute("default-x")]
        public decimal DefaultX { get; set; }

        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the DefaultX property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool DefaultXSpecified { get; set; }

        /// <summary>
        /// <para>The tenths type is a number representing tenths of interline staff space (positive or negative). Both integer and decimal values are allowed, such as 5 for a half space and 2.5 for a quarter space. Interline space is measured from the middle of a staff line.
        ///
        ///Distances in a MusicXML file are measured in tenths of staff space. Tenths are then scaled to millimeters within the scaling element, used in the defaults element at the start of a score. Individual staves can apply a scaling factor to adjust staff size. When a MusicXML element or attribute refers to tenths, it means the global tenths defined by the scaling element, not the local tenths as adjusted by the staff-size element.</para>
        /// </summary>
        [System.Xml.Serialization.XmlAttributeAttribute("default-y")]
        public decimal DefaultY { get; set; }

        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the DefaultY property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool DefaultYSpecified { get; set; }

        /// <summary>
        /// <para>The tenths type is a number representing tenths of interline staff space (positive or negative). Both integer and decimal values are allowed, such as 5 for a half space and 2.5 for a quarter space. Interline space is measured from the middle of a staff line.
        ///
        ///Distances in a MusicXML file are measured in tenths of staff space. Tenths are then scaled to millimeters within the scaling element, used in the defaults element at the start of a score. Individual staves can apply a scaling factor to adjust staff size. When a MusicXML element or attribute refers to tenths, it means the global tenths defined by the scaling element, not the local tenths as adjusted by the staff-size element.</para>
        /// </summary>
        [System.Xml.Serialization.XmlAttributeAttribute("relative-x")]
        public decimal RelativeX { get; set; }

        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the RelativeX property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool RelativeXSpecified { get; set; }

        /// <summary>
        /// <para>The tenths type is a number representing tenths of interline staff space (positive or negative). Both integer and decimal values are allowed, such as 5 for a half space and 2.5 for a quarter space. Interline space is measured from the middle of a staff line.
        ///
        ///Distances in a MusicXML file are measured in tenths of staff space. Tenths are then scaled to millimeters within the scaling element, used in the defaults element at the start of a score. Individual staves can apply a scaling factor to adjust staff size. When a MusicXML element or attribute refers to tenths, it means the global tenths defined by the scaling element, not the local tenths as adjusted by the staff-size element.</para>
        /// </summary>
        [System.Xml.Serialization.XmlAttributeAttribute("relative-y")]
        public decimal RelativeY { get; set; }

        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the RelativeY property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool RelativeYSpecified { get; set; }

        /// <summary>
        /// <para>The font-family is a comma-separated list of font names. These can be specific font styles such as Maestro or Opus, or one of several generic font styles: music, engraved, handwritten, text, serif, sans-serif, handwritten, cursive, fantasy, and monospace. The music, engraved, and handwritten values refer to music fonts; the rest refer to text fonts. The fantasy style refers to decorative text such as found in older German-style printing.</para>
        /// <para xml:lang="en">Pattern: [^,]+(, ?[^,]+)*.</para>
        /// </summary>
        [System.ComponentModel.DataAnnotations.RegularExpressionAttribute("[^,]+(, ?[^,]+)*")]
        [System.Xml.Serialization.XmlAttributeAttribute("font-family")]
        public string FontFamily { get; set; }

        [System.Xml.Serialization.XmlAttributeAttribute("font-style")]
        public FontStyle FontStyle { get; set; }

        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the FontStyle property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool FontStyleSpecified { get; set; }

        /// <summary>
        /// <para>The font-size can be one of the CSS font sizes (xx-small, x-small, small, medium, large, x-large, xx-large) or a numeric point size.</para>
        /// </summary>
        [System.Xml.Serialization.XmlAttributeAttribute("font-size")]
        public string FontSize { get; set; }

        [System.Xml.Serialization.XmlAttributeAttribute("font-weight")]
        public FontWeight FontWeight { get; set; }

        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the FontWeight property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool FontWeightSpecified { get; set; }

        /// <summary>
        /// <para>The color type indicates the color of an element. Color may be represented as hexadecimal RGB triples, as in HTML, or as hexadecimal ARGB tuples, with the A indicating alpha of transparency. An alpha value of 00 is totally transparent; FF is totally opaque. If RGB is used, the A value is assumed to be FF.
        ///
        ///For instance, the RGB value "#800080" represents purple. An ARGB value of "#40800080" would be a transparent purple.
        ///
        ///As in SVG 1.1, colors are defined in terms of the sRGB color space (IEC 61966).</para>
        /// <para xml:lang="en">Pattern: #[\dA-F]{6}([\dA-F][\dA-F])?.</para>
        /// </summary>
        [System.ComponentModel.DataAnnotations.RegularExpressionAttribute("#[\\dA-F]{6}([\\dA-F][\\dA-F])?")]
        [System.Xml.Serialization.XmlAttributeAttribute("color")]
        public string Color { get; set; }

        [System.Xml.Serialization.XmlAttributeAttribute("placement")]
        public AboveBelow Placement { get; set; }

        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the Placement property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool PlacementSpecified { get; set; }
    }

    /// <summary>
    /// <para>The empty-placement-smufl type represents an empty element with print-style, placement, and smufl attributes.</para>
    /// </summary>
    [System.ComponentModel.DescriptionAttribute("The empty-placement-smufl type represents an empty element with print-style, plac" +
        "ement, and smufl attributes.")]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XmlSchemaClassGenerator", "2.1.1142.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute("empty-placement-smufl", Namespace="")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class EmptyPlacementSmufl : IPrintStyle, IPlacement, ISmufl
    {

        /// <summary>
        /// <para>The tenths type is a number representing tenths of interline staff space (positive or negative). Both integer and decimal values are allowed, such as 5 for a half space and 2.5 for a quarter space. Interline space is measured from the middle of a staff line.
        ///
        ///Distances in a MusicXML file are measured in tenths of staff space. Tenths are then scaled to millimeters within the scaling element, used in the defaults element at the start of a score. Individual staves can apply a scaling factor to adjust staff size. When a MusicXML element or attribute refers to tenths, it means the global tenths defined by the scaling element, not the local tenths as adjusted by the staff-size element.</para>
        /// </summary>
        [System.Xml.Serialization.XmlAttributeAttribute("default-x")]
        public decimal DefaultX { get; set; }

        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the DefaultX property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool DefaultXSpecified { get; set; }

        /// <summary>
        /// <para>The tenths type is a number representing tenths of interline staff space (positive or negative). Both integer and decimal values are allowed, such as 5 for a half space and 2.5 for a quarter space. Interline space is measured from the middle of a staff line.
        ///
        ///Distances in a MusicXML file are measured in tenths of staff space. Tenths are then scaled to millimeters within the scaling element, used in the defaults element at the start of a score. Individual staves can apply a scaling factor to adjust staff size. When a MusicXML element or attribute refers to tenths, it means the global tenths defined by the scaling element, not the local tenths as adjusted by the staff-size element.</para>
        /// </summary>
        [System.Xml.Serialization.XmlAttributeAttribute("default-y")]
        public decimal DefaultY { get; set; }

        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the DefaultY property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool DefaultYSpecified { get; set; }

        /// <summary>
        /// <para>The tenths type is a number representing tenths of interline staff space (positive or negative). Both integer and decimal values are allowed, such as 5 for a half space and 2.5 for a quarter space. Interline space is measured from the middle of a staff line.
        ///
        ///Distances in a MusicXML file are measured in tenths of staff space. Tenths are then scaled to millimeters within the scaling element, used in the defaults element at the start of a score. Individual staves can apply a scaling factor to adjust staff size. When a MusicXML element or attribute refers to tenths, it means the global tenths defined by the scaling element, not the local tenths as adjusted by the staff-size element.</para>
        /// </summary>
        [System.Xml.Serialization.XmlAttributeAttribute("relative-x")]
        public decimal RelativeX { get; set; }

        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the RelativeX property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool RelativeXSpecified { get; set; }

        /// <summary>
        /// <para>The tenths type is a number representing tenths of interline staff space (positive or negative). Both integer and decimal values are allowed, such as 5 for a half space and 2.5 for a quarter space. Interline space is measured from the middle of a staff line.
        ///
        ///Distances in a MusicXML file are measured in tenths of staff space. Tenths are then scaled to millimeters within the scaling element, used in the defaults element at the start of a score. Individual staves can apply a scaling factor to adjust staff size. When a MusicXML element or attribute refers to tenths, it means the global tenths defined by the scaling element, not the local tenths as adjusted by the staff-size element.</para>
        /// </summary>
        [System.Xml.Serialization.XmlAttributeAttribute("relative-y")]
        public decimal RelativeY { get; set; }

        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the RelativeY property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool RelativeYSpecified { get; set; }

        /// <summary>
        /// <para>The font-family is a comma-separated list of font names. These can be specific font styles such as Maestro or Opus, or one of several generic font styles: music, engraved, handwritten, text, serif, sans-serif, handwritten, cursive, fantasy, and monospace. The music, engraved, and handwritten values refer to music fonts; the rest refer to text fonts. The fantasy style refers to decorative text such as found in older German-style printing.</para>
        /// <para xml:lang="en">Pattern: [^,]+(, ?[^,]+)*.</para>
        /// </summary>
        [System.ComponentModel.DataAnnotations.RegularExpressionAttribute("[^,]+(, ?[^,]+)*")]
        [System.Xml.Serialization.XmlAttributeAttribute("font-family")]
        public string FontFamily { get; set; }

        [System.Xml.Serialization.XmlAttributeAttribute("font-style")]
        public FontStyle FontStyle { get; set; }

        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the FontStyle property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool FontStyleSpecified { get; set; }

        /// <summary>
        /// <para>The font-size can be one of the CSS font sizes (xx-small, x-small, small, medium, large, x-large, xx-large) or a numeric point size.</para>
        /// </summary>
        [System.Xml.Serialization.XmlAttributeAttribute("font-size")]
        public string FontSize { get; set; }

        [System.Xml.Serialization.XmlAttributeAttribute("font-weight")]
        public FontWeight FontWeight { get; set; }

        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the FontWeight property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool FontWeightSpecified { get; set; }

        /// <summary>
        /// <para>The color type indicates the color of an element. Color may be represented as hexadecimal RGB triples, as in HTML, or as hexadecimal ARGB tuples, with the A indicating alpha of transparency. An alpha value of 00 is totally transparent; FF is totally opaque. If RGB is used, the A value is assumed to be FF.
        ///
        ///For instance, the RGB value "#800080" represents purple. An ARGB value of "#40800080" would be a transparent purple.
        ///
        ///As in SVG 1.1, colors are defined in terms of the sRGB color space (IEC 61966).</para>
        /// <para xml:lang="en">Pattern: #[\dA-F]{6}([\dA-F][\dA-F])?.</para>
        /// </summary>
        [System.ComponentModel.DataAnnotations.RegularExpressionAttribute("#[\\dA-F]{6}([\\dA-F][\\dA-F])?")]
        [System.Xml.Serialization.XmlAttributeAttribute("color")]
        public string Color { get; set; }

        [System.Xml.Serialization.XmlAttributeAttribute("placement")]
        public AboveBelow Placement { get; set; }

        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the Placement property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool PlacementSpecified { get; set; }

        /// <summary>
        /// <para>The smufl-glyph-name type is used for attributes that reference a specific Standard Music Font Layout (SMuFL) character. The value is a SMuFL canonical glyph name, not a code point. For instance, the value for a standard piano pedal mark would be keyboardPedalPed, not U+E650.</para>
        /// </summary>
        [System.Xml.Serialization.XmlAttributeAttribute("smufl")]
        public string Smufl { get; set; }
    }

    /// <summary>
    /// <para>The empty-print-style type represents an empty element with print-style attribute group.</para>
    /// </summary>
    [System.ComponentModel.DescriptionAttribute("The empty-print-style type represents an empty element with print-style attribute" +
        " group.")]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XmlSchemaClassGenerator", "2.1.1142.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute("empty-print-style", Namespace="")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class EmptyPrintStyle : IPrintStyle
    {

        /// <summary>
        /// <para>The tenths type is a number representing tenths of interline staff space (positive or negative). Both integer and decimal values are allowed, such as 5 for a half space and 2.5 for a quarter space. Interline space is measured from the middle of a staff line.
        ///
        ///Distances in a MusicXML file are measured in tenths of staff space. Tenths are then scaled to millimeters within the scaling element, used in the defaults element at the start of a score. Individual staves can apply a scaling factor to adjust staff size. When a MusicXML element or attribute refers to tenths, it means the global tenths defined by the scaling element, not the local tenths as adjusted by the staff-size element.</para>
        /// </summary>
        [System.Xml.Serialization.XmlAttributeAttribute("default-x")]
        public decimal DefaultX { get; set; }

        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the DefaultX property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool DefaultXSpecified { get; set; }

        /// <summary>
        /// <para>The tenths type is a number representing tenths of interline staff space (positive or negative). Both integer and decimal values are allowed, such as 5 for a half space and 2.5 for a quarter space. Interline space is measured from the middle of a staff line.
        ///
        ///Distances in a MusicXML file are measured in tenths of staff space. Tenths are then scaled to millimeters within the scaling element, used in the defaults element at the start of a score. Individual staves can apply a scaling factor to adjust staff size. When a MusicXML element or attribute refers to tenths, it means the global tenths defined by the scaling element, not the local tenths as adjusted by the staff-size element.</para>
        /// </summary>
        [System.Xml.Serialization.XmlAttributeAttribute("default-y")]
        public decimal DefaultY { get; set; }

        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the DefaultY property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool DefaultYSpecified { get; set; }

        /// <summary>
        /// <para>The tenths type is a number representing tenths of interline staff space (positive or negative). Both integer and decimal values are allowed, such as 5 for a half space and 2.5 for a quarter space. Interline space is measured from the middle of a staff line.
        ///
        ///Distances in a MusicXML file are measured in tenths of staff space. Tenths are then scaled to millimeters within the scaling element, used in the defaults element at the start of a score. Individual staves can apply a scaling factor to adjust staff size. When a MusicXML element or attribute refers to tenths, it means the global tenths defined by the scaling element, not the local tenths as adjusted by the staff-size element.</para>
        /// </summary>
        [System.Xml.Serialization.XmlAttributeAttribute("relative-x")]
        public decimal RelativeX { get; set; }

        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the RelativeX property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool RelativeXSpecified { get; set; }

        /// <summary>
        /// <para>The tenths type is a number representing tenths of interline staff space (positive or negative). Both integer and decimal values are allowed, such as 5 for a half space and 2.5 for a quarter space. Interline space is measured from the middle of a staff line.
        ///
        ///Distances in a MusicXML file are measured in tenths of staff space. Tenths are then scaled to millimeters within the scaling element, used in the defaults element at the start of a score. Individual staves can apply a scaling factor to adjust staff size. When a MusicXML element or attribute refers to tenths, it means the global tenths defined by the scaling element, not the local tenths as adjusted by the staff-size element.</para>
        /// </summary>
        [System.Xml.Serialization.XmlAttributeAttribute("relative-y")]
        public decimal RelativeY { get; set; }

        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the RelativeY property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool RelativeYSpecified { get; set; }

        /// <summary>
        /// <para>The font-family is a comma-separated list of font names. These can be specific font styles such as Maestro or Opus, or one of several generic font styles: music, engraved, handwritten, text, serif, sans-serif, handwritten, cursive, fantasy, and monospace. The music, engraved, and handwritten values refer to music fonts; the rest refer to text fonts. The fantasy style refers to decorative text such as found in older German-style printing.</para>
        /// <para xml:lang="en">Pattern: [^,]+(, ?[^,]+)*.</para>
        /// </summary>
        [System.ComponentModel.DataAnnotations.RegularExpressionAttribute("[^,]+(, ?[^,]+)*")]
        [System.Xml.Serialization.XmlAttributeAttribute("font-family")]
        public string FontFamily { get; set; }

        [System.Xml.Serialization.XmlAttributeAttribute("font-style")]
        public FontStyle FontStyle { get; set; }

        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the FontStyle property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool FontStyleSpecified { get; set; }

        /// <summary>
        /// <para>The font-size can be one of the CSS font sizes (xx-small, x-small, small, medium, large, x-large, xx-large) or a numeric point size.</para>
        /// </summary>
        [System.Xml.Serialization.XmlAttributeAttribute("font-size")]
        public string FontSize { get; set; }

        [System.Xml.Serialization.XmlAttributeAttribute("font-weight")]
        public FontWeight FontWeight { get; set; }

        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the FontWeight property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool FontWeightSpecified { get; set; }

        /// <summary>
        /// <para>The color type indicates the color of an element. Color may be represented as hexadecimal RGB triples, as in HTML, or as hexadecimal ARGB tuples, with the A indicating alpha of transparency. An alpha value of 00 is totally transparent; FF is totally opaque. If RGB is used, the A value is assumed to be FF.
        ///
        ///For instance, the RGB value "#800080" represents purple. An ARGB value of "#40800080" would be a transparent purple.
        ///
        ///As in SVG 1.1, colors are defined in terms of the sRGB color space (IEC 61966).</para>
        /// <para xml:lang="en">Pattern: #[\dA-F]{6}([\dA-F][\dA-F])?.</para>
        /// </summary>
        [System.ComponentModel.DataAnnotations.RegularExpressionAttribute("#[\\dA-F]{6}([\\dA-F][\\dA-F])?")]
        [System.Xml.Serialization.XmlAttributeAttribute("color")]
        public string Color { get; set; }
    }

    /// <summary>
    /// <para>The empty-print-style-align type represents an empty element with print-style-align attribute group.</para>
    /// </summary>
    [System.ComponentModel.DescriptionAttribute("The empty-print-style-align type represents an empty element with print-style-ali" +
        "gn attribute group.")]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XmlSchemaClassGenerator", "2.1.1142.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute("empty-print-style-align", Namespace="")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class EmptyPrintStyleAlign : IPrintStyleAlign
    {

        /// <summary>
        /// <para>The tenths type is a number representing tenths of interline staff space (positive or negative). Both integer and decimal values are allowed, such as 5 for a half space and 2.5 for a quarter space. Interline space is measured from the middle of a staff line.
        ///
        ///Distances in a MusicXML file are measured in tenths of staff space. Tenths are then scaled to millimeters within the scaling element, used in the defaults element at the start of a score. Individual staves can apply a scaling factor to adjust staff size. When a MusicXML element or attribute refers to tenths, it means the global tenths defined by the scaling element, not the local tenths as adjusted by the staff-size element.</para>
        /// </summary>
        [System.Xml.Serialization.XmlAttributeAttribute("default-x")]
        public decimal DefaultX { get; set; }

        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the DefaultX property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool DefaultXSpecified { get; set; }

        /// <summary>
        /// <para>The tenths type is a number representing tenths of interline staff space (positive or negative). Both integer and decimal values are allowed, such as 5 for a half space and 2.5 for a quarter space. Interline space is measured from the middle of a staff line.
        ///
        ///Distances in a MusicXML file are measured in tenths of staff space. Tenths are then scaled to millimeters within the scaling element, used in the defaults element at the start of a score. Individual staves can apply a scaling factor to adjust staff size. When a MusicXML element or attribute refers to tenths, it means the global tenths defined by the scaling element, not the local tenths as adjusted by the staff-size element.</para>
        /// </summary>
        [System.Xml.Serialization.XmlAttributeAttribute("default-y")]
        public decimal DefaultY { get; set; }

        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the DefaultY property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool DefaultYSpecified { get; set; }

        /// <summary>
        /// <para>The tenths type is a number representing tenths of interline staff space (positive or negative). Both integer and decimal values are allowed, such as 5 for a half space and 2.5 for a quarter space. Interline space is measured from the middle of a staff line.
        ///
        ///Distances in a MusicXML file are measured in tenths of staff space. Tenths are then scaled to millimeters within the scaling element, used in the defaults element at the start of a score. Individual staves can apply a scaling factor to adjust staff size. When a MusicXML element or attribute refers to tenths, it means the global tenths defined by the scaling element, not the local tenths as adjusted by the staff-size element.</para>
        /// </summary>
        [System.Xml.Serialization.XmlAttributeAttribute("relative-x")]
        public decimal RelativeX { get; set; }

        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the RelativeX property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool RelativeXSpecified { get; set; }

        /// <summary>
        /// <para>The tenths type is a number representing tenths of interline staff space (positive or negative). Both integer and decimal values are allowed, such as 5 for a half space and 2.5 for a quarter space. Interline space is measured from the middle of a staff line.
        ///
        ///Distances in a MusicXML file are measured in tenths of staff space. Tenths are then scaled to millimeters within the scaling element, used in the defaults element at the start of a score. Individual staves can apply a scaling factor to adjust staff size. When a MusicXML element or attribute refers to tenths, it means the global tenths defined by the scaling element, not the local tenths as adjusted by the staff-size element.</para>
        /// </summary>
        [System.Xml.Serialization.XmlAttributeAttribute("relative-y")]
        public decimal RelativeY { get; set; }

        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the RelativeY property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool RelativeYSpecified { get; set; }

        /// <summary>
        /// <para>The font-family is a comma-separated list of font names. These can be specific font styles such as Maestro or Opus, or one of several generic font styles: music, engraved, handwritten, text, serif, sans-serif, handwritten, cursive, fantasy, and monospace. The music, engraved, and handwritten values refer to music fonts; the rest refer to text fonts. The fantasy style refers to decorative text such as found in older German-style printing.</para>
        /// <para xml:lang="en">Pattern: [^,]+(, ?[^,]+)*.</para>
        /// </summary>
        [System.ComponentModel.DataAnnotations.RegularExpressionAttribute("[^,]+(, ?[^,]+)*")]
        [System.Xml.Serialization.XmlAttributeAttribute("font-family")]
        public string FontFamily { get; set; }

        [System.Xml.Serialization.XmlAttributeAttribute("font-style")]
        public FontStyle FontStyle { get; set; }

        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the FontStyle property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool FontStyleSpecified { get; set; }

        /// <summary>
        /// <para>The font-size can be one of the CSS font sizes (xx-small, x-small, small, medium, large, x-large, xx-large) or a numeric point size.</para>
        /// </summary>
        [System.Xml.Serialization.XmlAttributeAttribute("font-size")]
        public string FontSize { get; set; }

        [System.Xml.Serialization.XmlAttributeAttribute("font-weight")]
        public FontWeight FontWeight { get; set; }

        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the FontWeight property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool FontWeightSpecified { get; set; }

        /// <summary>
        /// <para>The color type indicates the color of an element. Color may be represented as hexadecimal RGB triples, as in HTML, or as hexadecimal ARGB tuples, with the A indicating alpha of transparency. An alpha value of 00 is totally transparent; FF is totally opaque. If RGB is used, the A value is assumed to be FF.
        ///
        ///For instance, the RGB value "#800080" represents purple. An ARGB value of "#40800080" would be a transparent purple.
        ///
        ///As in SVG 1.1, colors are defined in terms of the sRGB color space (IEC 61966).</para>
        /// <para xml:lang="en">Pattern: #[\dA-F]{6}([\dA-F][\dA-F])?.</para>
        /// </summary>
        [System.ComponentModel.DataAnnotations.RegularExpressionAttribute("#[\\dA-F]{6}([\\dA-F][\\dA-F])?")]
        [System.Xml.Serialization.XmlAttributeAttribute("color")]
        public string Color { get; set; }

        [System.Xml.Serialization.XmlAttributeAttribute("halign")]
        public LeftCenterRight Halign { get; set; }

        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the Halign property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool HalignSpecified { get; set; }

        [System.Xml.Serialization.XmlAttributeAttribute("valign")]
        public Valign Valign { get; set; }

        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the Valign property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool ValignSpecified { get; set; }
    }

    /// <summary>
    /// <para>The empty-print-style-align-id type represents an empty element with print-style-align and optional-unique-id attribute groups.</para>
    /// </summary>
    [System.ComponentModel.DescriptionAttribute("The empty-print-style-align-id type represents an empty element with print-style-" +
        "align and optional-unique-id attribute groups.")]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XmlSchemaClassGenerator", "2.1.1142.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute("empty-print-style-align-id", Namespace="")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class EmptyPrintStyleAlignId : IPrintStyleAlign, IOptionalUniqueId
    {

        /// <summary>
        /// <para>The tenths type is a number representing tenths of interline staff space (positive or negative). Both integer and decimal values are allowed, such as 5 for a half space and 2.5 for a quarter space. Interline space is measured from the middle of a staff line.
        ///
        ///Distances in a MusicXML file are measured in tenths of staff space. Tenths are then scaled to millimeters within the scaling element, used in the defaults element at the start of a score. Individual staves can apply a scaling factor to adjust staff size. When a MusicXML element or attribute refers to tenths, it means the global tenths defined by the scaling element, not the local tenths as adjusted by the staff-size element.</para>
        /// </summary>
        [System.Xml.Serialization.XmlAttributeAttribute("default-x")]
        public decimal DefaultX { get; set; }

        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the DefaultX property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool DefaultXSpecified { get; set; }

        /// <summary>
        /// <para>The tenths type is a number representing tenths of interline staff space (positive or negative). Both integer and decimal values are allowed, such as 5 for a half space and 2.5 for a quarter space. Interline space is measured from the middle of a staff line.
        ///
        ///Distances in a MusicXML file are measured in tenths of staff space. Tenths are then scaled to millimeters within the scaling element, used in the defaults element at the start of a score. Individual staves can apply a scaling factor to adjust staff size. When a MusicXML element or attribute refers to tenths, it means the global tenths defined by the scaling element, not the local tenths as adjusted by the staff-size element.</para>
        /// </summary>
        [System.Xml.Serialization.XmlAttributeAttribute("default-y")]
        public decimal DefaultY { get; set; }

        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the DefaultY property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool DefaultYSpecified { get; set; }

        /// <summary>
        /// <para>The tenths type is a number representing tenths of interline staff space (positive or negative). Both integer and decimal values are allowed, such as 5 for a half space and 2.5 for a quarter space. Interline space is measured from the middle of a staff line.
        ///
        ///Distances in a MusicXML file are measured in tenths of staff space. Tenths are then scaled to millimeters within the scaling element, used in the defaults element at the start of a score. Individual staves can apply a scaling factor to adjust staff size. When a MusicXML element or attribute refers to tenths, it means the global tenths defined by the scaling element, not the local tenths as adjusted by the staff-size element.</para>
        /// </summary>
        [System.Xml.Serialization.XmlAttributeAttribute("relative-x")]
        public decimal RelativeX { get; set; }

        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the RelativeX property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool RelativeXSpecified { get; set; }

        /// <summary>
        /// <para>The tenths type is a number representing tenths of interline staff space (positive or negative). Both integer and decimal values are allowed, such as 5 for a half space and 2.5 for a quarter space. Interline space is measured from the middle of a staff line.
        ///
        ///Distances in a MusicXML file are measured in tenths of staff space. Tenths are then scaled to millimeters within the scaling element, used in the defaults element at the start of a score. Individual staves can apply a scaling factor to adjust staff size. When a MusicXML element or attribute refers to tenths, it means the global tenths defined by the scaling element, not the local tenths as adjusted by the staff-size element.</para>
        /// </summary>
        [System.Xml.Serialization.XmlAttributeAttribute("relative-y")]
        public decimal RelativeY { get; set; }

        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the RelativeY property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool RelativeYSpecified { get; set; }

        /// <summary>
        /// <para>The font-family is a comma-separated list of font names. These can be specific font styles such as Maestro or Opus, or one of several generic font styles: music, engraved, handwritten, text, serif, sans-serif, handwritten, cursive, fantasy, and monospace. The music, engraved, and handwritten values refer to music fonts; the rest refer to text fonts. The fantasy style refers to decorative text such as found in older German-style printing.</para>
        /// <para xml:lang="en">Pattern: [^,]+(, ?[^,]+)*.</para>
        /// </summary>
        [System.ComponentModel.DataAnnotations.RegularExpressionAttribute("[^,]+(, ?[^,]+)*")]
        [System.Xml.Serialization.XmlAttributeAttribute("font-family")]
        public string FontFamily { get; set; }

        [System.Xml.Serialization.XmlAttributeAttribute("font-style")]
        public FontStyle FontStyle { get; set; }

        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the FontStyle property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool FontStyleSpecified { get; set; }

        /// <summary>
        /// <para>The font-size can be one of the CSS font sizes (xx-small, x-small, small, medium, large, x-large, xx-large) or a numeric point size.</para>
        /// </summary>
        [System.Xml.Serialization.XmlAttributeAttribute("font-size")]
        public string FontSize { get; set; }

        [System.Xml.Serialization.XmlAttributeAttribute("font-weight")]
        public FontWeight FontWeight { get; set; }

        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the FontWeight property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool FontWeightSpecified { get; set; }

        /// <summary>
        /// <para>The color type indicates the color of an element. Color may be represented as hexadecimal RGB triples, as in HTML, or as hexadecimal ARGB tuples, with the A indicating alpha of transparency. An alpha value of 00 is totally transparent; FF is totally opaque. If RGB is used, the A value is assumed to be FF.
        ///
        ///For instance, the RGB value "#800080" represents purple. An ARGB value of "#40800080" would be a transparent purple.
        ///
        ///As in SVG 1.1, colors are defined in terms of the sRGB color space (IEC 61966).</para>
        /// <para xml:lang="en">Pattern: #[\dA-F]{6}([\dA-F][\dA-F])?.</para>
        /// </summary>
        [System.ComponentModel.DataAnnotations.RegularExpressionAttribute("#[\\dA-F]{6}([\\dA-F][\\dA-F])?")]
        [System.Xml.Serialization.XmlAttributeAttribute("color")]
        public string Color { get; set; }

        [System.Xml.Serialization.XmlAttributeAttribute("halign")]
        public LeftCenterRight Halign { get; set; }

        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the Halign property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool HalignSpecified { get; set; }

        [System.Xml.Serialization.XmlAttributeAttribute("valign")]
        public Valign Valign { get; set; }

        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the Valign property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool ValignSpecified { get; set; }

        [System.Xml.Serialization.XmlAttributeAttribute("id")]
        public string Id { get; set; }
    }

    /// <summary>
    /// <para>The empty-print-style-align-object type represents an empty element with print-object and print-style-align attribute groups.</para>
    /// </summary>
    [System.ComponentModel.DescriptionAttribute("The empty-print-style-align-object type represents an empty element with print-ob" +
        "ject and print-style-align attribute groups.")]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XmlSchemaClassGenerator", "2.1.1142.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute("empty-print-object-style-align", Namespace="")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class EmptyPrintObjectStyleAlign : IPrintObject, IPrintStyleAlign
    {

        [System.Xml.Serialization.XmlAttributeAttribute("print-object")]
        public YesNo PrintObject { get; set; }

        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the PrintObject property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool PrintObjectSpecified { get; set; }

        /// <summary>
        /// <para>The tenths type is a number representing tenths of interline staff space (positive or negative). Both integer and decimal values are allowed, such as 5 for a half space and 2.5 for a quarter space. Interline space is measured from the middle of a staff line.
        ///
        ///Distances in a MusicXML file are measured in tenths of staff space. Tenths are then scaled to millimeters within the scaling element, used in the defaults element at the start of a score. Individual staves can apply a scaling factor to adjust staff size. When a MusicXML element or attribute refers to tenths, it means the global tenths defined by the scaling element, not the local tenths as adjusted by the staff-size element.</para>
        /// </summary>
        [System.Xml.Serialization.XmlAttributeAttribute("default-x")]
        public decimal DefaultX { get; set; }

        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the DefaultX property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool DefaultXSpecified { get; set; }

        /// <summary>
        /// <para>The tenths type is a number representing tenths of interline staff space (positive or negative). Both integer and decimal values are allowed, such as 5 for a half space and 2.5 for a quarter space. Interline space is measured from the middle of a staff line.
        ///
        ///Distances in a MusicXML file are measured in tenths of staff space. Tenths are then scaled to millimeters within the scaling element, used in the defaults element at the start of a score. Individual staves can apply a scaling factor to adjust staff size. When a MusicXML element or attribute refers to tenths, it means the global tenths defined by the scaling element, not the local tenths as adjusted by the staff-size element.</para>
        /// </summary>
        [System.Xml.Serialization.XmlAttributeAttribute("default-y")]
        public decimal DefaultY { get; set; }

        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the DefaultY property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool DefaultYSpecified { get; set; }

        /// <summary>
        /// <para>The tenths type is a number representing tenths of interline staff space (positive or negative). Both integer and decimal values are allowed, such as 5 for a half space and 2.5 for a quarter space. Interline space is measured from the middle of a staff line.
        ///
        ///Distances in a MusicXML file are measured in tenths of staff space. Tenths are then scaled to millimeters within the scaling element, used in the defaults element at the start of a score. Individual staves can apply a scaling factor to adjust staff size. When a MusicXML element or attribute refers to tenths, it means the global tenths defined by the scaling element, not the local tenths as adjusted by the staff-size element.</para>
        /// </summary>
        [System.Xml.Serialization.XmlAttributeAttribute("relative-x")]
        public decimal RelativeX { get; set; }

        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the RelativeX property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool RelativeXSpecified { get; set; }

        /// <summary>
        /// <para>The tenths type is a number representing tenths of interline staff space (positive or negative). Both integer and decimal values are allowed, such as 5 for a half space and 2.5 for a quarter space. Interline space is measured from the middle of a staff line.
        ///
        ///Distances in a MusicXML file are measured in tenths of staff space. Tenths are then scaled to millimeters within the scaling element, used in the defaults element at the start of a score. Individual staves can apply a scaling factor to adjust staff size. When a MusicXML element or attribute refers to tenths, it means the global tenths defined by the scaling element, not the local tenths as adjusted by the staff-size element.</para>
        /// </summary>
        [System.Xml.Serialization.XmlAttributeAttribute("relative-y")]
        public decimal RelativeY { get; set; }

        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the RelativeY property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool RelativeYSpecified { get; set; }

        /// <summary>
        /// <para>The font-family is a comma-separated list of font names. These can be specific font styles such as Maestro or Opus, or one of several generic font styles: music, engraved, handwritten, text, serif, sans-serif, handwritten, cursive, fantasy, and monospace. The music, engraved, and handwritten values refer to music fonts; the rest refer to text fonts. The fantasy style refers to decorative text such as found in older German-style printing.</para>
        /// <para xml:lang="en">Pattern: [^,]+(, ?[^,]+)*.</para>
        /// </summary>
        [System.ComponentModel.DataAnnotations.RegularExpressionAttribute("[^,]+(, ?[^,]+)*")]
        [System.Xml.Serialization.XmlAttributeAttribute("font-family")]
        public string FontFamily { get; set; }

        [System.Xml.Serialization.XmlAttributeAttribute("font-style")]
        public FontStyle FontStyle { get; set; }

        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the FontStyle property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool FontStyleSpecified { get; set; }

        /// <summary>
        /// <para>The font-size can be one of the CSS font sizes (xx-small, x-small, small, medium, large, x-large, xx-large) or a numeric point size.</para>
        /// </summary>
        [System.Xml.Serialization.XmlAttributeAttribute("font-size")]
        public string FontSize { get; set; }

        [System.Xml.Serialization.XmlAttributeAttribute("font-weight")]
        public FontWeight FontWeight { get; set; }

        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the FontWeight property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool FontWeightSpecified { get; set; }

        /// <summary>
        /// <para>The color type indicates the color of an element. Color may be represented as hexadecimal RGB triples, as in HTML, or as hexadecimal ARGB tuples, with the A indicating alpha of transparency. An alpha value of 00 is totally transparent; FF is totally opaque. If RGB is used, the A value is assumed to be FF.
        ///
        ///For instance, the RGB value "#800080" represents purple. An ARGB value of "#40800080" would be a transparent purple.
        ///
        ///As in SVG 1.1, colors are defined in terms of the sRGB color space (IEC 61966).</para>
        /// <para xml:lang="en">Pattern: #[\dA-F]{6}([\dA-F][\dA-F])?.</para>
        /// </summary>
        [System.ComponentModel.DataAnnotations.RegularExpressionAttribute("#[\\dA-F]{6}([\\dA-F][\\dA-F])?")]
        [System.Xml.Serialization.XmlAttributeAttribute("color")]
        public string Color { get; set; }

        [System.Xml.Serialization.XmlAttributeAttribute("halign")]
        public LeftCenterRight Halign { get; set; }

        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the Halign property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool HalignSpecified { get; set; }

        [System.Xml.Serialization.XmlAttributeAttribute("valign")]
        public Valign Valign { get; set; }

        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the Valign property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool ValignSpecified { get; set; }
    }

    /// <summary>
    /// <para>The print-object attribute specifies whether or not to print an object (e.g. a note or a rest). It is yes by default.</para>
    /// </summary>
    [System.ComponentModel.DescriptionAttribute("The print-object attribute specifies whether or not to print an object (e.g. a no" +
        "te or a rest). It is yes by default.")]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XmlSchemaClassGenerator", "2.1.1142.0")]
    public partial interface IPrintObject
    {

        YesNo PrintObject
        {
            get;
            set;
        }
    }

    /// <summary>
    /// <para>The empty-trill-sound type represents an empty element with print-style, placement, and trill-sound attributes.</para>
    /// </summary>
    [System.ComponentModel.DescriptionAttribute("The empty-trill-sound type represents an empty element with print-style, placemen" +
        "t, and trill-sound attributes.")]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XmlSchemaClassGenerator", "2.1.1142.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute("empty-trill-sound", Namespace="")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(Mordent))]
    public partial class EmptyTrillSound : IPrintStyle, IPlacement, ITrillSound
    {

        /// <summary>
        /// <para>The tenths type is a number representing tenths of interline staff space (positive or negative). Both integer and decimal values are allowed, such as 5 for a half space and 2.5 for a quarter space. Interline space is measured from the middle of a staff line.
        ///
        ///Distances in a MusicXML file are measured in tenths of staff space. Tenths are then scaled to millimeters within the scaling element, used in the defaults element at the start of a score. Individual staves can apply a scaling factor to adjust staff size. When a MusicXML element or attribute refers to tenths, it means the global tenths defined by the scaling element, not the local tenths as adjusted by the staff-size element.</para>
        /// </summary>
        [System.Xml.Serialization.XmlAttributeAttribute("default-x")]
        public decimal DefaultX { get; set; }

        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the DefaultX property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool DefaultXSpecified { get; set; }

        /// <summary>
        /// <para>The tenths type is a number representing tenths of interline staff space (positive or negative). Both integer and decimal values are allowed, such as 5 for a half space and 2.5 for a quarter space. Interline space is measured from the middle of a staff line.
        ///
        ///Distances in a MusicXML file are measured in tenths of staff space. Tenths are then scaled to millimeters within the scaling element, used in the defaults element at the start of a score. Individual staves can apply a scaling factor to adjust staff size. When a MusicXML element or attribute refers to tenths, it means the global tenths defined by the scaling element, not the local tenths as adjusted by the staff-size element.</para>
        /// </summary>
        [System.Xml.Serialization.XmlAttributeAttribute("default-y")]
        public decimal DefaultY { get; set; }

        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the DefaultY property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool DefaultYSpecified { get; set; }

        /// <summary>
        /// <para>The tenths type is a number representing tenths of interline staff space (positive or negative). Both integer and decimal values are allowed, such as 5 for a half space and 2.5 for a quarter space. Interline space is measured from the middle of a staff line.
        ///
        ///Distances in a MusicXML file are measured in tenths of staff space. Tenths are then scaled to millimeters within the scaling element, used in the defaults element at the start of a score. Individual staves can apply a scaling factor to adjust staff size. When a MusicXML element or attribute refers to tenths, it means the global tenths defined by the scaling element, not the local tenths as adjusted by the staff-size element.</para>
        /// </summary>
        [System.Xml.Serialization.XmlAttributeAttribute("relative-x")]
        public decimal RelativeX { get; set; }

        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the RelativeX property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool RelativeXSpecified { get; set; }

        /// <summary>
        /// <para>The tenths type is a number representing tenths of interline staff space (positive or negative). Both integer and decimal values are allowed, such as 5 for a half space and 2.5 for a quarter space. Interline space is measured from the middle of a staff line.
        ///
        ///Distances in a MusicXML file are measured in tenths of staff space. Tenths are then scaled to millimeters within the scaling element, used in the defaults element at the start of a score. Individual staves can apply a scaling factor to adjust staff size. When a MusicXML element or attribute refers to tenths, it means the global tenths defined by the scaling element, not the local tenths as adjusted by the staff-size element.</para>
        /// </summary>
        [System.Xml.Serialization.XmlAttributeAttribute("relative-y")]
        public decimal RelativeY { get; set; }

        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the RelativeY property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool RelativeYSpecified { get; set; }

        /// <summary>
        /// <para>The font-family is a comma-separated list of font names. These can be specific font styles such as Maestro or Opus, or one of several generic font styles: music, engraved, handwritten, text, serif, sans-serif, handwritten, cursive, fantasy, and monospace. The music, engraved, and handwritten values refer to music fonts; the rest refer to text fonts. The fantasy style refers to decorative text such as found in older German-style printing.</para>
        /// <para xml:lang="en">Pattern: [^,]+(, ?[^,]+)*.</para>
        /// </summary>
        [System.ComponentModel.DataAnnotations.RegularExpressionAttribute("[^,]+(, ?[^,]+)*")]
        [System.Xml.Serialization.XmlAttributeAttribute("font-family")]
        public string FontFamily { get; set; }

        [System.Xml.Serialization.XmlAttributeAttribute("font-style")]
        public FontStyle FontStyle { get; set; }

        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the FontStyle property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool FontStyleSpecified { get; set; }

        /// <summary>
        /// <para>The font-size can be one of the CSS font sizes (xx-small, x-small, small, medium, large, x-large, xx-large) or a numeric point size.</para>
        /// </summary>
        [System.Xml.Serialization.XmlAttributeAttribute("font-size")]
        public string FontSize { get; set; }

        [System.Xml.Serialization.XmlAttributeAttribute("font-weight")]
        public FontWeight FontWeight { get; set; }

        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the FontWeight property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool FontWeightSpecified { get; set; }

        /// <summary>
        /// <para>The color type indicates the color of an element. Color may be represented as hexadecimal RGB triples, as in HTML, or as hexadecimal ARGB tuples, with the A indicating alpha of transparency. An alpha value of 00 is totally transparent; FF is totally opaque. If RGB is used, the A value is assumed to be FF.
        ///
        ///For instance, the RGB value "#800080" represents purple. An ARGB value of "#40800080" would be a transparent purple.
        ///
        ///As in SVG 1.1, colors are defined in terms of the sRGB color space (IEC 61966).</para>
        /// <para xml:lang="en">Pattern: #[\dA-F]{6}([\dA-F][\dA-F])?.</para>
        /// </summary>
        [System.ComponentModel.DataAnnotations.RegularExpressionAttribute("#[\\dA-F]{6}([\\dA-F][\\dA-F])?")]
        [System.Xml.Serialization.XmlAttributeAttribute("color")]
        public string Color { get; set; }

        [System.Xml.Serialization.XmlAttributeAttribute("placement")]
        public AboveBelow Placement { get; set; }

        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the Placement property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool PlacementSpecified { get; set; }

        [System.Xml.Serialization.XmlAttributeAttribute("start-note")]
        public StartNote StartNote { get; set; }

        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the StartNote property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool StartNoteSpecified { get; set; }

        [System.Xml.Serialization.XmlAttributeAttribute("trill-step")]
        public TrillStep TrillStep { get; set; }

        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the TrillStep property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool TrillStepSpecified { get; set; }

        [System.Xml.Serialization.XmlAttributeAttribute("two-note-turn")]
        public TwoNoteTurn TwoNoteTurn { get; set; }

        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the TwoNoteTurn property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool TwoNoteTurnSpecified { get; set; }

        [System.Xml.Serialization.XmlAttributeAttribute("accelerate")]
        public YesNo Accelerate { get; set; }

        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the Accelerate property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool AccelerateSpecified { get; set; }

        /// <summary>
        /// <para>The trill-beats type specifies the beats used in a trill-sound or bend-sound attribute group. It is a decimal value with a minimum value of 2.</para>
        /// <para xml:lang="en">Minimum inclusive value: 2.</para>
        /// </summary>
        [System.Xml.Serialization.XmlAttributeAttribute("beats")]
        public decimal Beats { get; set; }

        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the Beats property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool BeatsSpecified { get; set; }

        /// <summary>
        /// <para>The percent type specifies a percentage from 0 to 100.</para>
        /// <para xml:lang="en">Minimum inclusive value: 0.</para>
        /// <para xml:lang="en">Maximum inclusive value: 100.</para>
        /// </summary>
        [System.ComponentModel.DataAnnotations.RangeAttribute(typeof(decimal), "0", "100")]
        [System.Xml.Serialization.XmlAttributeAttribute("second-beat")]
        public decimal SecondBeat { get; set; }

        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the SecondBeat property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool SecondBeatSpecified { get; set; }

        /// <summary>
        /// <para>The percent type specifies a percentage from 0 to 100.</para>
        /// <para xml:lang="en">Minimum inclusive value: 0.</para>
        /// <para xml:lang="en">Maximum inclusive value: 100.</para>
        /// </summary>
        [System.ComponentModel.DataAnnotations.RangeAttribute(typeof(decimal), "0", "100")]
        [System.Xml.Serialization.XmlAttributeAttribute("last-beat")]
        public decimal LastBeat { get; set; }

        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the LastBeat property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool LastBeatSpecified { get; set; }
    }

    /// <summary>
    /// <para>The trill-sound attribute group includes attributes used to guide the sound of trills, mordents, turns, shakes, and wavy lines. The default choices are:
    ///
    ///	start-note = "upper"
    ///	trill-step = "whole"
    ///	two-note-turn = "none"
    ///	accelerate = "no"
    ///	beats = "4".
    ///
    ///Second-beat and last-beat are percentages for landing on the indicated beat, with defaults of 25 and 75 respectively.
    ///
    ///For mordent and inverted-mordent elements, the defaults are different:
    ///
    ///	The default start-note is "main", not "upper".
    ///	The default for beats is "3", not "4".
    ///	The default for second-beat is "12", not "25".
    ///	The default for last-beat is "24", not "75".</para>
    /// </summary>
    [System.ComponentModel.DescriptionAttribute(@"The trill-sound attribute group includes attributes used to guide the sound of trills, mordents, turns, shakes, and wavy lines. The default choices are: start-note = ""upper"" trill-step = ""whole"" two-note-turn = ""none"" accelerate = ""no"" beats = ""4"". Second-beat and last-beat are percentages for landing on the indicated beat, with defaults of 25 and 75 respectively. For mordent and inverted-mordent elements, the defaults are different: The default start-note is ""main"", not ""upper"". The default for beats is ""3"", not ""4"". The default for second-beat is ""12"", not ""25"". The default for last-beat is ""24"", not ""75"".")]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XmlSchemaClassGenerator", "2.1.1142.0")]
    public partial interface ITrillSound
    {

        StartNote StartNote
        {
            get;
            set;
        }

        TrillStep TrillStep
        {
            get;
            set;
        }

        TwoNoteTurn TwoNoteTurn
        {
            get;
            set;
        }

        YesNo Accelerate
        {
            get;
            set;
        }

        /// <summary>
        /// <para>The trill-beats type specifies the beats used in a trill-sound or bend-sound attribute group. It is a decimal value with a minimum value of 2.</para>
        /// <para xml:lang="en">Minimum inclusive value: 2.</para>
        /// </summary>
        decimal Beats
        {
            get;
            set;
        }

        /// <summary>
        /// <para>The percent type specifies a percentage from 0 to 100.</para>
        /// <para xml:lang="en">Minimum inclusive value: 0.</para>
        /// <para xml:lang="en">Maximum inclusive value: 100.</para>
        /// </summary>
        [System.ComponentModel.DataAnnotations.RangeAttribute(typeof(decimal), "0", "100")]
        decimal SecondBeat
        {
            get;
            set;
        }

        /// <summary>
        /// <para>The percent type specifies a percentage from 0 to 100.</para>
        /// <para xml:lang="en">Minimum inclusive value: 0.</para>
        /// <para xml:lang="en">Maximum inclusive value: 100.</para>
        /// </summary>
        [System.ComponentModel.DataAnnotations.RangeAttribute(typeof(decimal), "0", "100")]
        decimal LastBeat
        {
            get;
            set;
        }
    }

    /// <summary>
    /// <para>The horizontal-turn type represents turn elements that are horizontal rather than vertical. These are empty elements with print-style, placement, trill-sound, and slash attributes. If the slash attribute is yes, then a vertical line is used to slash the turn. It is no if not specified.</para>
    /// </summary>
    [System.ComponentModel.DescriptionAttribute(@"The horizontal-turn type represents turn elements that are horizontal rather than vertical. These are empty elements with print-style, placement, trill-sound, and slash attributes. If the slash attribute is yes, then a vertical line is used to slash the turn. It is no if not specified.")]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XmlSchemaClassGenerator", "2.1.1142.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute("horizontal-turn", Namespace="")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class HorizontalTurn : IPrintStyle, IPlacement, ITrillSound
    {

        /// <summary>
        /// <para>The tenths type is a number representing tenths of interline staff space (positive or negative). Both integer and decimal values are allowed, such as 5 for a half space and 2.5 for a quarter space. Interline space is measured from the middle of a staff line.
        ///
        ///Distances in a MusicXML file are measured in tenths of staff space. Tenths are then scaled to millimeters within the scaling element, used in the defaults element at the start of a score. Individual staves can apply a scaling factor to adjust staff size. When a MusicXML element or attribute refers to tenths, it means the global tenths defined by the scaling element, not the local tenths as adjusted by the staff-size element.</para>
        /// </summary>
        [System.Xml.Serialization.XmlAttributeAttribute("default-x")]
        public decimal DefaultX { get; set; }

        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the DefaultX property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool DefaultXSpecified { get; set; }

        /// <summary>
        /// <para>The tenths type is a number representing tenths of interline staff space (positive or negative). Both integer and decimal values are allowed, such as 5 for a half space and 2.5 for a quarter space. Interline space is measured from the middle of a staff line.
        ///
        ///Distances in a MusicXML file are measured in tenths of staff space. Tenths are then scaled to millimeters within the scaling element, used in the defaults element at the start of a score. Individual staves can apply a scaling factor to adjust staff size. When a MusicXML element or attribute refers to tenths, it means the global tenths defined by the scaling element, not the local tenths as adjusted by the staff-size element.</para>
        /// </summary>
        [System.Xml.Serialization.XmlAttributeAttribute("default-y")]
        public decimal DefaultY { get; set; }

        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the DefaultY property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool DefaultYSpecified { get; set; }

        /// <summary>
        /// <para>The tenths type is a number representing tenths of interline staff space (positive or negative). Both integer and decimal values are allowed, such as 5 for a half space and 2.5 for a quarter space. Interline space is measured from the middle of a staff line.
        ///
        ///Distances in a MusicXML file are measured in tenths of staff space. Tenths are then scaled to millimeters within the scaling element, used in the defaults element at the start of a score. Individual staves can apply a scaling factor to adjust staff size. When a MusicXML element or attribute refers to tenths, it means the global tenths defined by the scaling element, not the local tenths as adjusted by the staff-size element.</para>
        /// </summary>
        [System.Xml.Serialization.XmlAttributeAttribute("relative-x")]
        public decimal RelativeX { get; set; }

        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the RelativeX property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool RelativeXSpecified { get; set; }

        /// <summary>
        /// <para>The tenths type is a number representing tenths of interline staff space (positive or negative). Both integer and decimal values are allowed, such as 5 for a half space and 2.5 for a quarter space. Interline space is measured from the middle of a staff line.
        ///
        ///Distances in a MusicXML file are measured in tenths of staff space. Tenths are then scaled to millimeters within the scaling element, used in the defaults element at the start of a score. Individual staves can apply a scaling factor to adjust staff size. When a MusicXML element or attribute refers to tenths, it means the global tenths defined by the scaling element, not the local tenths as adjusted by the staff-size element.</para>
        /// </summary>
        [System.Xml.Serialization.XmlAttributeAttribute("relative-y")]
        public decimal RelativeY { get; set; }

        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the RelativeY property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool RelativeYSpecified { get; set; }

        /// <summary>
        /// <para>The font-family is a comma-separated list of font names. These can be specific font styles such as Maestro or Opus, or one of several generic font styles: music, engraved, handwritten, text, serif, sans-serif, handwritten, cursive, fantasy, and monospace. The music, engraved, and handwritten values refer to music fonts; the rest refer to text fonts. The fantasy style refers to decorative text such as found in older German-style printing.</para>
        /// <para xml:lang="en">Pattern: [^,]+(, ?[^,]+)*.</para>
        /// </summary>
        [System.ComponentModel.DataAnnotations.RegularExpressionAttribute("[^,]+(, ?[^,]+)*")]
        [System.Xml.Serialization.XmlAttributeAttribute("font-family")]
        public string FontFamily { get; set; }

        [System.Xml.Serialization.XmlAttributeAttribute("font-style")]
        public FontStyle FontStyle { get; set; }

        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the FontStyle property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool FontStyleSpecified { get; set; }

        /// <summary>
        /// <para>The font-size can be one of the CSS font sizes (xx-small, x-small, small, medium, large, x-large, xx-large) or a numeric point size.</para>
        /// </summary>
        [System.Xml.Serialization.XmlAttributeAttribute("font-size")]
        public string FontSize { get; set; }

        [System.Xml.Serialization.XmlAttributeAttribute("font-weight")]
        public FontWeight FontWeight { get; set; }

        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the FontWeight property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool FontWeightSpecified { get; set; }

        /// <summary>
        /// <para>The color type indicates the color of an element. Color may be represented as hexadecimal RGB triples, as in HTML, or as hexadecimal ARGB tuples, with the A indicating alpha of transparency. An alpha value of 00 is totally transparent; FF is totally opaque. If RGB is used, the A value is assumed to be FF.
        ///
        ///For instance, the RGB value "#800080" represents purple. An ARGB value of "#40800080" would be a transparent purple.
        ///
        ///As in SVG 1.1, colors are defined in terms of the sRGB color space (IEC 61966).</para>
        /// <para xml:lang="en">Pattern: #[\dA-F]{6}([\dA-F][\dA-F])?.</para>
        /// </summary>
        [System.ComponentModel.DataAnnotations.RegularExpressionAttribute("#[\\dA-F]{6}([\\dA-F][\\dA-F])?")]
        [System.Xml.Serialization.XmlAttributeAttribute("color")]
        public string Color { get; set; }

        [System.Xml.Serialization.XmlAttributeAttribute("placement")]
        public AboveBelow Placement { get; set; }

        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the Placement property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool PlacementSpecified { get; set; }

        [System.Xml.Serialization.XmlAttributeAttribute("start-note")]
        public StartNote StartNote { get; set; }

        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the StartNote property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool StartNoteSpecified { get; set; }

        [System.Xml.Serialization.XmlAttributeAttribute("trill-step")]
        public TrillStep TrillStep { get; set; }

        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the TrillStep property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool TrillStepSpecified { get; set; }

        [System.Xml.Serialization.XmlAttributeAttribute("two-note-turn")]
        public TwoNoteTurn TwoNoteTurn { get; set; }

        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the TwoNoteTurn property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool TwoNoteTurnSpecified { get; set; }

        [System.Xml.Serialization.XmlAttributeAttribute("accelerate")]
        public YesNo Accelerate { get; set; }

        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the Accelerate property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool AccelerateSpecified { get; set; }

        /// <summary>
        /// <para>The trill-beats type specifies the beats used in a trill-sound or bend-sound attribute group. It is a decimal value with a minimum value of 2.</para>
        /// <para xml:lang="en">Minimum inclusive value: 2.</para>
        /// </summary>
        [System.Xml.Serialization.XmlAttributeAttribute("beats")]
        public decimal Beats { get; set; }

        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the Beats property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool BeatsSpecified { get; set; }

        /// <summary>
        /// <para>The percent type specifies a percentage from 0 to 100.</para>
        /// <para xml:lang="en">Minimum inclusive value: 0.</para>
        /// <para xml:lang="en">Maximum inclusive value: 100.</para>
        /// </summary>
        [System.ComponentModel.DataAnnotations.RangeAttribute(typeof(decimal), "0", "100")]
        [System.Xml.Serialization.XmlAttributeAttribute("second-beat")]
        public decimal SecondBeat { get; set; }

        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the SecondBeat property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool SecondBeatSpecified { get; set; }

        /// <summary>
        /// <para>The percent type specifies a percentage from 0 to 100.</para>
        /// <para xml:lang="en">Minimum inclusive value: 0.</para>
        /// <para xml:lang="en">Maximum inclusive value: 100.</para>
        /// </summary>
        [System.ComponentModel.DataAnnotations.RangeAttribute(typeof(decimal), "0", "100")]
        [System.Xml.Serialization.XmlAttributeAttribute("last-beat")]
        public decimal LastBeat { get; set; }

        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the LastBeat property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool LastBeatSpecified { get; set; }

        [System.Xml.Serialization.XmlAttributeAttribute("slash")]
        public YesNo Slash { get; set; }

        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the Slash property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool SlashSpecified { get; set; }
    }

    /// <summary>
    /// <para>The fermata text content represents the shape of the fermata sign. An empty fermata element represents a normal fermata. The fermata type is upright if not specified.</para>
    /// </summary>
    [System.ComponentModel.DescriptionAttribute("The fermata text content represents the shape of the fermata sign. An empty ferma" +
        "ta element represents a normal fermata. The fermata type is upright if not speci" +
        "fied.")]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XmlSchemaClassGenerator", "2.1.1142.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute("fermata", Namespace="")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class Fermata : IPrintStyle, IOptionalUniqueId
    {

        /// <summary>
        /// <para xml:lang="en">Gets or sets the text value.</para>
        /// </summary>
        [System.Xml.Serialization.XmlTextAttribute()]
        public FermataShape Value { get; set; }

        [System.Xml.Serialization.XmlAttributeAttribute("type")]
        public UprightInverted Type { get; set; }

        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the Type property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool TypeSpecified { get; set; }

        /// <summary>
        /// <para>The tenths type is a number representing tenths of interline staff space (positive or negative). Both integer and decimal values are allowed, such as 5 for a half space and 2.5 for a quarter space. Interline space is measured from the middle of a staff line.
        ///
        ///Distances in a MusicXML file are measured in tenths of staff space. Tenths are then scaled to millimeters within the scaling element, used in the defaults element at the start of a score. Individual staves can apply a scaling factor to adjust staff size. When a MusicXML element or attribute refers to tenths, it means the global tenths defined by the scaling element, not the local tenths as adjusted by the staff-size element.</para>
        /// </summary>
        [System.Xml.Serialization.XmlAttributeAttribute("default-x")]
        public decimal DefaultX { get; set; }

        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the DefaultX property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool DefaultXSpecified { get; set; }

        /// <summary>
        /// <para>The tenths type is a number representing tenths of interline staff space (positive or negative). Both integer and decimal values are allowed, such as 5 for a half space and 2.5 for a quarter space. Interline space is measured from the middle of a staff line.
        ///
        ///Distances in a MusicXML file are measured in tenths of staff space. Tenths are then scaled to millimeters within the scaling element, used in the defaults element at the start of a score. Individual staves can apply a scaling factor to adjust staff size. When a MusicXML element or attribute refers to tenths, it means the global tenths defined by the scaling element, not the local tenths as adjusted by the staff-size element.</para>
        /// </summary>
        [System.Xml.Serialization.XmlAttributeAttribute("default-y")]
        public decimal DefaultY { get; set; }

        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the DefaultY property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool DefaultYSpecified { get; set; }

        /// <summary>
        /// <para>The tenths type is a number representing tenths of interline staff space (positive or negative). Both integer and decimal values are allowed, such as 5 for a half space and 2.5 for a quarter space. Interline space is measured from the middle of a staff line.
        ///
        ///Distances in a MusicXML file are measured in tenths of staff space. Tenths are then scaled to millimeters within the scaling element, used in the defaults element at the start of a score. Individual staves can apply a scaling factor to adjust staff size. When a MusicXML element or attribute refers to tenths, it means the global tenths defined by the scaling element, not the local tenths as adjusted by the staff-size element.</para>
        /// </summary>
        [System.Xml.Serialization.XmlAttributeAttribute("relative-x")]
        public decimal RelativeX { get; set; }

        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the RelativeX property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool RelativeXSpecified { get; set; }

        /// <summary>
        /// <para>The tenths type is a number representing tenths of interline staff space (positive or negative). Both integer and decimal values are allowed, such as 5 for a half space and 2.5 for a quarter space. Interline space is measured from the middle of a staff line.
        ///
        ///Distances in a MusicXML file are measured in tenths of staff space. Tenths are then scaled to millimeters within the scaling element, used in the defaults element at the start of a score. Individual staves can apply a scaling factor to adjust staff size. When a MusicXML element or attribute refers to tenths, it means the global tenths defined by the scaling element, not the local tenths as adjusted by the staff-size element.</para>
        /// </summary>
        [System.Xml.Serialization.XmlAttributeAttribute("relative-y")]
        public decimal RelativeY { get; set; }

        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the RelativeY property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool RelativeYSpecified { get; set; }

        /// <summary>
        /// <para>The font-family is a comma-separated list of font names. These can be specific font styles such as Maestro or Opus, or one of several generic font styles: music, engraved, handwritten, text, serif, sans-serif, handwritten, cursive, fantasy, and monospace. The music, engraved, and handwritten values refer to music fonts; the rest refer to text fonts. The fantasy style refers to decorative text such as found in older German-style printing.</para>
        /// <para xml:lang="en">Pattern: [^,]+(, ?[^,]+)*.</para>
        /// </summary>
        [System.ComponentModel.DataAnnotations.RegularExpressionAttribute("[^,]+(, ?[^,]+)*")]
        [System.Xml.Serialization.XmlAttributeAttribute("font-family")]
        public string FontFamily { get; set; }

        [System.Xml.Serialization.XmlAttributeAttribute("font-style")]
        public FontStyle FontStyle { get; set; }

        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the FontStyle property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool FontStyleSpecified { get; set; }

        /// <summary>
        /// <para>The font-size can be one of the CSS font sizes (xx-small, x-small, small, medium, large, x-large, xx-large) or a numeric point size.</para>
        /// </summary>
        [System.Xml.Serialization.XmlAttributeAttribute("font-size")]
        public string FontSize { get; set; }

        [System.Xml.Serialization.XmlAttributeAttribute("font-weight")]
        public FontWeight FontWeight { get; set; }

        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the FontWeight property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool FontWeightSpecified { get; set; }

        /// <summary>
        /// <para>The color type indicates the color of an element. Color may be represented as hexadecimal RGB triples, as in HTML, or as hexadecimal ARGB tuples, with the A indicating alpha of transparency. An alpha value of 00 is totally transparent; FF is totally opaque. If RGB is used, the A value is assumed to be FF.
        ///
        ///For instance, the RGB value "#800080" represents purple. An ARGB value of "#40800080" would be a transparent purple.
        ///
        ///As in SVG 1.1, colors are defined in terms of the sRGB color space (IEC 61966).</para>
        /// <para xml:lang="en">Pattern: #[\dA-F]{6}([\dA-F][\dA-F])?.</para>
        /// </summary>
        [System.ComponentModel.DataAnnotations.RegularExpressionAttribute("#[\\dA-F]{6}([\\dA-F][\\dA-F])?")]
        [System.Xml.Serialization.XmlAttributeAttribute("color")]
        public string Color { get; set; }

        [System.Xml.Serialization.XmlAttributeAttribute("id")]
        public string Id { get; set; }
    }

    /// <summary>
    /// <para>Fingering is typically indicated 1,2,3,4,5. Multiple fingerings may be given, typically to substitute fingerings in the middle of a note. The substitution and alternate values are "no" if the attribute is not present. For guitar and other fretted instruments, the fingering element represents the fretting finger; the pluck element represents the plucking finger.</para>
    /// </summary>
    [System.ComponentModel.DescriptionAttribute(@"Fingering is typically indicated 1,2,3,4,5. Multiple fingerings may be given, typically to substitute fingerings in the middle of a note. The substitution and alternate values are ""no"" if the attribute is not present. For guitar and other fretted instruments, the fingering element represents the fretting finger; the pluck element represents the plucking finger.")]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XmlSchemaClassGenerator", "2.1.1142.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute("fingering", Namespace="")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class Fingering : IPrintStyle, IPlacement
    {

        /// <summary>
        /// <para xml:lang="en">Gets or sets the text value.</para>
        /// </summary>
        [System.Xml.Serialization.XmlTextAttribute()]
        public string Value { get; set; }

        [System.Xml.Serialization.XmlAttributeAttribute("substitution")]
        public YesNo Substitution { get; set; }

        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the Substitution property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool SubstitutionSpecified { get; set; }

        [System.Xml.Serialization.XmlAttributeAttribute("alternate")]
        public YesNo Alternate { get; set; }

        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the Alternate property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool AlternateSpecified { get; set; }

        /// <summary>
        /// <para>The tenths type is a number representing tenths of interline staff space (positive or negative). Both integer and decimal values are allowed, such as 5 for a half space and 2.5 for a quarter space. Interline space is measured from the middle of a staff line.
        ///
        ///Distances in a MusicXML file are measured in tenths of staff space. Tenths are then scaled to millimeters within the scaling element, used in the defaults element at the start of a score. Individual staves can apply a scaling factor to adjust staff size. When a MusicXML element or attribute refers to tenths, it means the global tenths defined by the scaling element, not the local tenths as adjusted by the staff-size element.</para>
        /// </summary>
        [System.Xml.Serialization.XmlAttributeAttribute("default-x")]
        public decimal DefaultX { get; set; }

        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the DefaultX property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool DefaultXSpecified { get; set; }

        /// <summary>
        /// <para>The tenths type is a number representing tenths of interline staff space (positive or negative). Both integer and decimal values are allowed, such as 5 for a half space and 2.5 for a quarter space. Interline space is measured from the middle of a staff line.
        ///
        ///Distances in a MusicXML file are measured in tenths of staff space. Tenths are then scaled to millimeters within the scaling element, used in the defaults element at the start of a score. Individual staves can apply a scaling factor to adjust staff size. When a MusicXML element or attribute refers to tenths, it means the global tenths defined by the scaling element, not the local tenths as adjusted by the staff-size element.</para>
        /// </summary>
        [System.Xml.Serialization.XmlAttributeAttribute("default-y")]
        public decimal DefaultY { get; set; }

        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the DefaultY property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool DefaultYSpecified { get; set; }

        /// <summary>
        /// <para>The tenths type is a number representing tenths of interline staff space (positive or negative). Both integer and decimal values are allowed, such as 5 for a half space and 2.5 for a quarter space. Interline space is measured from the middle of a staff line.
        ///
        ///Distances in a MusicXML file are measured in tenths of staff space. Tenths are then scaled to millimeters within the scaling element, used in the defaults element at the start of a score. Individual staves can apply a scaling factor to adjust staff size. When a MusicXML element or attribute refers to tenths, it means the global tenths defined by the scaling element, not the local tenths as adjusted by the staff-size element.</para>
        /// </summary>
        [System.Xml.Serialization.XmlAttributeAttribute("relative-x")]
        public decimal RelativeX { get; set; }

        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the RelativeX property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool RelativeXSpecified { get; set; }

        /// <summary>
        /// <para>The tenths type is a number representing tenths of interline staff space (positive or negative). Both integer and decimal values are allowed, such as 5 for a half space and 2.5 for a quarter space. Interline space is measured from the middle of a staff line.
        ///
        ///Distances in a MusicXML file are measured in tenths of staff space. Tenths are then scaled to millimeters within the scaling element, used in the defaults element at the start of a score. Individual staves can apply a scaling factor to adjust staff size. When a MusicXML element or attribute refers to tenths, it means the global tenths defined by the scaling element, not the local tenths as adjusted by the staff-size element.</para>
        /// </summary>
        [System.Xml.Serialization.XmlAttributeAttribute("relative-y")]
        public decimal RelativeY { get; set; }

        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the RelativeY property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool RelativeYSpecified { get; set; }

        /// <summary>
        /// <para>The font-family is a comma-separated list of font names. These can be specific font styles such as Maestro or Opus, or one of several generic font styles: music, engraved, handwritten, text, serif, sans-serif, handwritten, cursive, fantasy, and monospace. The music, engraved, and handwritten values refer to music fonts; the rest refer to text fonts. The fantasy style refers to decorative text such as found in older German-style printing.</para>
        /// <para xml:lang="en">Pattern: [^,]+(, ?[^,]+)*.</para>
        /// </summary>
        [System.ComponentModel.DataAnnotations.RegularExpressionAttribute("[^,]+(, ?[^,]+)*")]
        [System.Xml.Serialization.XmlAttributeAttribute("font-family")]
        public string FontFamily { get; set; }

        [System.Xml.Serialization.XmlAttributeAttribute("font-style")]
        public FontStyle FontStyle { get; set; }

        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the FontStyle property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool FontStyleSpecified { get; set; }

        /// <summary>
        /// <para>The font-size can be one of the CSS font sizes (xx-small, x-small, small, medium, large, x-large, xx-large) or a numeric point size.</para>
        /// </summary>
        [System.Xml.Serialization.XmlAttributeAttribute("font-size")]
        public string FontSize { get; set; }

        [System.Xml.Serialization.XmlAttributeAttribute("font-weight")]
        public FontWeight FontWeight { get; set; }

        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the FontWeight property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool FontWeightSpecified { get; set; }

        /// <summary>
        /// <para>The color type indicates the color of an element. Color may be represented as hexadecimal RGB triples, as in HTML, or as hexadecimal ARGB tuples, with the A indicating alpha of transparency. An alpha value of 00 is totally transparent; FF is totally opaque. If RGB is used, the A value is assumed to be FF.
        ///
        ///For instance, the RGB value "#800080" represents purple. An ARGB value of "#40800080" would be a transparent purple.
        ///
        ///As in SVG 1.1, colors are defined in terms of the sRGB color space (IEC 61966).</para>
        /// <para xml:lang="en">Pattern: #[\dA-F]{6}([\dA-F][\dA-F])?.</para>
        /// </summary>
        [System.ComponentModel.DataAnnotations.RegularExpressionAttribute("#[\\dA-F]{6}([\\dA-F][\\dA-F])?")]
        [System.Xml.Serialization.XmlAttributeAttribute("color")]
        public string Color { get; set; }

        [System.Xml.Serialization.XmlAttributeAttribute("placement")]
        public AboveBelow Placement { get; set; }

        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the Placement property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool PlacementSpecified { get; set; }
    }

    /// <summary>
    /// <para>The formatted-symbol type represents a SMuFL musical symbol element with formatting attributes.</para>
    /// </summary>
    [System.ComponentModel.DescriptionAttribute("The formatted-symbol type represents a SMuFL musical symbol element with formatti" +
        "ng attributes.")]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XmlSchemaClassGenerator", "2.1.1142.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute("formatted-symbol", Namespace="")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class FormattedSymbol : ISymbolFormatting
    {

        /// <summary>
        /// <para xml:lang="en">Gets or sets the text value.</para>
        /// </summary>
        [System.Xml.Serialization.XmlTextAttribute()]
        public string Value { get; set; }

        [System.Xml.Serialization.XmlAttributeAttribute("justify")]
        public LeftCenterRight Justify { get; set; }

        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the Justify property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool JustifySpecified { get; set; }

        /// <summary>
        /// <para>The tenths type is a number representing tenths of interline staff space (positive or negative). Both integer and decimal values are allowed, such as 5 for a half space and 2.5 for a quarter space. Interline space is measured from the middle of a staff line.
        ///
        ///Distances in a MusicXML file are measured in tenths of staff space. Tenths are then scaled to millimeters within the scaling element, used in the defaults element at the start of a score. Individual staves can apply a scaling factor to adjust staff size. When a MusicXML element or attribute refers to tenths, it means the global tenths defined by the scaling element, not the local tenths as adjusted by the staff-size element.</para>
        /// </summary>
        [System.Xml.Serialization.XmlAttributeAttribute("default-x")]
        public decimal DefaultX { get; set; }

        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the DefaultX property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool DefaultXSpecified { get; set; }

        /// <summary>
        /// <para>The tenths type is a number representing tenths of interline staff space (positive or negative). Both integer and decimal values are allowed, such as 5 for a half space and 2.5 for a quarter space. Interline space is measured from the middle of a staff line.
        ///
        ///Distances in a MusicXML file are measured in tenths of staff space. Tenths are then scaled to millimeters within the scaling element, used in the defaults element at the start of a score. Individual staves can apply a scaling factor to adjust staff size. When a MusicXML element or attribute refers to tenths, it means the global tenths defined by the scaling element, not the local tenths as adjusted by the staff-size element.</para>
        /// </summary>
        [System.Xml.Serialization.XmlAttributeAttribute("default-y")]
        public decimal DefaultY { get; set; }

        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the DefaultY property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool DefaultYSpecified { get; set; }

        /// <summary>
        /// <para>The tenths type is a number representing tenths of interline staff space (positive or negative). Both integer and decimal values are allowed, such as 5 for a half space and 2.5 for a quarter space. Interline space is measured from the middle of a staff line.
        ///
        ///Distances in a MusicXML file are measured in tenths of staff space. Tenths are then scaled to millimeters within the scaling element, used in the defaults element at the start of a score. Individual staves can apply a scaling factor to adjust staff size. When a MusicXML element or attribute refers to tenths, it means the global tenths defined by the scaling element, not the local tenths as adjusted by the staff-size element.</para>
        /// </summary>
        [System.Xml.Serialization.XmlAttributeAttribute("relative-x")]
        public decimal RelativeX { get; set; }

        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the RelativeX property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool RelativeXSpecified { get; set; }

        /// <summary>
        /// <para>The tenths type is a number representing tenths of interline staff space (positive or negative). Both integer and decimal values are allowed, such as 5 for a half space and 2.5 for a quarter space. Interline space is measured from the middle of a staff line.
        ///
        ///Distances in a MusicXML file are measured in tenths of staff space. Tenths are then scaled to millimeters within the scaling element, used in the defaults element at the start of a score. Individual staves can apply a scaling factor to adjust staff size. When a MusicXML element or attribute refers to tenths, it means the global tenths defined by the scaling element, not the local tenths as adjusted by the staff-size element.</para>
        /// </summary>
        [System.Xml.Serialization.XmlAttributeAttribute("relative-y")]
        public decimal RelativeY { get; set; }

        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the RelativeY property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool RelativeYSpecified { get; set; }

        /// <summary>
        /// <para>The font-family is a comma-separated list of font names. These can be specific font styles such as Maestro or Opus, or one of several generic font styles: music, engraved, handwritten, text, serif, sans-serif, handwritten, cursive, fantasy, and monospace. The music, engraved, and handwritten values refer to music fonts; the rest refer to text fonts. The fantasy style refers to decorative text such as found in older German-style printing.</para>
        /// <para xml:lang="en">Pattern: [^,]+(, ?[^,]+)*.</para>
        /// </summary>
        [System.ComponentModel.DataAnnotations.RegularExpressionAttribute("[^,]+(, ?[^,]+)*")]
        [System.Xml.Serialization.XmlAttributeAttribute("font-family")]
        public string FontFamily { get; set; }

        [System.Xml.Serialization.XmlAttributeAttribute("font-style")]
        public FontStyle FontStyle { get; set; }

        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the FontStyle property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool FontStyleSpecified { get; set; }

        /// <summary>
        /// <para>The font-size can be one of the CSS font sizes (xx-small, x-small, small, medium, large, x-large, xx-large) or a numeric point size.</para>
        /// </summary>
        [System.Xml.Serialization.XmlAttributeAttribute("font-size")]
        public string FontSize { get; set; }

        [System.Xml.Serialization.XmlAttributeAttribute("font-weight")]
        public FontWeight FontWeight { get; set; }

        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the FontWeight property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool FontWeightSpecified { get; set; }

        /// <summary>
        /// <para>The color type indicates the color of an element. Color may be represented as hexadecimal RGB triples, as in HTML, or as hexadecimal ARGB tuples, with the A indicating alpha of transparency. An alpha value of 00 is totally transparent; FF is totally opaque. If RGB is used, the A value is assumed to be FF.
        ///
        ///For instance, the RGB value "#800080" represents purple. An ARGB value of "#40800080" would be a transparent purple.
        ///
        ///As in SVG 1.1, colors are defined in terms of the sRGB color space (IEC 61966).</para>
        /// <para xml:lang="en">Pattern: #[\dA-F]{6}([\dA-F][\dA-F])?.</para>
        /// </summary>
        [System.ComponentModel.DataAnnotations.RegularExpressionAttribute("#[\\dA-F]{6}([\\dA-F][\\dA-F])?")]
        [System.Xml.Serialization.XmlAttributeAttribute("color")]
        public string Color { get; set; }

        [System.Xml.Serialization.XmlAttributeAttribute("halign")]
        public LeftCenterRight Halign { get; set; }

        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the Halign property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool HalignSpecified { get; set; }

        [System.Xml.Serialization.XmlAttributeAttribute("valign")]
        public Valign Valign { get; set; }

        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the Valign property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool ValignSpecified { get; set; }

        /// <summary>
        /// <para>The number-of-lines type is used to specify the number of lines in text decoration attributes.</para>
        /// <para xml:lang="en">Minimum inclusive value: 0.</para>
        /// <para xml:lang="en">Maximum inclusive value: 3.</para>
        /// </summary>
        [System.ComponentModel.DataAnnotations.RangeAttribute(typeof(decimal), "0", "3")]
        [System.Xml.Serialization.XmlAttributeAttribute("underline")]
        public byte Underline { get; set; }

        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the Underline property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool UnderlineSpecified { get; set; }

        /// <summary>
        /// <para>The number-of-lines type is used to specify the number of lines in text decoration attributes.</para>
        /// <para xml:lang="en">Minimum inclusive value: 0.</para>
        /// <para xml:lang="en">Maximum inclusive value: 3.</para>
        /// </summary>
        [System.ComponentModel.DataAnnotations.RangeAttribute(typeof(decimal), "0", "3")]
        [System.Xml.Serialization.XmlAttributeAttribute("overline")]
        public byte Overline { get; set; }

        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the Overline property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool OverlineSpecified { get; set; }

        /// <summary>
        /// <para>The number-of-lines type is used to specify the number of lines in text decoration attributes.</para>
        /// <para xml:lang="en">Minimum inclusive value: 0.</para>
        /// <para xml:lang="en">Maximum inclusive value: 3.</para>
        /// </summary>
        [System.ComponentModel.DataAnnotations.RangeAttribute(typeof(decimal), "0", "3")]
        [System.Xml.Serialization.XmlAttributeAttribute("line-through")]
        public byte LineThrough { get; set; }

        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the LineThrough property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool LineThroughSpecified { get; set; }

        /// <summary>
        /// <para>The rotation-degrees type specifies rotation, pan, and elevation values in degrees. Values range from -180 to 180.</para>
        /// <para xml:lang="en">Minimum inclusive value: -180.</para>
        /// <para xml:lang="en">Maximum inclusive value: 180.</para>
        /// </summary>
        [System.ComponentModel.DataAnnotations.RangeAttribute(typeof(decimal), "-180", "180")]
        [System.Xml.Serialization.XmlAttributeAttribute("rotation")]
        public decimal Rotation { get; set; }

        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the Rotation property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool RotationSpecified { get; set; }

        /// <summary>
        /// <para>The number-or-normal values can be either a decimal number or the string "normal". This is used by the line-height and letter-spacing attributes.</para>
        /// </summary>
        [System.Xml.Serialization.XmlAttributeAttribute("letter-spacing")]
        public string LetterSpacing { get; set; }

        /// <summary>
        /// <para>The number-or-normal values can be either a decimal number or the string "normal". This is used by the line-height and letter-spacing attributes.</para>
        /// </summary>
        [System.Xml.Serialization.XmlAttributeAttribute("line-height")]
        public string LineHeight { get; set; }

        [System.Xml.Serialization.XmlAttributeAttribute("dir")]
        public TextDirection Dir { get; set; }

        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the Dir property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool DirSpecified { get; set; }

        [System.Xml.Serialization.XmlAttributeAttribute("enclosure")]
        public EnclosureShape Enclosure { get; set; }

        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the Enclosure property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool EnclosureSpecified { get; set; }
    }

    /// <summary>
    /// <para>The symbol-formatting attribute group collects the common formatting attributes for musical symbols. Default values may differ across the elements that use this group.</para>
    /// </summary>
    [System.ComponentModel.DescriptionAttribute("The symbol-formatting attribute group collects the common formatting attributes f" +
        "or musical symbols. Default values may differ across the elements that use this " +
        "group.")]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XmlSchemaClassGenerator", "2.1.1142.0")]
    public partial interface ISymbolFormatting : IJustify, IPrintStyleAlign, ITextDecoration, ITextRotation, ILetterSpacing, ILineHeight, ITextDirection, IEnclosure
    {
    }

    /// <summary>
    /// <para>The formatted-symbol-id type represents a SMuFL musical symbol element with formatting and id attributes.</para>
    /// </summary>
    [System.ComponentModel.DescriptionAttribute("The formatted-symbol-id type represents a SMuFL musical symbol element with forma" +
        "tting and id attributes.")]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XmlSchemaClassGenerator", "2.1.1142.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute("formatted-symbol-id", Namespace="")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class FormattedSymbolId : ISymbolFormatting, IOptionalUniqueId
    {

        /// <summary>
        /// <para xml:lang="en">Gets or sets the text value.</para>
        /// </summary>
        [System.Xml.Serialization.XmlTextAttribute()]
        public string Value { get; set; }

        [System.Xml.Serialization.XmlAttributeAttribute("justify")]
        public LeftCenterRight Justify { get; set; }

        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the Justify property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool JustifySpecified { get; set; }

        /// <summary>
        /// <para>The tenths type is a number representing tenths of interline staff space (positive or negative). Both integer and decimal values are allowed, such as 5 for a half space and 2.5 for a quarter space. Interline space is measured from the middle of a staff line.
        ///
        ///Distances in a MusicXML file are measured in tenths of staff space. Tenths are then scaled to millimeters within the scaling element, used in the defaults element at the start of a score. Individual staves can apply a scaling factor to adjust staff size. When a MusicXML element or attribute refers to tenths, it means the global tenths defined by the scaling element, not the local tenths as adjusted by the staff-size element.</para>
        /// </summary>
        [System.Xml.Serialization.XmlAttributeAttribute("default-x")]
        public decimal DefaultX { get; set; }

        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the DefaultX property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool DefaultXSpecified { get; set; }

        /// <summary>
        /// <para>The tenths type is a number representing tenths of interline staff space (positive or negative). Both integer and decimal values are allowed, such as 5 for a half space and 2.5 for a quarter space. Interline space is measured from the middle of a staff line.
        ///
        ///Distances in a MusicXML file are measured in tenths of staff space. Tenths are then scaled to millimeters within the scaling element, used in the defaults element at the start of a score. Individual staves can apply a scaling factor to adjust staff size. When a MusicXML element or attribute refers to tenths, it means the global tenths defined by the scaling element, not the local tenths as adjusted by the staff-size element.</para>
        /// </summary>
        [System.Xml.Serialization.XmlAttributeAttribute("default-y")]
        public decimal DefaultY { get; set; }

        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the DefaultY property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool DefaultYSpecified { get; set; }

        /// <summary>
        /// <para>The tenths type is a number representing tenths of interline staff space (positive or negative). Both integer and decimal values are allowed, such as 5 for a half space and 2.5 for a quarter space. Interline space is measured from the middle of a staff line.
        ///
        ///Distances in a MusicXML file are measured in tenths of staff space. Tenths are then scaled to millimeters within the scaling element, used in the defaults element at the start of a score. Individual staves can apply a scaling factor to adjust staff size. When a MusicXML element or attribute refers to tenths, it means the global tenths defined by the scaling element, not the local tenths as adjusted by the staff-size element.</para>
        /// </summary>
        [System.Xml.Serialization.XmlAttributeAttribute("relative-x")]
        public decimal RelativeX { get; set; }

        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the RelativeX property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool RelativeXSpecified { get; set; }

        /// <summary>
        /// <para>The tenths type is a number representing tenths of interline staff space (positive or negative). Both integer and decimal values are allowed, such as 5 for a half space and 2.5 for a quarter space. Interline space is measured from the middle of a staff line.
        ///
        ///Distances in a MusicXML file are measured in tenths of staff space. Tenths are then scaled to millimeters within the scaling element, used in the defaults element at the start of a score. Individual staves can apply a scaling factor to adjust staff size. When a MusicXML element or attribute refers to tenths, it means the global tenths defined by the scaling element, not the local tenths as adjusted by the staff-size element.</para>
        /// </summary>
        [System.Xml.Serialization.XmlAttributeAttribute("relative-y")]
        public decimal RelativeY { get; set; }

        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the RelativeY property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool RelativeYSpecified { get; set; }

        /// <summary>
        /// <para>The font-family is a comma-separated list of font names. These can be specific font styles such as Maestro or Opus, or one of several generic font styles: music, engraved, handwritten, text, serif, sans-serif, handwritten, cursive, fantasy, and monospace. The music, engraved, and handwritten values refer to music fonts; the rest refer to text fonts. The fantasy style refers to decorative text such as found in older German-style printing.</para>
        /// <para xml:lang="en">Pattern: [^,]+(, ?[^,]+)*.</para>
        /// </summary>
        [System.ComponentModel.DataAnnotations.RegularExpressionAttribute("[^,]+(, ?[^,]+)*")]
        [System.Xml.Serialization.XmlAttributeAttribute("font-family")]
        public string FontFamily { get; set; }

        [System.Xml.Serialization.XmlAttributeAttribute("font-style")]
        public FontStyle FontStyle { get; set; }

        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the FontStyle property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool FontStyleSpecified { get; set; }

        /// <summary>
        /// <para>The font-size can be one of the CSS font sizes (xx-small, x-small, small, medium, large, x-large, xx-large) or a numeric point size.</para>
        /// </summary>
        [System.Xml.Serialization.XmlAttributeAttribute("font-size")]
        public string FontSize { get; set; }

        [System.Xml.Serialization.XmlAttributeAttribute("font-weight")]
        public FontWeight FontWeight { get; set; }

        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the FontWeight property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool FontWeightSpecified { get; set; }

        /// <summary>
        /// <para>The color type indicates the color of an element. Color may be represented as hexadecimal RGB triples, as in HTML, or as hexadecimal ARGB tuples, with the A indicating alpha of transparency. An alpha value of 00 is totally transparent; FF is totally opaque. If RGB is used, the A value is assumed to be FF.
        ///
        ///For instance, the RGB value "#800080" represents purple. An ARGB value of "#40800080" would be a transparent purple.
        ///
        ///As in SVG 1.1, colors are defined in terms of the sRGB color space (IEC 61966).</para>
        /// <para xml:lang="en">Pattern: #[\dA-F]{6}([\dA-F][\dA-F])?.</para>
        /// </summary>
        [System.ComponentModel.DataAnnotations.RegularExpressionAttribute("#[\\dA-F]{6}([\\dA-F][\\dA-F])?")]
        [System.Xml.Serialization.XmlAttributeAttribute("color")]
        public string Color { get; set; }

        [System.Xml.Serialization.XmlAttributeAttribute("halign")]
        public LeftCenterRight Halign { get; set; }

        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the Halign property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool HalignSpecified { get; set; }

        [System.Xml.Serialization.XmlAttributeAttribute("valign")]
        public Valign Valign { get; set; }

        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the Valign property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool ValignSpecified { get; set; }

        /// <summary>
        /// <para>The number-of-lines type is used to specify the number of lines in text decoration attributes.</para>
        /// <para xml:lang="en">Minimum inclusive value: 0.</para>
        /// <para xml:lang="en">Maximum inclusive value: 3.</para>
        /// </summary>
        [System.ComponentModel.DataAnnotations.RangeAttribute(typeof(decimal), "0", "3")]
        [System.Xml.Serialization.XmlAttributeAttribute("underline")]
        public byte Underline { get; set; }

        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the Underline property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool UnderlineSpecified { get; set; }

        /// <summary>
        /// <para>The number-of-lines type is used to specify the number of lines in text decoration attributes.</para>
        /// <para xml:lang="en">Minimum inclusive value: 0.</para>
        /// <para xml:lang="en">Maximum inclusive value: 3.</para>
        /// </summary>
        [System.ComponentModel.DataAnnotations.RangeAttribute(typeof(decimal), "0", "3")]
        [System.Xml.Serialization.XmlAttributeAttribute("overline")]
        public byte Overline { get; set; }

        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the Overline property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool OverlineSpecified { get; set; }

        /// <summary>
        /// <para>The number-of-lines type is used to specify the number of lines in text decoration attributes.</para>
        /// <para xml:lang="en">Minimum inclusive value: 0.</para>
        /// <para xml:lang="en">Maximum inclusive value: 3.</para>
        /// </summary>
        [System.ComponentModel.DataAnnotations.RangeAttribute(typeof(decimal), "0", "3")]
        [System.Xml.Serialization.XmlAttributeAttribute("line-through")]
        public byte LineThrough { get; set; }

        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the LineThrough property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool LineThroughSpecified { get; set; }

        /// <summary>
        /// <para>The rotation-degrees type specifies rotation, pan, and elevation values in degrees. Values range from -180 to 180.</para>
        /// <para xml:lang="en">Minimum inclusive value: -180.</para>
        /// <para xml:lang="en">Maximum inclusive value: 180.</para>
        /// </summary>
        [System.ComponentModel.DataAnnotations.RangeAttribute(typeof(decimal), "-180", "180")]
        [System.Xml.Serialization.XmlAttributeAttribute("rotation")]
        public decimal Rotation { get; set; }

        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the Rotation property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool RotationSpecified { get; set; }

        /// <summary>
        /// <para>The number-or-normal values can be either a decimal number or the string "normal". This is used by the line-height and letter-spacing attributes.</para>
        /// </summary>
        [System.Xml.Serialization.XmlAttributeAttribute("letter-spacing")]
        public string LetterSpacing { get; set; }

        /// <summary>
        /// <para>The number-or-normal values can be either a decimal number or the string "normal". This is used by the line-height and letter-spacing attributes.</para>
        /// </summary>
        [System.Xml.Serialization.XmlAttributeAttribute("line-height")]
        public string LineHeight { get; set; }

        [System.Xml.Serialization.XmlAttributeAttribute("dir")]
        public TextDirection Dir { get; set; }

        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the Dir property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool DirSpecified { get; set; }

        [System.Xml.Serialization.XmlAttributeAttribute("enclosure")]
        public EnclosureShape Enclosure { get; set; }

        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the Enclosure property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool EnclosureSpecified { get; set; }

        [System.Xml.Serialization.XmlAttributeAttribute("id")]
        public string Id { get; set; }
    }

    /// <summary>
    /// <para>The formatted-text type represents a text element with text-formatting attributes.</para>
    /// </summary>
    [System.ComponentModel.DescriptionAttribute("The formatted-text type represents a text element with text-formatting attributes" +
        ".")]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XmlSchemaClassGenerator", "2.1.1142.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute("formatted-text", Namespace="")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class FormattedText : ITextFormatting
    {

        /// <summary>
        /// <para xml:lang="en">Gets or sets the text value.</para>
        /// </summary>
        [System.Xml.Serialization.XmlTextAttribute()]
        public string Value { get; set; }

        [System.Xml.Serialization.XmlAttributeAttribute("justify")]
        public LeftCenterRight Justify { get; set; }

        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the Justify property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool JustifySpecified { get; set; }

        /// <summary>
        /// <para>The tenths type is a number representing tenths of interline staff space (positive or negative). Both integer and decimal values are allowed, such as 5 for a half space and 2.5 for a quarter space. Interline space is measured from the middle of a staff line.
        ///
        ///Distances in a MusicXML file are measured in tenths of staff space. Tenths are then scaled to millimeters within the scaling element, used in the defaults element at the start of a score. Individual staves can apply a scaling factor to adjust staff size. When a MusicXML element or attribute refers to tenths, it means the global tenths defined by the scaling element, not the local tenths as adjusted by the staff-size element.</para>
        /// </summary>
        [System.Xml.Serialization.XmlAttributeAttribute("default-x")]
        public decimal DefaultX { get; set; }

        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the DefaultX property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool DefaultXSpecified { get; set; }

        /// <summary>
        /// <para>The tenths type is a number representing tenths of interline staff space (positive or negative). Both integer and decimal values are allowed, such as 5 for a half space and 2.5 for a quarter space. Interline space is measured from the middle of a staff line.
        ///
        ///Distances in a MusicXML file are measured in tenths of staff space. Tenths are then scaled to millimeters within the scaling element, used in the defaults element at the start of a score. Individual staves can apply a scaling factor to adjust staff size. When a MusicXML element or attribute refers to tenths, it means the global tenths defined by the scaling element, not the local tenths as adjusted by the staff-size element.</para>
        /// </summary>
        [System.Xml.Serialization.XmlAttributeAttribute("default-y")]
        public decimal DefaultY { get; set; }

        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the DefaultY property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool DefaultYSpecified { get; set; }

        /// <summary>
        /// <para>The tenths type is a number representing tenths of interline staff space (positive or negative). Both integer and decimal values are allowed, such as 5 for a half space and 2.5 for a quarter space. Interline space is measured from the middle of a staff line.
        ///
        ///Distances in a MusicXML file are measured in tenths of staff space. Tenths are then scaled to millimeters within the scaling element, used in the defaults element at the start of a score. Individual staves can apply a scaling factor to adjust staff size. When a MusicXML element or attribute refers to tenths, it means the global tenths defined by the scaling element, not the local tenths as adjusted by the staff-size element.</para>
        /// </summary>
        [System.Xml.Serialization.XmlAttributeAttribute("relative-x")]
        public decimal RelativeX { get; set; }

        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the RelativeX property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool RelativeXSpecified { get; set; }

        /// <summary>
        /// <para>The tenths type is a number representing tenths of interline staff space (positive or negative). Both integer and decimal values are allowed, such as 5 for a half space and 2.5 for a quarter space. Interline space is measured from the middle of a staff line.
        ///
        ///Distances in a MusicXML file are measured in tenths of staff space. Tenths are then scaled to millimeters within the scaling element, used in the defaults element at the start of a score. Individual staves can apply a scaling factor to adjust staff size. When a MusicXML element or attribute refers to tenths, it means the global tenths defined by the scaling element, not the local tenths as adjusted by the staff-size element.</para>
        /// </summary>
        [System.Xml.Serialization.XmlAttributeAttribute("relative-y")]
        public decimal RelativeY { get; set; }

        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the RelativeY property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool RelativeYSpecified { get; set; }

        /// <summary>
        /// <para>The font-family is a comma-separated list of font names. These can be specific font styles such as Maestro or Opus, or one of several generic font styles: music, engraved, handwritten, text, serif, sans-serif, handwritten, cursive, fantasy, and monospace. The music, engraved, and handwritten values refer to music fonts; the rest refer to text fonts. The fantasy style refers to decorative text such as found in older German-style printing.</para>
        /// <para xml:lang="en">Pattern: [^,]+(, ?[^,]+)*.</para>
        /// </summary>
        [System.ComponentModel.DataAnnotations.RegularExpressionAttribute("[^,]+(, ?[^,]+)*")]
        [System.Xml.Serialization.XmlAttributeAttribute("font-family")]
        public string FontFamily { get; set; }

        [System.Xml.Serialization.XmlAttributeAttribute("font-style")]
        public FontStyle FontStyle { get; set; }

        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the FontStyle property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool FontStyleSpecified { get; set; }

        /// <summary>
        /// <para>The font-size can be one of the CSS font sizes (xx-small, x-small, small, medium, large, x-large, xx-large) or a numeric point size.</para>
        /// </summary>
        [System.Xml.Serialization.XmlAttributeAttribute("font-size")]
        public string FontSize { get; set; }

        [System.Xml.Serialization.XmlAttributeAttribute("font-weight")]
        public FontWeight FontWeight { get; set; }

        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the FontWeight property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool FontWeightSpecified { get; set; }

        /// <summary>
        /// <para>The color type indicates the color of an element. Color may be represented as hexadecimal RGB triples, as in HTML, or as hexadecimal ARGB tuples, with the A indicating alpha of transparency. An alpha value of 00 is totally transparent; FF is totally opaque. If RGB is used, the A value is assumed to be FF.
        ///
        ///For instance, the RGB value "#800080" represents purple. An ARGB value of "#40800080" would be a transparent purple.
        ///
        ///As in SVG 1.1, colors are defined in terms of the sRGB color space (IEC 61966).</para>
        /// <para xml:lang="en">Pattern: #[\dA-F]{6}([\dA-F][\dA-F])?.</para>
        /// </summary>
        [System.ComponentModel.DataAnnotations.RegularExpressionAttribute("#[\\dA-F]{6}([\\dA-F][\\dA-F])?")]
        [System.Xml.Serialization.XmlAttributeAttribute("color")]
        public string Color { get; set; }

        [System.Xml.Serialization.XmlAttributeAttribute("halign")]
        public LeftCenterRight Halign { get; set; }

        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the Halign property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool HalignSpecified { get; set; }

        [System.Xml.Serialization.XmlAttributeAttribute("valign")]
        public Valign Valign { get; set; }

        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the Valign property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool ValignSpecified { get; set; }

        /// <summary>
        /// <para>The number-of-lines type is used to specify the number of lines in text decoration attributes.</para>
        /// <para xml:lang="en">Minimum inclusive value: 0.</para>
        /// <para xml:lang="en">Maximum inclusive value: 3.</para>
        /// </summary>
        [System.ComponentModel.DataAnnotations.RangeAttribute(typeof(decimal), "0", "3")]
        [System.Xml.Serialization.XmlAttributeAttribute("underline")]
        public byte Underline { get; set; }

        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the Underline property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool UnderlineSpecified { get; set; }

        /// <summary>
        /// <para>The number-of-lines type is used to specify the number of lines in text decoration attributes.</para>
        /// <para xml:lang="en">Minimum inclusive value: 0.</para>
        /// <para xml:lang="en">Maximum inclusive value: 3.</para>
        /// </summary>
        [System.ComponentModel.DataAnnotations.RangeAttribute(typeof(decimal), "0", "3")]
        [System.Xml.Serialization.XmlAttributeAttribute("overline")]
        public byte Overline { get; set; }

        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the Overline property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool OverlineSpecified { get; set; }

        /// <summary>
        /// <para>The number-of-lines type is used to specify the number of lines in text decoration attributes.</para>
        /// <para xml:lang="en">Minimum inclusive value: 0.</para>
        /// <para xml:lang="en">Maximum inclusive value: 3.</para>
        /// </summary>
        [System.ComponentModel.DataAnnotations.RangeAttribute(typeof(decimal), "0", "3")]
        [System.Xml.Serialization.XmlAttributeAttribute("line-through")]
        public byte LineThrough { get; set; }

        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the LineThrough property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool LineThroughSpecified { get; set; }

        /// <summary>
        /// <para>The rotation-degrees type specifies rotation, pan, and elevation values in degrees. Values range from -180 to 180.</para>
        /// <para xml:lang="en">Minimum inclusive value: -180.</para>
        /// <para xml:lang="en">Maximum inclusive value: 180.</para>
        /// </summary>
        [System.ComponentModel.DataAnnotations.RangeAttribute(typeof(decimal), "-180", "180")]
        [System.Xml.Serialization.XmlAttributeAttribute("rotation")]
        public decimal Rotation { get; set; }

        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the Rotation property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool RotationSpecified { get; set; }

        /// <summary>
        /// <para>The number-or-normal values can be either a decimal number or the string "normal". This is used by the line-height and letter-spacing attributes.</para>
        /// </summary>
        [System.Xml.Serialization.XmlAttributeAttribute("letter-spacing")]
        public string LetterSpacing { get; set; }

        /// <summary>
        /// <para>The number-or-normal values can be either a decimal number or the string "normal". This is used by the line-height and letter-spacing attributes.</para>
        /// </summary>
        [System.Xml.Serialization.XmlAttributeAttribute("line-height")]
        public string LineHeight { get; set; }

        [System.Xml.Serialization.XmlAttributeAttribute("lang", Namespace="http://www.w3.org/XML/1998/namespace", Form=System.Xml.Schema.XmlSchemaForm.Qualified)]
        public string Lang { get; set; }

        [System.Xml.Serialization.XmlAttributeAttribute("space", Namespace="http://www.w3.org/XML/1998/namespace", Form=System.Xml.Schema.XmlSchemaForm.Qualified)]
        public OpenUtau.Core.Format.MusicXMLSchema.Space Space { get; set; }

        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the Space property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool SpaceSpecified { get; set; }

        [System.Xml.Serialization.XmlAttributeAttribute("dir")]
        public TextDirection Dir { get; set; }

        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the Dir property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool DirSpecified { get; set; }

        [System.Xml.Serialization.XmlAttributeAttribute("enclosure")]
        public EnclosureShape Enclosure { get; set; }

        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the Enclosure property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool EnclosureSpecified { get; set; }
    }

    /// <summary>
    /// <para>The formatted-text-id type represents a text element with text-formatting and id attributes.</para>
    /// </summary>
    [System.ComponentModel.DescriptionAttribute("The formatted-text-id type represents a text element with text-formatting and id " +
        "attributes.")]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XmlSchemaClassGenerator", "2.1.1142.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute("formatted-text-id", Namespace="")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class FormattedTextId : ITextFormatting, IOptionalUniqueId
    {

        /// <summary>
        /// <para xml:lang="en">Gets or sets the text value.</para>
        /// </summary>
        [System.Xml.Serialization.XmlTextAttribute()]
        public string Value { get; set; }

        [System.Xml.Serialization.XmlAttributeAttribute("justify")]
        public LeftCenterRight Justify { get; set; }

        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the Justify property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool JustifySpecified { get; set; }

        /// <summary>
        /// <para>The tenths type is a number representing tenths of interline staff space (positive or negative). Both integer and decimal values are allowed, such as 5 for a half space and 2.5 for a quarter space. Interline space is measured from the middle of a staff line.
        ///
        ///Distances in a MusicXML file are measured in tenths of staff space. Tenths are then scaled to millimeters within the scaling element, used in the defaults element at the start of a score. Individual staves can apply a scaling factor to adjust staff size. When a MusicXML element or attribute refers to tenths, it means the global tenths defined by the scaling element, not the local tenths as adjusted by the staff-size element.</para>
        /// </summary>
        [System.Xml.Serialization.XmlAttributeAttribute("default-x")]
        public decimal DefaultX { get; set; }

        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the DefaultX property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool DefaultXSpecified { get; set; }

        /// <summary>
        /// <para>The tenths type is a number representing tenths of interline staff space (positive or negative). Both integer and decimal values are allowed, such as 5 for a half space and 2.5 for a quarter space. Interline space is measured from the middle of a staff line.
        ///
        ///Distances in a MusicXML file are measured in tenths of staff space. Tenths are then scaled to millimeters within the scaling element, used in the defaults element at the start of a score. Individual staves can apply a scaling factor to adjust staff size. When a MusicXML element or attribute refers to tenths, it means the global tenths defined by the scaling element, not the local tenths as adjusted by the staff-size element.</para>
        /// </summary>
        [System.Xml.Serialization.XmlAttributeAttribute("default-y")]
        public decimal DefaultY { get; set; }

        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the DefaultY property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool DefaultYSpecified { get; set; }

        /// <summary>
        /// <para>The tenths type is a number representing tenths of interline staff space (positive or negative). Both integer and decimal values are allowed, such as 5 for a half space and 2.5 for a quarter space. Interline space is measured from the middle of a staff line.
        ///
        ///Distances in a MusicXML file are measured in tenths of staff space. Tenths are then scaled to millimeters within the scaling element, used in the defaults element at the start of a score. Individual staves can apply a scaling factor to adjust staff size. When a MusicXML element or attribute refers to tenths, it means the global tenths defined by the scaling element, not the local tenths as adjusted by the staff-size element.</para>
        /// </summary>
        [System.Xml.Serialization.XmlAttributeAttribute("relative-x")]
        public decimal RelativeX { get; set; }

        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the RelativeX property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool RelativeXSpecified { get; set; }

        /// <summary>
        /// <para>The tenths type is a number representing tenths of interline staff space (positive or negative). Both integer and decimal values are allowed, such as 5 for a half space and 2.5 for a quarter space. Interline space is measured from the middle of a staff line.
        ///
        ///Distances in a MusicXML file are measured in tenths of staff space. Tenths are then scaled to millimeters within the scaling element, used in the defaults element at the start of a score. Individual staves can apply a scaling factor to adjust staff size. When a MusicXML element or attribute refers to tenths, it means the global tenths defined by the scaling element, not the local tenths as adjusted by the staff-size element.</para>
        /// </summary>
        [System.Xml.Serialization.XmlAttributeAttribute("relative-y")]
        public decimal RelativeY { get; set; }

        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the RelativeY property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool RelativeYSpecified { get; set; }

        /// <summary>
        /// <para>The font-family is a comma-separated list of font names. These can be specific font styles such as Maestro or Opus, or one of several generic font styles: music, engraved, handwritten, text, serif, sans-serif, handwritten, cursive, fantasy, and monospace. The music, engraved, and handwritten values refer to music fonts; the rest refer to text fonts. The fantasy style refers to decorative text such as found in older German-style printing.</para>
        /// <para xml:lang="en">Pattern: [^,]+(, ?[^,]+)*.</para>
        /// </summary>
        [System.ComponentModel.DataAnnotations.RegularExpressionAttribute("[^,]+(, ?[^,]+)*")]
        [System.Xml.Serialization.XmlAttributeAttribute("font-family")]
        public string FontFamily { get; set; }

        [System.Xml.Serialization.XmlAttributeAttribute("font-style")]
        public FontStyle FontStyle { get; set; }

        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the FontStyle property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool FontStyleSpecified { get; set; }

        /// <summary>
        /// <para>The font-size can be one of the CSS font sizes (xx-small, x-small, small, medium, large, x-large, xx-large) or a numeric point size.</para>
        /// </summary>
        [System.Xml.Serialization.XmlAttributeAttribute("font-size")]
        public string FontSize { get; set; }

        [System.Xml.Serialization.XmlAttributeAttribute("font-weight")]
        public FontWeight FontWeight { get; set; }

        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the FontWeight property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool FontWeightSpecified { get; set; }

        /// <summary>
        /// <para>The color type indicates the color of an element. Color may be represented as hexadecimal RGB triples, as in HTML, or as hexadecimal ARGB tuples, with the A indicating alpha of transparency. An alpha value of 00 is totally transparent; FF is totally opaque. If RGB is used, the A value is assumed to be FF.
        ///
        ///For instance, the RGB value "#800080" represents purple. An ARGB value of "#40800080" would be a transparent purple.
        ///
        ///As in SVG 1.1, colors are defined in terms of the sRGB color space (IEC 61966).</para>
        /// <para xml:lang="en">Pattern: #[\dA-F]{6}([\dA-F][\dA-F])?.</para>
        /// </summary>
        [System.ComponentModel.DataAnnotations.RegularExpressionAttribute("#[\\dA-F]{6}([\\dA-F][\\dA-F])?")]
        [System.Xml.Serialization.XmlAttributeAttribute("color")]
        public string Color { get; set; }

        [System.Xml.Serialization.XmlAttributeAttribute("halign")]
        public LeftCenterRight Halign { get; set; }

        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the Halign property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool HalignSpecified { get; set; }

        [System.Xml.Serialization.XmlAttributeAttribute("valign")]
        public Valign Valign { get; set; }

        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the Valign property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool ValignSpecified { get; set; }

        /// <summary>
        /// <para>The number-of-lines type is used to specify the number of lines in text decoration attributes.</para>
        /// <para xml:lang="en">Minimum inclusive value: 0.</para>
        /// <para xml:lang="en">Maximum inclusive value: 3.</para>
        /// </summary>
        [System.ComponentModel.DataAnnotations.RangeAttribute(typeof(decimal), "0", "3")]
        [System.Xml.Serialization.XmlAttributeAttribute("underline")]
        public byte Underline { get; set; }

        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the Underline property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool UnderlineSpecified { get; set; }

        /// <summary>
        /// <para>The number-of-lines type is used to specify the number of lines in text decoration attributes.</para>
        /// <para xml:lang="en">Minimum inclusive value: 0.</para>
        /// <para xml:lang="en">Maximum inclusive value: 3.</para>
        /// </summary>
        [System.ComponentModel.DataAnnotations.RangeAttribute(typeof(decimal), "0", "3")]
        [System.Xml.Serialization.XmlAttributeAttribute("overline")]
        public byte Overline { get; set; }

        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the Overline property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool OverlineSpecified { get; set; }

        /// <summary>
        /// <para>The number-of-lines type is used to specify the number of lines in text decoration attributes.</para>
        /// <para xml:lang="en">Minimum inclusive value: 0.</para>
        /// <para xml:lang="en">Maximum inclusive value: 3.</para>
        /// </summary>
        [System.ComponentModel.DataAnnotations.RangeAttribute(typeof(decimal), "0", "3")]
        [System.Xml.Serialization.XmlAttributeAttribute("line-through")]
        public byte LineThrough { get; set; }

        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the LineThrough property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool LineThroughSpecified { get; set; }

        /// <summary>
        /// <para>The rotation-degrees type specifies rotation, pan, and elevation values in degrees. Values range from -180 to 180.</para>
        /// <para xml:lang="en">Minimum inclusive value: -180.</para>
        /// <para xml:lang="en">Maximum inclusive value: 180.</para>
        /// </summary>
        [System.ComponentModel.DataAnnotations.RangeAttribute(typeof(decimal), "-180", "180")]
        [System.Xml.Serialization.XmlAttributeAttribute("rotation")]
        public decimal Rotation { get; set; }

        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the Rotation property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool RotationSpecified { get; set; }

        /// <summary>
        /// <para>The number-or-normal values can be either a decimal number or the string "normal". This is used by the line-height and letter-spacing attributes.</para>
        /// </summary>
        [System.Xml.Serialization.XmlAttributeAttribute("letter-spacing")]
        public string LetterSpacing { get; set; }

        /// <summary>
        /// <para>The number-or-normal values can be either a decimal number or the string "normal". This is used by the line-height and letter-spacing attributes.</para>
        /// </summary>
        [System.Xml.Serialization.XmlAttributeAttribute("line-height")]
        public string LineHeight { get; set; }

        [System.Xml.Serialization.XmlAttributeAttribute("lang", Namespace="http://www.w3.org/XML/1998/namespace", Form=System.Xml.Schema.XmlSchemaForm.Qualified)]
        public string Lang { get; set; }

        [System.Xml.Serialization.XmlAttributeAttribute("space", Namespace="http://www.w3.org/XML/1998/namespace", Form=System.Xml.Schema.XmlSchemaForm.Qualified)]
        public OpenUtau.Core.Format.MusicXMLSchema.Space Space { get; set; }

        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the Space property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool SpaceSpecified { get; set; }

        [System.Xml.Serialization.XmlAttributeAttribute("dir")]
        public TextDirection Dir { get; set; }

        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the Dir property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool DirSpecified { get; set; }

        [System.Xml.Serialization.XmlAttributeAttribute("enclosure")]
        public EnclosureShape Enclosure { get; set; }

        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the Enclosure property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool EnclosureSpecified { get; set; }

        [System.Xml.Serialization.XmlAttributeAttribute("id")]
        public string Id { get; set; }
    }

    /// <summary>
    /// <para>The fret element is used with tablature notation and chord diagrams. Fret numbers start with 0 for an open string and 1 for the first fret.</para>
    /// </summary>
    [System.ComponentModel.DescriptionAttribute("The fret element is used with tablature notation and chord diagrams. Fret numbers" +
        " start with 0 for an open string and 1 for the first fret.")]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XmlSchemaClassGenerator", "2.1.1142.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute("fret", Namespace="")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class Fret : IFont, IColor
    {

        /// <summary>
        /// <para xml:lang="en">Gets or sets the text value.</para>
        /// </summary>
        [System.Xml.Serialization.XmlTextAttribute()]
        public string Value { get; set; }

        /// <summary>
        /// <para>The font-family is a comma-separated list of font names. These can be specific font styles such as Maestro or Opus, or one of several generic font styles: music, engraved, handwritten, text, serif, sans-serif, handwritten, cursive, fantasy, and monospace. The music, engraved, and handwritten values refer to music fonts; the rest refer to text fonts. The fantasy style refers to decorative text such as found in older German-style printing.</para>
        /// <para xml:lang="en">Pattern: [^,]+(, ?[^,]+)*.</para>
        /// </summary>
        [System.ComponentModel.DataAnnotations.RegularExpressionAttribute("[^,]+(, ?[^,]+)*")]
        [System.Xml.Serialization.XmlAttributeAttribute("font-family")]
        public string FontFamily { get; set; }

        [System.Xml.Serialization.XmlAttributeAttribute("font-style")]
        public FontStyle FontStyle { get; set; }

        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the FontStyle property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool FontStyleSpecified { get; set; }

        /// <summary>
        /// <para>The font-size can be one of the CSS font sizes (xx-small, x-small, small, medium, large, x-large, xx-large) or a numeric point size.</para>
        /// </summary>
        [System.Xml.Serialization.XmlAttributeAttribute("font-size")]
        public string FontSize { get; set; }

        [System.Xml.Serialization.XmlAttributeAttribute("font-weight")]
        public FontWeight FontWeight { get; set; }

        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the FontWeight property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool FontWeightSpecified { get; set; }

        /// <summary>
        /// <para>The color type indicates the color of an element. Color may be represented as hexadecimal RGB triples, as in HTML, or as hexadecimal ARGB tuples, with the A indicating alpha of transparency. An alpha value of 00 is totally transparent; FF is totally opaque. If RGB is used, the A value is assumed to be FF.
        ///
        ///For instance, the RGB value "#800080" represents purple. An ARGB value of "#40800080" would be a transparent purple.
        ///
        ///As in SVG 1.1, colors are defined in terms of the sRGB color space (IEC 61966).</para>
        /// <para xml:lang="en">Pattern: #[\dA-F]{6}([\dA-F][\dA-F])?.</para>
        /// </summary>
        [System.ComponentModel.DataAnnotations.RegularExpressionAttribute("#[\\dA-F]{6}([\\dA-F][\\dA-F])?")]
        [System.Xml.Serialization.XmlAttributeAttribute("color")]
        public string Color { get; set; }
    }

    /// <summary>
    /// <para>The level type is used to specify editorial information for different MusicXML elements. The content contains identifying and/or descriptive text about the editorial status of the parent element.
    ///
    ///If the reference attribute is yes, this indicates editorial information that is for display only and should not affect playback. For instance, a modern edition of older music may set reference="yes" on the attributes containing the music's original clef, key, and time signature. It is no if not specified.
    ///
    ///The type attribute indicates whether the editorial information applies to the start of a series of symbols, the end of a series of symbols, or a single symbol. It is single if not specified for compatibility with earlier MusicXML versions.</para>
    /// </summary>
    [System.ComponentModel.DescriptionAttribute(@"The level type is used to specify editorial information for different MusicXML elements. The content contains identifying and/or descriptive text about the editorial status of the parent element. If the reference attribute is yes, this indicates editorial information that is for display only and should not affect playback. For instance, a modern edition of older music may set reference=""yes"" on the attributes containing the music's original clef, key, and time signature. It is no if not specified. The type attribute indicates whether the editorial information applies to the start of a series of symbols, the end of a series of symbols, or a single symbol. It is single if not specified for compatibility with earlier MusicXML versions.")]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XmlSchemaClassGenerator", "2.1.1142.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute("level", Namespace="")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class Level : ILevelDisplay
    {

        /// <summary>
        /// <para xml:lang="en">Gets or sets the text value.</para>
        /// </summary>
        [System.Xml.Serialization.XmlTextAttribute()]
        public string Value { get; set; }

        [System.Xml.Serialization.XmlAttributeAttribute("reference")]
        public YesNo Reference { get; set; }

        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the Reference property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool ReferenceSpecified { get; set; }

        [System.Xml.Serialization.XmlAttributeAttribute("type")]
        public StartStopSingle Type { get; set; }

        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the Type property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool TypeSpecified { get; set; }

        [System.Xml.Serialization.XmlAttributeAttribute("parentheses")]
        public YesNo Parentheses { get; set; }

        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the Parentheses property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool ParenthesesSpecified { get; set; }

        [System.Xml.Serialization.XmlAttributeAttribute("bracket")]
        public YesNo Bracket { get; set; }

        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the Bracket property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool BracketSpecified { get; set; }

        [System.Xml.Serialization.XmlAttributeAttribute("size")]
        public SymbolSize Size { get; set; }

        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the Size property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool SizeSpecified { get; set; }
    }

    /// <summary>
    /// <para>The level-display attribute group specifies three common ways to indicate editorial indications: putting parentheses or square brackets around a symbol, or making the symbol a different size. If not specified, they are left to application defaults. It is used by the level and accidental elements.</para>
    /// </summary>
    [System.ComponentModel.DescriptionAttribute(@"The level-display attribute group specifies three common ways to indicate editorial indications: putting parentheses or square brackets around a symbol, or making the symbol a different size. If not specified, they are left to application defaults. It is used by the level and accidental elements.")]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XmlSchemaClassGenerator", "2.1.1142.0")]
    public partial interface ILevelDisplay
    {

        YesNo Parentheses
        {
            get;
            set;
        }

        YesNo Bracket
        {
            get;
            set;
        }

        SymbolSize Size
        {
            get;
            set;
        }
    }

    /// <summary>
    /// <para>The midi-device type corresponds to the DeviceName meta event in Standard MIDI Files. The optional port attribute is a number from 1 to 16 that can be used with the unofficial MIDI 1.0 port (or cable) meta event. Unlike the DeviceName meta event, there can be multiple midi-device elements per MusicXML part. The optional id attribute refers to the score-instrument assigned to this device. If missing, the device assignment affects all score-instrument elements in the score-part.</para>
    /// </summary>
    [System.ComponentModel.DescriptionAttribute(@"The midi-device type corresponds to the DeviceName meta event in Standard MIDI Files. The optional port attribute is a number from 1 to 16 that can be used with the unofficial MIDI 1.0 port (or cable) meta event. Unlike the DeviceName meta event, there can be multiple midi-device elements per MusicXML part. The optional id attribute refers to the score-instrument assigned to this device. If missing, the device assignment affects all score-instrument elements in the score-part.")]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XmlSchemaClassGenerator", "2.1.1142.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute("midi-device", Namespace="")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class MidiDevice
    {

        /// <summary>
        /// <para xml:lang="en">Gets or sets the text value.</para>
        /// </summary>
        [System.Xml.Serialization.XmlTextAttribute()]
        public string Value { get; set; }

        /// <summary>
        /// <para>The midi-16 type is used to express MIDI 1.0 values that range from 1 to 16.</para>
        /// <para xml:lang="en">Minimum inclusive value: 1.</para>
        /// <para xml:lang="en">Maximum inclusive value: 16.</para>
        /// </summary>
        [System.ComponentModel.DataAnnotations.RangeAttribute(typeof(decimal), "1", "16")]
        [System.Xml.Serialization.XmlAttributeAttribute("port")]
        public byte Port { get; set; }

        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the Port property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool PortSpecified { get; set; }

        [System.Xml.Serialization.XmlAttributeAttribute("id")]
        public string Id { get; set; }
    }

    /// <summary>
    /// <para>The midi-instrument type defines MIDI 1.0 instrument playback. The midi-instrument element can be a part of either the score-instrument element at the start of a part, or the sound element within a part. The id attribute refers to the score-instrument affected by the change.</para>
    /// </summary>
    [System.ComponentModel.DescriptionAttribute(@"The midi-instrument type defines MIDI 1.0 instrument playback. The midi-instrument element can be a part of either the score-instrument element at the start of a part, or the sound element within a part. The id attribute refers to the score-instrument affected by the change.")]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XmlSchemaClassGenerator", "2.1.1142.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute("midi-instrument", Namespace="")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class MidiInstrument
    {

        /// <summary>
        /// <para>The midi-channel element specifies a MIDI 1.0 channel numbers ranging from 1 to 16.</para>
        /// <para>The midi-16 type is used to express MIDI 1.0 values that range from 1 to 16.</para>
        /// <para xml:lang="en">Minimum inclusive value: 1.</para>
        /// <para xml:lang="en">Maximum inclusive value: 16.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("The midi-channel element specifies a MIDI 1.0 channel numbers ranging from 1 to 1" +
            "6.")]
        [System.ComponentModel.DataAnnotations.RangeAttribute(typeof(decimal), "1", "16")]
        [System.Xml.Serialization.XmlElementAttribute("midi-channel")]
        public byte MidiChannel { get; set; }

        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the MidiChannel property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool MidiChannelSpecified { get; set; }

        /// <summary>
        /// <para>The midi-name element corresponds to a ProgramName meta-event within a Standard MIDI File.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("The midi-name element corresponds to a ProgramName meta-event within a Standard M" +
            "IDI File.")]
        [System.Xml.Serialization.XmlElementAttribute("midi-name")]
        public string MidiName { get; set; }

        /// <summary>
        /// <para>The midi-bank element specifies a MIDI 1.0 bank number ranging from 1 to 16,384.</para>
        /// <para>The midi-16384 type is used to express MIDI 1.0 values that range from 1 to 16,384.</para>
        /// <para xml:lang="en">Minimum inclusive value: 1.</para>
        /// <para xml:lang="en">Maximum inclusive value: 16384.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("The midi-bank element specifies a MIDI 1.0 bank number ranging from 1 to 16,384.")]
        [System.ComponentModel.DataAnnotations.RangeAttribute(typeof(decimal), "1", "16384")]
        [System.Xml.Serialization.XmlElementAttribute("midi-bank")]
        public ushort MidiBank { get; set; }

        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the MidiBank property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool MidiBankSpecified { get; set; }

        /// <summary>
        /// <para>The midi-program element specifies a MIDI 1.0 program number ranging from 1 to 128.</para>
        /// <para>The midi-128 type is used to express MIDI 1.0 values that range from 1 to 128.</para>
        /// <para xml:lang="en">Minimum inclusive value: 1.</para>
        /// <para xml:lang="en">Maximum inclusive value: 128.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("The midi-program element specifies a MIDI 1.0 program number ranging from 1 to 12" +
            "8.")]
        [System.ComponentModel.DataAnnotations.RangeAttribute(typeof(decimal), "1", "128")]
        [System.Xml.Serialization.XmlElementAttribute("midi-program")]
        public byte MidiProgram { get; set; }

        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the MidiProgram property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool MidiProgramSpecified { get; set; }

        /// <summary>
        /// <para>For unpitched instruments, the midi-unpitched element specifies a MIDI 1.0 note number ranging from 1 to 128. It is usually used with MIDI banks for percussion. Note that MIDI 1.0 note numbers are generally specified from 0 to 127 rather than the 1 to 128 numbering used in this element.</para>
        /// <para>The midi-128 type is used to express MIDI 1.0 values that range from 1 to 128.</para>
        /// <para xml:lang="en">Minimum inclusive value: 1.</para>
        /// <para xml:lang="en">Maximum inclusive value: 128.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute(@"For unpitched instruments, the midi-unpitched element specifies a MIDI 1.0 note number ranging from 1 to 128. It is usually used with MIDI banks for percussion. Note that MIDI 1.0 note numbers are generally specified from 0 to 127 rather than the 1 to 128 numbering used in this element.")]
        [System.ComponentModel.DataAnnotations.RangeAttribute(typeof(decimal), "1", "128")]
        [System.Xml.Serialization.XmlElementAttribute("midi-unpitched")]
        public byte MidiUnpitched { get; set; }

        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the MidiUnpitched property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool MidiUnpitchedSpecified { get; set; }

        /// <summary>
        /// <para>The volume element value is a percentage of the maximum ranging from 0 to 100, with decimal values allowed. This corresponds to a scaling value for the MIDI 1.0 channel volume controller.</para>
        /// <para>The percent type specifies a percentage from 0 to 100.</para>
        /// <para xml:lang="en">Minimum inclusive value: 0.</para>
        /// <para xml:lang="en">Maximum inclusive value: 100.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("The volume element value is a percentage of the maximum ranging from 0 to 100, wi" +
            "th decimal values allowed. This corresponds to a scaling value for the MIDI 1.0 " +
            "channel volume controller.")]
        [System.ComponentModel.DataAnnotations.RangeAttribute(typeof(decimal), "0", "100")]
        [System.Xml.Serialization.XmlElementAttribute("volume")]
        public decimal Volume { get; set; }

        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the Volume property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool VolumeSpecified { get; set; }

        /// <summary>
        /// <para>The pan and elevation elements allow placing of sound in a 3-D space relative to the listener. Both are expressed in degrees ranging from -180 to 180. For pan, 0 is straight ahead, -90 is hard left, 90 is hard right, and -180 and 180 are directly behind the listener.</para>
        /// <para>The rotation-degrees type specifies rotation, pan, and elevation values in degrees. Values range from -180 to 180.</para>
        /// <para xml:lang="en">Minimum inclusive value: -180.</para>
        /// <para xml:lang="en">Maximum inclusive value: 180.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute(@"The pan and elevation elements allow placing of sound in a 3-D space relative to the listener. Both are expressed in degrees ranging from -180 to 180. For pan, 0 is straight ahead, -90 is hard left, 90 is hard right, and -180 and 180 are directly behind the listener.")]
        [System.ComponentModel.DataAnnotations.RangeAttribute(typeof(decimal), "-180", "180")]
        [System.Xml.Serialization.XmlElementAttribute("pan")]
        public decimal Pan { get; set; }

        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the Pan property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool PanSpecified { get; set; }

        /// <summary>
        /// <para>The elevation and pan elements allow placing of sound in a 3-D space relative to the listener. Both are expressed in degrees ranging from -180 to 180. For elevation, 0 is level with the listener, 90 is directly above, and -90 is directly below.</para>
        /// <para>The rotation-degrees type specifies rotation, pan, and elevation values in degrees. Values range from -180 to 180.</para>
        /// <para xml:lang="en">Minimum inclusive value: -180.</para>
        /// <para xml:lang="en">Maximum inclusive value: 180.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("The elevation and pan elements allow placing of sound in a 3-D space relative to " +
            "the listener. Both are expressed in degrees ranging from -180 to 180. For elevat" +
            "ion, 0 is level with the listener, 90 is directly above, and -90 is directly bel" +
            "ow.")]
        [System.ComponentModel.DataAnnotations.RangeAttribute(typeof(decimal), "-180", "180")]
        [System.Xml.Serialization.XmlElementAttribute("elevation")]
        public decimal Elevation { get; set; }

        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the Elevation property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool ElevationSpecified { get; set; }

        [System.ComponentModel.DataAnnotations.RequiredAttribute(AllowEmptyStrings=true)]
        [System.Xml.Serialization.XmlAttributeAttribute("id")]
        public string Id { get; set; }
    }

    /// <summary>
    /// <para>The name-display type is used for exact formatting of multi-font text in part and group names to the left of the system. The print-object attribute can be used to determine what, if anything, is printed at the start of each system. Enclosure for the display-text element is none by default. Language for the display-text element is Italian ("it") by default.</para>
    /// </summary>
    [System.ComponentModel.DescriptionAttribute(@"The name-display type is used for exact formatting of multi-font text in part and group names to the left of the system. The print-object attribute can be used to determine what, if anything, is printed at the start of each system. Enclosure for the display-text element is none by default. Language for the display-text element is Italian (""it"") by default.")]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XmlSchemaClassGenerator", "2.1.1142.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute("name-display", Namespace="")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class NameDisplay : IPrintObject
    {

        [System.Xml.Serialization.XmlIgnoreAttribute()]
        private System.Collections.ObjectModel.Collection<FormattedText> _displayText;

        [System.Xml.Serialization.XmlElementAttribute("display-text")]
        public System.Collections.ObjectModel.Collection<FormattedText> DisplayText
        {
            get
            {
                return _displayText;
            }
            private set
            {
                _displayText = value;
            }
        }

        /// <summary>
        /// <para xml:lang="en">Gets a value indicating whether the DisplayText collection is empty.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool DisplayTextSpecified
        {
            get
            {
                return (this.DisplayText.Count != 0);
            }
        }

        /// <summary>
        /// <para xml:lang="en">Initializes a new instance of the <see cref="NameDisplay" /> class.</para>
        /// </summary>
        public NameDisplay()
        {
            this._displayText = new System.Collections.ObjectModel.Collection<FormattedText>();
            this._accidentalText = new System.Collections.ObjectModel.Collection<AccidentalText>();
        }

        [System.Xml.Serialization.XmlIgnoreAttribute()]
        private System.Collections.ObjectModel.Collection<AccidentalText> _accidentalText;

        [System.Xml.Serialization.XmlElementAttribute("accidental-text")]
        public System.Collections.ObjectModel.Collection<AccidentalText> AccidentalText
        {
            get
            {
                return _accidentalText;
            }
            private set
            {
                _accidentalText = value;
            }
        }

        /// <summary>
        /// <para xml:lang="en">Gets a value indicating whether the AccidentalText collection is empty.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool AccidentalTextSpecified
        {
            get
            {
                return (this.AccidentalText.Count != 0);
            }
        }

        [System.Xml.Serialization.XmlAttributeAttribute("print-object")]
        public YesNo PrintObject { get; set; }

        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the PrintObject property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool PrintObjectSpecified { get; set; }
    }

    /// <summary>
    /// <para>The other-play element represents other types of playback. The required type attribute indicates the type of playback to which the element content applies.</para>
    /// </summary>
    [System.ComponentModel.DescriptionAttribute("The other-play element represents other types of playback. The required type attr" +
        "ibute indicates the type of playback to which the element content applies.")]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XmlSchemaClassGenerator", "2.1.1142.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute("other-play", Namespace="")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class OtherPlay
    {

        /// <summary>
        /// <para xml:lang="en">Gets or sets the text value.</para>
        /// </summary>
        [System.Xml.Serialization.XmlTextAttribute()]
        public string Value { get; set; }

        [System.ComponentModel.DataAnnotations.RequiredAttribute(AllowEmptyStrings=true)]
        [System.Xml.Serialization.XmlAttributeAttribute("type")]
        public string Type { get; set; }
    }

    /// <summary>
    /// <para>The play type specifies playback techniques to be used in conjunction with the instrument-sound element. When used as part of a sound element, it applies to all notes going forward in score order. In multi-instrument parts, the affected instrument should be specified using the id attribute. When used as part of a note element, it applies to the current note only.</para>
    /// </summary>
    [System.ComponentModel.DescriptionAttribute(@"The play type specifies playback techniques to be used in conjunction with the instrument-sound element. When used as part of a sound element, it applies to all notes going forward in score order. In multi-instrument parts, the affected instrument should be specified using the id attribute. When used as part of a note element, it applies to the current note only.")]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XmlSchemaClassGenerator", "2.1.1142.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute("play", Namespace="")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class Play
    {

        [System.Xml.Serialization.XmlIgnoreAttribute()]
        private System.Collections.ObjectModel.Collection<string> _ipa;

        /// <summary>
        /// <para>The ipa element represents International Phonetic Alphabet (IPA) sounds for vocal music. String content is limited to IPA 2015 symbols represented in Unicode 13.0.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("The ipa element represents International Phonetic Alphabet (IPA) sounds for vocal" +
            " music. String content is limited to IPA 2015 symbols represented in Unicode 13." +
            "0.")]
        [System.Xml.Serialization.XmlElementAttribute("ipa")]
        public System.Collections.ObjectModel.Collection<string> Ipa
        {
            get
            {
                return _ipa;
            }
            private set
            {
                _ipa = value;
            }
        }

        /// <summary>
        /// <para xml:lang="en">Gets a value indicating whether the Ipa collection is empty.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool IpaSpecified
        {
            get
            {
                return (this.Ipa.Count != 0);
            }
        }

        /// <summary>
        /// <para xml:lang="en">Initializes a new instance of the <see cref="Play" /> class.</para>
        /// </summary>
        public Play()
        {
            this._ipa = new System.Collections.ObjectModel.Collection<string>();
            this._mute = new System.Collections.ObjectModel.Collection<Mute>();
            this._semiPitched = new System.Collections.ObjectModel.Collection<SemiPitched>();
            this._otherPlay = new System.Collections.ObjectModel.Collection<OtherPlay>();
        }

        [System.Xml.Serialization.XmlIgnoreAttribute()]
        private System.Collections.ObjectModel.Collection<Mute> _mute;

        [System.Xml.Serialization.XmlElementAttribute("mute")]
        public System.Collections.ObjectModel.Collection<Mute> Mute
        {
            get
            {
                return _mute;
            }
            private set
            {
                _mute = value;
            }
        }

        /// <summary>
        /// <para xml:lang="en">Gets a value indicating whether the Mute collection is empty.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool MuteSpecified
        {
            get
            {
                return (this.Mute.Count != 0);
            }
        }

        [System.Xml.Serialization.XmlIgnoreAttribute()]
        private System.Collections.ObjectModel.Collection<SemiPitched> _semiPitched;

        [System.Xml.Serialization.XmlElementAttribute("semi-pitched")]
        public System.Collections.ObjectModel.Collection<SemiPitched> SemiPitched
        {
            get
            {
                return _semiPitched;
            }
            private set
            {
                _semiPitched = value;
            }
        }

        /// <summary>
        /// <para xml:lang="en">Gets a value indicating whether the SemiPitched collection is empty.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool SemiPitchedSpecified
        {
            get
            {
                return (this.SemiPitched.Count != 0);
            }
        }

        [System.Xml.Serialization.XmlIgnoreAttribute()]
        private System.Collections.ObjectModel.Collection<OtherPlay> _otherPlay;

        [System.Xml.Serialization.XmlElementAttribute("other-play")]
        public System.Collections.ObjectModel.Collection<OtherPlay> OtherPlay
        {
            get
            {
                return _otherPlay;
            }
            private set
            {
                _otherPlay = value;
            }
        }

        /// <summary>
        /// <para xml:lang="en">Gets a value indicating whether the OtherPlay collection is empty.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool OtherPlaySpecified
        {
            get
            {
                return (this.OtherPlay.Count != 0);
            }
        }

        [System.Xml.Serialization.XmlAttributeAttribute("id")]
        public string Id { get; set; }
    }

    /// <summary>
    /// <para>The segno type is the visual indicator of a segno sign. The exact glyph can be specified with the smufl attribute. A sound element is also needed to guide playback applications reliably.</para>
    /// </summary>
    [System.ComponentModel.DescriptionAttribute("The segno type is the visual indicator of a segno sign. The exact glyph can be sp" +
        "ecified with the smufl attribute. A sound element is also needed to guide playba" +
        "ck applications reliably.")]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XmlSchemaClassGenerator", "2.1.1142.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute("segno", Namespace="")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class Segno : IPrintStyleAlign, IOptionalUniqueId
    {

        /// <summary>
        /// <para>The tenths type is a number representing tenths of interline staff space (positive or negative). Both integer and decimal values are allowed, such as 5 for a half space and 2.5 for a quarter space. Interline space is measured from the middle of a staff line.
        ///
        ///Distances in a MusicXML file are measured in tenths of staff space. Tenths are then scaled to millimeters within the scaling element, used in the defaults element at the start of a score. Individual staves can apply a scaling factor to adjust staff size. When a MusicXML element or attribute refers to tenths, it means the global tenths defined by the scaling element, not the local tenths as adjusted by the staff-size element.</para>
        /// </summary>
        [System.Xml.Serialization.XmlAttributeAttribute("default-x")]
        public decimal DefaultX { get; set; }

        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the DefaultX property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool DefaultXSpecified { get; set; }

        /// <summary>
        /// <para>The tenths type is a number representing tenths of interline staff space (positive or negative). Both integer and decimal values are allowed, such as 5 for a half space and 2.5 for a quarter space. Interline space is measured from the middle of a staff line.
        ///
        ///Distances in a MusicXML file are measured in tenths of staff space. Tenths are then scaled to millimeters within the scaling element, used in the defaults element at the start of a score. Individual staves can apply a scaling factor to adjust staff size. When a MusicXML element or attribute refers to tenths, it means the global tenths defined by the scaling element, not the local tenths as adjusted by the staff-size element.</para>
        /// </summary>
        [System.Xml.Serialization.XmlAttributeAttribute("default-y")]
        public decimal DefaultY { get; set; }

        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the DefaultY property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool DefaultYSpecified { get; set; }

        /// <summary>
        /// <para>The tenths type is a number representing tenths of interline staff space (positive or negative). Both integer and decimal values are allowed, such as 5 for a half space and 2.5 for a quarter space. Interline space is measured from the middle of a staff line.
        ///
        ///Distances in a MusicXML file are measured in tenths of staff space. Tenths are then scaled to millimeters within the scaling element, used in the defaults element at the start of a score. Individual staves can apply a scaling factor to adjust staff size. When a MusicXML element or attribute refers to tenths, it means the global tenths defined by the scaling element, not the local tenths as adjusted by the staff-size element.</para>
        /// </summary>
        [System.Xml.Serialization.XmlAttributeAttribute("relative-x")]
        public decimal RelativeX { get; set; }

        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the RelativeX property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool RelativeXSpecified { get; set; }

        /// <summary>
        /// <para>The tenths type is a number representing tenths of interline staff space (positive or negative). Both integer and decimal values are allowed, such as 5 for a half space and 2.5 for a quarter space. Interline space is measured from the middle of a staff line.
        ///
        ///Distances in a MusicXML file are measured in tenths of staff space. Tenths are then scaled to millimeters within the scaling element, used in the defaults element at the start of a score. Individual staves can apply a scaling factor to adjust staff size. When a MusicXML element or attribute refers to tenths, it means the global tenths defined by the scaling element, not the local tenths as adjusted by the staff-size element.</para>
        /// </summary>
        [System.Xml.Serialization.XmlAttributeAttribute("relative-y")]
        public decimal RelativeY { get; set; }

        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the RelativeY property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool RelativeYSpecified { get; set; }

        /// <summary>
        /// <para>The font-family is a comma-separated list of font names. These can be specific font styles such as Maestro or Opus, or one of several generic font styles: music, engraved, handwritten, text, serif, sans-serif, handwritten, cursive, fantasy, and monospace. The music, engraved, and handwritten values refer to music fonts; the rest refer to text fonts. The fantasy style refers to decorative text such as found in older German-style printing.</para>
        /// <para xml:lang="en">Pattern: [^,]+(, ?[^,]+)*.</para>
        /// </summary>
        [System.ComponentModel.DataAnnotations.RegularExpressionAttribute("[^,]+(, ?[^,]+)*")]
        [System.Xml.Serialization.XmlAttributeAttribute("font-family")]
        public string FontFamily { get; set; }

        [System.Xml.Serialization.XmlAttributeAttribute("font-style")]
        public FontStyle FontStyle { get; set; }

        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the FontStyle property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool FontStyleSpecified { get; set; }

        /// <summary>
        /// <para>The font-size can be one of the CSS font sizes (xx-small, x-small, small, medium, large, x-large, xx-large) or a numeric point size.</para>
        /// </summary>
        [System.Xml.Serialization.XmlAttributeAttribute("font-size")]
        public string FontSize { get; set; }

        [System.Xml.Serialization.XmlAttributeAttribute("font-weight")]
        public FontWeight FontWeight { get; set; }

        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the FontWeight property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool FontWeightSpecified { get; set; }

        /// <summary>
        /// <para>The color type indicates the color of an element. Color may be represented as hexadecimal RGB triples, as in HTML, or as hexadecimal ARGB tuples, with the A indicating alpha of transparency. An alpha value of 00 is totally transparent; FF is totally opaque. If RGB is used, the A value is assumed to be FF.
        ///
        ///For instance, the RGB value "#800080" represents purple. An ARGB value of "#40800080" would be a transparent purple.
        ///
        ///As in SVG 1.1, colors are defined in terms of the sRGB color space (IEC 61966).</para>
        /// <para xml:lang="en">Pattern: #[\dA-F]{6}([\dA-F][\dA-F])?.</para>
        /// </summary>
        [System.ComponentModel.DataAnnotations.RegularExpressionAttribute("#[\\dA-F]{6}([\\dA-F][\\dA-F])?")]
        [System.Xml.Serialization.XmlAttributeAttribute("color")]
        public string Color { get; set; }

        [System.Xml.Serialization.XmlAttributeAttribute("halign")]
        public LeftCenterRight Halign { get; set; }

        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the Halign property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool HalignSpecified { get; set; }

        [System.Xml.Serialization.XmlAttributeAttribute("valign")]
        public Valign Valign { get; set; }

        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the Valign property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool ValignSpecified { get; set; }

        [System.Xml.Serialization.XmlAttributeAttribute("id")]
        public string Id { get; set; }

        /// <summary>
        /// <para>The smufl-segno-glyph-name type is used to reference a specific Standard Music Font Layout (SMuFL) segno character. The value is a SMuFL canonical glyph name that starts with segno.</para>
        /// <para xml:lang="en">Pattern: segno\c*.</para>
        /// </summary>
        [System.ComponentModel.DataAnnotations.RegularExpressionAttribute("segno\\c*")]
        [System.Xml.Serialization.XmlAttributeAttribute("smufl")]
        public string Smufl { get; set; }
    }

    /// <summary>
    /// <para>The string type is used with tablature notation, regular notation (where it is often circled), and chord diagrams. String numbers start with 1 for the highest pitched full-length string.</para>
    /// </summary>
    [System.ComponentModel.DescriptionAttribute("The string type is used with tablature notation, regular notation (where it is of" +
        "ten circled), and chord diagrams. String numbers start with 1 for the highest pi" +
        "tched full-length string.")]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XmlSchemaClassGenerator", "2.1.1142.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute("string", Namespace="")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlRootAttribute("string", Namespace="")]
    public partial class String : IPrintStyle, IPlacement
    {

        /// <summary>
        /// <para xml:lang="en">Gets or sets the text value.</para>
        /// </summary>
        [System.Xml.Serialization.XmlTextAttribute()]
        public string Value { get; set; }

        /// <summary>
        /// <para>The tenths type is a number representing tenths of interline staff space (positive or negative). Both integer and decimal values are allowed, such as 5 for a half space and 2.5 for a quarter space. Interline space is measured from the middle of a staff line.
        ///
        ///Distances in a MusicXML file are measured in tenths of staff space. Tenths are then scaled to millimeters within the scaling element, used in the defaults element at the start of a score. Individual staves can apply a scaling factor to adjust staff size. When a MusicXML element or attribute refers to tenths, it means the global tenths defined by the scaling element, not the local tenths as adjusted by the staff-size element.</para>
        /// </summary>
        [System.Xml.Serialization.XmlAttributeAttribute("default-x")]
        public decimal DefaultX { get; set; }

        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the DefaultX property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool DefaultXSpecified { get; set; }

        /// <summary>
        /// <para>The tenths type is a number representing tenths of interline staff space (positive or negative). Both integer and decimal values are allowed, such as 5 for a half space and 2.5 for a quarter space. Interline space is measured from the middle of a staff line.
        ///
        ///Distances in a MusicXML file are measured in tenths of staff space. Tenths are then scaled to millimeters within the scaling element, used in the defaults element at the start of a score. Individual staves can apply a scaling factor to adjust staff size. When a MusicXML element or attribute refers to tenths, it means the global tenths defined by the scaling element, not the local tenths as adjusted by the staff-size element.</para>
        /// </summary>
        [System.Xml.Serialization.XmlAttributeAttribute("default-y")]
        public decimal DefaultY { get; set; }

        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the DefaultY property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool DefaultYSpecified { get; set; }

        /// <summary>
        /// <para>The tenths type is a number representing tenths of interline staff space (positive or negative). Both integer and decimal values are allowed, such as 5 for a half space and 2.5 for a quarter space. Interline space is measured from the middle of a staff line.
        ///
        ///Distances in a MusicXML file are measured in tenths of staff space. Tenths are then scaled to millimeters within the scaling element, used in the defaults element at the start of a score. Individual staves can apply a scaling factor to adjust staff size. When a MusicXML element or attribute refers to tenths, it means the global tenths defined by the scaling element, not the local tenths as adjusted by the staff-size element.</para>
        /// </summary>
        [System.Xml.Serialization.XmlAttributeAttribute("relative-x")]
        public decimal RelativeX { get; set; }

        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the RelativeX property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool RelativeXSpecified { get; set; }

        /// <summary>
        /// <para>The tenths type is a number representing tenths of interline staff space (positive or negative). Both integer and decimal values are allowed, such as 5 for a half space and 2.5 for a quarter space. Interline space is measured from the middle of a staff line.
        ///
        ///Distances in a MusicXML file are measured in tenths of staff space. Tenths are then scaled to millimeters within the scaling element, used in the defaults element at the start of a score. Individual staves can apply a scaling factor to adjust staff size. When a MusicXML element or attribute refers to tenths, it means the global tenths defined by the scaling element, not the local tenths as adjusted by the staff-size element.</para>
        /// </summary>
        [System.Xml.Serialization.XmlAttributeAttribute("relative-y")]
        public decimal RelativeY { get; set; }

        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the RelativeY property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool RelativeYSpecified { get; set; }

        /// <summary>
        /// <para>The font-family is a comma-separated list of font names. These can be specific font styles such as Maestro or Opus, or one of several generic font styles: music, engraved, handwritten, text, serif, sans-serif, handwritten, cursive, fantasy, and monospace. The music, engraved, and handwritten values refer to music fonts; the rest refer to text fonts. The fantasy style refers to decorative text such as found in older German-style printing.</para>
        /// <para xml:lang="en">Pattern: [^,]+(, ?[^,]+)*.</para>
        /// </summary>
        [System.ComponentModel.DataAnnotations.RegularExpressionAttribute("[^,]+(, ?[^,]+)*")]
        [System.Xml.Serialization.XmlAttributeAttribute("font-family")]
        public string FontFamily { get; set; }

        [System.Xml.Serialization.XmlAttributeAttribute("font-style")]
        public FontStyle FontStyle { get; set; }

        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the FontStyle property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool FontStyleSpecified { get; set; }

        /// <summary>
        /// <para>The font-size can be one of the CSS font sizes (xx-small, x-small, small, medium, large, x-large, xx-large) or a numeric point size.</para>
        /// </summary>
        [System.Xml.Serialization.XmlAttributeAttribute("font-size")]
        public string FontSize { get; set; }

        [System.Xml.Serialization.XmlAttributeAttribute("font-weight")]
        public FontWeight FontWeight { get; set; }

        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the FontWeight property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool FontWeightSpecified { get; set; }

        /// <summary>
        /// <para>The color type indicates the color of an element. Color may be represented as hexadecimal RGB triples, as in HTML, or as hexadecimal ARGB tuples, with the A indicating alpha of transparency. An alpha value of 00 is totally transparent; FF is totally opaque. If RGB is used, the A value is assumed to be FF.
        ///
        ///For instance, the RGB value "#800080" represents purple. An ARGB value of "#40800080" would be a transparent purple.
        ///
        ///As in SVG 1.1, colors are defined in terms of the sRGB color space (IEC 61966).</para>
        /// <para xml:lang="en">Pattern: #[\dA-F]{6}([\dA-F][\dA-F])?.</para>
        /// </summary>
        [System.ComponentModel.DataAnnotations.RegularExpressionAttribute("#[\\dA-F]{6}([\\dA-F][\\dA-F])?")]
        [System.Xml.Serialization.XmlAttributeAttribute("color")]
        public string Color { get; set; }

        [System.Xml.Serialization.XmlAttributeAttribute("placement")]
        public AboveBelow Placement { get; set; }

        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the Placement property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool PlacementSpecified { get; set; }
    }

    /// <summary>
    /// <para>The typed-text type represents a text element with a type attribute.</para>
    /// </summary>
    [System.ComponentModel.DescriptionAttribute("The typed-text type represents a text element with a type attribute.")]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XmlSchemaClassGenerator", "2.1.1142.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute("typed-text", Namespace="")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class TypedText
    {

        /// <summary>
        /// <para xml:lang="en">Gets or sets the text value.</para>
        /// </summary>
        [System.Xml.Serialization.XmlTextAttribute()]
        public string Value { get; set; }

        [System.Xml.Serialization.XmlAttributeAttribute("type")]
        public string Type { get; set; }
    }

    /// <summary>
    /// <para>Wavy lines are one way to indicate trills and vibrato. When used with a barline element, they should always have type="continue" set. The smufl attribute specifies a particular wavy line glyph from the SMuFL Multi-segment lines range.</para>
    /// </summary>
    [System.ComponentModel.DescriptionAttribute("Wavy lines are one way to indicate trills and vibrato. When used with a barline e" +
        "lement, they should always have type=\"continue\" set. The smufl attribute specifi" +
        "es a particular wavy line glyph from the SMuFL Multi-segment lines range.")]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XmlSchemaClassGenerator", "2.1.1142.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute("wavy-line", Namespace="")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class WavyLine : IPosition, IPlacement, IColor, ITrillSound
    {

        [System.ComponentModel.DataAnnotations.RequiredAttribute(AllowEmptyStrings=true)]
        [System.Xml.Serialization.XmlAttributeAttribute("type")]
        public StartStopContinue Type { get; set; }

        /// <summary>
        /// <para>Slurs, tuplets, and many other features can be concurrent and overlap within a single musical part. The number-level entity distinguishes up to 16 concurrent objects of the same type when the objects overlap in MusicXML document order. Values greater than 6 are usually only needed for music with a large number of divisi staves in a single part, or if there are more than 6 cross-staff arpeggios in a single measure. When a number-level value is implied, the value is 1 by default.
        ///
        ///When polyphonic parts are involved, the ordering within a MusicXML document can differ from musical score order. As an example, say we have a piano part in 4/4 where within a single measure, all the notes on the top staff are followed by all the notes on the bottom staff. In this example, each staff has a slur that starts on beat 2 and stops on beat 3, and there is a third slur that goes from beat 1 of one staff to beat 4 of the other staff.
        ///
        ///In this situation, the two mid-measure slurs can use the same number because they do not overlap in MusicXML document order, even though they do overlap in musical score order. Within the MusicXML document, the top staff slur will both start and stop before the bottom staff slur starts and stops.
        ///
        ///If the cross-staff slur starts in the top staff and stops in the bottom staff, it will need a separate number from the mid-measure slurs because it overlaps those slurs in MusicXML document order. However, if the cross-staff slur starts in the bottom staff and stops in the top staff, all three slurs can use the same number. None of them overlap within the MusicXML document, even though they all overlap each other in the musical score order. Within the MusicXML document, the start and stop of the top-staff slur will be followed by the stop and start of the cross-staff slur, followed by the start and stop of the bottom-staff slur.
        ///
        ///As this example demonstrates, a reading program should be prepared to handle cases where the number-levels start and stop in an arbitrary order. Because the start and stop values refer to musical score order, a program may find the stopping point of an object earlier in the MusicXML document than it will find its starting point.</para>
        /// <para xml:lang="en">Minimum inclusive value: 1.</para>
        /// <para xml:lang="en">Maximum inclusive value: 16.</para>
        /// </summary>
        [System.ComponentModel.DataAnnotations.RangeAttribute(typeof(decimal), "1", "16")]
        [System.Xml.Serialization.XmlAttributeAttribute("number")]
        public byte Number { get; set; }

        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the Number property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool NumberSpecified { get; set; }

        /// <summary>
        /// <para>The smufl-wavy-line-glyph-name type is used to reference a specific Standard Music Font Layout (SMuFL) wavy line character. The value is a SMuFL canonical glyph name that either starts with wiggle, or begins with guitar and ends with VibratoStroke. This includes all the glyphs in the Multi-segment lines range, excluding the beam glyphs.</para>
        /// <para xml:lang="en">Pattern: (wiggle\c+)|(guitar\c*VibratoStroke).</para>
        /// </summary>
        [System.ComponentModel.DataAnnotations.RegularExpressionAttribute("(wiggle\\c+)|(guitar\\c*VibratoStroke)")]
        [System.Xml.Serialization.XmlAttributeAttribute("smufl")]
        public string Smufl { get; set; }

        /// <summary>
        /// <para>The tenths type is a number representing tenths of interline staff space (positive or negative). Both integer and decimal values are allowed, such as 5 for a half space and 2.5 for a quarter space. Interline space is measured from the middle of a staff line.
        ///
        ///Distances in a MusicXML file are measured in tenths of staff space. Tenths are then scaled to millimeters within the scaling element, used in the defaults element at the start of a score. Individual staves can apply a scaling factor to adjust staff size. When a MusicXML element or attribute refers to tenths, it means the global tenths defined by the scaling element, not the local tenths as adjusted by the staff-size element.</para>
        /// </summary>
        [System.Xml.Serialization.XmlAttributeAttribute("default-x")]
        public decimal DefaultX { get; set; }

        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the DefaultX property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool DefaultXSpecified { get; set; }

        /// <summary>
        /// <para>The tenths type is a number representing tenths of interline staff space (positive or negative). Both integer and decimal values are allowed, such as 5 for a half space and 2.5 for a quarter space. Interline space is measured from the middle of a staff line.
        ///
        ///Distances in a MusicXML file are measured in tenths of staff space. Tenths are then scaled to millimeters within the scaling element, used in the defaults element at the start of a score. Individual staves can apply a scaling factor to adjust staff size. When a MusicXML element or attribute refers to tenths, it means the global tenths defined by the scaling element, not the local tenths as adjusted by the staff-size element.</para>
        /// </summary>
        [System.Xml.Serialization.XmlAttributeAttribute("default-y")]
        public decimal DefaultY { get; set; }

        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the DefaultY property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool DefaultYSpecified { get; set; }

        /// <summary>
        /// <para>The tenths type is a number representing tenths of interline staff space (positive or negative). Both integer and decimal values are allowed, such as 5 for a half space and 2.5 for a quarter space. Interline space is measured from the middle of a staff line.
        ///
        ///Distances in a MusicXML file are measured in tenths of staff space. Tenths are then scaled to millimeters within the scaling element, used in the defaults element at the start of a score. Individual staves can apply a scaling factor to adjust staff size. When a MusicXML element or attribute refers to tenths, it means the global tenths defined by the scaling element, not the local tenths as adjusted by the staff-size element.</para>
        /// </summary>
        [System.Xml.Serialization.XmlAttributeAttribute("relative-x")]
        public decimal RelativeX { get; set; }

        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the RelativeX property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool RelativeXSpecified { get; set; }

        /// <summary>
        /// <para>The tenths type is a number representing tenths of interline staff space (positive or negative). Both integer and decimal values are allowed, such as 5 for a half space and 2.5 for a quarter space. Interline space is measured from the middle of a staff line.
        ///
        ///Distances in a MusicXML file are measured in tenths of staff space. Tenths are then scaled to millimeters within the scaling element, used in the defaults element at the start of a score. Individual staves can apply a scaling factor to adjust staff size. When a MusicXML element or attribute refers to tenths, it means the global tenths defined by the scaling element, not the local tenths as adjusted by the staff-size element.</para>
        /// </summary>
        [System.Xml.Serialization.XmlAttributeAttribute("relative-y")]
        public decimal RelativeY { get; set; }

        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the RelativeY property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool RelativeYSpecified { get; set; }

        [System.Xml.Serialization.XmlAttributeAttribute("placement")]
        public AboveBelow Placement { get; set; }

        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the Placement property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool PlacementSpecified { get; set; }

        /// <summary>
        /// <para>The color type indicates the color of an element. Color may be represented as hexadecimal RGB triples, as in HTML, or as hexadecimal ARGB tuples, with the A indicating alpha of transparency. An alpha value of 00 is totally transparent; FF is totally opaque. If RGB is used, the A value is assumed to be FF.
        ///
        ///For instance, the RGB value "#800080" represents purple. An ARGB value of "#40800080" would be a transparent purple.
        ///
        ///As in SVG 1.1, colors are defined in terms of the sRGB color space (IEC 61966).</para>
        /// <para xml:lang="en">Pattern: #[\dA-F]{6}([\dA-F][\dA-F])?.</para>
        /// </summary>
        [System.ComponentModel.DataAnnotations.RegularExpressionAttribute("#[\\dA-F]{6}([\\dA-F][\\dA-F])?")]
        [System.Xml.Serialization.XmlAttributeAttribute("color")]
        public string Color { get; set; }

        [System.Xml.Serialization.XmlAttributeAttribute("start-note")]
        public StartNote StartNote { get; set; }

        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the StartNote property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool StartNoteSpecified { get; set; }

        [System.Xml.Serialization.XmlAttributeAttribute("trill-step")]
        public TrillStep TrillStep { get; set; }

        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the TrillStep property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool TrillStepSpecified { get; set; }

        [System.Xml.Serialization.XmlAttributeAttribute("two-note-turn")]
        public TwoNoteTurn TwoNoteTurn { get; set; }

        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the TwoNoteTurn property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool TwoNoteTurnSpecified { get; set; }

        [System.Xml.Serialization.XmlAttributeAttribute("accelerate")]
        public YesNo Accelerate { get; set; }

        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the Accelerate property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool AccelerateSpecified { get; set; }

        /// <summary>
        /// <para>The trill-beats type specifies the beats used in a trill-sound or bend-sound attribute group. It is a decimal value with a minimum value of 2.</para>
        /// <para xml:lang="en">Minimum inclusive value: 2.</para>
        /// </summary>
        [System.Xml.Serialization.XmlAttributeAttribute("beats")]
        public decimal Beats { get; set; }

        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the Beats property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool BeatsSpecified { get; set; }

        /// <summary>
        /// <para>The percent type specifies a percentage from 0 to 100.</para>
        /// <para xml:lang="en">Minimum inclusive value: 0.</para>
        /// <para xml:lang="en">Maximum inclusive value: 100.</para>
        /// </summary>
        [System.ComponentModel.DataAnnotations.RangeAttribute(typeof(decimal), "0", "100")]
        [System.Xml.Serialization.XmlAttributeAttribute("second-beat")]
        public decimal SecondBeat { get; set; }

        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the SecondBeat property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool SecondBeatSpecified { get; set; }

        /// <summary>
        /// <para>The percent type specifies a percentage from 0 to 100.</para>
        /// <para xml:lang="en">Minimum inclusive value: 0.</para>
        /// <para xml:lang="en">Maximum inclusive value: 100.</para>
        /// </summary>
        [System.ComponentModel.DataAnnotations.RangeAttribute(typeof(decimal), "0", "100")]
        [System.Xml.Serialization.XmlAttributeAttribute("last-beat")]
        public decimal LastBeat { get; set; }

        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the LastBeat property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool LastBeatSpecified { get; set; }
    }

    /// <summary>
    /// <para>The attributes element contains musical information that typically changes on measure boundaries. This includes key and time signatures, clefs, transpositions, and staving. When attributes are changed mid-measure, it affects the music in score order, not in MusicXML document order.</para>
    /// </summary>
    [System.ComponentModel.DescriptionAttribute(@"The attributes element contains musical information that typically changes on measure boundaries. This includes key and time signatures, clefs, transpositions, and staving. When attributes are changed mid-measure, it affects the music in score order, not in MusicXML document order.")]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XmlSchemaClassGenerator", "2.1.1142.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute("attributes", Namespace="")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class Attributes : IEditorial
    {

        [System.Xml.Serialization.XmlElementAttribute("footnote")]
        public FormattedText Footnote { get; set; }

        [System.Xml.Serialization.XmlElementAttribute("level")]
        public Level Level { get; set; }

        /// <summary>
        /// <para>Musical notation duration is commonly represented as fractions. The divisions element indicates how many divisions per quarter note are used to indicate a note's duration. For example, if duration = 1 and divisions = 2, this is an eighth note duration. Duration and divisions are used directly for generating sound output, so they must be chosen to take tuplets into account. Using a divisions element lets us use just one number to represent a duration for each note in the score, while retaining the full power of a fractional representation. If maximum compatibility with Standard MIDI 1.0 files is important, do not have the divisions value exceed 16383.</para>
        /// <para>The positive-divisions type restricts divisions values to positive numbers.</para>
        /// <para xml:lang="en">Minimum exclusive value: 0.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute(@"Musical notation duration is commonly represented as fractions. The divisions element indicates how many divisions per quarter note are used to indicate a note's duration. For example, if duration = 1 and divisions = 2, this is an eighth note duration. Duration and divisions are used directly for generating sound output, so they must be chosen to take tuplets into account. Using a divisions element lets us use just one number to represent a duration for each note in the score, while retaining the full power of a fractional representation. If maximum compatibility with Standard MIDI 1.0 files is important, do not have the divisions value exceed 16383.")]
        [System.Xml.Serialization.XmlElementAttribute("divisions")]
        public decimal Divisions { get; set; }

        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the Divisions property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool DivisionsSpecified { get; set; }

        [System.Xml.Serialization.XmlIgnoreAttribute()]
        private System.Collections.ObjectModel.Collection<Key> _key;

        /// <summary>
        /// <para>The key element represents a key signature. Both traditional and non-traditional key signatures are supported. The optional number attribute refers to staff numbers. If absent, the key signature applies to all staves in the part.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("The key element represents a key signature. Both traditional and non-traditional " +
            "key signatures are supported. The optional number attribute refers to staff numb" +
            "ers. If absent, the key signature applies to all staves in the part.")]
        [System.Xml.Serialization.XmlElementAttribute("key")]
        public System.Collections.ObjectModel.Collection<Key> Key
        {
            get
            {
                return _key;
            }
            private set
            {
                _key = value;
            }
        }

        /// <summary>
        /// <para xml:lang="en">Gets a value indicating whether the Key collection is empty.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool KeySpecified
        {
            get
            {
                return (this.Key.Count != 0);
            }
        }

        /// <summary>
        /// <para xml:lang="en">Initializes a new instance of the <see cref="Attributes" /> class.</para>
        /// </summary>
        public Attributes()
        {
            this._key = new System.Collections.ObjectModel.Collection<Key>();
            this._time = new System.Collections.ObjectModel.Collection<Time>();
            this._clef = new System.Collections.ObjectModel.Collection<Clef>();
            this._staffDetails = new System.Collections.ObjectModel.Collection<StaffDetails>();
            this._transpose = new System.Collections.ObjectModel.Collection<Transpose>();
            this._forPart = new System.Collections.ObjectModel.Collection<ForPart>();
            this._directive = new System.Collections.ObjectModel.Collection<AttributesDirective>();
            this._measureStyle = new System.Collections.ObjectModel.Collection<MeasureStyle>();
        }

        [System.Xml.Serialization.XmlIgnoreAttribute()]
        private System.Collections.ObjectModel.Collection<Time> _time;

        /// <summary>
        /// <para>Time signatures are represented by the beats element for the numerator and the beat-type element for the denominator.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Time signatures are represented by the beats element for the numerator and the be" +
            "at-type element for the denominator.")]
        [System.Xml.Serialization.XmlElementAttribute("time")]
        public System.Collections.ObjectModel.Collection<Time> Time
        {
            get
            {
                return _time;
            }
            private set
            {
                _time = value;
            }
        }

        /// <summary>
        /// <para xml:lang="en">Gets a value indicating whether the Time collection is empty.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool TimeSpecified
        {
            get
            {
                return (this.Time.Count != 0);
            }
        }

        /// <summary>
        /// <para>The staves element is used if there is more than one staff represented in the given part (e.g., 2 staves for typical piano parts). If absent, a value of 1 is assumed. Staves are ordered from top to bottom in a part in numerical order, with staff 1 above staff 2.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute(@"The staves element is used if there is more than one staff represented in the given part (e.g., 2 staves for typical piano parts). If absent, a value of 1 is assumed. Staves are ordered from top to bottom in a part in numerical order, with staff 1 above staff 2.")]
        [System.Xml.Serialization.XmlElementAttribute("staves")]
        public string Staves { get; set; }

        /// <summary>
        /// <para>The part-symbol element indicates how a symbol for a multi-staff part is indicated in the score.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("The part-symbol element indicates how a symbol for a multi-staff part is indicate" +
            "d in the score.")]
        [System.Xml.Serialization.XmlElementAttribute("part-symbol")]
        public PartSymbol PartSymbol { get; set; }

        /// <summary>
        /// <para>The instruments element is only used if more than one instrument is represented in the part (e.g., oboe I and II where they play together most of the time). If absent, a value of 1 is assumed.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("The instruments element is only used if more than one instrument is represented i" +
            "n the part (e.g., oboe I and II where they play together most of the time). If a" +
            "bsent, a value of 1 is assumed.")]
        [System.Xml.Serialization.XmlElementAttribute("instruments")]
        public string Instruments { get; set; }

        [System.Xml.Serialization.XmlIgnoreAttribute()]
        private System.Collections.ObjectModel.Collection<Clef> _clef;

        /// <summary>
        /// <para>Clefs are represented by a combination of sign, line, and clef-octave-change elements.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Clefs are represented by a combination of sign, line, and clef-octave-change elem" +
            "ents.")]
        [System.Xml.Serialization.XmlElementAttribute("clef")]
        public System.Collections.ObjectModel.Collection<Clef> Clef
        {
            get
            {
                return _clef;
            }
            private set
            {
                _clef = value;
            }
        }

        /// <summary>
        /// <para xml:lang="en">Gets a value indicating whether the Clef collection is empty.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool ClefSpecified
        {
            get
            {
                return (this.Clef.Count != 0);
            }
        }

        [System.Xml.Serialization.XmlIgnoreAttribute()]
        private System.Collections.ObjectModel.Collection<StaffDetails> _staffDetails;

        /// <summary>
        /// <para>The staff-details element is used to indicate different types of staves.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("The staff-details element is used to indicate different types of staves.")]
        [System.Xml.Serialization.XmlElementAttribute("staff-details")]
        public System.Collections.ObjectModel.Collection<StaffDetails> StaffDetails
        {
            get
            {
                return _staffDetails;
            }
            private set
            {
                _staffDetails = value;
            }
        }

        /// <summary>
        /// <para xml:lang="en">Gets a value indicating whether the StaffDetails collection is empty.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool StaffDetailsSpecified
        {
            get
            {
                return (this.StaffDetails.Count != 0);
            }
        }

        [System.Xml.Serialization.XmlIgnoreAttribute()]
        private System.Collections.ObjectModel.Collection<Transpose> _transpose;

        /// <summary>
        /// <para>If the part is being encoded for a transposing instrument in written vs. concert pitch, the transposition must be encoded in the transpose element using the transpose type.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("If the part is being encoded for a transposing instrument in written vs. concert " +
            "pitch, the transposition must be encoded in the transpose element using the tran" +
            "spose type.")]
        [System.Xml.Serialization.XmlElementAttribute("transpose")]
        public System.Collections.ObjectModel.Collection<Transpose> Transpose
        {
            get
            {
                return _transpose;
            }
            private set
            {
                _transpose = value;
            }
        }

        /// <summary>
        /// <para xml:lang="en">Gets a value indicating whether the Transpose collection is empty.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool TransposeSpecified
        {
            get
            {
                return (this.Transpose.Count != 0);
            }
        }

        [System.Xml.Serialization.XmlIgnoreAttribute()]
        private System.Collections.ObjectModel.Collection<ForPart> _forPart;

        /// <summary>
        /// <para>The for-part element is used in a concert score to indicate the transposition for a transposed part created from that score. It is only used in score files that contain a concert-score element in the defaults. This allows concert scores with transposed parts to be represented in a single uncompressed MusicXML file.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute(@"The for-part element is used in a concert score to indicate the transposition for a transposed part created from that score. It is only used in score files that contain a concert-score element in the defaults. This allows concert scores with transposed parts to be represented in a single uncompressed MusicXML file.")]
        [System.Xml.Serialization.XmlElementAttribute("for-part")]
        public System.Collections.ObjectModel.Collection<ForPart> ForPart
        {
            get
            {
                return _forPart;
            }
            private set
            {
                _forPart = value;
            }
        }

        /// <summary>
        /// <para xml:lang="en">Gets a value indicating whether the ForPart collection is empty.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool ForPartSpecified
        {
            get
            {
                return (this.ForPart.Count != 0);
            }
        }

        [System.Xml.Serialization.XmlIgnoreAttribute()]
        private System.Collections.ObjectModel.Collection<AttributesDirective> _directive;

        /// <summary>
        /// <para>Directives are like directions, but can be grouped together with attributes for convenience. This is typically used for tempo markings at the beginning of a piece of music. This element was deprecated in Version 2.0 in favor of the direction element's directive attribute. Language names come from ISO 639, with optional country subcodes from ISO 3166.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute(@"Directives are like directions, but can be grouped together with attributes for convenience. This is typically used for tempo markings at the beginning of a piece of music. This element was deprecated in Version 2.0 in favor of the direction element's directive attribute. Language names come from ISO 639, with optional country subcodes from ISO 3166.")]
        [System.Xml.Serialization.XmlElementAttribute("directive")]
        public System.Collections.ObjectModel.Collection<AttributesDirective> Directive
        {
            get
            {
                return _directive;
            }
            private set
            {
                _directive = value;
            }
        }

        /// <summary>
        /// <para xml:lang="en">Gets a value indicating whether the Directive collection is empty.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool DirectiveSpecified
        {
            get
            {
                return (this.Directive.Count != 0);
            }
        }

        [System.Xml.Serialization.XmlIgnoreAttribute()]
        private System.Collections.ObjectModel.Collection<MeasureStyle> _measureStyle;

        /// <summary>
        /// <para>A measure-style indicates a special way to print partial to multiple measures within a part. This includes multiple rests over several measures, repeats of beats, single, or multiple measures, and use of slash notation.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("A measure-style indicates a special way to print partial to multiple measures wit" +
            "hin a part. This includes multiple rests over several measures, repeats of beats" +
            ", single, or multiple measures, and use of slash notation.")]
        [System.Xml.Serialization.XmlElementAttribute("measure-style")]
        public System.Collections.ObjectModel.Collection<MeasureStyle> MeasureStyle
        {
            get
            {
                return _measureStyle;
            }
            private set
            {
                _measureStyle = value;
            }
        }

        /// <summary>
        /// <para xml:lang="en">Gets a value indicating whether the MeasureStyle collection is empty.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool MeasureStyleSpecified
        {
            get
            {
                return (this.MeasureStyle.Count != 0);
            }
        }
    }

    /// <summary>
    /// <para>The editorial group specifies editorial information for a musical element.</para>
    /// </summary>
    [System.ComponentModel.DescriptionAttribute("The editorial group specifies editorial information for a musical element.")]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XmlSchemaClassGenerator", "2.1.1142.0")]
    public partial interface IEditorial : IFootnote, ILevel
    {
    }

    /// <summary>
    /// <para>The footnote element specifies editorial information that appears in footnotes in the printed score. It is defined within a group due to its multiple uses within the MusicXML schema.</para>
    /// </summary>
    [System.ComponentModel.DescriptionAttribute("The footnote element specifies editorial information that appears in footnotes in" +
        " the printed score. It is defined within a group due to its multiple uses within" +
        " the MusicXML schema.")]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XmlSchemaClassGenerator", "2.1.1142.0")]
    public partial interface IFootnote
    {

        FormattedText Footnote
        {
            get;
            set;
        }
    }

    /// <summary>
    /// <para>The level element specifies editorial information for different MusicXML elements. It is defined within a group due to its multiple uses within the MusicXML schema.</para>
    /// </summary>
    [System.ComponentModel.DescriptionAttribute("The level element specifies editorial information for different MusicXML elements" +
        ". It is defined within a group due to its multiple uses within the MusicXML sche" +
        "ma.")]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XmlSchemaClassGenerator", "2.1.1142.0")]
    public partial interface ILevel
    {

        Level Level
        {
            get;
            set;
        }
    }

    /// <summary>
    /// <para>The key type represents a key signature. Both traditional and non-traditional key signatures are supported. The optional number attribute refers to staff numbers. If absent, the key signature applies to all staves in the part. Key signatures appear at the start of each system unless the print-object attribute has been set to "no".</para>
    /// </summary>
    [System.ComponentModel.DescriptionAttribute(@"The key type represents a key signature. Both traditional and non-traditional key signatures are supported. The optional number attribute refers to staff numbers. If absent, the key signature applies to all staves in the part. Key signatures appear at the start of each system unless the print-object attribute has been set to ""no"".")]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XmlSchemaClassGenerator", "2.1.1142.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute("key", Namespace="")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class Key : ITraditionalKey, INonTraditionalKey, IPrintStyle, IPrintObject, IOptionalUniqueId
    {

        [System.Xml.Serialization.XmlElementAttribute("cancel")]
        public Cancel Cancel { get; set; }

        /// <summary>
        /// <para>The fifths type represents the number of flats or sharps in a traditional key signature. Negative numbers are used for flats and positive numbers for sharps, reflecting the key's placement within the circle of fifths (hence the type name).</para>
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute("fifths")]
        public string Fifths { get; set; }

        /// <summary>
        /// <para>The mode type is used to specify major/minor and other mode distinctions. Valid mode values include major, minor, dorian, phrygian, lydian, mixolydian, aeolian, ionian, locrian, and none.</para>
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute("mode")]
        public string Mode { get; set; }

        [System.Xml.Serialization.XmlIgnoreAttribute()]
        private System.Collections.ObjectModel.Collection<Step> _keyStep;

        /// <summary>
        /// <para>Non-traditional key signatures are represented using a list of altered tones. The key-step element indicates the pitch step to be altered, represented using the same names as in the step element.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Non-traditional key signatures are represented using a list of altered tones. The" +
            " key-step element indicates the pitch step to be altered, represented using the " +
            "same names as in the step element.")]
        [System.Xml.Serialization.XmlElementAttribute("key-step")]
        public System.Collections.ObjectModel.Collection<Step> KeyStep
        {
            get
            {
                return _keyStep;
            }
            private set
            {
                _keyStep = value;
            }
        }

        /// <summary>
        /// <para xml:lang="en">Gets a value indicating whether the KeyStep collection is empty.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool KeyStepSpecified
        {
            get
            {
                return (this.KeyStep.Count != 0);
            }
        }

        /// <summary>
        /// <para xml:lang="en">Initializes a new instance of the <see cref="Key" /> class.</para>
        /// </summary>
        public Key()
        {
            this._keyStep = new System.Collections.ObjectModel.Collection<Step>();
            this._keyAlter = new System.Collections.ObjectModel.Collection<decimal>();
            this._keyAccidental = new System.Collections.ObjectModel.Collection<KeyAccidental>();
            this._keyOctave = new System.Collections.ObjectModel.Collection<KeyOctave>();
        }

        [System.Xml.Serialization.XmlIgnoreAttribute()]
        private System.Collections.ObjectModel.Collection<decimal> _keyAlter;

        /// <summary>
        /// <para>Non-traditional key signatures are represented using a list of altered tones. The key-alter element represents the alteration for a given pitch step, represented with semitones in the same manner as the alter element.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Non-traditional key signatures are represented using a list of altered tones. The" +
            " key-alter element represents the alteration for a given pitch step, represented" +
            " with semitones in the same manner as the alter element.")]
        [System.Xml.Serialization.XmlElementAttribute("key-alter")]
        public System.Collections.ObjectModel.Collection<decimal> KeyAlter
        {
            get
            {
                return _keyAlter;
            }
            private set
            {
                _keyAlter = value;
            }
        }

        /// <summary>
        /// <para xml:lang="en">Gets a value indicating whether the KeyAlter collection is empty.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool KeyAlterSpecified
        {
            get
            {
                return (this.KeyAlter.Count != 0);
            }
        }

        [System.Xml.Serialization.XmlIgnoreAttribute()]
        private System.Collections.ObjectModel.Collection<KeyAccidental> _keyAccidental;

        /// <summary>
        /// <para>Non-traditional key signatures are represented using a list of altered tones. The key-accidental element indicates the accidental to be displayed in the key signature, represented in the same manner as the accidental element. It is used for disambiguating microtonal accidentals.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute(@"Non-traditional key signatures are represented using a list of altered tones. The key-accidental element indicates the accidental to be displayed in the key signature, represented in the same manner as the accidental element. It is used for disambiguating microtonal accidentals.")]
        [System.Xml.Serialization.XmlElementAttribute("key-accidental")]
        public System.Collections.ObjectModel.Collection<KeyAccidental> KeyAccidental
        {
            get
            {
                return _keyAccidental;
            }
            private set
            {
                _keyAccidental = value;
            }
        }

        /// <summary>
        /// <para xml:lang="en">Gets a value indicating whether the KeyAccidental collection is empty.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool KeyAccidentalSpecified
        {
            get
            {
                return (this.KeyAccidental.Count != 0);
            }
        }

        [System.Xml.Serialization.XmlIgnoreAttribute()]
        private System.Collections.ObjectModel.Collection<KeyOctave> _keyOctave;

        /// <summary>
        /// <para>The optional list of key-octave elements is used to specify in which octave each element of the key signature appears.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("The optional list of key-octave elements is used to specify in which octave each " +
            "element of the key signature appears.")]
        [System.Xml.Serialization.XmlElementAttribute("key-octave")]
        public System.Collections.ObjectModel.Collection<KeyOctave> KeyOctave
        {
            get
            {
                return _keyOctave;
            }
            private set
            {
                _keyOctave = value;
            }
        }

        /// <summary>
        /// <para xml:lang="en">Gets a value indicating whether the KeyOctave collection is empty.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool KeyOctaveSpecified
        {
            get
            {
                return (this.KeyOctave.Count != 0);
            }
        }

        /// <summary>
        /// <para>The staff-number type indicates staff numbers within a multi-staff part. Staves are numbered from top to bottom, with 1 being the top staff on a part.</para>
        /// </summary>
        [System.Xml.Serialization.XmlAttributeAttribute("number")]
        public string Number { get; set; }

        /// <summary>
        /// <para>The tenths type is a number representing tenths of interline staff space (positive or negative). Both integer and decimal values are allowed, such as 5 for a half space and 2.5 for a quarter space. Interline space is measured from the middle of a staff line.
        ///
        ///Distances in a MusicXML file are measured in tenths of staff space. Tenths are then scaled to millimeters within the scaling element, used in the defaults element at the start of a score. Individual staves can apply a scaling factor to adjust staff size. When a MusicXML element or attribute refers to tenths, it means the global tenths defined by the scaling element, not the local tenths as adjusted by the staff-size element.</para>
        /// </summary>
        [System.Xml.Serialization.XmlAttributeAttribute("default-x")]
        public decimal DefaultX { get; set; }

        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the DefaultX property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool DefaultXSpecified { get; set; }

        /// <summary>
        /// <para>The tenths type is a number representing tenths of interline staff space (positive or negative). Both integer and decimal values are allowed, such as 5 for a half space and 2.5 for a quarter space. Interline space is measured from the middle of a staff line.
        ///
        ///Distances in a MusicXML file are measured in tenths of staff space. Tenths are then scaled to millimeters within the scaling element, used in the defaults element at the start of a score. Individual staves can apply a scaling factor to adjust staff size. When a MusicXML element or attribute refers to tenths, it means the global tenths defined by the scaling element, not the local tenths as adjusted by the staff-size element.</para>
        /// </summary>
        [System.Xml.Serialization.XmlAttributeAttribute("default-y")]
        public decimal DefaultY { get; set; }

        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the DefaultY property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool DefaultYSpecified { get; set; }

        /// <summary>
        /// <para>The tenths type is a number representing tenths of interline staff space (positive or negative). Both integer and decimal values are allowed, such as 5 for a half space and 2.5 for a quarter space. Interline space is measured from the middle of a staff line.
        ///
        ///Distances in a MusicXML file are measured in tenths of staff space. Tenths are then scaled to millimeters within the scaling element, used in the defaults element at the start of a score. Individual staves can apply a scaling factor to adjust staff size. When a MusicXML element or attribute refers to tenths, it means the global tenths defined by the scaling element, not the local tenths as adjusted by the staff-size element.</para>
        /// </summary>
        [System.Xml.Serialization.XmlAttributeAttribute("relative-x")]
        public decimal RelativeX { get; set; }

        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the RelativeX property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool RelativeXSpecified { get; set; }

        /// <summary>
        /// <para>The tenths type is a number representing tenths of interline staff space (positive or negative). Both integer and decimal values are allowed, such as 5 for a half space and 2.5 for a quarter space. Interline space is measured from the middle of a staff line.
        ///
        ///Distances in a MusicXML file are measured in tenths of staff space. Tenths are then scaled to millimeters within the scaling element, used in the defaults element at the start of a score. Individual staves can apply a scaling factor to adjust staff size. When a MusicXML element or attribute refers to tenths, it means the global tenths defined by the scaling element, not the local tenths as adjusted by the staff-size element.</para>
        /// </summary>
        [System.Xml.Serialization.XmlAttributeAttribute("relative-y")]
        public decimal RelativeY { get; set; }

        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the RelativeY property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool RelativeYSpecified { get; set; }

        /// <summary>
        /// <para>The font-family is a comma-separated list of font names. These can be specific font styles such as Maestro or Opus, or one of several generic font styles: music, engraved, handwritten, text, serif, sans-serif, handwritten, cursive, fantasy, and monospace. The music, engraved, and handwritten values refer to music fonts; the rest refer to text fonts. The fantasy style refers to decorative text such as found in older German-style printing.</para>
        /// <para xml:lang="en">Pattern: [^,]+(, ?[^,]+)*.</para>
        /// </summary>
        [System.ComponentModel.DataAnnotations.RegularExpressionAttribute("[^,]+(, ?[^,]+)*")]
        [System.Xml.Serialization.XmlAttributeAttribute("font-family")]
        public string FontFamily { get; set; }

        [System.Xml.Serialization.XmlAttributeAttribute("font-style")]
        public FontStyle FontStyle { get; set; }

        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the FontStyle property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool FontStyleSpecified { get; set; }

        /// <summary>
        /// <para>The font-size can be one of the CSS font sizes (xx-small, x-small, small, medium, large, x-large, xx-large) or a numeric point size.</para>
        /// </summary>
        [System.Xml.Serialization.XmlAttributeAttribute("font-size")]
        public string FontSize { get; set; }

        [System.Xml.Serialization.XmlAttributeAttribute("font-weight")]
        public FontWeight FontWeight { get; set; }

        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the FontWeight property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool FontWeightSpecified { get; set; }

        /// <summary>
        /// <para>The color type indicates the color of an element. Color may be represented as hexadecimal RGB triples, as in HTML, or as hexadecimal ARGB tuples, with the A indicating alpha of transparency. An alpha value of 00 is totally transparent; FF is totally opaque. If RGB is used, the A value is assumed to be FF.
        ///
        ///For instance, the RGB value "#800080" represents purple. An ARGB value of "#40800080" would be a transparent purple.
        ///
        ///As in SVG 1.1, colors are defined in terms of the sRGB color space (IEC 61966).</para>
        /// <para xml:lang="en">Pattern: #[\dA-F]{6}([\dA-F][\dA-F])?.</para>
        /// </summary>
        [System.ComponentModel.DataAnnotations.RegularExpressionAttribute("#[\\dA-F]{6}([\\dA-F][\\dA-F])?")]
        [System.Xml.Serialization.XmlAttributeAttribute("color")]
        public string Color { get; set; }

        [System.Xml.Serialization.XmlAttributeAttribute("print-object")]
        public YesNo PrintObject { get; set; }

        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the PrintObject property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool PrintObjectSpecified { get; set; }

        [System.Xml.Serialization.XmlAttributeAttribute("id")]
        public string Id { get; set; }
    }

    /// <summary>
    /// <para>The traditional-key group represents a traditional key signature using the cycle of fifths.</para>
    /// </summary>
    [System.ComponentModel.DescriptionAttribute("The traditional-key group represents a traditional key signature using the cycle " +
        "of fifths.")]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XmlSchemaClassGenerator", "2.1.1142.0")]
    public partial interface ITraditionalKey
    {

        Cancel Cancel
        {
            get;
            set;
        }

        /// <summary>
        /// <para>The fifths type represents the number of flats or sharps in a traditional key signature. Negative numbers are used for flats and positive numbers for sharps, reflecting the key's placement within the circle of fifths (hence the type name).</para>
        /// </summary>
        string Fifths
        {
            get;
            set;
        }

        /// <summary>
        /// <para>The mode type is used to specify major/minor and other mode distinctions. Valid mode values include major, minor, dorian, phrygian, lydian, mixolydian, aeolian, ionian, locrian, and none.</para>
        /// </summary>
        string Mode
        {
            get;
            set;
        }
    }

    /// <summary>
    /// <para>A cancel element indicates that the old key signature should be cancelled before the new one appears. This will always happen when changing to C major or A minor and need not be specified then. The cancel value matches the fifths value of the cancelled key signature (e.g., a cancel of -2 will provide an explicit cancellation for changing from B flat major to F major). The optional location attribute indicates where the cancellation appears relative to the new key signature.</para>
    /// </summary>
    [System.ComponentModel.DescriptionAttribute(@"A cancel element indicates that the old key signature should be cancelled before the new one appears. This will always happen when changing to C major or A minor and need not be specified then. The cancel value matches the fifths value of the cancelled key signature (e.g., a cancel of -2 will provide an explicit cancellation for changing from B flat major to F major). The optional location attribute indicates where the cancellation appears relative to the new key signature.")]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XmlSchemaClassGenerator", "2.1.1142.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute("cancel", Namespace="")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class Cancel
    {

        /// <summary>
        /// <para xml:lang="en">Gets or sets the text value.</para>
        /// </summary>
        [System.Xml.Serialization.XmlTextAttribute()]
        public string Value { get; set; }

        [System.Xml.Serialization.XmlAttributeAttribute("location")]
        public CancelLocation Location { get; set; }

        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the Location property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool LocationSpecified { get; set; }
    }

    /// <summary>
    /// <para>The non-traditional-key group represents a single alteration within a non-traditional key signature. A sequence of these groups makes up a non-traditional key signature</para>
    /// </summary>
    [System.ComponentModel.DescriptionAttribute("The non-traditional-key group represents a single alteration within a non-traditi" +
        "onal key signature. A sequence of these groups makes up a non-traditional key si" +
        "gnature")]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XmlSchemaClassGenerator", "2.1.1142.0")]
    public partial interface INonTraditionalKey
    {

        /// <summary>
        /// <para>Non-traditional key signatures are represented using a list of altered tones. The key-step element indicates the pitch step to be altered, represented using the same names as in the step element.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Non-traditional key signatures are represented using a list of altered tones. The" +
            " key-step element indicates the pitch step to be altered, represented using the " +
            "same names as in the step element.")]
        System.Collections.ObjectModel.Collection<Step> KeyStep
        {
            get;
        }

        /// <summary>
        /// <para>Non-traditional key signatures are represented using a list of altered tones. The key-alter element represents the alteration for a given pitch step, represented with semitones in the same manner as the alter element.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Non-traditional key signatures are represented using a list of altered tones. The" +
            " key-alter element represents the alteration for a given pitch step, represented" +
            " with semitones in the same manner as the alter element.")]
        System.Collections.ObjectModel.Collection<decimal> KeyAlter
        {
            get;
        }

        /// <summary>
        /// <para>Non-traditional key signatures are represented using a list of altered tones. The key-accidental element indicates the accidental to be displayed in the key signature, represented in the same manner as the accidental element. It is used for disambiguating microtonal accidentals.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute(@"Non-traditional key signatures are represented using a list of altered tones. The key-accidental element indicates the accidental to be displayed in the key signature, represented in the same manner as the accidental element. It is used for disambiguating microtonal accidentals.")]
        System.Collections.ObjectModel.Collection<KeyAccidental> KeyAccidental
        {
            get;
        }
    }

    /// <summary>
    /// <para>The key-accidental type indicates the accidental to be displayed in a non-traditional key signature, represented in the same manner as the accidental type without the formatting attributes.</para>
    /// </summary>
    [System.ComponentModel.DescriptionAttribute("The key-accidental type indicates the accidental to be displayed in a non-traditi" +
        "onal key signature, represented in the same manner as the accidental type withou" +
        "t the formatting attributes.")]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XmlSchemaClassGenerator", "2.1.1142.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute("key-accidental", Namespace="")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class KeyAccidental
    {

        /// <summary>
        /// <para xml:lang="en">Gets or sets the text value.</para>
        /// </summary>
        [System.Xml.Serialization.XmlTextAttribute()]
        public AccidentalValue Value { get; set; }

        /// <summary>
        /// <para>The smufl-accidental-glyph-name type is used to reference a specific Standard Music Font Layout (SMuFL) accidental character. The value is a SMuFL canonical glyph name that starts with one of the strings used at the start of glyph names for SMuFL accidentals.</para>
        /// <para xml:lang="en">Pattern: (acc|medRenFla|medRenNatura|medRenShar|kievanAccidental)(\c+).</para>
        /// </summary>
        [System.ComponentModel.DataAnnotations.RegularExpressionAttribute("(acc|medRenFla|medRenNatura|medRenShar|kievanAccidental)(\\c+)")]
        [System.Xml.Serialization.XmlAttributeAttribute("smufl")]
        public string Smufl { get; set; }
    }

    /// <summary>
    /// <para>The key-octave type specifies in which octave an element of a key signature appears. The content specifies the octave value using the same values as the display-octave element. The number attribute is a positive integer that refers to the key signature element in left-to-right order. If the cancel attribute is set to yes, then this number refers to the canceling key signature specified by the cancel element in the parent key element. The cancel attribute cannot be set to yes if there is no corresponding cancel element within the parent key element. It is no by default.</para>
    /// </summary>
    [System.ComponentModel.DescriptionAttribute(@"The key-octave type specifies in which octave an element of a key signature appears. The content specifies the octave value using the same values as the display-octave element. The number attribute is a positive integer that refers to the key signature element in left-to-right order. If the cancel attribute is set to yes, then this number refers to the canceling key signature specified by the cancel element in the parent key element. The cancel attribute cannot be set to yes if there is no corresponding cancel element within the parent key element. It is no by default.")]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XmlSchemaClassGenerator", "2.1.1142.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute("key-octave", Namespace="")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class KeyOctave
    {

        /// <summary>
        /// <para xml:lang="en">Gets or sets the text value.</para>
        /// <para xml:lang="en">Minimum inclusive value: 0.</para>
        /// <para xml:lang="en">Maximum inclusive value: 9.</para>
        /// </summary>
        [System.ComponentModel.DataAnnotations.RangeAttribute(typeof(decimal), "0", "9")]
        [System.Xml.Serialization.XmlTextAttribute()]
        public byte Value { get; set; }

        [System.ComponentModel.DataAnnotations.RequiredAttribute(AllowEmptyStrings=true)]
        [System.Xml.Serialization.XmlAttributeAttribute("number")]
        public string Number { get; set; }

        [System.Xml.Serialization.XmlAttributeAttribute("cancel")]
        public YesNo Cancel { get; set; }

        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the Cancel property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool CancelSpecified { get; set; }
    }

    /// <summary>
    /// <para>Time signatures are represented by the beats element for the numerator and the beat-type element for the denominator. The symbol attribute is used to indicate common and cut time symbols as well as a single number display. Multiple pairs of beat and beat-type elements are used for composite time signatures with multiple denominators, such as 2/4 + 3/8. A composite such as 3+2/8 requires only one beat/beat-type pair.
    ///
    ///The print-object attribute allows a time signature to be specified but not printed, as is the case for excerpts from the middle of a score. The value is "yes" if not present. The optional number attribute refers to staff numbers within the part. If absent, the time signature applies to all staves in the part.</para>
    /// </summary>
    [System.ComponentModel.DescriptionAttribute(@"Time signatures are represented by the beats element for the numerator and the beat-type element for the denominator. The symbol attribute is used to indicate common and cut time symbols as well as a single number display. Multiple pairs of beat and beat-type elements are used for composite time signatures with multiple denominators, such as 2/4 + 3/8. A composite such as 3+2/8 requires only one beat/beat-type pair. The print-object attribute allows a time signature to be specified but not printed, as is the case for excerpts from the middle of a score. The value is ""yes"" if not present. The optional number attribute refers to staff numbers within the part. If absent, the time signature applies to all staves in the part.")]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XmlSchemaClassGenerator", "2.1.1142.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute("time", Namespace="")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class Time : ITimeSignature, IPrintStyleAlign, IPrintObject, IOptionalUniqueId
    {

        [System.Xml.Serialization.XmlIgnoreAttribute()]
        private System.Collections.ObjectModel.Collection<string> _beats;

        /// <summary>
        /// <para>The beats element indicates the number of beats, as found in the numerator of a time signature.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("The beats element indicates the number of beats, as found in the numerator of a t" +
            "ime signature.")]
        [System.Xml.Serialization.XmlElementAttribute("beats")]
        public System.Collections.ObjectModel.Collection<string> Beats
        {
            get
            {
                return _beats;
            }
            private set
            {
                _beats = value;
            }
        }

        /// <summary>
        /// <para xml:lang="en">Gets a value indicating whether the Beats collection is empty.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool BeatsSpecified
        {
            get
            {
                return (this.Beats.Count != 0);
            }
        }

        /// <summary>
        /// <para xml:lang="en">Initializes a new instance of the <see cref="Time" /> class.</para>
        /// </summary>
        public Time()
        {
            this._beats = new System.Collections.ObjectModel.Collection<string>();
            this._beatType = new System.Collections.ObjectModel.Collection<string>();
        }

        [System.Xml.Serialization.XmlIgnoreAttribute()]
        private System.Collections.ObjectModel.Collection<string> _beatType;

        /// <summary>
        /// <para>The beat-type element indicates the beat unit, as found in the denominator of a time signature.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("The beat-type element indicates the beat unit, as found in the denominator of a t" +
            "ime signature.")]
        [System.Xml.Serialization.XmlElementAttribute("beat-type")]
        public System.Collections.ObjectModel.Collection<string> BeatType
        {
            get
            {
                return _beatType;
            }
            private set
            {
                _beatType = value;
            }
        }

        /// <summary>
        /// <para xml:lang="en">Gets a value indicating whether the BeatType collection is empty.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool BeatTypeSpecified
        {
            get
            {
                return (this.BeatType.Count != 0);
            }
        }

        [System.Xml.Serialization.XmlElementAttribute("interchangeable")]
        public Interchangeable Interchangeable { get; set; }

        /// <summary>
        /// <para>A senza-misura element explicitly indicates that no time signature is present. The optional element content indicates the symbol to be used, if any, such as an X. The time element's symbol attribute is not used when a senza-misura element is present.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("A senza-misura element explicitly indicates that no time signature is present. Th" +
            "e optional element content indicates the symbol to be used, if any, such as an X" +
            ". The time element\'s symbol attribute is not used when a senza-misura element is" +
            " present.")]
        [System.Xml.Serialization.XmlElementAttribute("senza-misura")]
        public string SenzaMisura { get; set; }

        /// <summary>
        /// <para>The staff-number type indicates staff numbers within a multi-staff part. Staves are numbered from top to bottom, with 1 being the top staff on a part.</para>
        /// </summary>
        [System.Xml.Serialization.XmlAttributeAttribute("number")]
        public string Number { get; set; }

        [System.Xml.Serialization.XmlAttributeAttribute("symbol")]
        public TimeSymbol Symbol { get; set; }

        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the Symbol property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool SymbolSpecified { get; set; }

        [System.Xml.Serialization.XmlAttributeAttribute("separator")]
        public TimeSeparator Separator { get; set; }

        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the Separator property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool SeparatorSpecified { get; set; }

        /// <summary>
        /// <para>The tenths type is a number representing tenths of interline staff space (positive or negative). Both integer and decimal values are allowed, such as 5 for a half space and 2.5 for a quarter space. Interline space is measured from the middle of a staff line.
        ///
        ///Distances in a MusicXML file are measured in tenths of staff space. Tenths are then scaled to millimeters within the scaling element, used in the defaults element at the start of a score. Individual staves can apply a scaling factor to adjust staff size. When a MusicXML element or attribute refers to tenths, it means the global tenths defined by the scaling element, not the local tenths as adjusted by the staff-size element.</para>
        /// </summary>
        [System.Xml.Serialization.XmlAttributeAttribute("default-x")]
        public decimal DefaultX { get; set; }

        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the DefaultX property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool DefaultXSpecified { get; set; }

        /// <summary>
        /// <para>The tenths type is a number representing tenths of interline staff space (positive or negative). Both integer and decimal values are allowed, such as 5 for a half space and 2.5 for a quarter space. Interline space is measured from the middle of a staff line.
        ///
        ///Distances in a MusicXML file are measured in tenths of staff space. Tenths are then scaled to millimeters within the scaling element, used in the defaults element at the start of a score. Individual staves can apply a scaling factor to adjust staff size. When a MusicXML element or attribute refers to tenths, it means the global tenths defined by the scaling element, not the local tenths as adjusted by the staff-size element.</para>
        /// </summary>
        [System.Xml.Serialization.XmlAttributeAttribute("default-y")]
        public decimal DefaultY { get; set; }

        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the DefaultY property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool DefaultYSpecified { get; set; }

        /// <summary>
        /// <para>The tenths type is a number representing tenths of interline staff space (positive or negative). Both integer and decimal values are allowed, such as 5 for a half space and 2.5 for a quarter space. Interline space is measured from the middle of a staff line.
        ///
        ///Distances in a MusicXML file are measured in tenths of staff space. Tenths are then scaled to millimeters within the scaling element, used in the defaults element at the start of a score. Individual staves can apply a scaling factor to adjust staff size. When a MusicXML element or attribute refers to tenths, it means the global tenths defined by the scaling element, not the local tenths as adjusted by the staff-size element.</para>
        /// </summary>
        [System.Xml.Serialization.XmlAttributeAttribute("relative-x")]
        public decimal RelativeX { get; set; }

        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the RelativeX property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool RelativeXSpecified { get; set; }

        /// <summary>
        /// <para>The tenths type is a number representing tenths of interline staff space (positive or negative). Both integer and decimal values are allowed, such as 5 for a half space and 2.5 for a quarter space. Interline space is measured from the middle of a staff line.
        ///
        ///Distances in a MusicXML file are measured in tenths of staff space. Tenths are then scaled to millimeters within the scaling element, used in the defaults element at the start of a score. Individual staves can apply a scaling factor to adjust staff size. When a MusicXML element or attribute refers to tenths, it means the global tenths defined by the scaling element, not the local tenths as adjusted by the staff-size element.</para>
        /// </summary>
        [System.Xml.Serialization.XmlAttributeAttribute("relative-y")]
        public decimal RelativeY { get; set; }

        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the RelativeY property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool RelativeYSpecified { get; set; }

        /// <summary>
        /// <para>The font-family is a comma-separated list of font names. These can be specific font styles such as Maestro or Opus, or one of several generic font styles: music, engraved, handwritten, text, serif, sans-serif, handwritten, cursive, fantasy, and monospace. The music, engraved, and handwritten values refer to music fonts; the rest refer to text fonts. The fantasy style refers to decorative text such as found in older German-style printing.</para>
        /// <para xml:lang="en">Pattern: [^,]+(, ?[^,]+)*.</para>
        /// </summary>
        [System.ComponentModel.DataAnnotations.RegularExpressionAttribute("[^,]+(, ?[^,]+)*")]
        [System.Xml.Serialization.XmlAttributeAttribute("font-family")]
        public string FontFamily { get; set; }

        [System.Xml.Serialization.XmlAttributeAttribute("font-style")]
        public FontStyle FontStyle { get; set; }

        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the FontStyle property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool FontStyleSpecified { get; set; }

        /// <summary>
        /// <para>The font-size can be one of the CSS font sizes (xx-small, x-small, small, medium, large, x-large, xx-large) or a numeric point size.</para>
        /// </summary>
        [System.Xml.Serialization.XmlAttributeAttribute("font-size")]
        public string FontSize { get; set; }

        [System.Xml.Serialization.XmlAttributeAttribute("font-weight")]
        public FontWeight FontWeight { get; set; }

        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the FontWeight property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool FontWeightSpecified { get; set; }

        /// <summary>
        /// <para>The color type indicates the color of an element. Color may be represented as hexadecimal RGB triples, as in HTML, or as hexadecimal ARGB tuples, with the A indicating alpha of transparency. An alpha value of 00 is totally transparent; FF is totally opaque. If RGB is used, the A value is assumed to be FF.
        ///
        ///For instance, the RGB value "#800080" represents purple. An ARGB value of "#40800080" would be a transparent purple.
        ///
        ///As in SVG 1.1, colors are defined in terms of the sRGB color space (IEC 61966).</para>
        /// <para xml:lang="en">Pattern: #[\dA-F]{6}([\dA-F][\dA-F])?.</para>
        /// </summary>
        [System.ComponentModel.DataAnnotations.RegularExpressionAttribute("#[\\dA-F]{6}([\\dA-F][\\dA-F])?")]
        [System.Xml.Serialization.XmlAttributeAttribute("color")]
        public string Color { get; set; }

        [System.Xml.Serialization.XmlAttributeAttribute("halign")]
        public LeftCenterRight Halign { get; set; }

        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the Halign property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool HalignSpecified { get; set; }

        [System.Xml.Serialization.XmlAttributeAttribute("valign")]
        public Valign Valign { get; set; }

        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the Valign property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool ValignSpecified { get; set; }

        [System.Xml.Serialization.XmlAttributeAttribute("print-object")]
        public YesNo PrintObject { get; set; }

        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the PrintObject property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool PrintObjectSpecified { get; set; }

        [System.Xml.Serialization.XmlAttributeAttribute("id")]
        public string Id { get; set; }
    }

    /// <summary>
    /// <para>Time signatures are represented by the beats element for the numerator and the beat-type element for the denominator.</para>
    /// </summary>
    [System.ComponentModel.DescriptionAttribute("Time signatures are represented by the beats element for the numerator and the be" +
        "at-type element for the denominator.")]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XmlSchemaClassGenerator", "2.1.1142.0")]
    public partial interface ITimeSignature
    {

        /// <summary>
        /// <para>The beats element indicates the number of beats, as found in the numerator of a time signature.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("The beats element indicates the number of beats, as found in the numerator of a t" +
            "ime signature.")]
        System.Collections.ObjectModel.Collection<string> Beats
        {
            get;
        }

        /// <summary>
        /// <para>The beat-type element indicates the beat unit, as found in the denominator of a time signature.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("The beat-type element indicates the beat unit, as found in the denominator of a t" +
            "ime signature.")]
        System.Collections.ObjectModel.Collection<string> BeatType
        {
            get;
        }
    }

    /// <summary>
    /// <para>The interchangeable type is used to represent the second in a pair of interchangeable dual time signatures, such as the 6/8 in 3/4 (6/8). A separate symbol attribute value is available compared to the time element's symbol attribute, which applies to the first of the dual time signatures.</para>
    /// </summary>
    [System.ComponentModel.DescriptionAttribute(@"The interchangeable type is used to represent the second in a pair of interchangeable dual time signatures, such as the 6/8 in 3/4 (6/8). A separate symbol attribute value is available compared to the time element's symbol attribute, which applies to the first of the dual time signatures.")]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XmlSchemaClassGenerator", "2.1.1142.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute("interchangeable", Namespace="")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class Interchangeable : ITimeSignature
    {

        [System.Xml.Serialization.XmlElementAttribute("time-relation")]
        public TimeRelation TimeRelation { get; set; }

        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the TimeRelation property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool TimeRelationSpecified { get; set; }

        [System.Xml.Serialization.XmlIgnoreAttribute()]
        private System.Collections.ObjectModel.Collection<string> _beats;

        /// <summary>
        /// <para>The beats element indicates the number of beats, as found in the numerator of a time signature.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("The beats element indicates the number of beats, as found in the numerator of a t" +
            "ime signature.")]
        [System.ComponentModel.DataAnnotations.RequiredAttribute(AllowEmptyStrings=true)]
        [System.Xml.Serialization.XmlElementAttribute("beats")]
        public System.Collections.ObjectModel.Collection<string> Beats
        {
            get
            {
                return _beats;
            }
            private set
            {
                _beats = value;
            }
        }

        /// <summary>
        /// <para xml:lang="en">Initializes a new instance of the <see cref="Interchangeable" /> class.</para>
        /// </summary>
        public Interchangeable()
        {
            this._beats = new System.Collections.ObjectModel.Collection<string>();
            this._beatType = new System.Collections.ObjectModel.Collection<string>();
        }

        [System.Xml.Serialization.XmlIgnoreAttribute()]
        private System.Collections.ObjectModel.Collection<string> _beatType;

        /// <summary>
        /// <para>The beat-type element indicates the beat unit, as found in the denominator of a time signature.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("The beat-type element indicates the beat unit, as found in the denominator of a t" +
            "ime signature.")]
        [System.ComponentModel.DataAnnotations.RequiredAttribute(AllowEmptyStrings=true)]
        [System.Xml.Serialization.XmlElementAttribute("beat-type")]
        public System.Collections.ObjectModel.Collection<string> BeatType
        {
            get
            {
                return _beatType;
            }
            private set
            {
                _beatType = value;
            }
        }

        [System.Xml.Serialization.XmlAttributeAttribute("symbol")]
        public TimeSymbol Symbol { get; set; }

        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the Symbol property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool SymbolSpecified { get; set; }

        [System.Xml.Serialization.XmlAttributeAttribute("separator")]
        public TimeSeparator Separator { get; set; }

        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the Separator property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool SeparatorSpecified { get; set; }
    }

    /// <summary>
    /// <para>The part-symbol type indicates how a symbol for a multi-staff part is indicated in the score; brace is the default value. The top-staff and bottom-staff attributes are used when the brace does not extend across the entire part. For example, in a 3-staff organ part, the top-staff will typically be 1 for the right hand, while the bottom-staff will typically be 2 for the left hand. Staff 3 for the pedals is usually outside the brace. By default, the presence of a part-symbol element that does not extend across the entire part also indicates a corresponding change in the common barlines within a part.</para>
    /// </summary>
    [System.ComponentModel.DescriptionAttribute(@"The part-symbol type indicates how a symbol for a multi-staff part is indicated in the score; brace is the default value. The top-staff and bottom-staff attributes are used when the brace does not extend across the entire part. For example, in a 3-staff organ part, the top-staff will typically be 1 for the right hand, while the bottom-staff will typically be 2 for the left hand. Staff 3 for the pedals is usually outside the brace. By default, the presence of a part-symbol element that does not extend across the entire part also indicates a corresponding change in the common barlines within a part.")]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XmlSchemaClassGenerator", "2.1.1142.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute("part-symbol", Namespace="")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class PartSymbol : IPosition, IColor
    {

        /// <summary>
        /// <para xml:lang="en">Gets or sets the text value.</para>
        /// </summary>
        [System.Xml.Serialization.XmlTextAttribute()]
        public GroupSymbolValue Value { get; set; }

        /// <summary>
        /// <para>The staff-number type indicates staff numbers within a multi-staff part. Staves are numbered from top to bottom, with 1 being the top staff on a part.</para>
        /// </summary>
        [System.Xml.Serialization.XmlAttributeAttribute("top-staff")]
        public string TopStaff { get; set; }

        /// <summary>
        /// <para>The staff-number type indicates staff numbers within a multi-staff part. Staves are numbered from top to bottom, with 1 being the top staff on a part.</para>
        /// </summary>
        [System.Xml.Serialization.XmlAttributeAttribute("bottom-staff")]
        public string BottomStaff { get; set; }

        /// <summary>
        /// <para>The tenths type is a number representing tenths of interline staff space (positive or negative). Both integer and decimal values are allowed, such as 5 for a half space and 2.5 for a quarter space. Interline space is measured from the middle of a staff line.
        ///
        ///Distances in a MusicXML file are measured in tenths of staff space. Tenths are then scaled to millimeters within the scaling element, used in the defaults element at the start of a score. Individual staves can apply a scaling factor to adjust staff size. When a MusicXML element or attribute refers to tenths, it means the global tenths defined by the scaling element, not the local tenths as adjusted by the staff-size element.</para>
        /// </summary>
        [System.Xml.Serialization.XmlAttributeAttribute("default-x")]
        public decimal DefaultX { get; set; }

        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the DefaultX property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool DefaultXSpecified { get; set; }

        /// <summary>
        /// <para>The tenths type is a number representing tenths of interline staff space (positive or negative). Both integer and decimal values are allowed, such as 5 for a half space and 2.5 for a quarter space. Interline space is measured from the middle of a staff line.
        ///
        ///Distances in a MusicXML file are measured in tenths of staff space. Tenths are then scaled to millimeters within the scaling element, used in the defaults element at the start of a score. Individual staves can apply a scaling factor to adjust staff size. When a MusicXML element or attribute refers to tenths, it means the global tenths defined by the scaling element, not the local tenths as adjusted by the staff-size element.</para>
        /// </summary>
        [System.Xml.Serialization.XmlAttributeAttribute("default-y")]
        public decimal DefaultY { get; set; }

        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the DefaultY property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool DefaultYSpecified { get; set; }

        /// <summary>
        /// <para>The tenths type is a number representing tenths of interline staff space (positive or negative). Both integer and decimal values are allowed, such as 5 for a half space and 2.5 for a quarter space. Interline space is measured from the middle of a staff line.
        ///
        ///Distances in a MusicXML file are measured in tenths of staff space. Tenths are then scaled to millimeters within the scaling element, used in the defaults element at the start of a score. Individual staves can apply a scaling factor to adjust staff size. When a MusicXML element or attribute refers to tenths, it means the global tenths defined by the scaling element, not the local tenths as adjusted by the staff-size element.</para>
        /// </summary>
        [System.Xml.Serialization.XmlAttributeAttribute("relative-x")]
        public decimal RelativeX { get; set; }

        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the RelativeX property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool RelativeXSpecified { get; set; }

        /// <summary>
        /// <para>The tenths type is a number representing tenths of interline staff space (positive or negative). Both integer and decimal values are allowed, such as 5 for a half space and 2.5 for a quarter space. Interline space is measured from the middle of a staff line.
        ///
        ///Distances in a MusicXML file are measured in tenths of staff space. Tenths are then scaled to millimeters within the scaling element, used in the defaults element at the start of a score. Individual staves can apply a scaling factor to adjust staff size. When a MusicXML element or attribute refers to tenths, it means the global tenths defined by the scaling element, not the local tenths as adjusted by the staff-size element.</para>
        /// </summary>
        [System.Xml.Serialization.XmlAttributeAttribute("relative-y")]
        public decimal RelativeY { get; set; }

        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the RelativeY property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool RelativeYSpecified { get; set; }

        /// <summary>
        /// <para>The color type indicates the color of an element. Color may be represented as hexadecimal RGB triples, as in HTML, or as hexadecimal ARGB tuples, with the A indicating alpha of transparency. An alpha value of 00 is totally transparent; FF is totally opaque. If RGB is used, the A value is assumed to be FF.
        ///
        ///For instance, the RGB value "#800080" represents purple. An ARGB value of "#40800080" would be a transparent purple.
        ///
        ///As in SVG 1.1, colors are defined in terms of the sRGB color space (IEC 61966).</para>
        /// <para xml:lang="en">Pattern: #[\dA-F]{6}([\dA-F][\dA-F])?.</para>
        /// </summary>
        [System.ComponentModel.DataAnnotations.RegularExpressionAttribute("#[\\dA-F]{6}([\\dA-F][\\dA-F])?")]
        [System.Xml.Serialization.XmlAttributeAttribute("color")]
        public string Color { get; set; }
    }

    /// <summary>
    /// <para>Clefs are represented by a combination of sign, line, and clef-octave-change elements. The optional number attribute refers to staff numbers within the part. A value of 1 is assumed if not present.
    ///
    ///Sometimes clefs are added to the staff in non-standard line positions, either to indicate cue passages, or when there are multiple clefs present simultaneously on one staff. In this situation, the additional attribute is set to "yes" and the line value is ignored. The size attribute is used for clefs where the additional attribute is "yes". It is typically used to indicate cue clefs.
    ///
    ///Sometimes clefs at the start of a measure need to appear after the barline rather than before, as for cues or for use after a repeated section. The after-barline attribute is set to "yes" in this situation. The attribute is ignored for mid-measure clefs.
    ///
    ///Clefs appear at the start of each system unless the print-object attribute has been set to "no" or the additional attribute has been set to "yes".</para>
    /// </summary>
    [System.ComponentModel.DescriptionAttribute(@"Clefs are represented by a combination of sign, line, and clef-octave-change elements. The optional number attribute refers to staff numbers within the part. A value of 1 is assumed if not present. Sometimes clefs are added to the staff in non-standard line positions, either to indicate cue passages, or when there are multiple clefs present simultaneously on one staff. In this situation, the additional attribute is set to ""yes"" and the line value is ignored. The size attribute is used for clefs where the additional attribute is ""yes"". It is typically used to indicate cue clefs. Sometimes clefs at the start of a measure need to appear after the barline rather than before, as for cues or for use after a repeated section. The after-barline attribute is set to ""yes"" in this situation. The attribute is ignored for mid-measure clefs. Clefs appear at the start of each system unless the print-object attribute has been set to ""no"" or the additional attribute has been set to ""yes"".")]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XmlSchemaClassGenerator", "2.1.1142.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute("clef", Namespace="")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class Clef : IClef, IPrintStyle, IPrintObject, IOptionalUniqueId
    {

        /// <summary>
        /// <para>The sign element represents the clef symbol.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("The sign element represents the clef symbol.")]
        [System.ComponentModel.DataAnnotations.RequiredAttribute(AllowEmptyStrings=true)]
        [System.Xml.Serialization.XmlElementAttribute("sign")]
        public ClefSign Sign { get; set; }

        /// <summary>
        /// <para>Line numbers are counted from the bottom of the staff. They are only needed with the G, F, and C signs in order to position a pitch correctly on the staff. Standard values are 2 for the G sign (treble clef), 4 for the F sign (bass clef), and 3 for the C sign (alto clef). Line values can be used to specify positions outside the staff, such as a C clef positioned in the middle of a grand staff.</para>
        /// <para>The staff-line-position type indicates the line position on a given staff. Staff lines are numbered from bottom to top, with 1 being the bottom line on a staff. A staff-line-position value can extend beyond the range of the lines on the current staff.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute(@"Line numbers are counted from the bottom of the staff. They are only needed with the G, F, and C signs in order to position a pitch correctly on the staff. Standard values are 2 for the G sign (treble clef), 4 for the F sign (bass clef), and 3 for the C sign (alto clef). Line values can be used to specify positions outside the staff, such as a C clef positioned in the middle of a grand staff.")]
        [System.Xml.Serialization.XmlElementAttribute("line")]
        public string Line { get; set; }

        /// <summary>
        /// <para>The clef-octave-change element is used for transposing clefs. A treble clef for tenors would have a value of -1.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("The clef-octave-change element is used for transposing clefs. A treble clef for t" +
            "enors would have a value of -1.")]
        [System.Xml.Serialization.XmlElementAttribute("clef-octave-change")]
        public string ClefOctaveChange { get; set; }

        /// <summary>
        /// <para>The staff-number type indicates staff numbers within a multi-staff part. Staves are numbered from top to bottom, with 1 being the top staff on a part.</para>
        /// </summary>
        [System.Xml.Serialization.XmlAttributeAttribute("number")]
        public string Number { get; set; }

        [System.Xml.Serialization.XmlAttributeAttribute("additional")]
        public YesNo Additional { get; set; }

        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the Additional property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool AdditionalSpecified { get; set; }

        [System.Xml.Serialization.XmlAttributeAttribute("size")]
        public SymbolSize Size { get; set; }

        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the Size property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool SizeSpecified { get; set; }

        [System.Xml.Serialization.XmlAttributeAttribute("after-barline")]
        public YesNo AfterBarline { get; set; }

        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the AfterBarline property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool AfterBarlineSpecified { get; set; }

        /// <summary>
        /// <para>The tenths type is a number representing tenths of interline staff space (positive or negative). Both integer and decimal values are allowed, such as 5 for a half space and 2.5 for a quarter space. Interline space is measured from the middle of a staff line.
        ///
        ///Distances in a MusicXML file are measured in tenths of staff space. Tenths are then scaled to millimeters within the scaling element, used in the defaults element at the start of a score. Individual staves can apply a scaling factor to adjust staff size. When a MusicXML element or attribute refers to tenths, it means the global tenths defined by the scaling element, not the local tenths as adjusted by the staff-size element.</para>
        /// </summary>
        [System.Xml.Serialization.XmlAttributeAttribute("default-x")]
        public decimal DefaultX { get; set; }

        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the DefaultX property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool DefaultXSpecified { get; set; }

        /// <summary>
        /// <para>The tenths type is a number representing tenths of interline staff space (positive or negative). Both integer and decimal values are allowed, such as 5 for a half space and 2.5 for a quarter space. Interline space is measured from the middle of a staff line.
        ///
        ///Distances in a MusicXML file are measured in tenths of staff space. Tenths are then scaled to millimeters within the scaling element, used in the defaults element at the start of a score. Individual staves can apply a scaling factor to adjust staff size. When a MusicXML element or attribute refers to tenths, it means the global tenths defined by the scaling element, not the local tenths as adjusted by the staff-size element.</para>
        /// </summary>
        [System.Xml.Serialization.XmlAttributeAttribute("default-y")]
        public decimal DefaultY { get; set; }

        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the DefaultY property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool DefaultYSpecified { get; set; }

        /// <summary>
        /// <para>The tenths type is a number representing tenths of interline staff space (positive or negative). Both integer and decimal values are allowed, such as 5 for a half space and 2.5 for a quarter space. Interline space is measured from the middle of a staff line.
        ///
        ///Distances in a MusicXML file are measured in tenths of staff space. Tenths are then scaled to millimeters within the scaling element, used in the defaults element at the start of a score. Individual staves can apply a scaling factor to adjust staff size. When a MusicXML element or attribute refers to tenths, it means the global tenths defined by the scaling element, not the local tenths as adjusted by the staff-size element.</para>
        /// </summary>
        [System.Xml.Serialization.XmlAttributeAttribute("relative-x")]
        public decimal RelativeX { get; set; }

        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the RelativeX property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool RelativeXSpecified { get; set; }

        /// <summary>
        /// <para>The tenths type is a number representing tenths of interline staff space (positive or negative). Both integer and decimal values are allowed, such as 5 for a half space and 2.5 for a quarter space. Interline space is measured from the middle of a staff line.
        ///
        ///Distances in a MusicXML file are measured in tenths of staff space. Tenths are then scaled to millimeters within the scaling element, used in the defaults element at the start of a score. Individual staves can apply a scaling factor to adjust staff size. When a MusicXML element or attribute refers to tenths, it means the global tenths defined by the scaling element, not the local tenths as adjusted by the staff-size element.</para>
        /// </summary>
        [System.Xml.Serialization.XmlAttributeAttribute("relative-y")]
        public decimal RelativeY { get; set; }

        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the RelativeY property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool RelativeYSpecified { get; set; }

        /// <summary>
        /// <para>The font-family is a comma-separated list of font names. These can be specific font styles such as Maestro or Opus, or one of several generic font styles: music, engraved, handwritten, text, serif, sans-serif, handwritten, cursive, fantasy, and monospace. The music, engraved, and handwritten values refer to music fonts; the rest refer to text fonts. The fantasy style refers to decorative text such as found in older German-style printing.</para>
        /// <para xml:lang="en">Pattern: [^,]+(, ?[^,]+)*.</para>
        /// </summary>
        [System.ComponentModel.DataAnnotations.RegularExpressionAttribute("[^,]+(, ?[^,]+)*")]
        [System.Xml.Serialization.XmlAttributeAttribute("font-family")]
        public string FontFamily { get; set; }

        [System.Xml.Serialization.XmlAttributeAttribute("font-style")]
        public FontStyle FontStyle { get; set; }

        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the FontStyle property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool FontStyleSpecified { get; set; }

        /// <summary>
        /// <para>The font-size can be one of the CSS font sizes (xx-small, x-small, small, medium, large, x-large, xx-large) or a numeric point size.</para>
        /// </summary>
        [System.Xml.Serialization.XmlAttributeAttribute("font-size")]
        public string FontSize { get; set; }

        [System.Xml.Serialization.XmlAttributeAttribute("font-weight")]
        public FontWeight FontWeight { get; set; }

        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the FontWeight property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool FontWeightSpecified { get; set; }

        /// <summary>
        /// <para>The color type indicates the color of an element. Color may be represented as hexadecimal RGB triples, as in HTML, or as hexadecimal ARGB tuples, with the A indicating alpha of transparency. An alpha value of 00 is totally transparent; FF is totally opaque. If RGB is used, the A value is assumed to be FF.
        ///
        ///For instance, the RGB value "#800080" represents purple. An ARGB value of "#40800080" would be a transparent purple.
        ///
        ///As in SVG 1.1, colors are defined in terms of the sRGB color space (IEC 61966).</para>
        /// <para xml:lang="en">Pattern: #[\dA-F]{6}([\dA-F][\dA-F])?.</para>
        /// </summary>
        [System.ComponentModel.DataAnnotations.RegularExpressionAttribute("#[\\dA-F]{6}([\\dA-F][\\dA-F])?")]
        [System.Xml.Serialization.XmlAttributeAttribute("color")]
        public string Color { get; set; }

        [System.Xml.Serialization.XmlAttributeAttribute("print-object")]
        public YesNo PrintObject { get; set; }

        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the PrintObject property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool PrintObjectSpecified { get; set; }

        [System.Xml.Serialization.XmlAttributeAttribute("id")]
        public string Id { get; set; }
    }

    /// <summary>
    /// <para>Clefs are represented by a combination of sign, line, and clef-octave-change elements.</para>
    /// </summary>
    [System.ComponentModel.DescriptionAttribute("Clefs are represented by a combination of sign, line, and clef-octave-change elem" +
        "ents.")]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XmlSchemaClassGenerator", "2.1.1142.0")]
    public partial interface IClef
    {

        /// <summary>
        /// <para>The sign element represents the clef symbol.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("The sign element represents the clef symbol.")]
        ClefSign Sign
        {
            get;
            set;
        }

        /// <summary>
        /// <para>Line numbers are counted from the bottom of the staff. They are only needed with the G, F, and C signs in order to position a pitch correctly on the staff. Standard values are 2 for the G sign (treble clef), 4 for the F sign (bass clef), and 3 for the C sign (alto clef). Line values can be used to specify positions outside the staff, such as a C clef positioned in the middle of a grand staff.</para>
        /// <para>The staff-line-position type indicates the line position on a given staff. Staff lines are numbered from bottom to top, with 1 being the bottom line on a staff. A staff-line-position value can extend beyond the range of the lines on the current staff.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute(@"Line numbers are counted from the bottom of the staff. They are only needed with the G, F, and C signs in order to position a pitch correctly on the staff. Standard values are 2 for the G sign (treble clef), 4 for the F sign (bass clef), and 3 for the C sign (alto clef). Line values can be used to specify positions outside the staff, such as a C clef positioned in the middle of a grand staff.")]
        string Line
        {
            get;
            set;
        }

        /// <summary>
        /// <para>The clef-octave-change element is used for transposing clefs. A treble clef for tenors would have a value of -1.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("The clef-octave-change element is used for transposing clefs. A treble clef for t" +
            "enors would have a value of -1.")]
        string ClefOctaveChange
        {
            get;
            set;
        }
    }

    /// <summary>
    /// <para>The staff-details element is used to indicate different types of staves. The optional number attribute specifies the staff number from top to bottom on the system, as with clef. The print-object attribute is used to indicate when a staff is not printed in a part, usually in large scores where empty parts are omitted. It is yes by default. If print-spacing is yes while print-object is no, the score is printed in cutaway format where vertical space is left for the empty part.</para>
    /// </summary>
    [System.ComponentModel.DescriptionAttribute(@"The staff-details element is used to indicate different types of staves. The optional number attribute specifies the staff number from top to bottom on the system, as with clef. The print-object attribute is used to indicate when a staff is not printed in a part, usually in large scores where empty parts are omitted. It is yes by default. If print-spacing is yes while print-object is no, the score is printed in cutaway format where vertical space is left for the empty part.")]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XmlSchemaClassGenerator", "2.1.1142.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute("staff-details", Namespace="")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class StaffDetails : IPrintObject, IPrintSpacing
    {

        [System.Xml.Serialization.XmlElementAttribute("staff-type")]
        public StaffType StaffType { get; set; }

        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the StaffType property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool StaffTypeSpecified { get; set; }

        /// <summary>
        /// <para>The staff-lines element specifies the number of lines and is usually used for a non 5-line staff. If the staff-lines element is present, the appearance of each line may be individually specified with a line-detail element.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("The staff-lines element specifies the number of lines and is usually used for a n" +
            "on 5-line staff. If the staff-lines element is present, the appearance of each l" +
            "ine may be individually specified with a line-detail element.")]
        [System.Xml.Serialization.XmlElementAttribute("staff-lines")]
        public string StaffLines { get; set; }

        [System.Xml.Serialization.XmlIgnoreAttribute()]
        private System.Collections.ObjectModel.Collection<LineDetail> _lineDetail;

        [System.Xml.Serialization.XmlElementAttribute("line-detail")]
        public System.Collections.ObjectModel.Collection<LineDetail> LineDetail
        {
            get
            {
                return _lineDetail;
            }
            private set
            {
                _lineDetail = value;
            }
        }

        /// <summary>
        /// <para xml:lang="en">Gets a value indicating whether the LineDetail collection is empty.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool LineDetailSpecified
        {
            get
            {
                return (this.LineDetail.Count != 0);
            }
        }

        /// <summary>
        /// <para xml:lang="en">Initializes a new instance of the <see cref="StaffDetails" /> class.</para>
        /// </summary>
        public StaffDetails()
        {
            this._lineDetail = new System.Collections.ObjectModel.Collection<LineDetail>();
            this._staffTuning = new System.Collections.ObjectModel.Collection<StaffTuning>();
        }

        [System.Xml.Serialization.XmlIgnoreAttribute()]
        private System.Collections.ObjectModel.Collection<StaffTuning> _staffTuning;

        [System.Xml.Serialization.XmlElementAttribute("staff-tuning")]
        public System.Collections.ObjectModel.Collection<StaffTuning> StaffTuning
        {
            get
            {
                return _staffTuning;
            }
            private set
            {
                _staffTuning = value;
            }
        }

        /// <summary>
        /// <para xml:lang="en">Gets a value indicating whether the StaffTuning collection is empty.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool StaffTuningSpecified
        {
            get
            {
                return (this.StaffTuning.Count != 0);
            }
        }

        /// <summary>
        /// <para>The capo element indicates at which fret a capo should be placed on a fretted instrument. This changes the open tuning of the strings specified by staff-tuning by the specified number of half-steps.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("The capo element indicates at which fret a capo should be placed on a fretted ins" +
            "trument. This changes the open tuning of the strings specified by staff-tuning b" +
            "y the specified number of half-steps.")]
        [System.Xml.Serialization.XmlElementAttribute("capo")]
        public string Capo { get; set; }

        [System.Xml.Serialization.XmlElementAttribute("staff-size")]
        public StaffSize StaffSize { get; set; }

        /// <summary>
        /// <para>The staff-number type indicates staff numbers within a multi-staff part. Staves are numbered from top to bottom, with 1 being the top staff on a part.</para>
        /// </summary>
        [System.Xml.Serialization.XmlAttributeAttribute("number")]
        public string Number { get; set; }

        [System.Xml.Serialization.XmlAttributeAttribute("show-frets")]
        public ShowFrets ShowFrets { get; set; }

        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the ShowFrets property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool ShowFretsSpecified { get; set; }

        [System.Xml.Serialization.XmlAttributeAttribute("print-object")]
        public YesNo PrintObject { get; set; }

        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the PrintObject property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool PrintObjectSpecified { get; set; }

        [System.Xml.Serialization.XmlAttributeAttribute("print-spacing")]
        public YesNo PrintSpacing { get; set; }

        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the PrintSpacing property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool PrintSpacingSpecified { get; set; }
    }

    /// <summary>
    /// <para>If the staff-lines element is present, the appearance of each line may be individually specified with a line-detail type. Staff lines are numbered from bottom to top. The print-object attribute allows lines to be hidden within a staff. This is used in special situations such as a widely-spaced percussion staff where a note placed below the higher line is distinct from a note placed above the lower line. Hidden staff lines are included when specifying clef lines and determining display-step / display-octave values, but are not counted as lines for the purposes of the system-layout and staff-layout elements.</para>
    /// </summary>
    [System.ComponentModel.DescriptionAttribute(@"If the staff-lines element is present, the appearance of each line may be individually specified with a line-detail type. Staff lines are numbered from bottom to top. The print-object attribute allows lines to be hidden within a staff. This is used in special situations such as a widely-spaced percussion staff where a note placed below the higher line is distinct from a note placed above the lower line. Hidden staff lines are included when specifying clef lines and determining display-step / display-octave values, but are not counted as lines for the purposes of the system-layout and staff-layout elements.")]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XmlSchemaClassGenerator", "2.1.1142.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute("line-detail", Namespace="")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class LineDetail : IColor, ILineType, IPrintObject
    {

        /// <summary>
        /// <para>The staff-line type indicates the line on a given staff. Staff lines are numbered from bottom to top, with 1 being the bottom line on a staff.</para>
        /// </summary>
        [System.ComponentModel.DataAnnotations.RequiredAttribute(AllowEmptyStrings=true)]
        [System.Xml.Serialization.XmlAttributeAttribute("line")]
        public string Line { get; set; }

        /// <summary>
        /// <para>The tenths type is a number representing tenths of interline staff space (positive or negative). Both integer and decimal values are allowed, such as 5 for a half space and 2.5 for a quarter space. Interline space is measured from the middle of a staff line.
        ///
        ///Distances in a MusicXML file are measured in tenths of staff space. Tenths are then scaled to millimeters within the scaling element, used in the defaults element at the start of a score. Individual staves can apply a scaling factor to adjust staff size. When a MusicXML element or attribute refers to tenths, it means the global tenths defined by the scaling element, not the local tenths as adjusted by the staff-size element.</para>
        /// </summary>
        [System.Xml.Serialization.XmlAttributeAttribute("width")]
        public decimal Width { get; set; }

        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the Width property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool WidthSpecified { get; set; }

        /// <summary>
        /// <para>The color type indicates the color of an element. Color may be represented as hexadecimal RGB triples, as in HTML, or as hexadecimal ARGB tuples, with the A indicating alpha of transparency. An alpha value of 00 is totally transparent; FF is totally opaque. If RGB is used, the A value is assumed to be FF.
        ///
        ///For instance, the RGB value "#800080" represents purple. An ARGB value of "#40800080" would be a transparent purple.
        ///
        ///As in SVG 1.1, colors are defined in terms of the sRGB color space (IEC 61966).</para>
        /// <para xml:lang="en">Pattern: #[\dA-F]{6}([\dA-F][\dA-F])?.</para>
        /// </summary>
        [System.ComponentModel.DataAnnotations.RegularExpressionAttribute("#[\\dA-F]{6}([\\dA-F][\\dA-F])?")]
        [System.Xml.Serialization.XmlAttributeAttribute("color")]
        public string Color { get; set; }

        [System.Xml.Serialization.XmlAttributeAttribute("line-type")]
        public LineType LineType { get; set; }

        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the LineType property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool LineTypeSpecified { get; set; }

        [System.Xml.Serialization.XmlAttributeAttribute("print-object")]
        public YesNo PrintObject { get; set; }

        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the PrintObject property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool PrintObjectSpecified { get; set; }
    }

    /// <summary>
    /// <para>The line-type attribute distinguishes between solid, dashed, dotted, and wavy lines.</para>
    /// </summary>
    [System.ComponentModel.DescriptionAttribute("The line-type attribute distinguishes between solid, dashed, dotted, and wavy lin" +
        "es.")]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XmlSchemaClassGenerator", "2.1.1142.0")]
    public partial interface ILineType
    {

        LineType LineType
        {
            get;
            set;
        }
    }

    /// <summary>
    /// <para>The staff-tuning type specifies the open, non-capo tuning of the lines on a tablature staff.</para>
    /// </summary>
    [System.ComponentModel.DescriptionAttribute("The staff-tuning type specifies the open, non-capo tuning of the lines on a tabla" +
        "ture staff.")]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XmlSchemaClassGenerator", "2.1.1142.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute("staff-tuning", Namespace="")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class StaffTuning : ITuning
    {

        /// <summary>
        /// <para>The tuning-step element is represented like the step element, with a different name to reflect its different function in string tuning.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("The tuning-step element is represented like the step element, with a different na" +
            "me to reflect its different function in string tuning.")]
        [System.ComponentModel.DataAnnotations.RequiredAttribute(AllowEmptyStrings=true)]
        [System.Xml.Serialization.XmlElementAttribute("tuning-step")]
        public Step TuningStep { get; set; }

        /// <summary>
        /// <para>The tuning-alter element is represented like the alter element, with a different name to reflect its different function in string tuning.</para>
        /// <para>The semitones type is a number representing semitones, used for chromatic alteration. A value of -1 corresponds to a flat and a value of 1 to a sharp. Decimal values like 0.5 (quarter tone sharp) are used for microtones.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("The tuning-alter element is represented like the alter element, with a different " +
            "name to reflect its different function in string tuning.")]
        [System.Xml.Serialization.XmlElementAttribute("tuning-alter")]
        public decimal TuningAlter { get; set; }

        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the TuningAlter property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool TuningAlterSpecified { get; set; }

        /// <summary>
        /// <para>The tuning-octave element is represented like the octave element, with a different name to reflect its different function in string tuning.</para>
        /// <para>Octaves are represented by the numbers 0 to 9, where 4 indicates the octave started by middle C.</para>
        /// <para xml:lang="en">Minimum inclusive value: 0.</para>
        /// <para xml:lang="en">Maximum inclusive value: 9.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("The tuning-octave element is represented like the octave element, with a differen" +
            "t name to reflect its different function in string tuning.")]
        [System.ComponentModel.DataAnnotations.RangeAttribute(typeof(decimal), "0", "9")]
        [System.ComponentModel.DataAnnotations.RequiredAttribute(AllowEmptyStrings=true)]
        [System.Xml.Serialization.XmlElementAttribute("tuning-octave")]
        public byte TuningOctave { get; set; }

        /// <summary>
        /// <para>The staff-line type indicates the line on a given staff. Staff lines are numbered from bottom to top, with 1 being the bottom line on a staff.</para>
        /// </summary>
        [System.ComponentModel.DataAnnotations.RequiredAttribute(AllowEmptyStrings=true)]
        [System.Xml.Serialization.XmlAttributeAttribute("line")]
        public string Line { get; set; }
    }

    /// <summary>
    /// <para>The tuning group contains the sequence of elements common to the staff-tuning and accord elements.</para>
    /// </summary>
    [System.ComponentModel.DescriptionAttribute("The tuning group contains the sequence of elements common to the staff-tuning and" +
        " accord elements.")]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XmlSchemaClassGenerator", "2.1.1142.0")]
    public partial interface ITuning
    {

        /// <summary>
        /// <para>The tuning-step element is represented like the step element, with a different name to reflect its different function in string tuning.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("The tuning-step element is represented like the step element, with a different na" +
            "me to reflect its different function in string tuning.")]
        Step TuningStep
        {
            get;
            set;
        }

        /// <summary>
        /// <para>The tuning-alter element is represented like the alter element, with a different name to reflect its different function in string tuning.</para>
        /// <para>The semitones type is a number representing semitones, used for chromatic alteration. A value of -1 corresponds to a flat and a value of 1 to a sharp. Decimal values like 0.5 (quarter tone sharp) are used for microtones.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("The tuning-alter element is represented like the alter element, with a different " +
            "name to reflect its different function in string tuning.")]
        decimal TuningAlter
        {
            get;
            set;
        }

        /// <summary>
        /// <para>The tuning-octave element is represented like the octave element, with a different name to reflect its different function in string tuning.</para>
        /// <para>Octaves are represented by the numbers 0 to 9, where 4 indicates the octave started by middle C.</para>
        /// <para xml:lang="en">Minimum inclusive value: 0.</para>
        /// <para xml:lang="en">Maximum inclusive value: 9.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("The tuning-octave element is represented like the octave element, with a differen" +
            "t name to reflect its different function in string tuning.")]
        [System.ComponentModel.DataAnnotations.RangeAttribute(typeof(decimal), "0", "9")]
        byte TuningOctave
        {
            get;
            set;
        }
    }

    /// <summary>
    /// <para>The staff-size element indicates how large a staff space is on this staff, expressed as a percentage of the work's default scaling. Values less than 100 make the staff space smaller while values over 100 make the staff space larger. A staff-type of cue, ossia, or editorial implies a staff-size of less than 100, but the exact value is implementation-dependent unless specified here. Staff size affects staff height only, not the relationship of the staff to the left and right margins.
    ///
    ///In some cases, a staff-size different than 100 also scales the notation on the staff, such as with a cue staff. In other cases, such as percussion staves, the lines may be more widely spaced without scaling the notation on the staff. The scaling attribute allows these two cases to be distinguished. It specifies the percentage scaling that applies to the notation. Values less that 100 make the notation smaller while values over 100 make the notation larger. The staff-size content and scaling attribute are both non-negative decimal values.</para>
    /// </summary>
    [System.ComponentModel.DescriptionAttribute(@"The staff-size element indicates how large a staff space is on this staff, expressed as a percentage of the work's default scaling. Values less than 100 make the staff space smaller while values over 100 make the staff space larger. A staff-type of cue, ossia, or editorial implies a staff-size of less than 100, but the exact value is implementation-dependent unless specified here. Staff size affects staff height only, not the relationship of the staff to the left and right margins. In some cases, a staff-size different than 100 also scales the notation on the staff, such as with a cue staff. In other cases, such as percussion staves, the lines may be more widely spaced without scaling the notation on the staff. The scaling attribute allows these two cases to be distinguished. It specifies the percentage scaling that applies to the notation. Values less that 100 make the notation smaller while values over 100 make the notation larger. The staff-size content and scaling attribute are both non-negative decimal values.")]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XmlSchemaClassGenerator", "2.1.1142.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute("staff-size", Namespace="")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class StaffSize
    {

        /// <summary>
        /// <para xml:lang="en">Gets or sets the text value.</para>
        /// <para xml:lang="en">Minimum inclusive value: 0.</para>
        /// </summary>
        [System.Xml.Serialization.XmlTextAttribute()]
        public decimal Value { get; set; }

        /// <summary>
        /// <para>The non-negative-decimal type specifies a non-negative decimal value.</para>
        /// <para xml:lang="en">Minimum inclusive value: 0.</para>
        /// </summary>
        [System.Xml.Serialization.XmlAttributeAttribute("scaling")]
        public decimal Scaling { get; set; }

        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the Scaling property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool ScalingSpecified { get; set; }
    }

    /// <summary>
    /// <para>The print-spacing attribute controls whether or not spacing is left for an invisible note or object. It is used only if no note, dot, or lyric is being printed. The value is yes (leave spacing) by default.</para>
    /// </summary>
    [System.ComponentModel.DescriptionAttribute("The print-spacing attribute controls whether or not spacing is left for an invisi" +
        "ble note or object. It is used only if no note, dot, or lyric is being printed. " +
        "The value is yes (leave spacing) by default.")]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XmlSchemaClassGenerator", "2.1.1142.0")]
    public partial interface IPrintSpacing
    {

        YesNo PrintSpacing
        {
            get;
            set;
        }
    }

    /// <summary>
    /// <para>The transpose type represents what must be added to a written pitch to get a correct sounding pitch. The optional number attribute refers to staff numbers, from top to bottom on the system. If absent, the transposition applies to all staves in the part. Per-staff transposition is most often used in parts that represent multiple instruments.</para>
    /// </summary>
    [System.ComponentModel.DescriptionAttribute(@"The transpose type represents what must be added to a written pitch to get a correct sounding pitch. The optional number attribute refers to staff numbers, from top to bottom on the system. If absent, the transposition applies to all staves in the part. Per-staff transposition is most often used in parts that represent multiple instruments.")]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XmlSchemaClassGenerator", "2.1.1142.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute("transpose", Namespace="")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class Transpose : ITranspose, IOptionalUniqueId
    {

        /// <summary>
        /// <para>The diatonic element specifies the number of pitch steps needed to go from written to sounding pitch. This allows for correct spelling of enharmonic transpositions. This value does not include octave-change values; the values for both elements need to be added to the written pitch to get the correct sounding pitch.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute(@"The diatonic element specifies the number of pitch steps needed to go from written to sounding pitch. This allows for correct spelling of enharmonic transpositions. This value does not include octave-change values; the values for both elements need to be added to the written pitch to get the correct sounding pitch.")]
        [System.Xml.Serialization.XmlElementAttribute("diatonic")]
        public string Diatonic { get; set; }

        /// <summary>
        /// <para>The chromatic element represents the number of semitones needed to get from written to sounding pitch. This value does not include octave-change values; the values for both elements need to be added to the written pitch to get the correct sounding pitch.</para>
        /// <para>The semitones type is a number representing semitones, used for chromatic alteration. A value of -1 corresponds to a flat and a value of 1 to a sharp. Decimal values like 0.5 (quarter tone sharp) are used for microtones.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("The chromatic element represents the number of semitones needed to get from writt" +
            "en to sounding pitch. This value does not include octave-change values; the valu" +
            "es for both elements need to be added to the written pitch to get the correct so" +
            "unding pitch.")]
        [System.ComponentModel.DataAnnotations.RequiredAttribute(AllowEmptyStrings=true)]
        [System.Xml.Serialization.XmlElementAttribute("chromatic")]
        public decimal Chromatic { get; set; }

        /// <summary>
        /// <para>The octave-change element indicates how many octaves to add to get from written pitch to sounding pitch. The octave-change element should be included when using transposition intervals of an octave or more, and should not be present for intervals of less than an octave.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute(@"The octave-change element indicates how many octaves to add to get from written pitch to sounding pitch. The octave-change element should be included when using transposition intervals of an octave or more, and should not be present for intervals of less than an octave.")]
        [System.Xml.Serialization.XmlElementAttribute("octave-change")]
        public string OctaveChange { get; set; }

        /// <summary>
        /// <para>If the double element is present, it indicates that the music is doubled one octave from what is currently written.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("If the double element is present, it indicates that the music is doubled one octa" +
            "ve from what is currently written.")]
        [System.Xml.Serialization.XmlElementAttribute("double")]
        public Double Double { get; set; }

        /// <summary>
        /// <para>The staff-number type indicates staff numbers within a multi-staff part. Staves are numbered from top to bottom, with 1 being the top staff on a part.</para>
        /// </summary>
        [System.Xml.Serialization.XmlAttributeAttribute("number")]
        public string Number { get; set; }

        [System.Xml.Serialization.XmlAttributeAttribute("id")]
        public string Id { get; set; }
    }

    /// <summary>
    /// <para>The transpose group represents what must be added to a written pitch to get a correct sounding pitch.</para>
    /// </summary>
    [System.ComponentModel.DescriptionAttribute("The transpose group represents what must be added to a written pitch to get a cor" +
        "rect sounding pitch.")]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XmlSchemaClassGenerator", "2.1.1142.0")]
    public partial interface ITranspose
    {

        /// <summary>
        /// <para>The diatonic element specifies the number of pitch steps needed to go from written to sounding pitch. This allows for correct spelling of enharmonic transpositions. This value does not include octave-change values; the values for both elements need to be added to the written pitch to get the correct sounding pitch.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute(@"The diatonic element specifies the number of pitch steps needed to go from written to sounding pitch. This allows for correct spelling of enharmonic transpositions. This value does not include octave-change values; the values for both elements need to be added to the written pitch to get the correct sounding pitch.")]
        string Diatonic
        {
            get;
            set;
        }

        /// <summary>
        /// <para>The chromatic element represents the number of semitones needed to get from written to sounding pitch. This value does not include octave-change values; the values for both elements need to be added to the written pitch to get the correct sounding pitch.</para>
        /// <para>The semitones type is a number representing semitones, used for chromatic alteration. A value of -1 corresponds to a flat and a value of 1 to a sharp. Decimal values like 0.5 (quarter tone sharp) are used for microtones.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("The chromatic element represents the number of semitones needed to get from writt" +
            "en to sounding pitch. This value does not include octave-change values; the valu" +
            "es for both elements need to be added to the written pitch to get the correct so" +
            "unding pitch.")]
        decimal Chromatic
        {
            get;
            set;
        }

        /// <summary>
        /// <para>The octave-change element indicates how many octaves to add to get from written pitch to sounding pitch. The octave-change element should be included when using transposition intervals of an octave or more, and should not be present for intervals of less than an octave.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute(@"The octave-change element indicates how many octaves to add to get from written pitch to sounding pitch. The octave-change element should be included when using transposition intervals of an octave or more, and should not be present for intervals of less than an octave.")]
        string OctaveChange
        {
            get;
            set;
        }

        /// <summary>
        /// <para>If the double element is present, it indicates that the music is doubled one octave from what is currently written.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("If the double element is present, it indicates that the music is doubled one octa" +
            "ve from what is currently written.")]
        Double Double
        {
            get;
            set;
        }
    }

    /// <summary>
    /// <para>The double type indicates that the music is doubled one octave from what is currently written. If the above attribute is set to yes, the doubling is one octave above what is written, as for mixed flute / piccolo parts in band literature. Otherwise the doubling is one octave below what is written, as for mixed cello / bass parts in orchestral literature.</para>
    /// </summary>
    [System.ComponentModel.DescriptionAttribute(@"The double type indicates that the music is doubled one octave from what is currently written. If the above attribute is set to yes, the doubling is one octave above what is written, as for mixed flute / piccolo parts in band literature. Otherwise the doubling is one octave below what is written, as for mixed cello / bass parts in orchestral literature.")]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XmlSchemaClassGenerator", "2.1.1142.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute("double", Namespace="")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class Double
    {

        [System.Xml.Serialization.XmlAttributeAttribute("above")]
        public YesNo Above { get; set; }

        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the Above property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool AboveSpecified { get; set; }
    }

    /// <summary>
    /// <para>The for-part type is used in a concert score to indicate the transposition for a transposed part created from that score. It is only used in score files that contain a concert-score element in the defaults. This allows concert scores with transposed parts to be represented in a single uncompressed MusicXML file.
    ///
    ///The optional number attribute refers to staff numbers, from top to bottom on the system. If absent, the child elements apply to all staves in the created part.</para>
    /// </summary>
    [System.ComponentModel.DescriptionAttribute(@"The for-part type is used in a concert score to indicate the transposition for a transposed part created from that score. It is only used in score files that contain a concert-score element in the defaults. This allows concert scores with transposed parts to be represented in a single uncompressed MusicXML file. The optional number attribute refers to staff numbers, from top to bottom on the system. If absent, the child elements apply to all staves in the created part.")]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XmlSchemaClassGenerator", "2.1.1142.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute("for-part", Namespace="")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class ForPart : IOptionalUniqueId
    {

        /// <summary>
        /// <para>The part-clef element is used for transpositions that also include a change of clef, as for instruments such as bass clarinet.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("The part-clef element is used for transpositions that also include a change of cl" +
            "ef, as for instruments such as bass clarinet.")]
        [System.Xml.Serialization.XmlElementAttribute("part-clef")]
        public PartClef PartClef { get; set; }

        /// <summary>
        /// <para>The chromatic element in a part-transpose element will usually have a non-zero value, since octave transpositions can be represented in concert scores using the transpose element.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("The chromatic element in a part-transpose element will usually have a non-zero va" +
            "lue, since octave transpositions can be represented in concert scores using the " +
            "transpose element.")]
        [System.ComponentModel.DataAnnotations.RequiredAttribute(AllowEmptyStrings=true)]
        [System.Xml.Serialization.XmlElementAttribute("part-transpose")]
        public PartTranspose PartTranspose { get; set; }

        /// <summary>
        /// <para>The staff-number type indicates staff numbers within a multi-staff part. Staves are numbered from top to bottom, with 1 being the top staff on a part.</para>
        /// </summary>
        [System.Xml.Serialization.XmlAttributeAttribute("number")]
        public string Number { get; set; }

        [System.Xml.Serialization.XmlAttributeAttribute("id")]
        public string Id { get; set; }
    }

    /// <summary>
    /// <para>The child elements of the part-clef type have the same meaning as for the clef type. However that meaning applies to a transposed part created from the existing score file.</para>
    /// </summary>
    [System.ComponentModel.DescriptionAttribute("The child elements of the part-clef type have the same meaning as for the clef ty" +
        "pe. However that meaning applies to a transposed part created from the existing " +
        "score file.")]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XmlSchemaClassGenerator", "2.1.1142.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute("part-clef", Namespace="")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class PartClef : IClef
    {

        /// <summary>
        /// <para>The sign element represents the clef symbol.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("The sign element represents the clef symbol.")]
        [System.ComponentModel.DataAnnotations.RequiredAttribute(AllowEmptyStrings=true)]
        [System.Xml.Serialization.XmlElementAttribute("sign")]
        public ClefSign Sign { get; set; }

        /// <summary>
        /// <para>Line numbers are counted from the bottom of the staff. They are only needed with the G, F, and C signs in order to position a pitch correctly on the staff. Standard values are 2 for the G sign (treble clef), 4 for the F sign (bass clef), and 3 for the C sign (alto clef). Line values can be used to specify positions outside the staff, such as a C clef positioned in the middle of a grand staff.</para>
        /// <para>The staff-line-position type indicates the line position on a given staff. Staff lines are numbered from bottom to top, with 1 being the bottom line on a staff. A staff-line-position value can extend beyond the range of the lines on the current staff.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute(@"Line numbers are counted from the bottom of the staff. They are only needed with the G, F, and C signs in order to position a pitch correctly on the staff. Standard values are 2 for the G sign (treble clef), 4 for the F sign (bass clef), and 3 for the C sign (alto clef). Line values can be used to specify positions outside the staff, such as a C clef positioned in the middle of a grand staff.")]
        [System.Xml.Serialization.XmlElementAttribute("line")]
        public string Line { get; set; }

        /// <summary>
        /// <para>The clef-octave-change element is used for transposing clefs. A treble clef for tenors would have a value of -1.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("The clef-octave-change element is used for transposing clefs. A treble clef for t" +
            "enors would have a value of -1.")]
        [System.Xml.Serialization.XmlElementAttribute("clef-octave-change")]
        public string ClefOctaveChange { get; set; }
    }

    /// <summary>
    /// <para>The child elements of the part-transpose type have the same meaning as for the transpose type. However that meaning applies to a transposed part created from the existing score file.</para>
    /// </summary>
    [System.ComponentModel.DescriptionAttribute("The child elements of the part-transpose type have the same meaning as for the tr" +
        "anspose type. However that meaning applies to a transposed part created from the" +
        " existing score file.")]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XmlSchemaClassGenerator", "2.1.1142.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute("part-transpose", Namespace="")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class PartTranspose : ITranspose
    {

        /// <summary>
        /// <para>The diatonic element specifies the number of pitch steps needed to go from written to sounding pitch. This allows for correct spelling of enharmonic transpositions. This value does not include octave-change values; the values for both elements need to be added to the written pitch to get the correct sounding pitch.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute(@"The diatonic element specifies the number of pitch steps needed to go from written to sounding pitch. This allows for correct spelling of enharmonic transpositions. This value does not include octave-change values; the values for both elements need to be added to the written pitch to get the correct sounding pitch.")]
        [System.Xml.Serialization.XmlElementAttribute("diatonic")]
        public string Diatonic { get; set; }

        /// <summary>
        /// <para>The chromatic element represents the number of semitones needed to get from written to sounding pitch. This value does not include octave-change values; the values for both elements need to be added to the written pitch to get the correct sounding pitch.</para>
        /// <para>The semitones type is a number representing semitones, used for chromatic alteration. A value of -1 corresponds to a flat and a value of 1 to a sharp. Decimal values like 0.5 (quarter tone sharp) are used for microtones.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("The chromatic element represents the number of semitones needed to get from writt" +
            "en to sounding pitch. This value does not include octave-change values; the valu" +
            "es for both elements need to be added to the written pitch to get the correct so" +
            "unding pitch.")]
        [System.ComponentModel.DataAnnotations.RequiredAttribute(AllowEmptyStrings=true)]
        [System.Xml.Serialization.XmlElementAttribute("chromatic")]
        public decimal Chromatic { get; set; }

        /// <summary>
        /// <para>The octave-change element indicates how many octaves to add to get from written pitch to sounding pitch. The octave-change element should be included when using transposition intervals of an octave or more, and should not be present for intervals of less than an octave.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute(@"The octave-change element indicates how many octaves to add to get from written pitch to sounding pitch. The octave-change element should be included when using transposition intervals of an octave or more, and should not be present for intervals of less than an octave.")]
        [System.Xml.Serialization.XmlElementAttribute("octave-change")]
        public string OctaveChange { get; set; }

        /// <summary>
        /// <para>If the double element is present, it indicates that the music is doubled one octave from what is currently written.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("If the double element is present, it indicates that the music is doubled one octa" +
            "ve from what is currently written.")]
        [System.Xml.Serialization.XmlElementAttribute("double")]
        public Double Double { get; set; }
    }

    [System.CodeDom.Compiler.GeneratedCodeAttribute("XmlSchemaClassGenerator", "2.1.1142.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute("AttributesDirective", Namespace="")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class AttributesDirective : IPrintStyle
    {

        /// <summary>
        /// <para xml:lang="en">Gets or sets the text value.</para>
        /// </summary>
        [System.Xml.Serialization.XmlTextAttribute()]
        public string Value { get; set; }

        /// <summary>
        /// <para>The tenths type is a number representing tenths of interline staff space (positive or negative). Both integer and decimal values are allowed, such as 5 for a half space and 2.5 for a quarter space. Interline space is measured from the middle of a staff line.
        ///
        ///Distances in a MusicXML file are measured in tenths of staff space. Tenths are then scaled to millimeters within the scaling element, used in the defaults element at the start of a score. Individual staves can apply a scaling factor to adjust staff size. When a MusicXML element or attribute refers to tenths, it means the global tenths defined by the scaling element, not the local tenths as adjusted by the staff-size element.</para>
        /// </summary>
        [System.Xml.Serialization.XmlAttributeAttribute("default-x")]
        public decimal DefaultX { get; set; }

        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the DefaultX property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool DefaultXSpecified { get; set; }

        /// <summary>
        /// <para>The tenths type is a number representing tenths of interline staff space (positive or negative). Both integer and decimal values are allowed, such as 5 for a half space and 2.5 for a quarter space. Interline space is measured from the middle of a staff line.
        ///
        ///Distances in a MusicXML file are measured in tenths of staff space. Tenths are then scaled to millimeters within the scaling element, used in the defaults element at the start of a score. Individual staves can apply a scaling factor to adjust staff size. When a MusicXML element or attribute refers to tenths, it means the global tenths defined by the scaling element, not the local tenths as adjusted by the staff-size element.</para>
        /// </summary>
        [System.Xml.Serialization.XmlAttributeAttribute("default-y")]
        public decimal DefaultY { get; set; }

        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the DefaultY property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool DefaultYSpecified { get; set; }

        /// <summary>
        /// <para>The tenths type is a number representing tenths of interline staff space (positive or negative). Both integer and decimal values are allowed, such as 5 for a half space and 2.5 for a quarter space. Interline space is measured from the middle of a staff line.
        ///
        ///Distances in a MusicXML file are measured in tenths of staff space. Tenths are then scaled to millimeters within the scaling element, used in the defaults element at the start of a score. Individual staves can apply a scaling factor to adjust staff size. When a MusicXML element or attribute refers to tenths, it means the global tenths defined by the scaling element, not the local tenths as adjusted by the staff-size element.</para>
        /// </summary>
        [System.Xml.Serialization.XmlAttributeAttribute("relative-x")]
        public decimal RelativeX { get; set; }

        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the RelativeX property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool RelativeXSpecified { get; set; }

        /// <summary>
        /// <para>The tenths type is a number representing tenths of interline staff space (positive or negative). Both integer and decimal values are allowed, such as 5 for a half space and 2.5 for a quarter space. Interline space is measured from the middle of a staff line.
        ///
        ///Distances in a MusicXML file are measured in tenths of staff space. Tenths are then scaled to millimeters within the scaling element, used in the defaults element at the start of a score. Individual staves can apply a scaling factor to adjust staff size. When a MusicXML element or attribute refers to tenths, it means the global tenths defined by the scaling element, not the local tenths as adjusted by the staff-size element.</para>
        /// </summary>
        [System.Xml.Serialization.XmlAttributeAttribute("relative-y")]
        public decimal RelativeY { get; set; }

        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the RelativeY property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool RelativeYSpecified { get; set; }

        /// <summary>
        /// <para>The font-family is a comma-separated list of font names. These can be specific font styles such as Maestro or Opus, or one of several generic font styles: music, engraved, handwritten, text, serif, sans-serif, handwritten, cursive, fantasy, and monospace. The music, engraved, and handwritten values refer to music fonts; the rest refer to text fonts. The fantasy style refers to decorative text such as found in older German-style printing.</para>
        /// <para xml:lang="en">Pattern: [^,]+(, ?[^,]+)*.</para>
        /// </summary>
        [System.ComponentModel.DataAnnotations.RegularExpressionAttribute("[^,]+(, ?[^,]+)*")]
        [System.Xml.Serialization.XmlAttributeAttribute("font-family")]
        public string FontFamily { get; set; }

        [System.Xml.Serialization.XmlAttributeAttribute("font-style")]
        public FontStyle FontStyle { get; set; }

        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the FontStyle property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool FontStyleSpecified { get; set; }

        /// <summary>
        /// <para>The font-size can be one of the CSS font sizes (xx-small, x-small, small, medium, large, x-large, xx-large) or a numeric point size.</para>
        /// </summary>
        [System.Xml.Serialization.XmlAttributeAttribute("font-size")]
        public string FontSize { get; set; }

        [System.Xml.Serialization.XmlAttributeAttribute("font-weight")]
        public FontWeight FontWeight { get; set; }

        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the FontWeight property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool FontWeightSpecified { get; set; }

        /// <summary>
        /// <para>The color type indicates the color of an element. Color may be represented as hexadecimal RGB triples, as in HTML, or as hexadecimal ARGB tuples, with the A indicating alpha of transparency. An alpha value of 00 is totally transparent; FF is totally opaque. If RGB is used, the A value is assumed to be FF.
        ///
        ///For instance, the RGB value "#800080" represents purple. An ARGB value of "#40800080" would be a transparent purple.
        ///
        ///As in SVG 1.1, colors are defined in terms of the sRGB color space (IEC 61966).</para>
        /// <para xml:lang="en">Pattern: #[\dA-F]{6}([\dA-F][\dA-F])?.</para>
        /// </summary>
        [System.ComponentModel.DataAnnotations.RegularExpressionAttribute("#[\\dA-F]{6}([\\dA-F][\\dA-F])?")]
        [System.Xml.Serialization.XmlAttributeAttribute("color")]
        public string Color { get; set; }

        [System.Xml.Serialization.XmlAttributeAttribute("lang", Namespace="http://www.w3.org/XML/1998/namespace", Form=System.Xml.Schema.XmlSchemaForm.Qualified)]
        public string Lang { get; set; }
    }

    /// <summary>
    /// <para>A measure-style indicates a special way to print partial to multiple measures within a part. This includes multiple rests over several measures, repeats of beats, single, or multiple measures, and use of slash notation.
    ///
    ///The multiple-rest and measure-repeat elements indicate the number of measures covered in the element content. The beat-repeat and slash elements can cover partial measures. All but the multiple-rest element use a type attribute to indicate starting and stopping the use of the style. The optional number attribute specifies the staff number from top to bottom on the system, as with clef.</para>
    /// </summary>
    [System.ComponentModel.DescriptionAttribute(@"A measure-style indicates a special way to print partial to multiple measures within a part. This includes multiple rests over several measures, repeats of beats, single, or multiple measures, and use of slash notation. The multiple-rest and measure-repeat elements indicate the number of measures covered in the element content. The beat-repeat and slash elements can cover partial measures. All but the multiple-rest element use a type attribute to indicate starting and stopping the use of the style. The optional number attribute specifies the staff number from top to bottom on the system, as with clef.")]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XmlSchemaClassGenerator", "2.1.1142.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute("measure-style", Namespace="")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class MeasureStyle : IFont, IColor, IOptionalUniqueId
    {

        [System.Xml.Serialization.XmlElementAttribute("multiple-rest")]
        public MultipleRest MultipleRest { get; set; }

        [System.Xml.Serialization.XmlElementAttribute("measure-repeat")]
        public MeasureRepeat MeasureRepeat { get; set; }

        [System.Xml.Serialization.XmlElementAttribute("beat-repeat")]
        public BeatRepeat BeatRepeat { get; set; }

        [System.Xml.Serialization.XmlElementAttribute("slash")]
        public Slash Slash { get; set; }

        /// <summary>
        /// <para>The staff-number type indicates staff numbers within a multi-staff part. Staves are numbered from top to bottom, with 1 being the top staff on a part.</para>
        /// </summary>
        [System.Xml.Serialization.XmlAttributeAttribute("number")]
        public string Number { get; set; }

        /// <summary>
        /// <para>The font-family is a comma-separated list of font names. These can be specific font styles such as Maestro or Opus, or one of several generic font styles: music, engraved, handwritten, text, serif, sans-serif, handwritten, cursive, fantasy, and monospace. The music, engraved, and handwritten values refer to music fonts; the rest refer to text fonts. The fantasy style refers to decorative text such as found in older German-style printing.</para>
        /// <para xml:lang="en">Pattern: [^,]+(, ?[^,]+)*.</para>
        /// </summary>
        [System.ComponentModel.DataAnnotations.RegularExpressionAttribute("[^,]+(, ?[^,]+)*")]
        [System.Xml.Serialization.XmlAttributeAttribute("font-family")]
        public string FontFamily { get; set; }

        [System.Xml.Serialization.XmlAttributeAttribute("font-style")]
        public FontStyle FontStyle { get; set; }

        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the FontStyle property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool FontStyleSpecified { get; set; }

        /// <summary>
        /// <para>The font-size can be one of the CSS font sizes (xx-small, x-small, small, medium, large, x-large, xx-large) or a numeric point size.</para>
        /// </summary>
        [System.Xml.Serialization.XmlAttributeAttribute("font-size")]
        public string FontSize { get; set; }

        [System.Xml.Serialization.XmlAttributeAttribute("font-weight")]
        public FontWeight FontWeight { get; set; }

        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the FontWeight property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool FontWeightSpecified { get; set; }

        /// <summary>
        /// <para>The color type indicates the color of an element. Color may be represented as hexadecimal RGB triples, as in HTML, or as hexadecimal ARGB tuples, with the A indicating alpha of transparency. An alpha value of 00 is totally transparent; FF is totally opaque. If RGB is used, the A value is assumed to be FF.
        ///
        ///For instance, the RGB value "#800080" represents purple. An ARGB value of "#40800080" would be a transparent purple.
        ///
        ///As in SVG 1.1, colors are defined in terms of the sRGB color space (IEC 61966).</para>
        /// <para xml:lang="en">Pattern: #[\dA-F]{6}([\dA-F][\dA-F])?.</para>
        /// </summary>
        [System.ComponentModel.DataAnnotations.RegularExpressionAttribute("#[\\dA-F]{6}([\\dA-F][\\dA-F])?")]
        [System.Xml.Serialization.XmlAttributeAttribute("color")]
        public string Color { get; set; }

        [System.Xml.Serialization.XmlAttributeAttribute("id")]
        public string Id { get; set; }
    }

    /// <summary>
    /// <para>The text of the multiple-rest type indicates the number of measures in the multiple rest. Multiple rests may use the 1-bar / 2-bar / 4-bar rest symbols, or a single shape. The use-symbols attribute indicates which to use; it is no if not specified.</para>
    /// </summary>
    [System.ComponentModel.DescriptionAttribute("The text of the multiple-rest type indicates the number of measures in the multip" +
        "le rest. Multiple rests may use the 1-bar / 2-bar / 4-bar rest symbols, or a sin" +
        "gle shape. The use-symbols attribute indicates which to use; it is no if not spe" +
        "cified.")]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XmlSchemaClassGenerator", "2.1.1142.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute("multiple-rest", Namespace="")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class MultipleRest
    {

        /// <summary>
        /// <para xml:lang="en">Gets or sets the text value.</para>
        /// </summary>
        [System.Xml.Serialization.XmlTextAttribute()]
        public string Value { get; set; }

        [System.Xml.Serialization.XmlAttributeAttribute("use-symbols")]
        public YesNo UseSymbols { get; set; }

        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the UseSymbols property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool UseSymbolsSpecified { get; set; }
    }

    /// <summary>
    /// <para>The measure-repeat type is used for both single and multiple measure repeats. The text of the element indicates the number of measures to be repeated in a single pattern. The slashes attribute specifies the number of slashes to use in the repeat sign. It is 1 if not specified. The text of the element is ignored when the type is stop.
    ///
    ///The stop type indicates the first measure where the repeats are no longer displayed. Both the start and the stop of the measure-repeat should be specified unless the repeats are displayed through the end of the part.
    ///
    ///The measure-repeat element specifies a notation style for repetitions. The actual music being repeated needs to be repeated within each measure of the MusicXML file. This element specifies the notation that indicates the repeat.</para>
    /// </summary>
    [System.ComponentModel.DescriptionAttribute(@"The measure-repeat type is used for both single and multiple measure repeats. The text of the element indicates the number of measures to be repeated in a single pattern. The slashes attribute specifies the number of slashes to use in the repeat sign. It is 1 if not specified. The text of the element is ignored when the type is stop. The stop type indicates the first measure where the repeats are no longer displayed. Both the start and the stop of the measure-repeat should be specified unless the repeats are displayed through the end of the part. The measure-repeat element specifies a notation style for repetitions. The actual music being repeated needs to be repeated within each measure of the MusicXML file. This element specifies the notation that indicates the repeat.")]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XmlSchemaClassGenerator", "2.1.1142.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute("measure-repeat", Namespace="")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class MeasureRepeat
    {

        /// <summary>
        /// <para xml:lang="en">Gets or sets the text value.</para>
        /// </summary>
        [System.Xml.Serialization.XmlTextAttribute()]
        public string Value { get; set; }

        [System.ComponentModel.DataAnnotations.RequiredAttribute(AllowEmptyStrings=true)]
        [System.Xml.Serialization.XmlAttributeAttribute("type")]
        public StartStop Type { get; set; }

        [System.Xml.Serialization.XmlAttributeAttribute("slashes")]
        public string Slashes { get; set; }
    }

    /// <summary>
    /// <para>The beat-repeat type is used to indicate that a single beat (but possibly many notes) is repeated. The slashes attribute specifies the number of slashes to use in the symbol. The use-dots attribute indicates whether or not to use dots as well (for instance, with mixed rhythm patterns). The value for slashes is 1 and the value for use-dots is no if not specified.
    ///
    ///The stop type indicates the first beat where the repeats are no longer displayed. Both the start and stop of the beat being repeated should be specified unless the repeats are displayed through the end of the part.
    ///
    ///The beat-repeat element specifies a notation style for repetitions. The actual music being repeated needs to be repeated within the MusicXML file. This element specifies the notation that indicates the repeat.</para>
    /// </summary>
    [System.ComponentModel.DescriptionAttribute(@"The beat-repeat type is used to indicate that a single beat (but possibly many notes) is repeated. The slashes attribute specifies the number of slashes to use in the symbol. The use-dots attribute indicates whether or not to use dots as well (for instance, with mixed rhythm patterns). The value for slashes is 1 and the value for use-dots is no if not specified. The stop type indicates the first beat where the repeats are no longer displayed. Both the start and stop of the beat being repeated should be specified unless the repeats are displayed through the end of the part. The beat-repeat element specifies a notation style for repetitions. The actual music being repeated needs to be repeated within the MusicXML file. This element specifies the notation that indicates the repeat.")]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XmlSchemaClassGenerator", "2.1.1142.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute("beat-repeat", Namespace="")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class BeatRepeat : ISlash
    {

        /// <summary>
        /// <para>The slash-type element indicates the graphical note type to use for the display of repetition marks.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("The slash-type element indicates the graphical note type to use for the display o" +
            "f repetition marks.")]
        [System.Xml.Serialization.XmlElementAttribute("slash-type")]
        public NoteTypeValue SlashType { get; set; }

        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the SlashType property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool SlashTypeSpecified { get; set; }

        [System.Xml.Serialization.XmlIgnoreAttribute()]
        private System.Collections.ObjectModel.Collection<Empty> _slashDot;

        /// <summary>
        /// <para>The slash-dot element is used to specify any augmentation dots in the note type used to display repetition marks.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("The slash-dot element is used to specify any augmentation dots in the note type u" +
            "sed to display repetition marks.")]
        [System.Xml.Serialization.XmlElementAttribute("slash-dot")]
        public System.Collections.ObjectModel.Collection<Empty> SlashDot
        {
            get
            {
                return _slashDot;
            }
            private set
            {
                _slashDot = value;
            }
        }

        /// <summary>
        /// <para xml:lang="en">Gets a value indicating whether the SlashDot collection is empty.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool SlashDotSpecified
        {
            get
            {
                return (this.SlashDot.Count != 0);
            }
        }

        /// <summary>
        /// <para xml:lang="en">Initializes a new instance of the <see cref="BeatRepeat" /> class.</para>
        /// </summary>
        public BeatRepeat()
        {
            this._slashDot = new System.Collections.ObjectModel.Collection<Empty>();
            this._exceptVoice = new System.Collections.ObjectModel.Collection<string>();
        }

        [System.Xml.Serialization.XmlIgnoreAttribute()]
        private System.Collections.ObjectModel.Collection<string> _exceptVoice;

        /// <summary>
        /// <para>The except-voice element is used to specify a combination of slash notation and regular notation. Any note elements that are in voices specified by the except-voice elements are displayed in normal notation, in addition to the slash notation that is always displayed.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute(@"The except-voice element is used to specify a combination of slash notation and regular notation. Any note elements that are in voices specified by the except-voice elements are displayed in normal notation, in addition to the slash notation that is always displayed.")]
        [System.Xml.Serialization.XmlElementAttribute("except-voice")]
        public System.Collections.ObjectModel.Collection<string> ExceptVoice
        {
            get
            {
                return _exceptVoice;
            }
            private set
            {
                _exceptVoice = value;
            }
        }

        /// <summary>
        /// <para xml:lang="en">Gets a value indicating whether the ExceptVoice collection is empty.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool ExceptVoiceSpecified
        {
            get
            {
                return (this.ExceptVoice.Count != 0);
            }
        }

        [System.ComponentModel.DataAnnotations.RequiredAttribute(AllowEmptyStrings=true)]
        [System.Xml.Serialization.XmlAttributeAttribute("type")]
        public StartStop Type { get; set; }

        [System.Xml.Serialization.XmlAttributeAttribute("slashes")]
        public string Slashes { get; set; }

        [System.Xml.Serialization.XmlAttributeAttribute("use-dots")]
        public YesNo UseDots { get; set; }

        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the UseDots property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool UseDotsSpecified { get; set; }
    }

    /// <summary>
    /// <para>The slash group combines elements used for more complete specification of the slash and beat-repeat measure-style elements. They have the same values as the type and dot elements, and define what the beat is for the display of repetition marks. If not present, the beat is based on the current time signature.</para>
    /// </summary>
    [System.ComponentModel.DescriptionAttribute(@"The slash group combines elements used for more complete specification of the slash and beat-repeat measure-style elements. They have the same values as the type and dot elements, and define what the beat is for the display of repetition marks. If not present, the beat is based on the current time signature.")]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XmlSchemaClassGenerator", "2.1.1142.0")]
    public partial interface ISlash
    {

        /// <summary>
        /// <para>The slash-type element indicates the graphical note type to use for the display of repetition marks.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("The slash-type element indicates the graphical note type to use for the display o" +
            "f repetition marks.")]
        NoteTypeValue SlashType
        {
            get;
            set;
        }

        /// <summary>
        /// <para>The slash-dot element is used to specify any augmentation dots in the note type used to display repetition marks.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("The slash-dot element is used to specify any augmentation dots in the note type u" +
            "sed to display repetition marks.")]
        System.Collections.ObjectModel.Collection<Empty> SlashDot
        {
            get;
        }

        /// <summary>
        /// <para>The except-voice element is used to specify a combination of slash notation and regular notation. Any note elements that are in voices specified by the except-voice elements are displayed in normal notation, in addition to the slash notation that is always displayed.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute(@"The except-voice element is used to specify a combination of slash notation and regular notation. Any note elements that are in voices specified by the except-voice elements are displayed in normal notation, in addition to the slash notation that is always displayed.")]
        System.Collections.ObjectModel.Collection<string> ExceptVoice
        {
            get;
        }
    }

    /// <summary>
    /// <para>The slash type is used to indicate that slash notation is to be used. If the slash is on every beat, use-stems is no (the default). To indicate rhythms but not pitches, use-stems is set to yes. The type attribute indicates whether this is the start or stop of a slash notation style. The use-dots attribute works as for the beat-repeat element, and only has effect if use-stems is no.</para>
    /// </summary>
    [System.ComponentModel.DescriptionAttribute(@"The slash type is used to indicate that slash notation is to be used. If the slash is on every beat, use-stems is no (the default). To indicate rhythms but not pitches, use-stems is set to yes. The type attribute indicates whether this is the start or stop of a slash notation style. The use-dots attribute works as for the beat-repeat element, and only has effect if use-stems is no.")]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XmlSchemaClassGenerator", "2.1.1142.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute("slash", Namespace="")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class Slash : ISlash
    {

        /// <summary>
        /// <para>The slash-type element indicates the graphical note type to use for the display of repetition marks.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("The slash-type element indicates the graphical note type to use for the display o" +
            "f repetition marks.")]
        [System.Xml.Serialization.XmlElementAttribute("slash-type")]
        public NoteTypeValue SlashType { get; set; }

        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the SlashType property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool SlashTypeSpecified { get; set; }

        [System.Xml.Serialization.XmlIgnoreAttribute()]
        private System.Collections.ObjectModel.Collection<Empty> _slashDot;

        /// <summary>
        /// <para>The slash-dot element is used to specify any augmentation dots in the note type used to display repetition marks.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("The slash-dot element is used to specify any augmentation dots in the note type u" +
            "sed to display repetition marks.")]
        [System.Xml.Serialization.XmlElementAttribute("slash-dot")]
        public System.Collections.ObjectModel.Collection<Empty> SlashDot
        {
            get
            {
                return _slashDot;
            }
            private set
            {
                _slashDot = value;
            }
        }

        /// <summary>
        /// <para xml:lang="en">Gets a value indicating whether the SlashDot collection is empty.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool SlashDotSpecified
        {
            get
            {
                return (this.SlashDot.Count != 0);
            }
        }

        /// <summary>
        /// <para xml:lang="en">Initializes a new instance of the <see cref="Slash" /> class.</para>
        /// </summary>
        public Slash()
        {
            this._slashDot = new System.Collections.ObjectModel.Collection<Empty>();
            this._exceptVoice = new System.Collections.ObjectModel.Collection<string>();
        }

        [System.Xml.Serialization.XmlIgnoreAttribute()]
        private System.Collections.ObjectModel.Collection<string> _exceptVoice;

        /// <summary>
        /// <para>The except-voice element is used to specify a combination of slash notation and regular notation. Any note elements that are in voices specified by the except-voice elements are displayed in normal notation, in addition to the slash notation that is always displayed.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute(@"The except-voice element is used to specify a combination of slash notation and regular notation. Any note elements that are in voices specified by the except-voice elements are displayed in normal notation, in addition to the slash notation that is always displayed.")]
        [System.Xml.Serialization.XmlElementAttribute("except-voice")]
        public System.Collections.ObjectModel.Collection<string> ExceptVoice
        {
            get
            {
                return _exceptVoice;
            }
            private set
            {
                _exceptVoice = value;
            }
        }

        /// <summary>
        /// <para xml:lang="en">Gets a value indicating whether the ExceptVoice collection is empty.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool ExceptVoiceSpecified
        {
            get
            {
                return (this.ExceptVoice.Count != 0);
            }
        }

        [System.ComponentModel.DataAnnotations.RequiredAttribute(AllowEmptyStrings=true)]
        [System.Xml.Serialization.XmlAttributeAttribute("type")]
        public StartStop Type { get; set; }

        [System.Xml.Serialization.XmlAttributeAttribute("use-dots")]
        public YesNo UseDots { get; set; }

        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the UseDots property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool UseDotsSpecified { get; set; }

        [System.Xml.Serialization.XmlAttributeAttribute("use-stems")]
        public YesNo UseStems { get; set; }

        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the UseStems property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool UseStemsSpecified { get; set; }
    }

    /// <summary>
    /// <para>The bar-style-color type contains barline style and color information.</para>
    /// </summary>
    [System.ComponentModel.DescriptionAttribute("The bar-style-color type contains barline style and color information.")]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XmlSchemaClassGenerator", "2.1.1142.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute("bar-style-color", Namespace="")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class BarStyleColor : IColor
    {

        /// <summary>
        /// <para xml:lang="en">Gets or sets the text value.</para>
        /// </summary>
        [System.Xml.Serialization.XmlTextAttribute()]
        public BarStyle Value { get; set; }

        /// <summary>
        /// <para>The color type indicates the color of an element. Color may be represented as hexadecimal RGB triples, as in HTML, or as hexadecimal ARGB tuples, with the A indicating alpha of transparency. An alpha value of 00 is totally transparent; FF is totally opaque. If RGB is used, the A value is assumed to be FF.
        ///
        ///For instance, the RGB value "#800080" represents purple. An ARGB value of "#40800080" would be a transparent purple.
        ///
        ///As in SVG 1.1, colors are defined in terms of the sRGB color space (IEC 61966).</para>
        /// <para xml:lang="en">Pattern: #[\dA-F]{6}([\dA-F][\dA-F])?.</para>
        /// </summary>
        [System.ComponentModel.DataAnnotations.RegularExpressionAttribute("#[\\dA-F]{6}([\\dA-F][\\dA-F])?")]
        [System.Xml.Serialization.XmlAttributeAttribute("color")]
        public string Color { get; set; }
    }

    /// <summary>
    /// <para>If a barline is other than a normal single barline, it should be represented by a barline type that describes it. This includes information about repeats and multiple endings, as well as line style. Barline data is on the same level as the other musical data in a score - a child of a measure in a partwise score, or a part in a timewise score. This allows for barlines within measures, as in dotted barlines that subdivide measures in complex meters. The two fermata elements allow for fermatas on both sides of the barline (the lower one inverted).
    ///
    ///Barlines have a location attribute to make it easier to process barlines independently of the other musical data in a score. It is often easier to set up measures separately from entering notes. The location attribute must match where the barline element occurs within the rest of the musical data in the score. If location is left, it should be the first element in the measure, aside from the print, bookmark, and link elements. If location is right, it should be the last element, again with the possible exception of the print, bookmark, and link elements. If no location is specified, the right barline is the default. The segno, coda, and divisions attributes work the same way as in the sound element. They are used for playback when barline elements contain segno or coda child elements.</para>
    /// </summary>
    [System.ComponentModel.DescriptionAttribute(@"If a barline is other than a normal single barline, it should be represented by a barline type that describes it. This includes information about repeats and multiple endings, as well as line style. Barline data is on the same level as the other musical data in a score - a child of a measure in a partwise score, or a part in a timewise score. This allows for barlines within measures, as in dotted barlines that subdivide measures in complex meters. The two fermata elements allow for fermatas on both sides of the barline (the lower one inverted). Barlines have a location attribute to make it easier to process barlines independently of the other musical data in a score. It is often easier to set up measures separately from entering notes. The location attribute must match where the barline element occurs within the rest of the musical data in the score. If location is left, it should be the first element in the measure, aside from the print, bookmark, and link elements. If location is right, it should be the last element, again with the possible exception of the print, bookmark, and link elements. If no location is specified, the right barline is the default. The segno, coda, and divisions attributes work the same way as in the sound element. They are used for playback when barline elements contain segno or coda child elements.")]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XmlSchemaClassGenerator", "2.1.1142.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute("barline", Namespace="")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class Barline : IEditorial, IOptionalUniqueId
    {

        [System.Xml.Serialization.XmlElementAttribute("bar-style")]
        public BarStyleColor BarStyle { get; set; }

        [System.Xml.Serialization.XmlElementAttribute("footnote")]
        public FormattedText Footnote { get; set; }

        [System.Xml.Serialization.XmlElementAttribute("level")]
        public Level Level { get; set; }

        [System.Xml.Serialization.XmlElementAttribute("wavy-line")]
        public WavyLine WavyLine { get; set; }

        [System.Xml.Serialization.XmlElementAttribute("segno")]
        public Segno Segno { get; set; }

        [System.Xml.Serialization.XmlElementAttribute("coda")]
        public Coda Coda { get; set; }

        [System.Xml.Serialization.XmlIgnoreAttribute()]
        private System.Collections.ObjectModel.Collection<Fermata> _fermata;

        [System.Xml.Serialization.XmlElementAttribute("fermata")]
        public System.Collections.ObjectModel.Collection<Fermata> Fermata
        {
            get
            {
                return _fermata;
            }
            private set
            {
                _fermata = value;
            }
        }

        /// <summary>
        /// <para xml:lang="en">Gets a value indicating whether the Fermata collection is empty.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool FermataSpecified
        {
            get
            {
                return (this.Fermata.Count != 0);
            }
        }

        /// <summary>
        /// <para xml:lang="en">Initializes a new instance of the <see cref="Barline" /> class.</para>
        /// </summary>
        public Barline()
        {
            this._fermata = new System.Collections.ObjectModel.Collection<Fermata>();
        }

        [System.Xml.Serialization.XmlElementAttribute("ending")]
        public Ending Ending { get; set; }

        [System.Xml.Serialization.XmlElementAttribute("repeat")]
        public Repeat Repeat { get; set; }

        [System.Xml.Serialization.XmlIgnoreAttribute()]
        private RightLeftMiddle _location = OpenUtau.Core.Format.MusicXMLSchema.RightLeftMiddle.Right;

        [System.ComponentModel.DefaultValueAttribute(OpenUtau.Core.Format.MusicXMLSchema.RightLeftMiddle.Right)]
        [System.Xml.Serialization.XmlAttributeAttribute("location")]
        public RightLeftMiddle Location
        {
            get
            {
                return _location;
            }
            set
            {
                _location = value;
            }
        }

        [System.Xml.Serialization.XmlAttributeAttribute("segno")]
        public string Segno1 { get; set; }

        [System.Xml.Serialization.XmlAttributeAttribute("coda")]
        public string Coda1 { get; set; }

        /// <summary>
        /// <para>The divisions type is used to express values in terms of the musical divisions defined by the divisions element. It is preferred that these be integer values both for MIDI interoperability and to avoid roundoff errors.</para>
        /// </summary>
        [System.Xml.Serialization.XmlAttributeAttribute("divisions")]
        public decimal Divisions { get; set; }

        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the Divisions property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool DivisionsSpecified { get; set; }

        [System.Xml.Serialization.XmlAttributeAttribute("id")]
        public string Id { get; set; }
    }

    /// <summary>
    /// <para>The ending type represents multiple (e.g. first and second) endings. Typically, the start type is associated with the left barline of the first measure in an ending. The stop and discontinue types are associated with the right barline of the last measure in an ending. Stop is used when the ending mark concludes with a downward jog, as is typical for first endings. Discontinue is used when there is no downward jog, as is typical for second endings that do not conclude a piece. The length of the jog can be specified using the end-length attribute. The text-x and text-y attributes are offsets that specify where the baseline of the start of the ending text appears, relative to the start of the ending line.
    ///
    ///The number attribute indicates which times the ending is played, similar to the time-only attribute used by other elements. While this often represents the numeric values for what is under the ending line, it can also indicate whether an ending is played during a larger dal segno or da capo repeat. Single endings such as "1" or comma-separated multiple endings such as "1,2" may be used. The ending element text is used when the text displayed in the ending is different than what appears in the number attribute. The print-object attribute is used to indicate when an ending is present but not printed, as is often the case for many parts in a full score.</para>
    /// </summary>
    [System.ComponentModel.DescriptionAttribute(@"The ending type represents multiple (e.g. first and second) endings. Typically, the start type is associated with the left barline of the first measure in an ending. The stop and discontinue types are associated with the right barline of the last measure in an ending. Stop is used when the ending mark concludes with a downward jog, as is typical for first endings. Discontinue is used when there is no downward jog, as is typical for second endings that do not conclude a piece. The length of the jog can be specified using the end-length attribute. The text-x and text-y attributes are offsets that specify where the baseline of the start of the ending text appears, relative to the start of the ending line. The number attribute indicates which times the ending is played, similar to the time-only attribute used by other elements. While this often represents the numeric values for what is under the ending line, it can also indicate whether an ending is played during a larger dal segno or da capo repeat. Single endings such as ""1"" or comma-separated multiple endings such as ""1,2"" may be used. The ending element text is used when the text displayed in the ending is different than what appears in the number attribute. The print-object attribute is used to indicate when an ending is present but not printed, as is often the case for many parts in a full score.")]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XmlSchemaClassGenerator", "2.1.1142.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute("ending", Namespace="")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class Ending : IPrintObject, IPrintStyle, ISystemRelation
    {

        /// <summary>
        /// <para xml:lang="en">Gets or sets the text value.</para>
        /// </summary>
        [System.Xml.Serialization.XmlTextAttribute()]
        public string Value { get; set; }

        /// <summary>
        /// <para>The ending-number type is used to specify either a comma-separated list of positive integers without leading zeros, or a string of zero or more spaces. It is used for the number attribute of the ending element. The zero or more spaces version is used when software knows that an ending is present, but cannot determine the type of the ending.</para>
        /// <para xml:lang="en">Pattern: ([ ]*)|([1-9][0-9]*(, ?[1-9][0-9]*)*).</para>
        /// </summary>
        [System.ComponentModel.DataAnnotations.RegularExpressionAttribute("([ ]*)|([1-9][0-9]*(, ?[1-9][0-9]*)*)")]
        [System.ComponentModel.DataAnnotations.RequiredAttribute(AllowEmptyStrings=true)]
        [System.Xml.Serialization.XmlAttributeAttribute("number")]
        public string Number { get; set; }

        [System.ComponentModel.DataAnnotations.RequiredAttribute(AllowEmptyStrings=true)]
        [System.Xml.Serialization.XmlAttributeAttribute("type")]
        public StartStopDiscontinue Type { get; set; }

        [System.Xml.Serialization.XmlAttributeAttribute("print-object")]
        public YesNo PrintObject { get; set; }

        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the PrintObject property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool PrintObjectSpecified { get; set; }

        /// <summary>
        /// <para>The tenths type is a number representing tenths of interline staff space (positive or negative). Both integer and decimal values are allowed, such as 5 for a half space and 2.5 for a quarter space. Interline space is measured from the middle of a staff line.
        ///
        ///Distances in a MusicXML file are measured in tenths of staff space. Tenths are then scaled to millimeters within the scaling element, used in the defaults element at the start of a score. Individual staves can apply a scaling factor to adjust staff size. When a MusicXML element or attribute refers to tenths, it means the global tenths defined by the scaling element, not the local tenths as adjusted by the staff-size element.</para>
        /// </summary>
        [System.Xml.Serialization.XmlAttributeAttribute("default-x")]
        public decimal DefaultX { get; set; }

        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the DefaultX property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool DefaultXSpecified { get; set; }

        /// <summary>
        /// <para>The tenths type is a number representing tenths of interline staff space (positive or negative). Both integer and decimal values are allowed, such as 5 for a half space and 2.5 for a quarter space. Interline space is measured from the middle of a staff line.
        ///
        ///Distances in a MusicXML file are measured in tenths of staff space. Tenths are then scaled to millimeters within the scaling element, used in the defaults element at the start of a score. Individual staves can apply a scaling factor to adjust staff size. When a MusicXML element or attribute refers to tenths, it means the global tenths defined by the scaling element, not the local tenths as adjusted by the staff-size element.</para>
        /// </summary>
        [System.Xml.Serialization.XmlAttributeAttribute("default-y")]
        public decimal DefaultY { get; set; }

        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the DefaultY property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool DefaultYSpecified { get; set; }

        /// <summary>
        /// <para>The tenths type is a number representing tenths of interline staff space (positive or negative). Both integer and decimal values are allowed, such as 5 for a half space and 2.5 for a quarter space. Interline space is measured from the middle of a staff line.
        ///
        ///Distances in a MusicXML file are measured in tenths of staff space. Tenths are then scaled to millimeters within the scaling element, used in the defaults element at the start of a score. Individual staves can apply a scaling factor to adjust staff size. When a MusicXML element or attribute refers to tenths, it means the global tenths defined by the scaling element, not the local tenths as adjusted by the staff-size element.</para>
        /// </summary>
        [System.Xml.Serialization.XmlAttributeAttribute("relative-x")]
        public decimal RelativeX { get; set; }

        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the RelativeX property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool RelativeXSpecified { get; set; }

        /// <summary>
        /// <para>The tenths type is a number representing tenths of interline staff space (positive or negative). Both integer and decimal values are allowed, such as 5 for a half space and 2.5 for a quarter space. Interline space is measured from the middle of a staff line.
        ///
        ///Distances in a MusicXML file are measured in tenths of staff space. Tenths are then scaled to millimeters within the scaling element, used in the defaults element at the start of a score. Individual staves can apply a scaling factor to adjust staff size. When a MusicXML element or attribute refers to tenths, it means the global tenths defined by the scaling element, not the local tenths as adjusted by the staff-size element.</para>
        /// </summary>
        [System.Xml.Serialization.XmlAttributeAttribute("relative-y")]
        public decimal RelativeY { get; set; }

        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the RelativeY property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool RelativeYSpecified { get; set; }

        /// <summary>
        /// <para>The font-family is a comma-separated list of font names. These can be specific font styles such as Maestro or Opus, or one of several generic font styles: music, engraved, handwritten, text, serif, sans-serif, handwritten, cursive, fantasy, and monospace. The music, engraved, and handwritten values refer to music fonts; the rest refer to text fonts. The fantasy style refers to decorative text such as found in older German-style printing.</para>
        /// <para xml:lang="en">Pattern: [^,]+(, ?[^,]+)*.</para>
        /// </summary>
        [System.ComponentModel.DataAnnotations.RegularExpressionAttribute("[^,]+(, ?[^,]+)*")]
        [System.Xml.Serialization.XmlAttributeAttribute("font-family")]
        public string FontFamily { get; set; }

        [System.Xml.Serialization.XmlAttributeAttribute("font-style")]
        public FontStyle FontStyle { get; set; }

        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the FontStyle property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool FontStyleSpecified { get; set; }

        /// <summary>
        /// <para>The font-size can be one of the CSS font sizes (xx-small, x-small, small, medium, large, x-large, xx-large) or a numeric point size.</para>
        /// </summary>
        [System.Xml.Serialization.XmlAttributeAttribute("font-size")]
        public string FontSize { get; set; }

        [System.Xml.Serialization.XmlAttributeAttribute("font-weight")]
        public FontWeight FontWeight { get; set; }

        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the FontWeight property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool FontWeightSpecified { get; set; }

        /// <summary>
        /// <para>The color type indicates the color of an element. Color may be represented as hexadecimal RGB triples, as in HTML, or as hexadecimal ARGB tuples, with the A indicating alpha of transparency. An alpha value of 00 is totally transparent; FF is totally opaque. If RGB is used, the A value is assumed to be FF.
        ///
        ///For instance, the RGB value "#800080" represents purple. An ARGB value of "#40800080" would be a transparent purple.
        ///
        ///As in SVG 1.1, colors are defined in terms of the sRGB color space (IEC 61966).</para>
        /// <para xml:lang="en">Pattern: #[\dA-F]{6}([\dA-F][\dA-F])?.</para>
        /// </summary>
        [System.ComponentModel.DataAnnotations.RegularExpressionAttribute("#[\\dA-F]{6}([\\dA-F][\\dA-F])?")]
        [System.Xml.Serialization.XmlAttributeAttribute("color")]
        public string Color { get; set; }

        [System.Xml.Serialization.XmlAttributeAttribute("system")]
        public SystemRelation System { get; set; }

        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the System property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool SystemSpecified { get; set; }

        /// <summary>
        /// <para>The tenths type is a number representing tenths of interline staff space (positive or negative). Both integer and decimal values are allowed, such as 5 for a half space and 2.5 for a quarter space. Interline space is measured from the middle of a staff line.
        ///
        ///Distances in a MusicXML file are measured in tenths of staff space. Tenths are then scaled to millimeters within the scaling element, used in the defaults element at the start of a score. Individual staves can apply a scaling factor to adjust staff size. When a MusicXML element or attribute refers to tenths, it means the global tenths defined by the scaling element, not the local tenths as adjusted by the staff-size element.</para>
        /// </summary>
        [System.Xml.Serialization.XmlAttributeAttribute("end-length")]
        public decimal EndLength { get; set; }

        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the EndLength property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool EndLengthSpecified { get; set; }

        /// <summary>
        /// <para>The tenths type is a number representing tenths of interline staff space (positive or negative). Both integer and decimal values are allowed, such as 5 for a half space and 2.5 for a quarter space. Interline space is measured from the middle of a staff line.
        ///
        ///Distances in a MusicXML file are measured in tenths of staff space. Tenths are then scaled to millimeters within the scaling element, used in the defaults element at the start of a score. Individual staves can apply a scaling factor to adjust staff size. When a MusicXML element or attribute refers to tenths, it means the global tenths defined by the scaling element, not the local tenths as adjusted by the staff-size element.</para>
        /// </summary>
        [System.Xml.Serialization.XmlAttributeAttribute("text-x")]
        public decimal TextX { get; set; }

        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the TextX property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool TextXSpecified { get; set; }

        /// <summary>
        /// <para>The tenths type is a number representing tenths of interline staff space (positive or negative). Both integer and decimal values are allowed, such as 5 for a half space and 2.5 for a quarter space. Interline space is measured from the middle of a staff line.
        ///
        ///Distances in a MusicXML file are measured in tenths of staff space. Tenths are then scaled to millimeters within the scaling element, used in the defaults element at the start of a score. Individual staves can apply a scaling factor to adjust staff size. When a MusicXML element or attribute refers to tenths, it means the global tenths defined by the scaling element, not the local tenths as adjusted by the staff-size element.</para>
        /// </summary>
        [System.Xml.Serialization.XmlAttributeAttribute("text-y")]
        public decimal TextY { get; set; }

        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the TextY property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool TextYSpecified { get; set; }
    }

    /// <summary>
    /// <para>The system-relation attribute group distinguishes elements that are associated with a system rather than the particular part where the element appears.</para>
    /// </summary>
    [System.ComponentModel.DescriptionAttribute("The system-relation attribute group distinguishes elements that are associated wi" +
        "th a system rather than the particular part where the element appears.")]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XmlSchemaClassGenerator", "2.1.1142.0")]
    public partial interface ISystemRelation
    {

        SystemRelation System
        {
            get;
            set;
        }
    }

    /// <summary>
    /// <para>The repeat type represents repeat marks. The start of the repeat has a forward direction while the end of the repeat has a backward direction. The times and after-jump attributes are only used with backward repeats that are not part of an ending. The times attribute indicates the number of times the repeated section is played. The after-jump attribute indicates if the repeats are played after a jump due to a da capo or dal segno.</para>
    /// </summary>
    [System.ComponentModel.DescriptionAttribute(@"The repeat type represents repeat marks. The start of the repeat has a forward direction while the end of the repeat has a backward direction. The times and after-jump attributes are only used with backward repeats that are not part of an ending. The times attribute indicates the number of times the repeated section is played. The after-jump attribute indicates if the repeats are played after a jump due to a da capo or dal segno.")]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XmlSchemaClassGenerator", "2.1.1142.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute("repeat", Namespace="")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class Repeat
    {

        [System.ComponentModel.DataAnnotations.RequiredAttribute(AllowEmptyStrings=true)]
        [System.Xml.Serialization.XmlAttributeAttribute("direction")]
        public BackwardForward Direction { get; set; }

        [System.Xml.Serialization.XmlAttributeAttribute("times")]
        public string Times { get; set; }

        [System.Xml.Serialization.XmlAttributeAttribute("after-jump")]
        public YesNo AfterJump { get; set; }

        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the AfterJump property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool AfterJumpSpecified { get; set; }

        [System.Xml.Serialization.XmlAttributeAttribute("winged")]
        public Winged Winged { get; set; }

        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the Winged property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool WingedSpecified { get; set; }
    }

    /// <summary>
    /// <para>The accord type represents the tuning of a single string in the scordatura element. It uses the same group of elements as the staff-tuning element. Strings are numbered from high to low.</para>
    /// </summary>
    [System.ComponentModel.DescriptionAttribute("The accord type represents the tuning of a single string in the scordatura elemen" +
        "t. It uses the same group of elements as the staff-tuning element. Strings are n" +
        "umbered from high to low.")]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XmlSchemaClassGenerator", "2.1.1142.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute("accord", Namespace="")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class Accord : ITuning
    {

        /// <summary>
        /// <para>The tuning-step element is represented like the step element, with a different name to reflect its different function in string tuning.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("The tuning-step element is represented like the step element, with a different na" +
            "me to reflect its different function in string tuning.")]
        [System.ComponentModel.DataAnnotations.RequiredAttribute(AllowEmptyStrings=true)]
        [System.Xml.Serialization.XmlElementAttribute("tuning-step")]
        public Step TuningStep { get; set; }

        /// <summary>
        /// <para>The tuning-alter element is represented like the alter element, with a different name to reflect its different function in string tuning.</para>
        /// <para>The semitones type is a number representing semitones, used for chromatic alteration. A value of -1 corresponds to a flat and a value of 1 to a sharp. Decimal values like 0.5 (quarter tone sharp) are used for microtones.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("The tuning-alter element is represented like the alter element, with a different " +
            "name to reflect its different function in string tuning.")]
        [System.Xml.Serialization.XmlElementAttribute("tuning-alter")]
        public decimal TuningAlter { get; set; }

        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the TuningAlter property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool TuningAlterSpecified { get; set; }

        /// <summary>
        /// <para>The tuning-octave element is represented like the octave element, with a different name to reflect its different function in string tuning.</para>
        /// <para>Octaves are represented by the numbers 0 to 9, where 4 indicates the octave started by middle C.</para>
        /// <para xml:lang="en">Minimum inclusive value: 0.</para>
        /// <para xml:lang="en">Maximum inclusive value: 9.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("The tuning-octave element is represented like the octave element, with a differen" +
            "t name to reflect its different function in string tuning.")]
        [System.ComponentModel.DataAnnotations.RangeAttribute(typeof(decimal), "0", "9")]
        [System.ComponentModel.DataAnnotations.RequiredAttribute(AllowEmptyStrings=true)]
        [System.Xml.Serialization.XmlElementAttribute("tuning-octave")]
        public byte TuningOctave { get; set; }

        /// <summary>
        /// <para>The string-number type indicates a string number. Strings are numbered from high to low, with 1 being the highest pitched full-length string.</para>
        /// </summary>
        [System.Xml.Serialization.XmlAttributeAttribute("string")]
        public string String { get; set; }
    }

    /// <summary>
    /// <para>The accordion-registration type is used for accordion registration symbols. These are circular symbols divided horizontally into high, middle, and low sections that correspond to 4', 8', and 16' pipes. Each accordion-high, accordion-middle, and accordion-low element represents the presence of one or more dots in the registration diagram. An accordion-registration element needs to have at least one of the child elements present.</para>
    /// </summary>
    [System.ComponentModel.DescriptionAttribute(@"The accordion-registration type is used for accordion registration symbols. These are circular symbols divided horizontally into high, middle, and low sections that correspond to 4', 8', and 16' pipes. Each accordion-high, accordion-middle, and accordion-low element represents the presence of one or more dots in the registration diagram. An accordion-registration element needs to have at least one of the child elements present.")]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XmlSchemaClassGenerator", "2.1.1142.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute("accordion-registration", Namespace="")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class AccordionRegistration : IPrintStyleAlign, IOptionalUniqueId
    {

        /// <summary>
        /// <para>The accordion-high element indicates the presence of a dot in the high (4') section of the registration symbol. This element is omitted if no dot is present.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("The accordion-high element indicates the presence of a dot in the high (4\') secti" +
            "on of the registration symbol. This element is omitted if no dot is present.")]
        [System.Xml.Serialization.XmlElementAttribute("accordion-high")]
        public Empty AccordionHigh { get; set; }

        /// <summary>
        /// <para>The accordion-middle element indicates the presence of 1 to 3 dots in the middle (8') section of the registration symbol. This element is omitted if no dots are present.</para>
        /// <para>The accordion-middle type may have values of 1, 2, or 3, corresponding to having 1 to 3 dots in the middle section of the accordion registration symbol. This type is not used if no dots are present.</para>
        /// <para xml:lang="en">Minimum inclusive value: 1.</para>
        /// <para xml:lang="en">Maximum inclusive value: 3.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("The accordion-middle element indicates the presence of 1 to 3 dots in the middle " +
            "(8\') section of the registration symbol. This element is omitted if no dots are " +
            "present.")]
        [System.ComponentModel.DataAnnotations.RangeAttribute(typeof(decimal), "1", "3")]
        [System.Xml.Serialization.XmlElementAttribute("accordion-middle")]
        public byte AccordionMiddle { get; set; }

        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the AccordionMiddle property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool AccordionMiddleSpecified { get; set; }

        /// <summary>
        /// <para>The accordion-low element indicates the presence of a dot in the low (16') section of the registration symbol. This element is omitted if no dot is present.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("The accordion-low element indicates the presence of a dot in the low (16\') sectio" +
            "n of the registration symbol. This element is omitted if no dot is present.")]
        [System.Xml.Serialization.XmlElementAttribute("accordion-low")]
        public Empty AccordionLow { get; set; }

        /// <summary>
        /// <para>The tenths type is a number representing tenths of interline staff space (positive or negative). Both integer and decimal values are allowed, such as 5 for a half space and 2.5 for a quarter space. Interline space is measured from the middle of a staff line.
        ///
        ///Distances in a MusicXML file are measured in tenths of staff space. Tenths are then scaled to millimeters within the scaling element, used in the defaults element at the start of a score. Individual staves can apply a scaling factor to adjust staff size. When a MusicXML element or attribute refers to tenths, it means the global tenths defined by the scaling element, not the local tenths as adjusted by the staff-size element.</para>
        /// </summary>
        [System.Xml.Serialization.XmlAttributeAttribute("default-x")]
        public decimal DefaultX { get; set; }

        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the DefaultX property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool DefaultXSpecified { get; set; }

        /// <summary>
        /// <para>The tenths type is a number representing tenths of interline staff space (positive or negative). Both integer and decimal values are allowed, such as 5 for a half space and 2.5 for a quarter space. Interline space is measured from the middle of a staff line.
        ///
        ///Distances in a MusicXML file are measured in tenths of staff space. Tenths are then scaled to millimeters within the scaling element, used in the defaults element at the start of a score. Individual staves can apply a scaling factor to adjust staff size. When a MusicXML element or attribute refers to tenths, it means the global tenths defined by the scaling element, not the local tenths as adjusted by the staff-size element.</para>
        /// </summary>
        [System.Xml.Serialization.XmlAttributeAttribute("default-y")]
        public decimal DefaultY { get; set; }

        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the DefaultY property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool DefaultYSpecified { get; set; }

        /// <summary>
        /// <para>The tenths type is a number representing tenths of interline staff space (positive or negative). Both integer and decimal values are allowed, such as 5 for a half space and 2.5 for a quarter space. Interline space is measured from the middle of a staff line.
        ///
        ///Distances in a MusicXML file are measured in tenths of staff space. Tenths are then scaled to millimeters within the scaling element, used in the defaults element at the start of a score. Individual staves can apply a scaling factor to adjust staff size. When a MusicXML element or attribute refers to tenths, it means the global tenths defined by the scaling element, not the local tenths as adjusted by the staff-size element.</para>
        /// </summary>
        [System.Xml.Serialization.XmlAttributeAttribute("relative-x")]
        public decimal RelativeX { get; set; }

        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the RelativeX property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool RelativeXSpecified { get; set; }

        /// <summary>
        /// <para>The tenths type is a number representing tenths of interline staff space (positive or negative). Both integer and decimal values are allowed, such as 5 for a half space and 2.5 for a quarter space. Interline space is measured from the middle of a staff line.
        ///
        ///Distances in a MusicXML file are measured in tenths of staff space. Tenths are then scaled to millimeters within the scaling element, used in the defaults element at the start of a score. Individual staves can apply a scaling factor to adjust staff size. When a MusicXML element or attribute refers to tenths, it means the global tenths defined by the scaling element, not the local tenths as adjusted by the staff-size element.</para>
        /// </summary>
        [System.Xml.Serialization.XmlAttributeAttribute("relative-y")]
        public decimal RelativeY { get; set; }

        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the RelativeY property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool RelativeYSpecified { get; set; }

        /// <summary>
        /// <para>The font-family is a comma-separated list of font names. These can be specific font styles such as Maestro or Opus, or one of several generic font styles: music, engraved, handwritten, text, serif, sans-serif, handwritten, cursive, fantasy, and monospace. The music, engraved, and handwritten values refer to music fonts; the rest refer to text fonts. The fantasy style refers to decorative text such as found in older German-style printing.</para>
        /// <para xml:lang="en">Pattern: [^,]+(, ?[^,]+)*.</para>
        /// </summary>
        [System.ComponentModel.DataAnnotations.RegularExpressionAttribute("[^,]+(, ?[^,]+)*")]
        [System.Xml.Serialization.XmlAttributeAttribute("font-family")]
        public string FontFamily { get; set; }

        [System.Xml.Serialization.XmlAttributeAttribute("font-style")]
        public FontStyle FontStyle { get; set; }

        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the FontStyle property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool FontStyleSpecified { get; set; }

        /// <summary>
        /// <para>The font-size can be one of the CSS font sizes (xx-small, x-small, small, medium, large, x-large, xx-large) or a numeric point size.</para>
        /// </summary>
        [System.Xml.Serialization.XmlAttributeAttribute("font-size")]
        public string FontSize { get; set; }

        [System.Xml.Serialization.XmlAttributeAttribute("font-weight")]
        public FontWeight FontWeight { get; set; }

        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the FontWeight property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool FontWeightSpecified { get; set; }

        /// <summary>
        /// <para>The color type indicates the color of an element. Color may be represented as hexadecimal RGB triples, as in HTML, or as hexadecimal ARGB tuples, with the A indicating alpha of transparency. An alpha value of 00 is totally transparent; FF is totally opaque. If RGB is used, the A value is assumed to be FF.
        ///
        ///For instance, the RGB value "#800080" represents purple. An ARGB value of "#40800080" would be a transparent purple.
        ///
        ///As in SVG 1.1, colors are defined in terms of the sRGB color space (IEC 61966).</para>
        /// <para xml:lang="en">Pattern: #[\dA-F]{6}([\dA-F][\dA-F])?.</para>
        /// </summary>
        [System.ComponentModel.DataAnnotations.RegularExpressionAttribute("#[\\dA-F]{6}([\\dA-F][\\dA-F])?")]
        [System.Xml.Serialization.XmlAttributeAttribute("color")]
        public string Color { get; set; }

        [System.Xml.Serialization.XmlAttributeAttribute("halign")]
        public LeftCenterRight Halign { get; set; }

        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the Halign property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool HalignSpecified { get; set; }

        [System.Xml.Serialization.XmlAttributeAttribute("valign")]
        public Valign Valign { get; set; }

        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the Valign property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool ValignSpecified { get; set; }

        [System.Xml.Serialization.XmlAttributeAttribute("id")]
        public string Id { get; set; }
    }

    /// <summary>
    /// <para>The barre element indicates placing a finger over multiple strings on a single fret. The type is "start" for the lowest pitched string (e.g., the string with the highest MusicXML number) and is "stop" for the highest pitched string.</para>
    /// </summary>
    [System.ComponentModel.DescriptionAttribute("The barre element indicates placing a finger over multiple strings on a single fr" +
        "et. The type is \"start\" for the lowest pitched string (e.g., the string with the" +
        " highest MusicXML number) and is \"stop\" for the highest pitched string.")]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XmlSchemaClassGenerator", "2.1.1142.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute("barre", Namespace="")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class Barre : IColor
    {

        [System.ComponentModel.DataAnnotations.RequiredAttribute(AllowEmptyStrings=true)]
        [System.Xml.Serialization.XmlAttributeAttribute("type")]
        public StartStop Type { get; set; }

        /// <summary>
        /// <para>The color type indicates the color of an element. Color may be represented as hexadecimal RGB triples, as in HTML, or as hexadecimal ARGB tuples, with the A indicating alpha of transparency. An alpha value of 00 is totally transparent; FF is totally opaque. If RGB is used, the A value is assumed to be FF.
        ///
        ///For instance, the RGB value "#800080" represents purple. An ARGB value of "#40800080" would be a transparent purple.
        ///
        ///As in SVG 1.1, colors are defined in terms of the sRGB color space (IEC 61966).</para>
        /// <para xml:lang="en">Pattern: #[\dA-F]{6}([\dA-F][\dA-F])?.</para>
        /// </summary>
        [System.ComponentModel.DataAnnotations.RegularExpressionAttribute("#[\\dA-F]{6}([\\dA-F][\\dA-F])?")]
        [System.Xml.Serialization.XmlAttributeAttribute("color")]
        public string Color { get; set; }
    }

    /// <summary>
    /// <para>The bass type is used to indicate a bass note in popular music chord symbols, e.g. G/C. It is generally not used in functional harmony, as inversion is generally not used in pop chord symbols. As with root, it is divided into step and alter elements, similar to pitches. The arrangement attribute specifies where the bass is displayed relative to what precedes it.</para>
    /// </summary>
    [System.ComponentModel.DescriptionAttribute(@"The bass type is used to indicate a bass note in popular music chord symbols, e.g. G/C. It is generally not used in functional harmony, as inversion is generally not used in pop chord symbols. As with root, it is divided into step and alter elements, similar to pitches. The arrangement attribute specifies where the bass is displayed relative to what precedes it.")]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XmlSchemaClassGenerator", "2.1.1142.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute("bass", Namespace="")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class Bass
    {

        /// <summary>
        /// <para>The optional bass-separator element indicates that text, rather than a line or slash, separates the bass from what precedes it.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("The optional bass-separator element indicates that text, rather than a line or sl" +
            "ash, separates the bass from what precedes it.")]
        [System.Xml.Serialization.XmlElementAttribute("bass-separator")]
        public StyleText BassSeparator { get; set; }

        [System.ComponentModel.DataAnnotations.RequiredAttribute(AllowEmptyStrings=true)]
        [System.Xml.Serialization.XmlElementAttribute("bass-step")]
        public BassStep BassStep { get; set; }

        /// <summary>
        /// <para>The bass-alter element represents the chromatic alteration of the bass of the current chord within the harmony element. In some chord styles, the text for the bass-step element may include bass-alter information. In that case, the print-object attribute of the bass-alter element can be set to no. The location attribute indicates whether the alteration should appear to the left or the right of the bass-step; it is right if not specified.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute(@"The bass-alter element represents the chromatic alteration of the bass of the current chord within the harmony element. In some chord styles, the text for the bass-step element may include bass-alter information. In that case, the print-object attribute of the bass-alter element can be set to no. The location attribute indicates whether the alteration should appear to the left or the right of the bass-step; it is right if not specified.")]
        [System.Xml.Serialization.XmlElementAttribute("bass-alter")]
        public HarmonyAlter BassAlter { get; set; }

        [System.Xml.Serialization.XmlAttributeAttribute("arrangement")]
        public HarmonyArrangement Arrangement { get; set; }

        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the Arrangement property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool ArrangementSpecified { get; set; }
    }

    /// <summary>
    /// <para>The style-text type represents a text element with a print-style attribute group.</para>
    /// </summary>
    [System.ComponentModel.DescriptionAttribute("The style-text type represents a text element with a print-style attribute group." +
        "")]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XmlSchemaClassGenerator", "2.1.1142.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute("style-text", Namespace="")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class StyleText : IPrintStyle
    {

        /// <summary>
        /// <para xml:lang="en">Gets or sets the text value.</para>
        /// </summary>
        [System.Xml.Serialization.XmlTextAttribute()]
        public string Value { get; set; }

        /// <summary>
        /// <para>The tenths type is a number representing tenths of interline staff space (positive or negative). Both integer and decimal values are allowed, such as 5 for a half space and 2.5 for a quarter space. Interline space is measured from the middle of a staff line.
        ///
        ///Distances in a MusicXML file are measured in tenths of staff space. Tenths are then scaled to millimeters within the scaling element, used in the defaults element at the start of a score. Individual staves can apply a scaling factor to adjust staff size. When a MusicXML element or attribute refers to tenths, it means the global tenths defined by the scaling element, not the local tenths as adjusted by the staff-size element.</para>
        /// </summary>
        [System.Xml.Serialization.XmlAttributeAttribute("default-x")]
        public decimal DefaultX { get; set; }

        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the DefaultX property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool DefaultXSpecified { get; set; }

        /// <summary>
        /// <para>The tenths type is a number representing tenths of interline staff space (positive or negative). Both integer and decimal values are allowed, such as 5 for a half space and 2.5 for a quarter space. Interline space is measured from the middle of a staff line.
        ///
        ///Distances in a MusicXML file are measured in tenths of staff space. Tenths are then scaled to millimeters within the scaling element, used in the defaults element at the start of a score. Individual staves can apply a scaling factor to adjust staff size. When a MusicXML element or attribute refers to tenths, it means the global tenths defined by the scaling element, not the local tenths as adjusted by the staff-size element.</para>
        /// </summary>
        [System.Xml.Serialization.XmlAttributeAttribute("default-y")]
        public decimal DefaultY { get; set; }

        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the DefaultY property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool DefaultYSpecified { get; set; }

        /// <summary>
        /// <para>The tenths type is a number representing tenths of interline staff space (positive or negative). Both integer and decimal values are allowed, such as 5 for a half space and 2.5 for a quarter space. Interline space is measured from the middle of a staff line.
        ///
        ///Distances in a MusicXML file are measured in tenths of staff space. Tenths are then scaled to millimeters within the scaling element, used in the defaults element at the start of a score. Individual staves can apply a scaling factor to adjust staff size. When a MusicXML element or attribute refers to tenths, it means the global tenths defined by the scaling element, not the local tenths as adjusted by the staff-size element.</para>
        /// </summary>
        [System.Xml.Serialization.XmlAttributeAttribute("relative-x")]
        public decimal RelativeX { get; set; }

        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the RelativeX property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool RelativeXSpecified { get; set; }

        /// <summary>
        /// <para>The tenths type is a number representing tenths of interline staff space (positive or negative). Both integer and decimal values are allowed, such as 5 for a half space and 2.5 for a quarter space. Interline space is measured from the middle of a staff line.
        ///
        ///Distances in a MusicXML file are measured in tenths of staff space. Tenths are then scaled to millimeters within the scaling element, used in the defaults element at the start of a score. Individual staves can apply a scaling factor to adjust staff size. When a MusicXML element or attribute refers to tenths, it means the global tenths defined by the scaling element, not the local tenths as adjusted by the staff-size element.</para>
        /// </summary>
        [System.Xml.Serialization.XmlAttributeAttribute("relative-y")]
        public decimal RelativeY { get; set; }

        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the RelativeY property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool RelativeYSpecified { get; set; }

        /// <summary>
        /// <para>The font-family is a comma-separated list of font names. These can be specific font styles such as Maestro or Opus, or one of several generic font styles: music, engraved, handwritten, text, serif, sans-serif, handwritten, cursive, fantasy, and monospace. The music, engraved, and handwritten values refer to music fonts; the rest refer to text fonts. The fantasy style refers to decorative text such as found in older German-style printing.</para>
        /// <para xml:lang="en">Pattern: [^,]+(, ?[^,]+)*.</para>
        /// </summary>
        [System.ComponentModel.DataAnnotations.RegularExpressionAttribute("[^,]+(, ?[^,]+)*")]
        [System.Xml.Serialization.XmlAttributeAttribute("font-family")]
        public string FontFamily { get; set; }

        [System.Xml.Serialization.XmlAttributeAttribute("font-style")]
        public FontStyle FontStyle { get; set; }

        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the FontStyle property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool FontStyleSpecified { get; set; }

        /// <summary>
        /// <para>The font-size can be one of the CSS font sizes (xx-small, x-small, small, medium, large, x-large, xx-large) or a numeric point size.</para>
        /// </summary>
        [System.Xml.Serialization.XmlAttributeAttribute("font-size")]
        public string FontSize { get; set; }

        [System.Xml.Serialization.XmlAttributeAttribute("font-weight")]
        public FontWeight FontWeight { get; set; }

        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the FontWeight property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool FontWeightSpecified { get; set; }

        /// <summary>
        /// <para>The color type indicates the color of an element. Color may be represented as hexadecimal RGB triples, as in HTML, or as hexadecimal ARGB tuples, with the A indicating alpha of transparency. An alpha value of 00 is totally transparent; FF is totally opaque. If RGB is used, the A value is assumed to be FF.
        ///
        ///For instance, the RGB value "#800080" represents purple. An ARGB value of "#40800080" would be a transparent purple.
        ///
        ///As in SVG 1.1, colors are defined in terms of the sRGB color space (IEC 61966).</para>
        /// <para xml:lang="en">Pattern: #[\dA-F]{6}([\dA-F][\dA-F])?.</para>
        /// </summary>
        [System.ComponentModel.DataAnnotations.RegularExpressionAttribute("#[\\dA-F]{6}([\\dA-F][\\dA-F])?")]
        [System.Xml.Serialization.XmlAttributeAttribute("color")]
        public string Color { get; set; }
    }

    /// <summary>
    /// <para>The bass-step type represents the pitch step of the bass of the current chord within the harmony element. The text attribute indicates how the bass should appear in a score if not using the element contents.</para>
    /// </summary>
    [System.ComponentModel.DescriptionAttribute("The bass-step type represents the pitch step of the bass of the current chord wit" +
        "hin the harmony element. The text attribute indicates how the bass should appear" +
        " in a score if not using the element contents.")]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XmlSchemaClassGenerator", "2.1.1142.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute("bass-step", Namespace="")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class BassStep : IPrintStyle
    {

        /// <summary>
        /// <para xml:lang="en">Gets or sets the text value.</para>
        /// </summary>
        [System.Xml.Serialization.XmlTextAttribute()]
        public Step Value { get; set; }

        [System.Xml.Serialization.XmlAttributeAttribute("text")]
        public string Text { get; set; }

        /// <summary>
        /// <para>The tenths type is a number representing tenths of interline staff space (positive or negative). Both integer and decimal values are allowed, such as 5 for a half space and 2.5 for a quarter space. Interline space is measured from the middle of a staff line.
        ///
        ///Distances in a MusicXML file are measured in tenths of staff space. Tenths are then scaled to millimeters within the scaling element, used in the defaults element at the start of a score. Individual staves can apply a scaling factor to adjust staff size. When a MusicXML element or attribute refers to tenths, it means the global tenths defined by the scaling element, not the local tenths as adjusted by the staff-size element.</para>
        /// </summary>
        [System.Xml.Serialization.XmlAttributeAttribute("default-x")]
        public decimal DefaultX { get; set; }

        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the DefaultX property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool DefaultXSpecified { get; set; }

        /// <summary>
        /// <para>The tenths type is a number representing tenths of interline staff space (positive or negative). Both integer and decimal values are allowed, such as 5 for a half space and 2.5 for a quarter space. Interline space is measured from the middle of a staff line.
        ///
        ///Distances in a MusicXML file are measured in tenths of staff space. Tenths are then scaled to millimeters within the scaling element, used in the defaults element at the start of a score. Individual staves can apply a scaling factor to adjust staff size. When a MusicXML element or attribute refers to tenths, it means the global tenths defined by the scaling element, not the local tenths as adjusted by the staff-size element.</para>
        /// </summary>
        [System.Xml.Serialization.XmlAttributeAttribute("default-y")]
        public decimal DefaultY { get; set; }

        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the DefaultY property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool DefaultYSpecified { get; set; }

        /// <summary>
        /// <para>The tenths type is a number representing tenths of interline staff space (positive or negative). Both integer and decimal values are allowed, such as 5 for a half space and 2.5 for a quarter space. Interline space is measured from the middle of a staff line.
        ///
        ///Distances in a MusicXML file are measured in tenths of staff space. Tenths are then scaled to millimeters within the scaling element, used in the defaults element at the start of a score. Individual staves can apply a scaling factor to adjust staff size. When a MusicXML element or attribute refers to tenths, it means the global tenths defined by the scaling element, not the local tenths as adjusted by the staff-size element.</para>
        /// </summary>
        [System.Xml.Serialization.XmlAttributeAttribute("relative-x")]
        public decimal RelativeX { get; set; }

        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the RelativeX property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool RelativeXSpecified { get; set; }

        /// <summary>
        /// <para>The tenths type is a number representing tenths of interline staff space (positive or negative). Both integer and decimal values are allowed, such as 5 for a half space and 2.5 for a quarter space. Interline space is measured from the middle of a staff line.
        ///
        ///Distances in a MusicXML file are measured in tenths of staff space. Tenths are then scaled to millimeters within the scaling element, used in the defaults element at the start of a score. Individual staves can apply a scaling factor to adjust staff size. When a MusicXML element or attribute refers to tenths, it means the global tenths defined by the scaling element, not the local tenths as adjusted by the staff-size element.</para>
        /// </summary>
        [System.Xml.Serialization.XmlAttributeAttribute("relative-y")]
        public decimal RelativeY { get; set; }

        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the RelativeY property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool RelativeYSpecified { get; set; }

        /// <summary>
        /// <para>The font-family is a comma-separated list of font names. These can be specific font styles such as Maestro or Opus, or one of several generic font styles: music, engraved, handwritten, text, serif, sans-serif, handwritten, cursive, fantasy, and monospace. The music, engraved, and handwritten values refer to music fonts; the rest refer to text fonts. The fantasy style refers to decorative text such as found in older German-style printing.</para>
        /// <para xml:lang="en">Pattern: [^,]+(, ?[^,]+)*.</para>
        /// </summary>
        [System.ComponentModel.DataAnnotations.RegularExpressionAttribute("[^,]+(, ?[^,]+)*")]
        [System.Xml.Serialization.XmlAttributeAttribute("font-family")]
        public string FontFamily { get; set; }

        [System.Xml.Serialization.XmlAttributeAttribute("font-style")]
        public FontStyle FontStyle { get; set; }

        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the FontStyle property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool FontStyleSpecified { get; set; }

        /// <summary>
        /// <para>The font-size can be one of the CSS font sizes (xx-small, x-small, small, medium, large, x-large, xx-large) or a numeric point size.</para>
        /// </summary>
        [System.Xml.Serialization.XmlAttributeAttribute("font-size")]
        public string FontSize { get; set; }

        [System.Xml.Serialization.XmlAttributeAttribute("font-weight")]
        public FontWeight FontWeight { get; set; }

        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the FontWeight property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool FontWeightSpecified { get; set; }

        /// <summary>
        /// <para>The color type indicates the color of an element. Color may be represented as hexadecimal RGB triples, as in HTML, or as hexadecimal ARGB tuples, with the A indicating alpha of transparency. An alpha value of 00 is totally transparent; FF is totally opaque. If RGB is used, the A value is assumed to be FF.
        ///
        ///For instance, the RGB value "#800080" represents purple. An ARGB value of "#40800080" would be a transparent purple.
        ///
        ///As in SVG 1.1, colors are defined in terms of the sRGB color space (IEC 61966).</para>
        /// <para xml:lang="en">Pattern: #[\dA-F]{6}([\dA-F][\dA-F])?.</para>
        /// </summary>
        [System.ComponentModel.DataAnnotations.RegularExpressionAttribute("#[\\dA-F]{6}([\\dA-F][\\dA-F])?")]
        [System.Xml.Serialization.XmlAttributeAttribute("color")]
        public string Color { get; set; }
    }

    /// <summary>
    /// <para>The harmony-alter type represents the chromatic alteration of the root, numeral, or bass of the current harmony-chord group within the harmony element. In some chord styles, the text of the preceding element may include alteration information. In that case, the print-object attribute of this type can be set to no. The location attribute indicates whether the alteration should appear to the left or the right of the preceding element. Its default value varies by element.</para>
    /// </summary>
    [System.ComponentModel.DescriptionAttribute(@"The harmony-alter type represents the chromatic alteration of the root, numeral, or bass of the current harmony-chord group within the harmony element. In some chord styles, the text of the preceding element may include alteration information. In that case, the print-object attribute of this type can be set to no. The location attribute indicates whether the alteration should appear to the left or the right of the preceding element. Its default value varies by element.")]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XmlSchemaClassGenerator", "2.1.1142.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute("harmony-alter", Namespace="")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class HarmonyAlter : IPrintObject, IPrintStyle
    {

        /// <summary>
        /// <para xml:lang="en">Gets or sets the text value.</para>
        /// </summary>
        [System.Xml.Serialization.XmlTextAttribute()]
        public decimal Value { get; set; }

        [System.Xml.Serialization.XmlAttributeAttribute("print-object")]
        public YesNo PrintObject { get; set; }

        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the PrintObject property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool PrintObjectSpecified { get; set; }

        /// <summary>
        /// <para>The tenths type is a number representing tenths of interline staff space (positive or negative). Both integer and decimal values are allowed, such as 5 for a half space and 2.5 for a quarter space. Interline space is measured from the middle of a staff line.
        ///
        ///Distances in a MusicXML file are measured in tenths of staff space. Tenths are then scaled to millimeters within the scaling element, used in the defaults element at the start of a score. Individual staves can apply a scaling factor to adjust staff size. When a MusicXML element or attribute refers to tenths, it means the global tenths defined by the scaling element, not the local tenths as adjusted by the staff-size element.</para>
        /// </summary>
        [System.Xml.Serialization.XmlAttributeAttribute("default-x")]
        public decimal DefaultX { get; set; }

        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the DefaultX property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool DefaultXSpecified { get; set; }

        /// <summary>
        /// <para>The tenths type is a number representing tenths of interline staff space (positive or negative). Both integer and decimal values are allowed, such as 5 for a half space and 2.5 for a quarter space. Interline space is measured from the middle of a staff line.
        ///
        ///Distances in a MusicXML file are measured in tenths of staff space. Tenths are then scaled to millimeters within the scaling element, used in the defaults element at the start of a score. Individual staves can apply a scaling factor to adjust staff size. When a MusicXML element or attribute refers to tenths, it means the global tenths defined by the scaling element, not the local tenths as adjusted by the staff-size element.</para>
        /// </summary>
        [System.Xml.Serialization.XmlAttributeAttribute("default-y")]
        public decimal DefaultY { get; set; }

        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the DefaultY property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool DefaultYSpecified { get; set; }

        /// <summary>
        /// <para>The tenths type is a number representing tenths of interline staff space (positive or negative). Both integer and decimal values are allowed, such as 5 for a half space and 2.5 for a quarter space. Interline space is measured from the middle of a staff line.
        ///
        ///Distances in a MusicXML file are measured in tenths of staff space. Tenths are then scaled to millimeters within the scaling element, used in the defaults element at the start of a score. Individual staves can apply a scaling factor to adjust staff size. When a MusicXML element or attribute refers to tenths, it means the global tenths defined by the scaling element, not the local tenths as adjusted by the staff-size element.</para>
        /// </summary>
        [System.Xml.Serialization.XmlAttributeAttribute("relative-x")]
        public decimal RelativeX { get; set; }

        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the RelativeX property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool RelativeXSpecified { get; set; }

        /// <summary>
        /// <para>The tenths type is a number representing tenths of interline staff space (positive or negative). Both integer and decimal values are allowed, such as 5 for a half space and 2.5 for a quarter space. Interline space is measured from the middle of a staff line.
        ///
        ///Distances in a MusicXML file are measured in tenths of staff space. Tenths are then scaled to millimeters within the scaling element, used in the defaults element at the start of a score. Individual staves can apply a scaling factor to adjust staff size. When a MusicXML element or attribute refers to tenths, it means the global tenths defined by the scaling element, not the local tenths as adjusted by the staff-size element.</para>
        /// </summary>
        [System.Xml.Serialization.XmlAttributeAttribute("relative-y")]
        public decimal RelativeY { get; set; }

        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the RelativeY property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool RelativeYSpecified { get; set; }

        /// <summary>
        /// <para>The font-family is a comma-separated list of font names. These can be specific font styles such as Maestro or Opus, or one of several generic font styles: music, engraved, handwritten, text, serif, sans-serif, handwritten, cursive, fantasy, and monospace. The music, engraved, and handwritten values refer to music fonts; the rest refer to text fonts. The fantasy style refers to decorative text such as found in older German-style printing.</para>
        /// <para xml:lang="en">Pattern: [^,]+(, ?[^,]+)*.</para>
        /// </summary>
        [System.ComponentModel.DataAnnotations.RegularExpressionAttribute("[^,]+(, ?[^,]+)*")]
        [System.Xml.Serialization.XmlAttributeAttribute("font-family")]
        public string FontFamily { get; set; }

        [System.Xml.Serialization.XmlAttributeAttribute("font-style")]
        public FontStyle FontStyle { get; set; }

        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the FontStyle property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool FontStyleSpecified { get; set; }

        /// <summary>
        /// <para>The font-size can be one of the CSS font sizes (xx-small, x-small, small, medium, large, x-large, xx-large) or a numeric point size.</para>
        /// </summary>
        [System.Xml.Serialization.XmlAttributeAttribute("font-size")]
        public string FontSize { get; set; }

        [System.Xml.Serialization.XmlAttributeAttribute("font-weight")]
        public FontWeight FontWeight { get; set; }

        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the FontWeight property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool FontWeightSpecified { get; set; }

        /// <summary>
        /// <para>The color type indicates the color of an element. Color may be represented as hexadecimal RGB triples, as in HTML, or as hexadecimal ARGB tuples, with the A indicating alpha of transparency. An alpha value of 00 is totally transparent; FF is totally opaque. If RGB is used, the A value is assumed to be FF.
        ///
        ///For instance, the RGB value "#800080" represents purple. An ARGB value of "#40800080" would be a transparent purple.
        ///
        ///As in SVG 1.1, colors are defined in terms of the sRGB color space (IEC 61966).</para>
        /// <para xml:lang="en">Pattern: #[\dA-F]{6}([\dA-F][\dA-F])?.</para>
        /// </summary>
        [System.ComponentModel.DataAnnotations.RegularExpressionAttribute("#[\\dA-F]{6}([\\dA-F][\\dA-F])?")]
        [System.Xml.Serialization.XmlAttributeAttribute("color")]
        public string Color { get; set; }

        [System.Xml.Serialization.XmlAttributeAttribute("location")]
        public LeftRight Location { get; set; }

        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the Location property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool LocationSpecified { get; set; }
    }

    /// <summary>
    /// <para>The beater type represents pictograms for beaters, mallets, and sticks that do not have different materials represented in the pictogram.</para>
    /// </summary>
    [System.ComponentModel.DescriptionAttribute("The beater type represents pictograms for beaters, mallets, and sticks that do no" +
        "t have different materials represented in the pictogram.")]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XmlSchemaClassGenerator", "2.1.1142.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute("beater", Namespace="")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class Beater
    {

        /// <summary>
        /// <para xml:lang="en">Gets or sets the text value.</para>
        /// </summary>
        [System.Xml.Serialization.XmlTextAttribute()]
        public BeaterValue Value { get; set; }

        [System.Xml.Serialization.XmlAttributeAttribute("tip")]
        public TipDirection Tip { get; set; }

        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the Tip property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool TipSpecified { get; set; }
    }

    /// <summary>
    /// <para>The beat-unit-tied type indicates a beat-unit within a metronome mark that is tied to the preceding beat-unit. This allows two or more tied notes to be associated with a per-minute value in a metronome mark, whereas the metronome-tied element is restricted to metric relationship marks.</para>
    /// </summary>
    [System.ComponentModel.DescriptionAttribute(@"The beat-unit-tied type indicates a beat-unit within a metronome mark that is tied to the preceding beat-unit. This allows two or more tied notes to be associated with a per-minute value in a metronome mark, whereas the metronome-tied element is restricted to metric relationship marks.")]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XmlSchemaClassGenerator", "2.1.1142.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute("beat-unit-tied", Namespace="")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class BeatUnitTied : IBeatUnit
    {

        /// <summary>
        /// <para>The beat-unit element indicates the graphical note type to use in a metronome mark.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("The beat-unit element indicates the graphical note type to use in a metronome mar" +
            "k.")]
        [System.ComponentModel.DataAnnotations.RequiredAttribute(AllowEmptyStrings=true)]
        [System.Xml.Serialization.XmlElementAttribute("beat-unit")]
        public NoteTypeValue BeatUnit { get; set; }

        [System.Xml.Serialization.XmlIgnoreAttribute()]
        private System.Collections.ObjectModel.Collection<Empty> _beatUnitDot;

        /// <summary>
        /// <para>The beat-unit-dot element is used to specify any augmentation dots for a metronome mark note.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("The beat-unit-dot element is used to specify any augmentation dots for a metronom" +
            "e mark note.")]
        [System.Xml.Serialization.XmlElementAttribute("beat-unit-dot")]
        public System.Collections.ObjectModel.Collection<Empty> BeatUnitDot
        {
            get
            {
                return _beatUnitDot;
            }
            private set
            {
                _beatUnitDot = value;
            }
        }

        /// <summary>
        /// <para xml:lang="en">Gets a value indicating whether the BeatUnitDot collection is empty.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool BeatUnitDotSpecified
        {
            get
            {
                return (this.BeatUnitDot.Count != 0);
            }
        }

        /// <summary>
        /// <para xml:lang="en">Initializes a new instance of the <see cref="BeatUnitTied" /> class.</para>
        /// </summary>
        public BeatUnitTied()
        {
            this._beatUnitDot = new System.Collections.ObjectModel.Collection<Empty>();
        }
    }

    /// <summary>
    /// <para>The beat-unit group combines elements used repeatedly in the metronome element to specify a note within a metronome mark.</para>
    /// </summary>
    [System.ComponentModel.DescriptionAttribute("The beat-unit group combines elements used repeatedly in the metronome element to" +
        " specify a note within a metronome mark.")]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XmlSchemaClassGenerator", "2.1.1142.0")]
    public partial interface IBeatUnit
    {

        /// <summary>
        /// <para>The beat-unit element indicates the graphical note type to use in a metronome mark.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("The beat-unit element indicates the graphical note type to use in a metronome mar" +
            "k.")]
        NoteTypeValue BeatUnit
        {
            get;
            set;
        }

        /// <summary>
        /// <para>The beat-unit-dot element is used to specify any augmentation dots for a metronome mark note.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("The beat-unit-dot element is used to specify any augmentation dots for a metronom" +
            "e mark note.")]
        System.Collections.ObjectModel.Collection<Empty> BeatUnitDot
        {
            get;
        }
    }

    /// <summary>
    /// <para>Brackets are combined with words in a variety of modern directions. The line-end attribute specifies if there is a jog up or down (or both), an arrow, or nothing at the start or end of the bracket. If the line-end is up or down, the length of the jog can be specified using the end-length attribute. The line-type is solid if not specified.</para>
    /// </summary>
    [System.ComponentModel.DescriptionAttribute(@"Brackets are combined with words in a variety of modern directions. The line-end attribute specifies if there is a jog up or down (or both), an arrow, or nothing at the start or end of the bracket. If the line-end is up or down, the length of the jog can be specified using the end-length attribute. The line-type is solid if not specified.")]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XmlSchemaClassGenerator", "2.1.1142.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute("bracket", Namespace="")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class Bracket : ILineType, IDashedFormatting, IPosition, IColor, IOptionalUniqueId
    {

        [System.ComponentModel.DataAnnotations.RequiredAttribute(AllowEmptyStrings=true)]
        [System.Xml.Serialization.XmlAttributeAttribute("type")]
        public StartStopContinue Type { get; set; }

        /// <summary>
        /// <para>Slurs, tuplets, and many other features can be concurrent and overlap within a single musical part. The number-level entity distinguishes up to 16 concurrent objects of the same type when the objects overlap in MusicXML document order. Values greater than 6 are usually only needed for music with a large number of divisi staves in a single part, or if there are more than 6 cross-staff arpeggios in a single measure. When a number-level value is implied, the value is 1 by default.
        ///
        ///When polyphonic parts are involved, the ordering within a MusicXML document can differ from musical score order. As an example, say we have a piano part in 4/4 where within a single measure, all the notes on the top staff are followed by all the notes on the bottom staff. In this example, each staff has a slur that starts on beat 2 and stops on beat 3, and there is a third slur that goes from beat 1 of one staff to beat 4 of the other staff.
        ///
        ///In this situation, the two mid-measure slurs can use the same number because they do not overlap in MusicXML document order, even though they do overlap in musical score order. Within the MusicXML document, the top staff slur will both start and stop before the bottom staff slur starts and stops.
        ///
        ///If the cross-staff slur starts in the top staff and stops in the bottom staff, it will need a separate number from the mid-measure slurs because it overlaps those slurs in MusicXML document order. However, if the cross-staff slur starts in the bottom staff and stops in the top staff, all three slurs can use the same number. None of them overlap within the MusicXML document, even though they all overlap each other in the musical score order. Within the MusicXML document, the start and stop of the top-staff slur will be followed by the stop and start of the cross-staff slur, followed by the start and stop of the bottom-staff slur.
        ///
        ///As this example demonstrates, a reading program should be prepared to handle cases where the number-levels start and stop in an arbitrary order. Because the start and stop values refer to musical score order, a program may find the stopping point of an object earlier in the MusicXML document than it will find its starting point.</para>
        /// <para xml:lang="en">Minimum inclusive value: 1.</para>
        /// <para xml:lang="en">Maximum inclusive value: 16.</para>
        /// </summary>
        [System.ComponentModel.DataAnnotations.RangeAttribute(typeof(decimal), "1", "16")]
        [System.Xml.Serialization.XmlAttributeAttribute("number")]
        public byte Number { get; set; }

        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the Number property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool NumberSpecified { get; set; }

        [System.ComponentModel.DataAnnotations.RequiredAttribute(AllowEmptyStrings=true)]
        [System.Xml.Serialization.XmlAttributeAttribute("line-end")]
        public LineEnd LineEnd { get; set; }

        /// <summary>
        /// <para>The tenths type is a number representing tenths of interline staff space (positive or negative). Both integer and decimal values are allowed, such as 5 for a half space and 2.5 for a quarter space. Interline space is measured from the middle of a staff line.
        ///
        ///Distances in a MusicXML file are measured in tenths of staff space. Tenths are then scaled to millimeters within the scaling element, used in the defaults element at the start of a score. Individual staves can apply a scaling factor to adjust staff size. When a MusicXML element or attribute refers to tenths, it means the global tenths defined by the scaling element, not the local tenths as adjusted by the staff-size element.</para>
        /// </summary>
        [System.Xml.Serialization.XmlAttributeAttribute("end-length")]
        public decimal EndLength { get; set; }

        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the EndLength property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool EndLengthSpecified { get; set; }

        [System.Xml.Serialization.XmlAttributeAttribute("line-type")]
        public LineType LineType { get; set; }

        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the LineType property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool LineTypeSpecified { get; set; }

        /// <summary>
        /// <para>The tenths type is a number representing tenths of interline staff space (positive or negative). Both integer and decimal values are allowed, such as 5 for a half space and 2.5 for a quarter space. Interline space is measured from the middle of a staff line.
        ///
        ///Distances in a MusicXML file are measured in tenths of staff space. Tenths are then scaled to millimeters within the scaling element, used in the defaults element at the start of a score. Individual staves can apply a scaling factor to adjust staff size. When a MusicXML element or attribute refers to tenths, it means the global tenths defined by the scaling element, not the local tenths as adjusted by the staff-size element.</para>
        /// </summary>
        [System.Xml.Serialization.XmlAttributeAttribute("dash-length")]
        public decimal DashLength { get; set; }

        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the DashLength property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool DashLengthSpecified { get; set; }

        /// <summary>
        /// <para>The tenths type is a number representing tenths of interline staff space (positive or negative). Both integer and decimal values are allowed, such as 5 for a half space and 2.5 for a quarter space. Interline space is measured from the middle of a staff line.
        ///
        ///Distances in a MusicXML file are measured in tenths of staff space. Tenths are then scaled to millimeters within the scaling element, used in the defaults element at the start of a score. Individual staves can apply a scaling factor to adjust staff size. When a MusicXML element or attribute refers to tenths, it means the global tenths defined by the scaling element, not the local tenths as adjusted by the staff-size element.</para>
        /// </summary>
        [System.Xml.Serialization.XmlAttributeAttribute("space-length")]
        public decimal SpaceLength { get; set; }

        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the SpaceLength property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool SpaceLengthSpecified { get; set; }

        /// <summary>
        /// <para>The tenths type is a number representing tenths of interline staff space (positive or negative). Both integer and decimal values are allowed, such as 5 for a half space and 2.5 for a quarter space. Interline space is measured from the middle of a staff line.
        ///
        ///Distances in a MusicXML file are measured in tenths of staff space. Tenths are then scaled to millimeters within the scaling element, used in the defaults element at the start of a score. Individual staves can apply a scaling factor to adjust staff size. When a MusicXML element or attribute refers to tenths, it means the global tenths defined by the scaling element, not the local tenths as adjusted by the staff-size element.</para>
        /// </summary>
        [System.Xml.Serialization.XmlAttributeAttribute("default-x")]
        public decimal DefaultX { get; set; }

        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the DefaultX property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool DefaultXSpecified { get; set; }

        /// <summary>
        /// <para>The tenths type is a number representing tenths of interline staff space (positive or negative). Both integer and decimal values are allowed, such as 5 for a half space and 2.5 for a quarter space. Interline space is measured from the middle of a staff line.
        ///
        ///Distances in a MusicXML file are measured in tenths of staff space. Tenths are then scaled to millimeters within the scaling element, used in the defaults element at the start of a score. Individual staves can apply a scaling factor to adjust staff size. When a MusicXML element or attribute refers to tenths, it means the global tenths defined by the scaling element, not the local tenths as adjusted by the staff-size element.</para>
        /// </summary>
        [System.Xml.Serialization.XmlAttributeAttribute("default-y")]
        public decimal DefaultY { get; set; }

        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the DefaultY property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool DefaultYSpecified { get; set; }

        /// <summary>
        /// <para>The tenths type is a number representing tenths of interline staff space (positive or negative). Both integer and decimal values are allowed, such as 5 for a half space and 2.5 for a quarter space. Interline space is measured from the middle of a staff line.
        ///
        ///Distances in a MusicXML file are measured in tenths of staff space. Tenths are then scaled to millimeters within the scaling element, used in the defaults element at the start of a score. Individual staves can apply a scaling factor to adjust staff size. When a MusicXML element or attribute refers to tenths, it means the global tenths defined by the scaling element, not the local tenths as adjusted by the staff-size element.</para>
        /// </summary>
        [System.Xml.Serialization.XmlAttributeAttribute("relative-x")]
        public decimal RelativeX { get; set; }

        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the RelativeX property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool RelativeXSpecified { get; set; }

        /// <summary>
        /// <para>The tenths type is a number representing tenths of interline staff space (positive or negative). Both integer and decimal values are allowed, such as 5 for a half space and 2.5 for a quarter space. Interline space is measured from the middle of a staff line.
        ///
        ///Distances in a MusicXML file are measured in tenths of staff space. Tenths are then scaled to millimeters within the scaling element, used in the defaults element at the start of a score. Individual staves can apply a scaling factor to adjust staff size. When a MusicXML element or attribute refers to tenths, it means the global tenths defined by the scaling element, not the local tenths as adjusted by the staff-size element.</para>
        /// </summary>
        [System.Xml.Serialization.XmlAttributeAttribute("relative-y")]
        public decimal RelativeY { get; set; }

        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the RelativeY property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool RelativeYSpecified { get; set; }

        /// <summary>
        /// <para>The color type indicates the color of an element. Color may be represented as hexadecimal RGB triples, as in HTML, or as hexadecimal ARGB tuples, with the A indicating alpha of transparency. An alpha value of 00 is totally transparent; FF is totally opaque. If RGB is used, the A value is assumed to be FF.
        ///
        ///For instance, the RGB value "#800080" represents purple. An ARGB value of "#40800080" would be a transparent purple.
        ///
        ///As in SVG 1.1, colors are defined in terms of the sRGB color space (IEC 61966).</para>
        /// <para xml:lang="en">Pattern: #[\dA-F]{6}([\dA-F][\dA-F])?.</para>
        /// </summary>
        [System.ComponentModel.DataAnnotations.RegularExpressionAttribute("#[\\dA-F]{6}([\\dA-F][\\dA-F])?")]
        [System.Xml.Serialization.XmlAttributeAttribute("color")]
        public string Color { get; set; }

        [System.Xml.Serialization.XmlAttributeAttribute("id")]
        public string Id { get; set; }
    }

    /// <summary>
    /// <para>The dashed-formatting entity represents the length of dashes and spaces in a dashed line. Both the dash-length and space-length attributes are represented in tenths. These attributes are ignored if the corresponding line-type attribute is not dashed.</para>
    /// </summary>
    [System.ComponentModel.DescriptionAttribute("The dashed-formatting entity represents the length of dashes and spaces in a dash" +
        "ed line. Both the dash-length and space-length attributes are represented in ten" +
        "ths. These attributes are ignored if the corresponding line-type attribute is no" +
        "t dashed.")]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XmlSchemaClassGenerator", "2.1.1142.0")]
    public partial interface IDashedFormatting
    {

        /// <summary>
        /// <para>The tenths type is a number representing tenths of interline staff space (positive or negative). Both integer and decimal values are allowed, such as 5 for a half space and 2.5 for a quarter space. Interline space is measured from the middle of a staff line.
        ///
        ///Distances in a MusicXML file are measured in tenths of staff space. Tenths are then scaled to millimeters within the scaling element, used in the defaults element at the start of a score. Individual staves can apply a scaling factor to adjust staff size. When a MusicXML element or attribute refers to tenths, it means the global tenths defined by the scaling element, not the local tenths as adjusted by the staff-size element.</para>
        /// </summary>
        decimal DashLength
        {
            get;
            set;
        }

        /// <summary>
        /// <para>The tenths type is a number representing tenths of interline staff space (positive or negative). Both integer and decimal values are allowed, such as 5 for a half space and 2.5 for a quarter space. Interline space is measured from the middle of a staff line.
        ///
        ///Distances in a MusicXML file are measured in tenths of staff space. Tenths are then scaled to millimeters within the scaling element, used in the defaults element at the start of a score. Individual staves can apply a scaling factor to adjust staff size. When a MusicXML element or attribute refers to tenths, it means the global tenths defined by the scaling element, not the local tenths as adjusted by the staff-size element.</para>
        /// </summary>
        decimal SpaceLength
        {
            get;
            set;
        }
    }

    /// <summary>
    /// <para>The dashes type represents dashes, used for instance with cresc. and dim. marks.</para>
    /// </summary>
    [System.ComponentModel.DescriptionAttribute("The dashes type represents dashes, used for instance with cresc. and dim. marks.")]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XmlSchemaClassGenerator", "2.1.1142.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute("dashes", Namespace="")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class Dashes : IDashedFormatting, IPosition, IColor, IOptionalUniqueId
    {

        [System.ComponentModel.DataAnnotations.RequiredAttribute(AllowEmptyStrings=true)]
        [System.Xml.Serialization.XmlAttributeAttribute("type")]
        public StartStopContinue Type { get; set; }

        /// <summary>
        /// <para>Slurs, tuplets, and many other features can be concurrent and overlap within a single musical part. The number-level entity distinguishes up to 16 concurrent objects of the same type when the objects overlap in MusicXML document order. Values greater than 6 are usually only needed for music with a large number of divisi staves in a single part, or if there are more than 6 cross-staff arpeggios in a single measure. When a number-level value is implied, the value is 1 by default.
        ///
        ///When polyphonic parts are involved, the ordering within a MusicXML document can differ from musical score order. As an example, say we have a piano part in 4/4 where within a single measure, all the notes on the top staff are followed by all the notes on the bottom staff. In this example, each staff has a slur that starts on beat 2 and stops on beat 3, and there is a third slur that goes from beat 1 of one staff to beat 4 of the other staff.
        ///
        ///In this situation, the two mid-measure slurs can use the same number because they do not overlap in MusicXML document order, even though they do overlap in musical score order. Within the MusicXML document, the top staff slur will both start and stop before the bottom staff slur starts and stops.
        ///
        ///If the cross-staff slur starts in the top staff and stops in the bottom staff, it will need a separate number from the mid-measure slurs because it overlaps those slurs in MusicXML document order. However, if the cross-staff slur starts in the bottom staff and stops in the top staff, all three slurs can use the same number. None of them overlap within the MusicXML document, even though they all overlap each other in the musical score order. Within the MusicXML document, the start and stop of the top-staff slur will be followed by the stop and start of the cross-staff slur, followed by the start and stop of the bottom-staff slur.
        ///
        ///As this example demonstrates, a reading program should be prepared to handle cases where the number-levels start and stop in an arbitrary order. Because the start and stop values refer to musical score order, a program may find the stopping point of an object earlier in the MusicXML document than it will find its starting point.</para>
        /// <para xml:lang="en">Minimum inclusive value: 1.</para>
        /// <para xml:lang="en">Maximum inclusive value: 16.</para>
        /// </summary>
        [System.ComponentModel.DataAnnotations.RangeAttribute(typeof(decimal), "1", "16")]
        [System.Xml.Serialization.XmlAttributeAttribute("number")]
        public byte Number { get; set; }

        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the Number property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool NumberSpecified { get; set; }

        /// <summary>
        /// <para>The tenths type is a number representing tenths of interline staff space (positive or negative). Both integer and decimal values are allowed, such as 5 for a half space and 2.5 for a quarter space. Interline space is measured from the middle of a staff line.
        ///
        ///Distances in a MusicXML file are measured in tenths of staff space. Tenths are then scaled to millimeters within the scaling element, used in the defaults element at the start of a score. Individual staves can apply a scaling factor to adjust staff size. When a MusicXML element or attribute refers to tenths, it means the global tenths defined by the scaling element, not the local tenths as adjusted by the staff-size element.</para>
        /// </summary>
        [System.Xml.Serialization.XmlAttributeAttribute("dash-length")]
        public decimal DashLength { get; set; }

        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the DashLength property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool DashLengthSpecified { get; set; }

        /// <summary>
        /// <para>The tenths type is a number representing tenths of interline staff space (positive or negative). Both integer and decimal values are allowed, such as 5 for a half space and 2.5 for a quarter space. Interline space is measured from the middle of a staff line.
        ///
        ///Distances in a MusicXML file are measured in tenths of staff space. Tenths are then scaled to millimeters within the scaling element, used in the defaults element at the start of a score. Individual staves can apply a scaling factor to adjust staff size. When a MusicXML element or attribute refers to tenths, it means the global tenths defined by the scaling element, not the local tenths as adjusted by the staff-size element.</para>
        /// </summary>
        [System.Xml.Serialization.XmlAttributeAttribute("space-length")]
        public decimal SpaceLength { get; set; }

        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the SpaceLength property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool SpaceLengthSpecified { get; set; }

        /// <summary>
        /// <para>The tenths type is a number representing tenths of interline staff space (positive or negative). Both integer and decimal values are allowed, such as 5 for a half space and 2.5 for a quarter space. Interline space is measured from the middle of a staff line.
        ///
        ///Distances in a MusicXML file are measured in tenths of staff space. Tenths are then scaled to millimeters within the scaling element, used in the defaults element at the start of a score. Individual staves can apply a scaling factor to adjust staff size. When a MusicXML element or attribute refers to tenths, it means the global tenths defined by the scaling element, not the local tenths as adjusted by the staff-size element.</para>
        /// </summary>
        [System.Xml.Serialization.XmlAttributeAttribute("default-x")]
        public decimal DefaultX { get; set; }

        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the DefaultX property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool DefaultXSpecified { get; set; }

        /// <summary>
        /// <para>The tenths type is a number representing tenths of interline staff space (positive or negative). Both integer and decimal values are allowed, such as 5 for a half space and 2.5 for a quarter space. Interline space is measured from the middle of a staff line.
        ///
        ///Distances in a MusicXML file are measured in tenths of staff space. Tenths are then scaled to millimeters within the scaling element, used in the defaults element at the start of a score. Individual staves can apply a scaling factor to adjust staff size. When a MusicXML element or attribute refers to tenths, it means the global tenths defined by the scaling element, not the local tenths as adjusted by the staff-size element.</para>
        /// </summary>
        [System.Xml.Serialization.XmlAttributeAttribute("default-y")]
        public decimal DefaultY { get; set; }

        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the DefaultY property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool DefaultYSpecified { get; set; }

        /// <summary>
        /// <para>The tenths type is a number representing tenths of interline staff space (positive or negative). Both integer and decimal values are allowed, such as 5 for a half space and 2.5 for a quarter space. Interline space is measured from the middle of a staff line.
        ///
        ///Distances in a MusicXML file are measured in tenths of staff space. Tenths are then scaled to millimeters within the scaling element, used in the defaults element at the start of a score. Individual staves can apply a scaling factor to adjust staff size. When a MusicXML element or attribute refers to tenths, it means the global tenths defined by the scaling element, not the local tenths as adjusted by the staff-size element.</para>
        /// </summary>
        [System.Xml.Serialization.XmlAttributeAttribute("relative-x")]
        public decimal RelativeX { get; set; }

        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the RelativeX property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool RelativeXSpecified { get; set; }

        /// <summary>
        /// <para>The tenths type is a number representing tenths of interline staff space (positive or negative). Both integer and decimal values are allowed, such as 5 for a half space and 2.5 for a quarter space. Interline space is measured from the middle of a staff line.
        ///
        ///Distances in a MusicXML file are measured in tenths of staff space. Tenths are then scaled to millimeters within the scaling element, used in the defaults element at the start of a score. Individual staves can apply a scaling factor to adjust staff size. When a MusicXML element or attribute refers to tenths, it means the global tenths defined by the scaling element, not the local tenths as adjusted by the staff-size element.</para>
        /// </summary>
        [System.Xml.Serialization.XmlAttributeAttribute("relative-y")]
        public decimal RelativeY { get; set; }

        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the RelativeY property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool RelativeYSpecified { get; set; }

        /// <summary>
        /// <para>The color type indicates the color of an element. Color may be represented as hexadecimal RGB triples, as in HTML, or as hexadecimal ARGB tuples, with the A indicating alpha of transparency. An alpha value of 00 is totally transparent; FF is totally opaque. If RGB is used, the A value is assumed to be FF.
        ///
        ///For instance, the RGB value "#800080" represents purple. An ARGB value of "#40800080" would be a transparent purple.
        ///
        ///As in SVG 1.1, colors are defined in terms of the sRGB color space (IEC 61966).</para>
        /// <para xml:lang="en">Pattern: #[\dA-F]{6}([\dA-F][\dA-F])?.</para>
        /// </summary>
        [System.ComponentModel.DataAnnotations.RegularExpressionAttribute("#[\\dA-F]{6}([\\dA-F][\\dA-F])?")]
        [System.Xml.Serialization.XmlAttributeAttribute("color")]
        public string Color { get; set; }

        [System.Xml.Serialization.XmlAttributeAttribute("id")]
        public string Id { get; set; }
    }

    /// <summary>
    /// <para>The degree type is used to add, alter, or subtract individual notes in the chord. The print-object attribute can be used to keep the degree from printing separately when it has already taken into account in the text attribute of the kind element. The degree-value and degree-type text attributes specify how the value and type of the degree should be displayed.
    ///
    ///A harmony of kind "other" can be spelled explicitly by using a series of degree elements together with a root.</para>
    /// </summary>
    [System.ComponentModel.DescriptionAttribute(@"The degree type is used to add, alter, or subtract individual notes in the chord. The print-object attribute can be used to keep the degree from printing separately when it has already taken into account in the text attribute of the kind element. The degree-value and degree-type text attributes specify how the value and type of the degree should be displayed. A harmony of kind ""other"" can be spelled explicitly by using a series of degree elements together with a root.")]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XmlSchemaClassGenerator", "2.1.1142.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute("degree", Namespace="")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class Degree : IPrintObject
    {

        [System.ComponentModel.DataAnnotations.RequiredAttribute(AllowEmptyStrings=true)]
        [System.Xml.Serialization.XmlElementAttribute("degree-value")]
        public DegreeValue DegreeValue { get; set; }

        [System.ComponentModel.DataAnnotations.RequiredAttribute(AllowEmptyStrings=true)]
        [System.Xml.Serialization.XmlElementAttribute("degree-alter")]
        public DegreeAlter DegreeAlter { get; set; }

        [System.ComponentModel.DataAnnotations.RequiredAttribute(AllowEmptyStrings=true)]
        [System.Xml.Serialization.XmlElementAttribute("degree-type")]
        public DegreeType DegreeType { get; set; }

        [System.Xml.Serialization.XmlAttributeAttribute("print-object")]
        public YesNo PrintObject { get; set; }

        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the PrintObject property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool PrintObjectSpecified { get; set; }
    }

    /// <summary>
    /// <para>The content of the degree-value type is a number indicating the degree of the chord (1 for the root, 3 for third, etc). The text attribute specifies how the value of the degree should be displayed. The symbol attribute indicates that a symbol should be used in specifying the degree. If the symbol attribute is present, the value of the text attribute follows the symbol.</para>
    /// </summary>
    [System.ComponentModel.DescriptionAttribute(@"The content of the degree-value type is a number indicating the degree of the chord (1 for the root, 3 for third, etc). The text attribute specifies how the value of the degree should be displayed. The symbol attribute indicates that a symbol should be used in specifying the degree. If the symbol attribute is present, the value of the text attribute follows the symbol.")]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XmlSchemaClassGenerator", "2.1.1142.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute("degree-value", Namespace="")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class DegreeValue : IPrintStyle
    {

        /// <summary>
        /// <para xml:lang="en">Gets or sets the text value.</para>
        /// </summary>
        [System.Xml.Serialization.XmlTextAttribute()]
        public string Value { get; set; }

        [System.Xml.Serialization.XmlAttributeAttribute("symbol")]
        public DegreeSymbolValue Symbol { get; set; }

        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the Symbol property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool SymbolSpecified { get; set; }

        [System.Xml.Serialization.XmlAttributeAttribute("text")]
        public string Text { get; set; }

        /// <summary>
        /// <para>The tenths type is a number representing tenths of interline staff space (positive or negative). Both integer and decimal values are allowed, such as 5 for a half space and 2.5 for a quarter space. Interline space is measured from the middle of a staff line.
        ///
        ///Distances in a MusicXML file are measured in tenths of staff space. Tenths are then scaled to millimeters within the scaling element, used in the defaults element at the start of a score. Individual staves can apply a scaling factor to adjust staff size. When a MusicXML element or attribute refers to tenths, it means the global tenths defined by the scaling element, not the local tenths as adjusted by the staff-size element.</para>
        /// </summary>
        [System.Xml.Serialization.XmlAttributeAttribute("default-x")]
        public decimal DefaultX { get; set; }

        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the DefaultX property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool DefaultXSpecified { get; set; }

        /// <summary>
        /// <para>The tenths type is a number representing tenths of interline staff space (positive or negative). Both integer and decimal values are allowed, such as 5 for a half space and 2.5 for a quarter space. Interline space is measured from the middle of a staff line.
        ///
        ///Distances in a MusicXML file are measured in tenths of staff space. Tenths are then scaled to millimeters within the scaling element, used in the defaults element at the start of a score. Individual staves can apply a scaling factor to adjust staff size. When a MusicXML element or attribute refers to tenths, it means the global tenths defined by the scaling element, not the local tenths as adjusted by the staff-size element.</para>
        /// </summary>
        [System.Xml.Serialization.XmlAttributeAttribute("default-y")]
        public decimal DefaultY { get; set; }

        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the DefaultY property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool DefaultYSpecified { get; set; }

        /// <summary>
        /// <para>The tenths type is a number representing tenths of interline staff space (positive or negative). Both integer and decimal values are allowed, such as 5 for a half space and 2.5 for a quarter space. Interline space is measured from the middle of a staff line.
        ///
        ///Distances in a MusicXML file are measured in tenths of staff space. Tenths are then scaled to millimeters within the scaling element, used in the defaults element at the start of a score. Individual staves can apply a scaling factor to adjust staff size. When a MusicXML element or attribute refers to tenths, it means the global tenths defined by the scaling element, not the local tenths as adjusted by the staff-size element.</para>
        /// </summary>
        [System.Xml.Serialization.XmlAttributeAttribute("relative-x")]
        public decimal RelativeX { get; set; }

        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the RelativeX property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool RelativeXSpecified { get; set; }

        /// <summary>
        /// <para>The tenths type is a number representing tenths of interline staff space (positive or negative). Both integer and decimal values are allowed, such as 5 for a half space and 2.5 for a quarter space. Interline space is measured from the middle of a staff line.
        ///
        ///Distances in a MusicXML file are measured in tenths of staff space. Tenths are then scaled to millimeters within the scaling element, used in the defaults element at the start of a score. Individual staves can apply a scaling factor to adjust staff size. When a MusicXML element or attribute refers to tenths, it means the global tenths defined by the scaling element, not the local tenths as adjusted by the staff-size element.</para>
        /// </summary>
        [System.Xml.Serialization.XmlAttributeAttribute("relative-y")]
        public decimal RelativeY { get; set; }

        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the RelativeY property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool RelativeYSpecified { get; set; }

        /// <summary>
        /// <para>The font-family is a comma-separated list of font names. These can be specific font styles such as Maestro or Opus, or one of several generic font styles: music, engraved, handwritten, text, serif, sans-serif, handwritten, cursive, fantasy, and monospace. The music, engraved, and handwritten values refer to music fonts; the rest refer to text fonts. The fantasy style refers to decorative text such as found in older German-style printing.</para>
        /// <para xml:lang="en">Pattern: [^,]+(, ?[^,]+)*.</para>
        /// </summary>
        [System.ComponentModel.DataAnnotations.RegularExpressionAttribute("[^,]+(, ?[^,]+)*")]
        [System.Xml.Serialization.XmlAttributeAttribute("font-family")]
        public string FontFamily { get; set; }

        [System.Xml.Serialization.XmlAttributeAttribute("font-style")]
        public FontStyle FontStyle { get; set; }

        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the FontStyle property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool FontStyleSpecified { get; set; }

        /// <summary>
        /// <para>The font-size can be one of the CSS font sizes (xx-small, x-small, small, medium, large, x-large, xx-large) or a numeric point size.</para>
        /// </summary>
        [System.Xml.Serialization.XmlAttributeAttribute("font-size")]
        public string FontSize { get; set; }

        [System.Xml.Serialization.XmlAttributeAttribute("font-weight")]
        public FontWeight FontWeight { get; set; }

        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the FontWeight property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool FontWeightSpecified { get; set; }

        /// <summary>
        /// <para>The color type indicates the color of an element. Color may be represented as hexadecimal RGB triples, as in HTML, or as hexadecimal ARGB tuples, with the A indicating alpha of transparency. An alpha value of 00 is totally transparent; FF is totally opaque. If RGB is used, the A value is assumed to be FF.
        ///
        ///For instance, the RGB value "#800080" represents purple. An ARGB value of "#40800080" would be a transparent purple.
        ///
        ///As in SVG 1.1, colors are defined in terms of the sRGB color space (IEC 61966).</para>
        /// <para xml:lang="en">Pattern: #[\dA-F]{6}([\dA-F][\dA-F])?.</para>
        /// </summary>
        [System.ComponentModel.DataAnnotations.RegularExpressionAttribute("#[\\dA-F]{6}([\\dA-F][\\dA-F])?")]
        [System.Xml.Serialization.XmlAttributeAttribute("color")]
        public string Color { get; set; }
    }

    /// <summary>
    /// <para>The degree-alter type represents the chromatic alteration for the current degree. If the degree-type value is alter or subtract, the degree-alter value is relative to the degree already in the chord based on its kind element. If the degree-type value is add, the degree-alter is relative to a dominant chord (major and perfect intervals except for a minor seventh). The plus-minus attribute is used to indicate if plus and minus symbols should be used instead of sharp and flat symbols to display the degree alteration. It is no if not specified.</para>
    /// </summary>
    [System.ComponentModel.DescriptionAttribute(@"The degree-alter type represents the chromatic alteration for the current degree. If the degree-type value is alter or subtract, the degree-alter value is relative to the degree already in the chord based on its kind element. If the degree-type value is add, the degree-alter is relative to a dominant chord (major and perfect intervals except for a minor seventh). The plus-minus attribute is used to indicate if plus and minus symbols should be used instead of sharp and flat symbols to display the degree alteration. It is no if not specified.")]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XmlSchemaClassGenerator", "2.1.1142.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute("degree-alter", Namespace="")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class DegreeAlter : IPrintStyle
    {

        /// <summary>
        /// <para xml:lang="en">Gets or sets the text value.</para>
        /// </summary>
        [System.Xml.Serialization.XmlTextAttribute()]
        public decimal Value { get; set; }

        /// <summary>
        /// <para>The tenths type is a number representing tenths of interline staff space (positive or negative). Both integer and decimal values are allowed, such as 5 for a half space and 2.5 for a quarter space. Interline space is measured from the middle of a staff line.
        ///
        ///Distances in a MusicXML file are measured in tenths of staff space. Tenths are then scaled to millimeters within the scaling element, used in the defaults element at the start of a score. Individual staves can apply a scaling factor to adjust staff size. When a MusicXML element or attribute refers to tenths, it means the global tenths defined by the scaling element, not the local tenths as adjusted by the staff-size element.</para>
        /// </summary>
        [System.Xml.Serialization.XmlAttributeAttribute("default-x")]
        public decimal DefaultX { get; set; }

        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the DefaultX property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool DefaultXSpecified { get; set; }

        /// <summary>
        /// <para>The tenths type is a number representing tenths of interline staff space (positive or negative). Both integer and decimal values are allowed, such as 5 for a half space and 2.5 for a quarter space. Interline space is measured from the middle of a staff line.
        ///
        ///Distances in a MusicXML file are measured in tenths of staff space. Tenths are then scaled to millimeters within the scaling element, used in the defaults element at the start of a score. Individual staves can apply a scaling factor to adjust staff size. When a MusicXML element or attribute refers to tenths, it means the global tenths defined by the scaling element, not the local tenths as adjusted by the staff-size element.</para>
        /// </summary>
        [System.Xml.Serialization.XmlAttributeAttribute("default-y")]
        public decimal DefaultY { get; set; }

        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the DefaultY property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool DefaultYSpecified { get; set; }

        /// <summary>
        /// <para>The tenths type is a number representing tenths of interline staff space (positive or negative). Both integer and decimal values are allowed, such as 5 for a half space and 2.5 for a quarter space. Interline space is measured from the middle of a staff line.
        ///
        ///Distances in a MusicXML file are measured in tenths of staff space. Tenths are then scaled to millimeters within the scaling element, used in the defaults element at the start of a score. Individual staves can apply a scaling factor to adjust staff size. When a MusicXML element or attribute refers to tenths, it means the global tenths defined by the scaling element, not the local tenths as adjusted by the staff-size element.</para>
        /// </summary>
        [System.Xml.Serialization.XmlAttributeAttribute("relative-x")]
        public decimal RelativeX { get; set; }

        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the RelativeX property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool RelativeXSpecified { get; set; }

        /// <summary>
        /// <para>The tenths type is a number representing tenths of interline staff space (positive or negative). Both integer and decimal values are allowed, such as 5 for a half space and 2.5 for a quarter space. Interline space is measured from the middle of a staff line.
        ///
        ///Distances in a MusicXML file are measured in tenths of staff space. Tenths are then scaled to millimeters within the scaling element, used in the defaults element at the start of a score. Individual staves can apply a scaling factor to adjust staff size. When a MusicXML element or attribute refers to tenths, it means the global tenths defined by the scaling element, not the local tenths as adjusted by the staff-size element.</para>
        /// </summary>
        [System.Xml.Serialization.XmlAttributeAttribute("relative-y")]
        public decimal RelativeY { get; set; }

        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the RelativeY property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool RelativeYSpecified { get; set; }

        /// <summary>
        /// <para>The font-family is a comma-separated list of font names. These can be specific font styles such as Maestro or Opus, or one of several generic font styles: music, engraved, handwritten, text, serif, sans-serif, handwritten, cursive, fantasy, and monospace. The music, engraved, and handwritten values refer to music fonts; the rest refer to text fonts. The fantasy style refers to decorative text such as found in older German-style printing.</para>
        /// <para xml:lang="en">Pattern: [^,]+(, ?[^,]+)*.</para>
        /// </summary>
        [System.ComponentModel.DataAnnotations.RegularExpressionAttribute("[^,]+(, ?[^,]+)*")]
        [System.Xml.Serialization.XmlAttributeAttribute("font-family")]
        public string FontFamily { get; set; }

        [System.Xml.Serialization.XmlAttributeAttribute("font-style")]
        public FontStyle FontStyle { get; set; }

        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the FontStyle property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool FontStyleSpecified { get; set; }

        /// <summary>
        /// <para>The font-size can be one of the CSS font sizes (xx-small, x-small, small, medium, large, x-large, xx-large) or a numeric point size.</para>
        /// </summary>
        [System.Xml.Serialization.XmlAttributeAttribute("font-size")]
        public string FontSize { get; set; }

        [System.Xml.Serialization.XmlAttributeAttribute("font-weight")]
        public FontWeight FontWeight { get; set; }

        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the FontWeight property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool FontWeightSpecified { get; set; }

        /// <summary>
        /// <para>The color type indicates the color of an element. Color may be represented as hexadecimal RGB triples, as in HTML, or as hexadecimal ARGB tuples, with the A indicating alpha of transparency. An alpha value of 00 is totally transparent; FF is totally opaque. If RGB is used, the A value is assumed to be FF.
        ///
        ///For instance, the RGB value "#800080" represents purple. An ARGB value of "#40800080" would be a transparent purple.
        ///
        ///As in SVG 1.1, colors are defined in terms of the sRGB color space (IEC 61966).</para>
        /// <para xml:lang="en">Pattern: #[\dA-F]{6}([\dA-F][\dA-F])?.</para>
        /// </summary>
        [System.ComponentModel.DataAnnotations.RegularExpressionAttribute("#[\\dA-F]{6}([\\dA-F][\\dA-F])?")]
        [System.Xml.Serialization.XmlAttributeAttribute("color")]
        public string Color { get; set; }

        [System.Xml.Serialization.XmlAttributeAttribute("plus-minus")]
        public YesNo PlusMinus { get; set; }

        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the PlusMinus property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool PlusMinusSpecified { get; set; }
    }

    /// <summary>
    /// <para>The degree-type type indicates if this degree is an addition, alteration, or subtraction relative to the kind of the current chord. The value of the degree-type element affects the interpretation of the value of the degree-alter element. The text attribute specifies how the type of the degree should be displayed.</para>
    /// </summary>
    [System.ComponentModel.DescriptionAttribute(@"The degree-type type indicates if this degree is an addition, alteration, or subtraction relative to the kind of the current chord. The value of the degree-type element affects the interpretation of the value of the degree-alter element. The text attribute specifies how the type of the degree should be displayed.")]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XmlSchemaClassGenerator", "2.1.1142.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute("degree-type", Namespace="")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class DegreeType : IPrintStyle
    {

        /// <summary>
        /// <para xml:lang="en">Gets or sets the text value.</para>
        /// </summary>
        [System.Xml.Serialization.XmlTextAttribute()]
        public DegreeTypeValue Value { get; set; }

        [System.Xml.Serialization.XmlAttributeAttribute("text")]
        public string Text { get; set; }

        /// <summary>
        /// <para>The tenths type is a number representing tenths of interline staff space (positive or negative). Both integer and decimal values are allowed, such as 5 for a half space and 2.5 for a quarter space. Interline space is measured from the middle of a staff line.
        ///
        ///Distances in a MusicXML file are measured in tenths of staff space. Tenths are then scaled to millimeters within the scaling element, used in the defaults element at the start of a score. Individual staves can apply a scaling factor to adjust staff size. When a MusicXML element or attribute refers to tenths, it means the global tenths defined by the scaling element, not the local tenths as adjusted by the staff-size element.</para>
        /// </summary>
        [System.Xml.Serialization.XmlAttributeAttribute("default-x")]
        public decimal DefaultX { get; set; }

        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the DefaultX property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool DefaultXSpecified { get; set; }

        /// <summary>
        /// <para>The tenths type is a number representing tenths of interline staff space (positive or negative). Both integer and decimal values are allowed, such as 5 for a half space and 2.5 for a quarter space. Interline space is measured from the middle of a staff line.
        ///
        ///Distances in a MusicXML file are measured in tenths of staff space. Tenths are then scaled to millimeters within the scaling element, used in the defaults element at the start of a score. Individual staves can apply a scaling factor to adjust staff size. When a MusicXML element or attribute refers to tenths, it means the global tenths defined by the scaling element, not the local tenths as adjusted by the staff-size element.</para>
        /// </summary>
        [System.Xml.Serialization.XmlAttributeAttribute("default-y")]
        public decimal DefaultY { get; set; }

        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the DefaultY property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool DefaultYSpecified { get; set; }

        /// <summary>
        /// <para>The tenths type is a number representing tenths of interline staff space (positive or negative). Both integer and decimal values are allowed, such as 5 for a half space and 2.5 for a quarter space. Interline space is measured from the middle of a staff line.
        ///
        ///Distances in a MusicXML file are measured in tenths of staff space. Tenths are then scaled to millimeters within the scaling element, used in the defaults element at the start of a score. Individual staves can apply a scaling factor to adjust staff size. When a MusicXML element or attribute refers to tenths, it means the global tenths defined by the scaling element, not the local tenths as adjusted by the staff-size element.</para>
        /// </summary>
        [System.Xml.Serialization.XmlAttributeAttribute("relative-x")]
        public decimal RelativeX { get; set; }

        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the RelativeX property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool RelativeXSpecified { get; set; }

        /// <summary>
        /// <para>The tenths type is a number representing tenths of interline staff space (positive or negative). Both integer and decimal values are allowed, such as 5 for a half space and 2.5 for a quarter space. Interline space is measured from the middle of a staff line.
        ///
        ///Distances in a MusicXML file are measured in tenths of staff space. Tenths are then scaled to millimeters within the scaling element, used in the defaults element at the start of a score. Individual staves can apply a scaling factor to adjust staff size. When a MusicXML element or attribute refers to tenths, it means the global tenths defined by the scaling element, not the local tenths as adjusted by the staff-size element.</para>
        /// </summary>
        [System.Xml.Serialization.XmlAttributeAttribute("relative-y")]
        public decimal RelativeY { get; set; }

        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the RelativeY property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool RelativeYSpecified { get; set; }

        /// <summary>
        /// <para>The font-family is a comma-separated list of font names. These can be specific font styles such as Maestro or Opus, or one of several generic font styles: music, engraved, handwritten, text, serif, sans-serif, handwritten, cursive, fantasy, and monospace. The music, engraved, and handwritten values refer to music fonts; the rest refer to text fonts. The fantasy style refers to decorative text such as found in older German-style printing.</para>
        /// <para xml:lang="en">Pattern: [^,]+(, ?[^,]+)*.</para>
        /// </summary>
        [System.ComponentModel.DataAnnotations.RegularExpressionAttribute("[^,]+(, ?[^,]+)*")]
        [System.Xml.Serialization.XmlAttributeAttribute("font-family")]
        public string FontFamily { get; set; }

        [System.Xml.Serialization.XmlAttributeAttribute("font-style")]
        public FontStyle FontStyle { get; set; }

        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the FontStyle property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool FontStyleSpecified { get; set; }

        /// <summary>
        /// <para>The font-size can be one of the CSS font sizes (xx-small, x-small, small, medium, large, x-large, xx-large) or a numeric point size.</para>
        /// </summary>
        [System.Xml.Serialization.XmlAttributeAttribute("font-size")]
        public string FontSize { get; set; }

        [System.Xml.Serialization.XmlAttributeAttribute("font-weight")]
        public FontWeight FontWeight { get; set; }

        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the FontWeight property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool FontWeightSpecified { get; set; }

        /// <summary>
        /// <para>The color type indicates the color of an element. Color may be represented as hexadecimal RGB triples, as in HTML, or as hexadecimal ARGB tuples, with the A indicating alpha of transparency. An alpha value of 00 is totally transparent; FF is totally opaque. If RGB is used, the A value is assumed to be FF.
        ///
        ///For instance, the RGB value "#800080" represents purple. An ARGB value of "#40800080" would be a transparent purple.
        ///
        ///As in SVG 1.1, colors are defined in terms of the sRGB color space (IEC 61966).</para>
        /// <para xml:lang="en">Pattern: #[\dA-F]{6}([\dA-F][\dA-F])?.</para>
        /// </summary>
        [System.ComponentModel.DataAnnotations.RegularExpressionAttribute("#[\\dA-F]{6}([\\dA-F][\\dA-F])?")]
        [System.Xml.Serialization.XmlAttributeAttribute("color")]
        public string Color { get; set; }
    }

    /// <summary>
    /// <para>A direction is a musical indication that is not necessarily attached to a specific note. Two or more may be combined to indicate words followed by the start of a dashed line, the end of a wedge followed by dynamics, etc. For applications where a specific direction is indeed attached to a specific note, the direction element can be associated with the first note element that follows it in score order that is not in a different voice.
    ///
    ///By default, a series of direction-type elements and a series of child elements of a direction-type within a single direction element follow one another in sequence visually. For a series of direction-type children, non-positional formatting attributes are carried over from the previous element by default.</para>
    /// </summary>
    [System.ComponentModel.DescriptionAttribute(@"A direction is a musical indication that is not necessarily attached to a specific note. Two or more may be combined to indicate words followed by the start of a dashed line, the end of a wedge followed by dynamics, etc. For applications where a specific direction is indeed attached to a specific note, the direction element can be associated with the first note element that follows it in score order that is not in a different voice. By default, a series of direction-type elements and a series of child elements of a direction-type within a single direction element follow one another in sequence visually. For a series of direction-type children, non-positional formatting attributes are carried over from the previous element by default.")]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XmlSchemaClassGenerator", "2.1.1142.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute("direction", Namespace="")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class Direction : IEditorialVoiceDirection, IStaff, IPlacement, IDirective, ISystemRelation, IOptionalUniqueId
    {

        [System.Xml.Serialization.XmlIgnoreAttribute()]
        private System.Collections.ObjectModel.Collection<DirectionType> _directionType;

        [System.ComponentModel.DataAnnotations.RequiredAttribute(AllowEmptyStrings=true)]
        [System.Xml.Serialization.XmlElementAttribute("direction-type")]
        public System.Collections.ObjectModel.Collection<DirectionType> DirectionType
        {
            get
            {
                return _directionType;
            }
            private set
            {
                _directionType = value;
            }
        }

        /// <summary>
        /// <para xml:lang="en">Initializes a new instance of the <see cref="Direction" /> class.</para>
        /// </summary>
        public Direction()
        {
            this._directionType = new System.Collections.ObjectModel.Collection<DirectionType>();
        }

        [System.Xml.Serialization.XmlElementAttribute("offset")]
        public Offset Offset { get; set; }

        [System.Xml.Serialization.XmlElementAttribute("footnote")]
        public FormattedText Footnote { get; set; }

        [System.Xml.Serialization.XmlElementAttribute("level")]
        public Level Level { get; set; }

        [System.Xml.Serialization.XmlElementAttribute("voice")]
        public string Voice { get; set; }

        /// <summary>
        /// <para>Staff assignment is only needed for music notated on multiple staves. Used by both notes and directions. Staff values are numbers, with 1 referring to the top-most staff in a part.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Staff assignment is only needed for music notated on multiple staves. Used by bot" +
            "h notes and directions. Staff values are numbers, with 1 referring to the top-mo" +
            "st staff in a part.")]
        [System.Xml.Serialization.XmlElementAttribute("staff")]
        public string Staff { get; set; }

        [System.Xml.Serialization.XmlElementAttribute("sound")]
        public Sound Sound { get; set; }

        [System.Xml.Serialization.XmlElementAttribute("listening")]
        public Listening Listening { get; set; }

        [System.Xml.Serialization.XmlAttributeAttribute("placement")]
        public AboveBelow Placement { get; set; }

        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the Placement property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool PlacementSpecified { get; set; }

        [System.Xml.Serialization.XmlAttributeAttribute("directive")]
        public YesNo Directive { get; set; }

        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the Directive property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool DirectiveSpecified { get; set; }

        [System.Xml.Serialization.XmlAttributeAttribute("system")]
        public SystemRelation System { get; set; }

        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the System property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool SystemSpecified { get; set; }

        [System.Xml.Serialization.XmlAttributeAttribute("id")]
        public string Id { get; set; }
    }

    /// <summary>
    /// <para>The editorial-voice-direction group supports the common combination of editorial and voice information for a direction element. It is separate from the editorial-voice element because extensions and restrictions might be different for directions than for the note and forward elements.</para>
    /// </summary>
    [System.ComponentModel.DescriptionAttribute(@"The editorial-voice-direction group supports the common combination of editorial and voice information for a direction element. It is separate from the editorial-voice element because extensions and restrictions might be different for directions than for the note and forward elements.")]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XmlSchemaClassGenerator", "2.1.1142.0")]
    public partial interface IEditorialVoiceDirection : IFootnote, ILevel, IVoice
    {
    }

    /// <summary>
    /// <para>A voice is a sequence of musical events (e.g. notes, chords, rests) that proceeds linearly in time. The voice element is used to distinguish between multiple voices in individual parts. It is defined within a group due to its multiple uses within the MusicXML schema.</para>
    /// </summary>
    [System.ComponentModel.DescriptionAttribute(@"A voice is a sequence of musical events (e.g. notes, chords, rests) that proceeds linearly in time. The voice element is used to distinguish between multiple voices in individual parts. It is defined within a group due to its multiple uses within the MusicXML schema.")]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XmlSchemaClassGenerator", "2.1.1142.0")]
    public partial interface IVoice
    {

        string Voice
        {
            get;
            set;
        }
    }

    /// <summary>
    /// <para>The staff element is defined within a group due to its use by both notes and direction elements.</para>
    /// </summary>
    [System.ComponentModel.DescriptionAttribute("The staff element is defined within a group due to its use by both notes and dire" +
        "ction elements.")]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XmlSchemaClassGenerator", "2.1.1142.0")]
    public partial interface IStaff
    {

        /// <summary>
        /// <para>Staff assignment is only needed for music notated on multiple staves. Used by both notes and directions. Staff values are numbers, with 1 referring to the top-most staff in a part.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Staff assignment is only needed for music notated on multiple staves. Used by bot" +
            "h notes and directions. Staff values are numbers, with 1 referring to the top-mo" +
            "st staff in a part.")]
        string Staff
        {
            get;
            set;
        }
    }

    /// <summary>
    /// <para>Textual direction types may have more than 1 component due to multiple fonts. The dynamics element may also be used in the notations element. Attribute groups related to print suggestions apply to the individual direction-type, not to the overall direction.</para>
    /// </summary>
    [System.ComponentModel.DescriptionAttribute(@"Textual direction types may have more than 1 component due to multiple fonts. The dynamics element may also be used in the notations element. Attribute groups related to print suggestions apply to the individual direction-type, not to the overall direction.")]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XmlSchemaClassGenerator", "2.1.1142.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute("direction-type", Namespace="")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class DirectionType : IOptionalUniqueId
    {

        [System.Xml.Serialization.XmlIgnoreAttribute()]
        private System.Collections.ObjectModel.Collection<FormattedTextId> _rehearsal;

        /// <summary>
        /// <para>The rehearsal element specifies letters, numbers, and section names that are notated in the score for reference during rehearsal. The enclosure is square if not specified. The language is Italian ("it") if not specified. Left justification is used if not specified.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute(@"The rehearsal element specifies letters, numbers, and section names that are notated in the score for reference during rehearsal. The enclosure is square if not specified. The language is Italian (""it"") if not specified. Left justification is used if not specified.")]
        [System.Xml.Serialization.XmlElementAttribute("rehearsal")]
        public System.Collections.ObjectModel.Collection<FormattedTextId> Rehearsal
        {
            get
            {
                return _rehearsal;
            }
            private set
            {
                _rehearsal = value;
            }
        }

        /// <summary>
        /// <para xml:lang="en">Gets a value indicating whether the Rehearsal collection is empty.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool RehearsalSpecified
        {
            get
            {
                return (this.Rehearsal.Count != 0);
            }
        }

        /// <summary>
        /// <para xml:lang="en">Initializes a new instance of the <see cref="DirectionType" /> class.</para>
        /// </summary>
        public DirectionType()
        {
            this._rehearsal = new System.Collections.ObjectModel.Collection<FormattedTextId>();
            this._segno = new System.Collections.ObjectModel.Collection<Segno>();
            this._coda = new System.Collections.ObjectModel.Collection<Coda>();
            this._words = new System.Collections.ObjectModel.Collection<FormattedTextId>();
            this._symbol = new System.Collections.ObjectModel.Collection<FormattedSymbolId>();
            this._dynamics = new System.Collections.ObjectModel.Collection<Dynamics>();
            this._percussion = new System.Collections.ObjectModel.Collection<Percussion>();
        }

        [System.Xml.Serialization.XmlIgnoreAttribute()]
        private System.Collections.ObjectModel.Collection<Segno> _segno;

        [System.Xml.Serialization.XmlElementAttribute("segno")]
        public System.Collections.ObjectModel.Collection<Segno> Segno
        {
            get
            {
                return _segno;
            }
            private set
            {
                _segno = value;
            }
        }

        /// <summary>
        /// <para xml:lang="en">Gets a value indicating whether the Segno collection is empty.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool SegnoSpecified
        {
            get
            {
                return (this.Segno.Count != 0);
            }
        }

        [System.Xml.Serialization.XmlIgnoreAttribute()]
        private System.Collections.ObjectModel.Collection<Coda> _coda;

        [System.Xml.Serialization.XmlElementAttribute("coda")]
        public System.Collections.ObjectModel.Collection<Coda> Coda
        {
            get
            {
                return _coda;
            }
            private set
            {
                _coda = value;
            }
        }

        /// <summary>
        /// <para xml:lang="en">Gets a value indicating whether the Coda collection is empty.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool CodaSpecified
        {
            get
            {
                return (this.Coda.Count != 0);
            }
        }

        [System.Xml.Serialization.XmlIgnoreAttribute()]
        private System.Collections.ObjectModel.Collection<FormattedTextId> _words;

        /// <summary>
        /// <para>The words element specifies a standard text direction. The enclosure is none if not specified. The language is Italian ("it") if not specified. Left justification is used if not specified.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("The words element specifies a standard text direction. The enclosure is none if n" +
            "ot specified. The language is Italian (\"it\") if not specified. Left justificatio" +
            "n is used if not specified.")]
        [System.Xml.Serialization.XmlElementAttribute("words")]
        public System.Collections.ObjectModel.Collection<FormattedTextId> Words
        {
            get
            {
                return _words;
            }
            private set
            {
                _words = value;
            }
        }

        /// <summary>
        /// <para xml:lang="en">Gets a value indicating whether the Words collection is empty.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool WordsSpecified
        {
            get
            {
                return (this.Words.Count != 0);
            }
        }

        [System.Xml.Serialization.XmlIgnoreAttribute()]
        private System.Collections.ObjectModel.Collection<FormattedSymbolId> _symbol;

        /// <summary>
        /// <para>The symbol element specifies a musical symbol using a canonical SMuFL glyph name. It is used when an occasional musical symbol is interspersed into text. It should not be used in place of semantic markup, such as metronome marks that mix text and symbols. Left justification is used if not specified. Enclosure is none if not specified.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute(@"The symbol element specifies a musical symbol using a canonical SMuFL glyph name. It is used when an occasional musical symbol is interspersed into text. It should not be used in place of semantic markup, such as metronome marks that mix text and symbols. Left justification is used if not specified. Enclosure is none if not specified.")]
        [System.Xml.Serialization.XmlElementAttribute("symbol")]
        public System.Collections.ObjectModel.Collection<FormattedSymbolId> Symbol
        {
            get
            {
                return _symbol;
            }
            private set
            {
                _symbol = value;
            }
        }

        /// <summary>
        /// <para xml:lang="en">Gets a value indicating whether the Symbol collection is empty.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool SymbolSpecified
        {
            get
            {
                return (this.Symbol.Count != 0);
            }
        }

        [System.Xml.Serialization.XmlElementAttribute("wedge")]
        public Wedge Wedge { get; set; }

        [System.Xml.Serialization.XmlIgnoreAttribute()]
        private System.Collections.ObjectModel.Collection<Dynamics> _dynamics;

        [System.Xml.Serialization.XmlElementAttribute("dynamics")]
        public System.Collections.ObjectModel.Collection<Dynamics> Dynamics
        {
            get
            {
                return _dynamics;
            }
            private set
            {
                _dynamics = value;
            }
        }

        /// <summary>
        /// <para xml:lang="en">Gets a value indicating whether the Dynamics collection is empty.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool DynamicsSpecified
        {
            get
            {
                return (this.Dynamics.Count != 0);
            }
        }

        [System.Xml.Serialization.XmlElementAttribute("dashes")]
        public Dashes Dashes { get; set; }

        [System.Xml.Serialization.XmlElementAttribute("bracket")]
        public Bracket Bracket { get; set; }

        [System.Xml.Serialization.XmlElementAttribute("pedal")]
        public Pedal Pedal { get; set; }

        [System.Xml.Serialization.XmlElementAttribute("metronome")]
        public Metronome Metronome { get; set; }

        [System.Xml.Serialization.XmlElementAttribute("octave-shift")]
        public OctaveShift OctaveShift { get; set; }

        [System.Xml.Serialization.XmlElementAttribute("harp-pedals")]
        public HarpPedals HarpPedals { get; set; }

        /// <summary>
        /// <para>The damp element specifies a harp damping mark.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("The damp element specifies a harp damping mark.")]
        [System.Xml.Serialization.XmlElementAttribute("damp")]
        public EmptyPrintStyleAlignId Damp { get; set; }

        /// <summary>
        /// <para>The damp-all element specifies a harp damping mark for all strings.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("The damp-all element specifies a harp damping mark for all strings.")]
        [System.Xml.Serialization.XmlElementAttribute("damp-all")]
        public EmptyPrintStyleAlignId DampAll { get; set; }

        /// <summary>
        /// <para>The eyeglasses element represents the eyeglasses symbol, common in commercial music.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("The eyeglasses element represents the eyeglasses symbol, common in commercial mus" +
            "ic.")]
        [System.Xml.Serialization.XmlElementAttribute("eyeglasses")]
        public EmptyPrintStyleAlignId Eyeglasses { get; set; }

        [System.Xml.Serialization.XmlElementAttribute("string-mute")]
        public StringMute StringMute { get; set; }

        [System.Xml.Serialization.XmlElementAttribute("scordatura")]
        public Scordatura Scordatura { get; set; }

        [System.Xml.Serialization.XmlElementAttribute("image")]
        public Image Image { get; set; }

        [System.Xml.Serialization.XmlElementAttribute("principal-voice")]
        public PrincipalVoice PrincipalVoice { get; set; }

        [System.Xml.Serialization.XmlIgnoreAttribute()]
        private System.Collections.ObjectModel.Collection<Percussion> _percussion;

        [System.Xml.Serialization.XmlElementAttribute("percussion")]
        public System.Collections.ObjectModel.Collection<Percussion> Percussion
        {
            get
            {
                return _percussion;
            }
            private set
            {
                _percussion = value;
            }
        }

        /// <summary>
        /// <para xml:lang="en">Gets a value indicating whether the Percussion collection is empty.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool PercussionSpecified
        {
            get
            {
                return (this.Percussion.Count != 0);
            }
        }

        [System.Xml.Serialization.XmlElementAttribute("accordion-registration")]
        public AccordionRegistration AccordionRegistration { get; set; }

        [System.Xml.Serialization.XmlElementAttribute("staff-divide")]
        public StaffDivide StaffDivide { get; set; }

        [System.Xml.Serialization.XmlElementAttribute("other-direction")]
        public OtherDirection OtherDirection { get; set; }

        [System.Xml.Serialization.XmlAttributeAttribute("id")]
        public string Id { get; set; }
    }

    /// <summary>
    /// <para>The wedge type represents crescendo and diminuendo wedge symbols. The type attribute is crescendo for the start of a wedge that is closed at the left side, and diminuendo for the start of a wedge that is closed on the right side. Spread values are measured in tenths; those at the start of a crescendo wedge or end of a diminuendo wedge are ignored. The niente attribute is yes if a circle appears at the point of the wedge, indicating a crescendo from nothing or diminuendo to nothing. It is no by default, and used only when the type is crescendo, or the type is stop for a wedge that began with a diminuendo type. The line-type is solid if not specified.</para>
    /// </summary>
    [System.ComponentModel.DescriptionAttribute(@"The wedge type represents crescendo and diminuendo wedge symbols. The type attribute is crescendo for the start of a wedge that is closed at the left side, and diminuendo for the start of a wedge that is closed on the right side. Spread values are measured in tenths; those at the start of a crescendo wedge or end of a diminuendo wedge are ignored. The niente attribute is yes if a circle appears at the point of the wedge, indicating a crescendo from nothing or diminuendo to nothing. It is no by default, and used only when the type is crescendo, or the type is stop for a wedge that began with a diminuendo type. The line-type is solid if not specified.")]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XmlSchemaClassGenerator", "2.1.1142.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute("wedge", Namespace="")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class Wedge : ILineType, IDashedFormatting, IPosition, IColor, IOptionalUniqueId
    {

        [System.ComponentModel.DataAnnotations.RequiredAttribute(AllowEmptyStrings=true)]
        [System.Xml.Serialization.XmlAttributeAttribute("type")]
        public WedgeType Type { get; set; }

        /// <summary>
        /// <para>Slurs, tuplets, and many other features can be concurrent and overlap within a single musical part. The number-level entity distinguishes up to 16 concurrent objects of the same type when the objects overlap in MusicXML document order. Values greater than 6 are usually only needed for music with a large number of divisi staves in a single part, or if there are more than 6 cross-staff arpeggios in a single measure. When a number-level value is implied, the value is 1 by default.
        ///
        ///When polyphonic parts are involved, the ordering within a MusicXML document can differ from musical score order. As an example, say we have a piano part in 4/4 where within a single measure, all the notes on the top staff are followed by all the notes on the bottom staff. In this example, each staff has a slur that starts on beat 2 and stops on beat 3, and there is a third slur that goes from beat 1 of one staff to beat 4 of the other staff.
        ///
        ///In this situation, the two mid-measure slurs can use the same number because they do not overlap in MusicXML document order, even though they do overlap in musical score order. Within the MusicXML document, the top staff slur will both start and stop before the bottom staff slur starts and stops.
        ///
        ///If the cross-staff slur starts in the top staff and stops in the bottom staff, it will need a separate number from the mid-measure slurs because it overlaps those slurs in MusicXML document order. However, if the cross-staff slur starts in the bottom staff and stops in the top staff, all three slurs can use the same number. None of them overlap within the MusicXML document, even though they all overlap each other in the musical score order. Within the MusicXML document, the start and stop of the top-staff slur will be followed by the stop and start of the cross-staff slur, followed by the start and stop of the bottom-staff slur.
        ///
        ///As this example demonstrates, a reading program should be prepared to handle cases where the number-levels start and stop in an arbitrary order. Because the start and stop values refer to musical score order, a program may find the stopping point of an object earlier in the MusicXML document than it will find its starting point.</para>
        /// <para xml:lang="en">Minimum inclusive value: 1.</para>
        /// <para xml:lang="en">Maximum inclusive value: 16.</para>
        /// </summary>
        [System.ComponentModel.DataAnnotations.RangeAttribute(typeof(decimal), "1", "16")]
        [System.Xml.Serialization.XmlAttributeAttribute("number")]
        public byte Number { get; set; }

        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the Number property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool NumberSpecified { get; set; }

        /// <summary>
        /// <para>The tenths type is a number representing tenths of interline staff space (positive or negative). Both integer and decimal values are allowed, such as 5 for a half space and 2.5 for a quarter space. Interline space is measured from the middle of a staff line.
        ///
        ///Distances in a MusicXML file are measured in tenths of staff space. Tenths are then scaled to millimeters within the scaling element, used in the defaults element at the start of a score. Individual staves can apply a scaling factor to adjust staff size. When a MusicXML element or attribute refers to tenths, it means the global tenths defined by the scaling element, not the local tenths as adjusted by the staff-size element.</para>
        /// </summary>
        [System.Xml.Serialization.XmlAttributeAttribute("spread")]
        public decimal Spread { get; set; }

        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the Spread property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool SpreadSpecified { get; set; }

        [System.Xml.Serialization.XmlAttributeAttribute("niente")]
        public YesNo Niente { get; set; }

        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the Niente property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool NienteSpecified { get; set; }

        [System.Xml.Serialization.XmlAttributeAttribute("line-type")]
        public LineType LineType { get; set; }

        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the LineType property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool LineTypeSpecified { get; set; }

        /// <summary>
        /// <para>The tenths type is a number representing tenths of interline staff space (positive or negative). Both integer and decimal values are allowed, such as 5 for a half space and 2.5 for a quarter space. Interline space is measured from the middle of a staff line.
        ///
        ///Distances in a MusicXML file are measured in tenths of staff space. Tenths are then scaled to millimeters within the scaling element, used in the defaults element at the start of a score. Individual staves can apply a scaling factor to adjust staff size. When a MusicXML element or attribute refers to tenths, it means the global tenths defined by the scaling element, not the local tenths as adjusted by the staff-size element.</para>
        /// </summary>
        [System.Xml.Serialization.XmlAttributeAttribute("dash-length")]
        public decimal DashLength { get; set; }

        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the DashLength property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool DashLengthSpecified { get; set; }

        /// <summary>
        /// <para>The tenths type is a number representing tenths of interline staff space (positive or negative). Both integer and decimal values are allowed, such as 5 for a half space and 2.5 for a quarter space. Interline space is measured from the middle of a staff line.
        ///
        ///Distances in a MusicXML file are measured in tenths of staff space. Tenths are then scaled to millimeters within the scaling element, used in the defaults element at the start of a score. Individual staves can apply a scaling factor to adjust staff size. When a MusicXML element or attribute refers to tenths, it means the global tenths defined by the scaling element, not the local tenths as adjusted by the staff-size element.</para>
        /// </summary>
        [System.Xml.Serialization.XmlAttributeAttribute("space-length")]
        public decimal SpaceLength { get; set; }

        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the SpaceLength property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool SpaceLengthSpecified { get; set; }

        /// <summary>
        /// <para>The tenths type is a number representing tenths of interline staff space (positive or negative). Both integer and decimal values are allowed, such as 5 for a half space and 2.5 for a quarter space. Interline space is measured from the middle of a staff line.
        ///
        ///Distances in a MusicXML file are measured in tenths of staff space. Tenths are then scaled to millimeters within the scaling element, used in the defaults element at the start of a score. Individual staves can apply a scaling factor to adjust staff size. When a MusicXML element or attribute refers to tenths, it means the global tenths defined by the scaling element, not the local tenths as adjusted by the staff-size element.</para>
        /// </summary>
        [System.Xml.Serialization.XmlAttributeAttribute("default-x")]
        public decimal DefaultX { get; set; }

        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the DefaultX property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool DefaultXSpecified { get; set; }

        /// <summary>
        /// <para>The tenths type is a number representing tenths of interline staff space (positive or negative). Both integer and decimal values are allowed, such as 5 for a half space and 2.5 for a quarter space. Interline space is measured from the middle of a staff line.
        ///
        ///Distances in a MusicXML file are measured in tenths of staff space. Tenths are then scaled to millimeters within the scaling element, used in the defaults element at the start of a score. Individual staves can apply a scaling factor to adjust staff size. When a MusicXML element or attribute refers to tenths, it means the global tenths defined by the scaling element, not the local tenths as adjusted by the staff-size element.</para>
        /// </summary>
        [System.Xml.Serialization.XmlAttributeAttribute("default-y")]
        public decimal DefaultY { get; set; }

        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the DefaultY property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool DefaultYSpecified { get; set; }

        /// <summary>
        /// <para>The tenths type is a number representing tenths of interline staff space (positive or negative). Both integer and decimal values are allowed, such as 5 for a half space and 2.5 for a quarter space. Interline space is measured from the middle of a staff line.
        ///
        ///Distances in a MusicXML file are measured in tenths of staff space. Tenths are then scaled to millimeters within the scaling element, used in the defaults element at the start of a score. Individual staves can apply a scaling factor to adjust staff size. When a MusicXML element or attribute refers to tenths, it means the global tenths defined by the scaling element, not the local tenths as adjusted by the staff-size element.</para>
        /// </summary>
        [System.Xml.Serialization.XmlAttributeAttribute("relative-x")]
        public decimal RelativeX { get; set; }

        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the RelativeX property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool RelativeXSpecified { get; set; }

        /// <summary>
        /// <para>The tenths type is a number representing tenths of interline staff space (positive or negative). Both integer and decimal values are allowed, such as 5 for a half space and 2.5 for a quarter space. Interline space is measured from the middle of a staff line.
        ///
        ///Distances in a MusicXML file are measured in tenths of staff space. Tenths are then scaled to millimeters within the scaling element, used in the defaults element at the start of a score. Individual staves can apply a scaling factor to adjust staff size. When a MusicXML element or attribute refers to tenths, it means the global tenths defined by the scaling element, not the local tenths as adjusted by the staff-size element.</para>
        /// </summary>
        [System.Xml.Serialization.XmlAttributeAttribute("relative-y")]
        public decimal RelativeY { get; set; }

        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the RelativeY property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool RelativeYSpecified { get; set; }

        /// <summary>
        /// <para>The color type indicates the color of an element. Color may be represented as hexadecimal RGB triples, as in HTML, or as hexadecimal ARGB tuples, with the A indicating alpha of transparency. An alpha value of 00 is totally transparent; FF is totally opaque. If RGB is used, the A value is assumed to be FF.
        ///
        ///For instance, the RGB value "#800080" represents purple. An ARGB value of "#40800080" would be a transparent purple.
        ///
        ///As in SVG 1.1, colors are defined in terms of the sRGB color space (IEC 61966).</para>
        /// <para xml:lang="en">Pattern: #[\dA-F]{6}([\dA-F][\dA-F])?.</para>
        /// </summary>
        [System.ComponentModel.DataAnnotations.RegularExpressionAttribute("#[\\dA-F]{6}([\\dA-F][\\dA-F])?")]
        [System.Xml.Serialization.XmlAttributeAttribute("color")]
        public string Color { get; set; }

        [System.Xml.Serialization.XmlAttributeAttribute("id")]
        public string Id { get; set; }
    }

    /// <summary>
    /// <para>The pedal type represents piano pedal marks, including damper and sostenuto pedal marks. The line attribute is yes if pedal lines are used. The sign attribute is yes if Ped, Sost, and * signs are used. For compatibility with older versions, the sign attribute is yes by default if the line attribute is no, and is no by default if the line attribute is yes. If the sign attribute is set to yes and the type is start or sostenuto, the abbreviated attribute is yes if the short P and S signs are used, and no if the full Ped and Sost signs are used. It is no by default. Otherwise the abbreviated attribute is ignored. The alignment attributes are ignored if the sign attribute is no.</para>
    /// </summary>
    [System.ComponentModel.DescriptionAttribute(@"The pedal type represents piano pedal marks, including damper and sostenuto pedal marks. The line attribute is yes if pedal lines are used. The sign attribute is yes if Ped, Sost, and * signs are used. For compatibility with older versions, the sign attribute is yes by default if the line attribute is no, and is no by default if the line attribute is yes. If the sign attribute is set to yes and the type is start or sostenuto, the abbreviated attribute is yes if the short P and S signs are used, and no if the full Ped and Sost signs are used. It is no by default. Otherwise the abbreviated attribute is ignored. The alignment attributes are ignored if the sign attribute is no.")]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XmlSchemaClassGenerator", "2.1.1142.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute("pedal", Namespace="")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class Pedal : IPrintStyleAlign, IOptionalUniqueId
    {

        [System.ComponentModel.DataAnnotations.RequiredAttribute(AllowEmptyStrings=true)]
        [System.Xml.Serialization.XmlAttributeAttribute("type")]
        public PedalType Type { get; set; }

        /// <summary>
        /// <para>Slurs, tuplets, and many other features can be concurrent and overlap within a single musical part. The number-level entity distinguishes up to 16 concurrent objects of the same type when the objects overlap in MusicXML document order. Values greater than 6 are usually only needed for music with a large number of divisi staves in a single part, or if there are more than 6 cross-staff arpeggios in a single measure. When a number-level value is implied, the value is 1 by default.
        ///
        ///When polyphonic parts are involved, the ordering within a MusicXML document can differ from musical score order. As an example, say we have a piano part in 4/4 where within a single measure, all the notes on the top staff are followed by all the notes on the bottom staff. In this example, each staff has a slur that starts on beat 2 and stops on beat 3, and there is a third slur that goes from beat 1 of one staff to beat 4 of the other staff.
        ///
        ///In this situation, the two mid-measure slurs can use the same number because they do not overlap in MusicXML document order, even though they do overlap in musical score order. Within the MusicXML document, the top staff slur will both start and stop before the bottom staff slur starts and stops.
        ///
        ///If the cross-staff slur starts in the top staff and stops in the bottom staff, it will need a separate number from the mid-measure slurs because it overlaps those slurs in MusicXML document order. However, if the cross-staff slur starts in the bottom staff and stops in the top staff, all three slurs can use the same number. None of them overlap within the MusicXML document, even though they all overlap each other in the musical score order. Within the MusicXML document, the start and stop of the top-staff slur will be followed by the stop and start of the cross-staff slur, followed by the start and stop of the bottom-staff slur.
        ///
        ///As this example demonstrates, a reading program should be prepared to handle cases where the number-levels start and stop in an arbitrary order. Because the start and stop values refer to musical score order, a program may find the stopping point of an object earlier in the MusicXML document than it will find its starting point.</para>
        /// <para xml:lang="en">Minimum inclusive value: 1.</para>
        /// <para xml:lang="en">Maximum inclusive value: 16.</para>
        /// </summary>
        [System.ComponentModel.DataAnnotations.RangeAttribute(typeof(decimal), "1", "16")]
        [System.Xml.Serialization.XmlAttributeAttribute("number")]
        public byte Number { get; set; }

        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the Number property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool NumberSpecified { get; set; }

        [System.Xml.Serialization.XmlAttributeAttribute("line")]
        public YesNo Line { get; set; }

        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the Line property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool LineSpecified { get; set; }

        [System.Xml.Serialization.XmlAttributeAttribute("sign")]
        public YesNo Sign { get; set; }

        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the Sign property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool SignSpecified { get; set; }

        [System.Xml.Serialization.XmlAttributeAttribute("abbreviated")]
        public YesNo Abbreviated { get; set; }

        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the Abbreviated property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool AbbreviatedSpecified { get; set; }

        /// <summary>
        /// <para>The tenths type is a number representing tenths of interline staff space (positive or negative). Both integer and decimal values are allowed, such as 5 for a half space and 2.5 for a quarter space. Interline space is measured from the middle of a staff line.
        ///
        ///Distances in a MusicXML file are measured in tenths of staff space. Tenths are then scaled to millimeters within the scaling element, used in the defaults element at the start of a score. Individual staves can apply a scaling factor to adjust staff size. When a MusicXML element or attribute refers to tenths, it means the global tenths defined by the scaling element, not the local tenths as adjusted by the staff-size element.</para>
        /// </summary>
        [System.Xml.Serialization.XmlAttributeAttribute("default-x")]
        public decimal DefaultX { get; set; }

        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the DefaultX property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool DefaultXSpecified { get; set; }

        /// <summary>
        /// <para>The tenths type is a number representing tenths of interline staff space (positive or negative). Both integer and decimal values are allowed, such as 5 for a half space and 2.5 for a quarter space. Interline space is measured from the middle of a staff line.
        ///
        ///Distances in a MusicXML file are measured in tenths of staff space. Tenths are then scaled to millimeters within the scaling element, used in the defaults element at the start of a score. Individual staves can apply a scaling factor to adjust staff size. When a MusicXML element or attribute refers to tenths, it means the global tenths defined by the scaling element, not the local tenths as adjusted by the staff-size element.</para>
        /// </summary>
        [System.Xml.Serialization.XmlAttributeAttribute("default-y")]
        public decimal DefaultY { get; set; }

        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the DefaultY property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool DefaultYSpecified { get; set; }

        /// <summary>
        /// <para>The tenths type is a number representing tenths of interline staff space (positive or negative). Both integer and decimal values are allowed, such as 5 for a half space and 2.5 for a quarter space. Interline space is measured from the middle of a staff line.
        ///
        ///Distances in a MusicXML file are measured in tenths of staff space. Tenths are then scaled to millimeters within the scaling element, used in the defaults element at the start of a score. Individual staves can apply a scaling factor to adjust staff size. When a MusicXML element or attribute refers to tenths, it means the global tenths defined by the scaling element, not the local tenths as adjusted by the staff-size element.</para>
        /// </summary>
        [System.Xml.Serialization.XmlAttributeAttribute("relative-x")]
        public decimal RelativeX { get; set; }

        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the RelativeX property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool RelativeXSpecified { get; set; }

        /// <summary>
        /// <para>The tenths type is a number representing tenths of interline staff space (positive or negative). Both integer and decimal values are allowed, such as 5 for a half space and 2.5 for a quarter space. Interline space is measured from the middle of a staff line.
        ///
        ///Distances in a MusicXML file are measured in tenths of staff space. Tenths are then scaled to millimeters within the scaling element, used in the defaults element at the start of a score. Individual staves can apply a scaling factor to adjust staff size. When a MusicXML element or attribute refers to tenths, it means the global tenths defined by the scaling element, not the local tenths as adjusted by the staff-size element.</para>
        /// </summary>
        [System.Xml.Serialization.XmlAttributeAttribute("relative-y")]
        public decimal RelativeY { get; set; }

        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the RelativeY property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool RelativeYSpecified { get; set; }

        /// <summary>
        /// <para>The font-family is a comma-separated list of font names. These can be specific font styles such as Maestro or Opus, or one of several generic font styles: music, engraved, handwritten, text, serif, sans-serif, handwritten, cursive, fantasy, and monospace. The music, engraved, and handwritten values refer to music fonts; the rest refer to text fonts. The fantasy style refers to decorative text such as found in older German-style printing.</para>
        /// <para xml:lang="en">Pattern: [^,]+(, ?[^,]+)*.</para>
        /// </summary>
        [System.ComponentModel.DataAnnotations.RegularExpressionAttribute("[^,]+(, ?[^,]+)*")]
        [System.Xml.Serialization.XmlAttributeAttribute("font-family")]
        public string FontFamily { get; set; }

        [System.Xml.Serialization.XmlAttributeAttribute("font-style")]
        public FontStyle FontStyle { get; set; }

        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the FontStyle property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool FontStyleSpecified { get; set; }

        /// <summary>
        /// <para>The font-size can be one of the CSS font sizes (xx-small, x-small, small, medium, large, x-large, xx-large) or a numeric point size.</para>
        /// </summary>
        [System.Xml.Serialization.XmlAttributeAttribute("font-size")]
        public string FontSize { get; set; }

        [System.Xml.Serialization.XmlAttributeAttribute("font-weight")]
        public FontWeight FontWeight { get; set; }

        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the FontWeight property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool FontWeightSpecified { get; set; }

        /// <summary>
        /// <para>The color type indicates the color of an element. Color may be represented as hexadecimal RGB triples, as in HTML, or as hexadecimal ARGB tuples, with the A indicating alpha of transparency. An alpha value of 00 is totally transparent; FF is totally opaque. If RGB is used, the A value is assumed to be FF.
        ///
        ///For instance, the RGB value "#800080" represents purple. An ARGB value of "#40800080" would be a transparent purple.
        ///
        ///As in SVG 1.1, colors are defined in terms of the sRGB color space (IEC 61966).</para>
        /// <para xml:lang="en">Pattern: #[\dA-F]{6}([\dA-F][\dA-F])?.</para>
        /// </summary>
        [System.ComponentModel.DataAnnotations.RegularExpressionAttribute("#[\\dA-F]{6}([\\dA-F][\\dA-F])?")]
        [System.Xml.Serialization.XmlAttributeAttribute("color")]
        public string Color { get; set; }

        [System.Xml.Serialization.XmlAttributeAttribute("halign")]
        public LeftCenterRight Halign { get; set; }

        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the Halign property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool HalignSpecified { get; set; }

        [System.Xml.Serialization.XmlAttributeAttribute("valign")]
        public Valign Valign { get; set; }

        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the Valign property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool ValignSpecified { get; set; }

        [System.Xml.Serialization.XmlAttributeAttribute("id")]
        public string Id { get; set; }
    }

    /// <summary>
    /// <para>The metronome type represents metronome marks and other metric relationships. The beat-unit group and per-minute element specify regular metronome marks. The metronome-note and metronome-relation elements allow for the specification of metric modulations and other metric relationships, such as swing tempo marks where two eighths are equated to a quarter note / eighth note triplet. Tied notes can be represented in both types of metronome marks by using the beat-unit-tied and metronome-tied elements. The parentheses attribute indicates whether or not to put the metronome mark in parentheses; its value is no if not specified. The print-object attribute is set to no in cases where the metronome element represents a relationship or range that is not displayed in the music notation.</para>
    /// </summary>
    [System.ComponentModel.DescriptionAttribute(@"The metronome type represents metronome marks and other metric relationships. The beat-unit group and per-minute element specify regular metronome marks. The metronome-note and metronome-relation elements allow for the specification of metric modulations and other metric relationships, such as swing tempo marks where two eighths are equated to a quarter note / eighth note triplet. Tied notes can be represented in both types of metronome marks by using the beat-unit-tied and metronome-tied elements. The parentheses attribute indicates whether or not to put the metronome mark in parentheses; its value is no if not specified. The print-object attribute is set to no in cases where the metronome element represents a relationship or range that is not displayed in the music notation.")]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XmlSchemaClassGenerator", "2.1.1142.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute("metronome", Namespace="")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class Metronome : IBeatUnit, IPrintStyleAlign, IPrintObject, IJustify, IOptionalUniqueId
    {

        /// <summary>
        /// <para>The beat-unit element indicates the graphical note type to use in a metronome mark.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("The beat-unit element indicates the graphical note type to use in a metronome mar" +
            "k.")]
        [System.Xml.Serialization.XmlElementAttribute("beat-unit")]
        public NoteTypeValue BeatUnit { get; set; }

        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the BeatUnit property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool BeatUnitSpecified { get; set; }

        [System.Xml.Serialization.XmlIgnoreAttribute()]
        private System.Collections.ObjectModel.Collection<Empty> _beatUnitDot;

        /// <summary>
        /// <para>The beat-unit-dot element is used to specify any augmentation dots for a metronome mark note.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("The beat-unit-dot element is used to specify any augmentation dots for a metronom" +
            "e mark note.")]
        [System.Xml.Serialization.XmlElementAttribute("beat-unit-dot")]
        public System.Collections.ObjectModel.Collection<Empty> BeatUnitDot
        {
            get
            {
                return _beatUnitDot;
            }
            private set
            {
                _beatUnitDot = value;
            }
        }

        /// <summary>
        /// <para xml:lang="en">Gets a value indicating whether the BeatUnitDot collection is empty.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool BeatUnitDotSpecified
        {
            get
            {
                return (this.BeatUnitDot.Count != 0);
            }
        }

        /// <summary>
        /// <para xml:lang="en">Initializes a new instance of the <see cref="Metronome" /> class.</para>
        /// </summary>
        public Metronome()
        {
            this._beatUnitDot = new System.Collections.ObjectModel.Collection<Empty>();
            this._beatUnitTied = new System.Collections.ObjectModel.Collection<BeatUnitTied>();
            this._metronomeNote = new System.Collections.ObjectModel.Collection<MetronomeNote>();
        }

        [System.Xml.Serialization.XmlIgnoreAttribute()]
        private System.Collections.ObjectModel.Collection<BeatUnitTied> _beatUnitTied;

        [System.Xml.Serialization.XmlElementAttribute("beat-unit-tied")]
        public System.Collections.ObjectModel.Collection<BeatUnitTied> BeatUnitTied
        {
            get
            {
                return _beatUnitTied;
            }
            private set
            {
                _beatUnitTied = value;
            }
        }

        /// <summary>
        /// <para xml:lang="en">Gets a value indicating whether the BeatUnitTied collection is empty.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool BeatUnitTiedSpecified
        {
            get
            {
                return (this.BeatUnitTied.Count != 0);
            }
        }

        [System.Xml.Serialization.XmlElementAttribute("per-minute")]
        public PerMinute PerMinute { get; set; }

        /// <summary>
        /// <para>If the metronome-arrows element is present, it indicates that metric modulation arrows are displayed on both sides of the metronome mark.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("If the metronome-arrows element is present, it indicates that metric modulation a" +
            "rrows are displayed on both sides of the metronome mark.")]
        [System.Xml.Serialization.XmlElementAttribute("metronome-arrows")]
        public Empty MetronomeArrows { get; set; }

        [System.Xml.Serialization.XmlIgnoreAttribute()]
        private System.Collections.ObjectModel.Collection<MetronomeNote> _metronomeNote;

        [System.Xml.Serialization.XmlElementAttribute("metronome-note")]
        public System.Collections.ObjectModel.Collection<MetronomeNote> MetronomeNote
        {
            get
            {
                return _metronomeNote;
            }
            private set
            {
                _metronomeNote = value;
            }
        }

        /// <summary>
        /// <para xml:lang="en">Gets a value indicating whether the MetronomeNote collection is empty.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool MetronomeNoteSpecified
        {
            get
            {
                return (this.MetronomeNote.Count != 0);
            }
        }

        /// <summary>
        /// <para>The metronome-relation element describes the relationship symbol that goes between the two sets of metronome-note elements. The currently allowed value is equals, but this may expand in future versions. If the element is empty, the equals value is used.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("The metronome-relation element describes the relationship symbol that goes betwee" +
            "n the two sets of metronome-note elements. The currently allowed value is equals" +
            ", but this may expand in future versions. If the element is empty, the equals va" +
            "lue is used.")]
        [System.Xml.Serialization.XmlElementAttribute("metronome-relation")]
        public string MetronomeRelation { get; set; }

        /// <summary>
        /// <para>The tenths type is a number representing tenths of interline staff space (positive or negative). Both integer and decimal values are allowed, such as 5 for a half space and 2.5 for a quarter space. Interline space is measured from the middle of a staff line.
        ///
        ///Distances in a MusicXML file are measured in tenths of staff space. Tenths are then scaled to millimeters within the scaling element, used in the defaults element at the start of a score. Individual staves can apply a scaling factor to adjust staff size. When a MusicXML element or attribute refers to tenths, it means the global tenths defined by the scaling element, not the local tenths as adjusted by the staff-size element.</para>
        /// </summary>
        [System.Xml.Serialization.XmlAttributeAttribute("default-x")]
        public decimal DefaultX { get; set; }

        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the DefaultX property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool DefaultXSpecified { get; set; }

        /// <summary>
        /// <para>The tenths type is a number representing tenths of interline staff space (positive or negative). Both integer and decimal values are allowed, such as 5 for a half space and 2.5 for a quarter space. Interline space is measured from the middle of a staff line.
        ///
        ///Distances in a MusicXML file are measured in tenths of staff space. Tenths are then scaled to millimeters within the scaling element, used in the defaults element at the start of a score. Individual staves can apply a scaling factor to adjust staff size. When a MusicXML element or attribute refers to tenths, it means the global tenths defined by the scaling element, not the local tenths as adjusted by the staff-size element.</para>
        /// </summary>
        [System.Xml.Serialization.XmlAttributeAttribute("default-y")]
        public decimal DefaultY { get; set; }

        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the DefaultY property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool DefaultYSpecified { get; set; }

        /// <summary>
        /// <para>The tenths type is a number representing tenths of interline staff space (positive or negative). Both integer and decimal values are allowed, such as 5 for a half space and 2.5 for a quarter space. Interline space is measured from the middle of a staff line.
        ///
        ///Distances in a MusicXML file are measured in tenths of staff space. Tenths are then scaled to millimeters within the scaling element, used in the defaults element at the start of a score. Individual staves can apply a scaling factor to adjust staff size. When a MusicXML element or attribute refers to tenths, it means the global tenths defined by the scaling element, not the local tenths as adjusted by the staff-size element.</para>
        /// </summary>
        [System.Xml.Serialization.XmlAttributeAttribute("relative-x")]
        public decimal RelativeX { get; set; }

        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the RelativeX property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool RelativeXSpecified { get; set; }

        /// <summary>
        /// <para>The tenths type is a number representing tenths of interline staff space (positive or negative). Both integer and decimal values are allowed, such as 5 for a half space and 2.5 for a quarter space. Interline space is measured from the middle of a staff line.
        ///
        ///Distances in a MusicXML file are measured in tenths of staff space. Tenths are then scaled to millimeters within the scaling element, used in the defaults element at the start of a score. Individual staves can apply a scaling factor to adjust staff size. When a MusicXML element or attribute refers to tenths, it means the global tenths defined by the scaling element, not the local tenths as adjusted by the staff-size element.</para>
        /// </summary>
        [System.Xml.Serialization.XmlAttributeAttribute("relative-y")]
        public decimal RelativeY { get; set; }

        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the RelativeY property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool RelativeYSpecified { get; set; }

        /// <summary>
        /// <para>The font-family is a comma-separated list of font names. These can be specific font styles such as Maestro or Opus, or one of several generic font styles: music, engraved, handwritten, text, serif, sans-serif, handwritten, cursive, fantasy, and monospace. The music, engraved, and handwritten values refer to music fonts; the rest refer to text fonts. The fantasy style refers to decorative text such as found in older German-style printing.</para>
        /// <para xml:lang="en">Pattern: [^,]+(, ?[^,]+)*.</para>
        /// </summary>
        [System.ComponentModel.DataAnnotations.RegularExpressionAttribute("[^,]+(, ?[^,]+)*")]
        [System.Xml.Serialization.XmlAttributeAttribute("font-family")]
        public string FontFamily { get; set; }

        [System.Xml.Serialization.XmlAttributeAttribute("font-style")]
        public FontStyle FontStyle { get; set; }

        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the FontStyle property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool FontStyleSpecified { get; set; }

        /// <summary>
        /// <para>The font-size can be one of the CSS font sizes (xx-small, x-small, small, medium, large, x-large, xx-large) or a numeric point size.</para>
        /// </summary>
        [System.Xml.Serialization.XmlAttributeAttribute("font-size")]
        public string FontSize { get; set; }

        [System.Xml.Serialization.XmlAttributeAttribute("font-weight")]
        public FontWeight FontWeight { get; set; }

        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the FontWeight property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool FontWeightSpecified { get; set; }

        /// <summary>
        /// <para>The color type indicates the color of an element. Color may be represented as hexadecimal RGB triples, as in HTML, or as hexadecimal ARGB tuples, with the A indicating alpha of transparency. An alpha value of 00 is totally transparent; FF is totally opaque. If RGB is used, the A value is assumed to be FF.
        ///
        ///For instance, the RGB value "#800080" represents purple. An ARGB value of "#40800080" would be a transparent purple.
        ///
        ///As in SVG 1.1, colors are defined in terms of the sRGB color space (IEC 61966).</para>
        /// <para xml:lang="en">Pattern: #[\dA-F]{6}([\dA-F][\dA-F])?.</para>
        /// </summary>
        [System.ComponentModel.DataAnnotations.RegularExpressionAttribute("#[\\dA-F]{6}([\\dA-F][\\dA-F])?")]
        [System.Xml.Serialization.XmlAttributeAttribute("color")]
        public string Color { get; set; }

        [System.Xml.Serialization.XmlAttributeAttribute("halign")]
        public LeftCenterRight Halign { get; set; }

        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the Halign property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool HalignSpecified { get; set; }

        [System.Xml.Serialization.XmlAttributeAttribute("valign")]
        public Valign Valign { get; set; }

        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the Valign property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool ValignSpecified { get; set; }

        [System.Xml.Serialization.XmlAttributeAttribute("print-object")]
        public YesNo PrintObject { get; set; }

        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the PrintObject property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool PrintObjectSpecified { get; set; }

        [System.Xml.Serialization.XmlAttributeAttribute("justify")]
        public LeftCenterRight Justify { get; set; }

        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the Justify property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool JustifySpecified { get; set; }

        [System.Xml.Serialization.XmlAttributeAttribute("parentheses")]
        public YesNo Parentheses { get; set; }

        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the Parentheses property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool ParenthesesSpecified { get; set; }

        [System.Xml.Serialization.XmlAttributeAttribute("id")]
        public string Id { get; set; }
    }

    /// <summary>
    /// <para>The per-minute type can be a number, or a text description including numbers. If a font is specified, it overrides the font specified for the overall metronome element. This allows separate specification of a music font for the beat-unit and a text font for the numeric value, in cases where a single metronome font is not used.</para>
    /// </summary>
    [System.ComponentModel.DescriptionAttribute(@"The per-minute type can be a number, or a text description including numbers. If a font is specified, it overrides the font specified for the overall metronome element. This allows separate specification of a music font for the beat-unit and a text font for the numeric value, in cases where a single metronome font is not used.")]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XmlSchemaClassGenerator", "2.1.1142.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute("per-minute", Namespace="")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class PerMinute : IFont
    {

        /// <summary>
        /// <para xml:lang="en">Gets or sets the text value.</para>
        /// </summary>
        [System.Xml.Serialization.XmlTextAttribute()]
        public string Value { get; set; }

        /// <summary>
        /// <para>The font-family is a comma-separated list of font names. These can be specific font styles such as Maestro or Opus, or one of several generic font styles: music, engraved, handwritten, text, serif, sans-serif, handwritten, cursive, fantasy, and monospace. The music, engraved, and handwritten values refer to music fonts; the rest refer to text fonts. The fantasy style refers to decorative text such as found in older German-style printing.</para>
        /// <para xml:lang="en">Pattern: [^,]+(, ?[^,]+)*.</para>
        /// </summary>
        [System.ComponentModel.DataAnnotations.RegularExpressionAttribute("[^,]+(, ?[^,]+)*")]
        [System.Xml.Serialization.XmlAttributeAttribute("font-family")]
        public string FontFamily { get; set; }

        [System.Xml.Serialization.XmlAttributeAttribute("font-style")]
        public FontStyle FontStyle { get; set; }

        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the FontStyle property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool FontStyleSpecified { get; set; }

        /// <summary>
        /// <para>The font-size can be one of the CSS font sizes (xx-small, x-small, small, medium, large, x-large, xx-large) or a numeric point size.</para>
        /// </summary>
        [System.Xml.Serialization.XmlAttributeAttribute("font-size")]
        public string FontSize { get; set; }

        [System.Xml.Serialization.XmlAttributeAttribute("font-weight")]
        public FontWeight FontWeight { get; set; }

        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the FontWeight property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool FontWeightSpecified { get; set; }
    }

    /// <summary>
    /// <para>The metronome-note type defines the appearance of a note within a metric relationship mark.</para>
    /// </summary>
    [System.ComponentModel.DescriptionAttribute("The metronome-note type defines the appearance of a note within a metric relation" +
        "ship mark.")]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XmlSchemaClassGenerator", "2.1.1142.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute("metronome-note", Namespace="")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class MetronomeNote
    {

        /// <summary>
        /// <para>The metronome-type element works like the type element in defining metric relationships.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("The metronome-type element works like the type element in defining metric relatio" +
            "nships.")]
        [System.ComponentModel.DataAnnotations.RequiredAttribute(AllowEmptyStrings=true)]
        [System.Xml.Serialization.XmlElementAttribute("metronome-type")]
        public NoteTypeValue MetronomeType { get; set; }

        [System.Xml.Serialization.XmlIgnoreAttribute()]
        private System.Collections.ObjectModel.Collection<Empty> _metronomeDot;

        /// <summary>
        /// <para>The metronome-dot element works like the dot element in defining metric relationships.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("The metronome-dot element works like the dot element in defining metric relations" +
            "hips.")]
        [System.Xml.Serialization.XmlElementAttribute("metronome-dot")]
        public System.Collections.ObjectModel.Collection<Empty> MetronomeDot
        {
            get
            {
                return _metronomeDot;
            }
            private set
            {
                _metronomeDot = value;
            }
        }

        /// <summary>
        /// <para xml:lang="en">Gets a value indicating whether the MetronomeDot collection is empty.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool MetronomeDotSpecified
        {
            get
            {
                return (this.MetronomeDot.Count != 0);
            }
        }

        /// <summary>
        /// <para xml:lang="en">Initializes a new instance of the <see cref="MetronomeNote" /> class.</para>
        /// </summary>
        public MetronomeNote()
        {
            this._metronomeDot = new System.Collections.ObjectModel.Collection<Empty>();
            this._metronomeBeam = new System.Collections.ObjectModel.Collection<MetronomeBeam>();
        }

        [System.Xml.Serialization.XmlIgnoreAttribute()]
        private System.Collections.ObjectModel.Collection<MetronomeBeam> _metronomeBeam;

        [System.Xml.Serialization.XmlElementAttribute("metronome-beam")]
        public System.Collections.ObjectModel.Collection<MetronomeBeam> MetronomeBeam
        {
            get
            {
                return _metronomeBeam;
            }
            private set
            {
                _metronomeBeam = value;
            }
        }

        /// <summary>
        /// <para xml:lang="en">Gets a value indicating whether the MetronomeBeam collection is empty.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool MetronomeBeamSpecified
        {
            get
            {
                return (this.MetronomeBeam.Count != 0);
            }
        }

        [System.Xml.Serialization.XmlElementAttribute("metronome-tied")]
        public MetronomeTied MetronomeTied { get; set; }

        [System.Xml.Serialization.XmlElementAttribute("metronome-tuplet")]
        public MetronomeTuplet MetronomeTuplet { get; set; }
    }

    /// <summary>
    /// <para>The metronome-beam type works like the beam type in defining metric relationships, but does not include all the attributes available in the beam type.</para>
    /// </summary>
    [System.ComponentModel.DescriptionAttribute("The metronome-beam type works like the beam type in defining metric relationships" +
        ", but does not include all the attributes available in the beam type.")]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XmlSchemaClassGenerator", "2.1.1142.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute("metronome-beam", Namespace="")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class MetronomeBeam
    {

        /// <summary>
        /// <para xml:lang="en">Gets or sets the text value.</para>
        /// </summary>
        [System.Xml.Serialization.XmlTextAttribute()]
        public BeamValue Value { get; set; }

        [System.Xml.Serialization.XmlIgnoreAttribute()]
        private byte _number = 1;

        /// <summary>
        /// <para>The MusicXML format supports six levels of beaming, up to 1024th notes. Unlike the number-level type, the beam-level type identifies concurrent beams in a beam group. It does not distinguish overlapping beams such as grace notes within regular notes, or beams used in different voices.</para>
        /// <para xml:lang="en">Minimum inclusive value: 1.</para>
        /// <para xml:lang="en">Maximum inclusive value: 8.</para>
        /// </summary>
        [System.ComponentModel.DefaultValueAttribute(1)]
        [System.ComponentModel.DataAnnotations.RangeAttribute(typeof(decimal), "1", "8")]
        [System.Xml.Serialization.XmlAttributeAttribute("number")]
        public byte Number
        {
            get
            {
                return _number;
            }
            set
            {
                _number = value;
            }
        }
    }

    /// <summary>
    /// <para>The metronome-tied indicates the presence of a tie within a metric relationship mark. As with the tied element, both the start and stop of the tie should be specified, in this case within separate metronome-note elements.</para>
    /// </summary>
    [System.ComponentModel.DescriptionAttribute("The metronome-tied indicates the presence of a tie within a metric relationship m" +
        "ark. As with the tied element, both the start and stop of the tie should be spec" +
        "ified, in this case within separate metronome-note elements.")]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XmlSchemaClassGenerator", "2.1.1142.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute("metronome-tied", Namespace="")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class MetronomeTied
    {

        [System.ComponentModel.DataAnnotations.RequiredAttribute(AllowEmptyStrings=true)]
        [System.Xml.Serialization.XmlAttributeAttribute("type")]
        public StartStop Type { get; set; }
    }

    /// <summary>
    /// <para>The metronome-tuplet type uses the same element structure as the time-modification element along with some attributes from the tuplet element.</para>
    /// </summary>
    [System.ComponentModel.DescriptionAttribute("The metronome-tuplet type uses the same element structure as the time-modificatio" +
        "n element along with some attributes from the tuplet element.")]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XmlSchemaClassGenerator", "2.1.1142.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute("metronome-tuplet", Namespace="")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class MetronomeTuplet : TimeModification
    {

        [System.ComponentModel.DataAnnotations.RequiredAttribute(AllowEmptyStrings=true)]
        [System.Xml.Serialization.XmlAttributeAttribute("type")]
        public StartStop Type { get; set; }

        [System.Xml.Serialization.XmlAttributeAttribute("bracket")]
        public YesNo Bracket { get; set; }

        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the Bracket property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool BracketSpecified { get; set; }

        [System.Xml.Serialization.XmlAttributeAttribute("show-number")]
        public ShowTuplet ShowNumber { get; set; }

        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the ShowNumber property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool ShowNumberSpecified { get; set; }
    }

    /// <summary>
    /// <para>Time modification indicates tuplets, double-note tremolos, and other durational changes. A time-modification element shows how the cumulative, sounding effect of tuplets and double-note tremolos compare to the written note type represented by the type and dot elements. Nested tuplets and other notations that use more detailed information need both the time-modification and tuplet elements to be represented accurately.</para>
    /// </summary>
    [System.ComponentModel.DescriptionAttribute(@"Time modification indicates tuplets, double-note tremolos, and other durational changes. A time-modification element shows how the cumulative, sounding effect of tuplets and double-note tremolos compare to the written note type represented by the type and dot elements. Nested tuplets and other notations that use more detailed information need both the time-modification and tuplet elements to be represented accurately.")]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XmlSchemaClassGenerator", "2.1.1142.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute("time-modification", Namespace="")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(MetronomeTuplet))]
    public partial class TimeModification
    {

        /// <summary>
        /// <para>The actual-notes element describes how many notes are played in the time usually occupied by the number in the normal-notes element.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("The actual-notes element describes how many notes are played in the time usually " +
            "occupied by the number in the normal-notes element.")]
        [System.ComponentModel.DataAnnotations.RequiredAttribute(AllowEmptyStrings=true)]
        [System.Xml.Serialization.XmlElementAttribute("actual-notes")]
        public string ActualNotes { get; set; }

        /// <summary>
        /// <para>The normal-notes element describes how many notes are usually played in the time occupied by the number in the actual-notes element.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("The normal-notes element describes how many notes are usually played in the time " +
            "occupied by the number in the actual-notes element.")]
        [System.ComponentModel.DataAnnotations.RequiredAttribute(AllowEmptyStrings=true)]
        [System.Xml.Serialization.XmlElementAttribute("normal-notes")]
        public string NormalNotes { get; set; }

        /// <summary>
        /// <para>If the type associated with the number in the normal-notes element is different than the current note type (e.g., a quarter note within an eighth note triplet), then the normal-notes type (e.g. eighth) is specified in the normal-type and normal-dot elements.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute(@"If the type associated with the number in the normal-notes element is different than the current note type (e.g., a quarter note within an eighth note triplet), then the normal-notes type (e.g. eighth) is specified in the normal-type and normal-dot elements.")]
        [System.Xml.Serialization.XmlElementAttribute("normal-type")]
        public NoteTypeValue NormalType { get; set; }

        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the NormalType property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool NormalTypeSpecified { get; set; }

        [System.Xml.Serialization.XmlIgnoreAttribute()]
        private System.Collections.ObjectModel.Collection<Empty> _normalDot;

        /// <summary>
        /// <para>The normal-dot element is used to specify dotted normal tuplet types.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("The normal-dot element is used to specify dotted normal tuplet types.")]
        [System.Xml.Serialization.XmlElementAttribute("normal-dot")]
        public System.Collections.ObjectModel.Collection<Empty> NormalDot
        {
            get
            {
                return _normalDot;
            }
            private set
            {
                _normalDot = value;
            }
        }

        /// <summary>
        /// <para xml:lang="en">Gets a value indicating whether the NormalDot collection is empty.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool NormalDotSpecified
        {
            get
            {
                return (this.NormalDot.Count != 0);
            }
        }

        /// <summary>
        /// <para xml:lang="en">Initializes a new instance of the <see cref="TimeModification" /> class.</para>
        /// </summary>
        public TimeModification()
        {
            this._normalDot = new System.Collections.ObjectModel.Collection<Empty>();
        }
    }

    /// <summary>
    /// <para>The octave shift type indicates where notes are shifted up or down from their true pitched values because of printing difficulty. Thus a treble clef line noted with 8va will be indicated with an octave-shift down from the pitch data indicated in the notes. A size of 8 indicates one octave; a size of 15 indicates two octaves.</para>
    /// </summary>
    [System.ComponentModel.DescriptionAttribute(@"The octave shift type indicates where notes are shifted up or down from their true pitched values because of printing difficulty. Thus a treble clef line noted with 8va will be indicated with an octave-shift down from the pitch data indicated in the notes. A size of 8 indicates one octave; a size of 15 indicates two octaves.")]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XmlSchemaClassGenerator", "2.1.1142.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute("octave-shift", Namespace="")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class OctaveShift : IDashedFormatting, IPrintStyle, IOptionalUniqueId
    {

        [System.ComponentModel.DataAnnotations.RequiredAttribute(AllowEmptyStrings=true)]
        [System.Xml.Serialization.XmlAttributeAttribute("type")]
        public UpDownStopContinue Type { get; set; }

        /// <summary>
        /// <para>Slurs, tuplets, and many other features can be concurrent and overlap within a single musical part. The number-level entity distinguishes up to 16 concurrent objects of the same type when the objects overlap in MusicXML document order. Values greater than 6 are usually only needed for music with a large number of divisi staves in a single part, or if there are more than 6 cross-staff arpeggios in a single measure. When a number-level value is implied, the value is 1 by default.
        ///
        ///When polyphonic parts are involved, the ordering within a MusicXML document can differ from musical score order. As an example, say we have a piano part in 4/4 where within a single measure, all the notes on the top staff are followed by all the notes on the bottom staff. In this example, each staff has a slur that starts on beat 2 and stops on beat 3, and there is a third slur that goes from beat 1 of one staff to beat 4 of the other staff.
        ///
        ///In this situation, the two mid-measure slurs can use the same number because they do not overlap in MusicXML document order, even though they do overlap in musical score order. Within the MusicXML document, the top staff slur will both start and stop before the bottom staff slur starts and stops.
        ///
        ///If the cross-staff slur starts in the top staff and stops in the bottom staff, it will need a separate number from the mid-measure slurs because it overlaps those slurs in MusicXML document order. However, if the cross-staff slur starts in the bottom staff and stops in the top staff, all three slurs can use the same number. None of them overlap within the MusicXML document, even though they all overlap each other in the musical score order. Within the MusicXML document, the start and stop of the top-staff slur will be followed by the stop and start of the cross-staff slur, followed by the start and stop of the bottom-staff slur.
        ///
        ///As this example demonstrates, a reading program should be prepared to handle cases where the number-levels start and stop in an arbitrary order. Because the start and stop values refer to musical score order, a program may find the stopping point of an object earlier in the MusicXML document than it will find its starting point.</para>
        /// <para xml:lang="en">Minimum inclusive value: 1.</para>
        /// <para xml:lang="en">Maximum inclusive value: 16.</para>
        /// </summary>
        [System.ComponentModel.DataAnnotations.RangeAttribute(typeof(decimal), "1", "16")]
        [System.Xml.Serialization.XmlAttributeAttribute("number")]
        public byte Number { get; set; }

        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the Number property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool NumberSpecified { get; set; }

        [System.Xml.Serialization.XmlIgnoreAttribute()]
        private string _size = "8";

        [System.ComponentModel.DefaultValueAttribute("8")]
        [System.Xml.Serialization.XmlAttributeAttribute("size")]
        public string Size
        {
            get
            {
                return _size;
            }
            set
            {
                _size = value;
            }
        }

        /// <summary>
        /// <para>The tenths type is a number representing tenths of interline staff space (positive or negative). Both integer and decimal values are allowed, such as 5 for a half space and 2.5 for a quarter space. Interline space is measured from the middle of a staff line.
        ///
        ///Distances in a MusicXML file are measured in tenths of staff space. Tenths are then scaled to millimeters within the scaling element, used in the defaults element at the start of a score. Individual staves can apply a scaling factor to adjust staff size. When a MusicXML element or attribute refers to tenths, it means the global tenths defined by the scaling element, not the local tenths as adjusted by the staff-size element.</para>
        /// </summary>
        [System.Xml.Serialization.XmlAttributeAttribute("dash-length")]
        public decimal DashLength { get; set; }

        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the DashLength property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool DashLengthSpecified { get; set; }

        /// <summary>
        /// <para>The tenths type is a number representing tenths of interline staff space (positive or negative). Both integer and decimal values are allowed, such as 5 for a half space and 2.5 for a quarter space. Interline space is measured from the middle of a staff line.
        ///
        ///Distances in a MusicXML file are measured in tenths of staff space. Tenths are then scaled to millimeters within the scaling element, used in the defaults element at the start of a score. Individual staves can apply a scaling factor to adjust staff size. When a MusicXML element or attribute refers to tenths, it means the global tenths defined by the scaling element, not the local tenths as adjusted by the staff-size element.</para>
        /// </summary>
        [System.Xml.Serialization.XmlAttributeAttribute("space-length")]
        public decimal SpaceLength { get; set; }

        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the SpaceLength property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool SpaceLengthSpecified { get; set; }

        /// <summary>
        /// <para>The tenths type is a number representing tenths of interline staff space (positive or negative). Both integer and decimal values are allowed, such as 5 for a half space and 2.5 for a quarter space. Interline space is measured from the middle of a staff line.
        ///
        ///Distances in a MusicXML file are measured in tenths of staff space. Tenths are then scaled to millimeters within the scaling element, used in the defaults element at the start of a score. Individual staves can apply a scaling factor to adjust staff size. When a MusicXML element or attribute refers to tenths, it means the global tenths defined by the scaling element, not the local tenths as adjusted by the staff-size element.</para>
        /// </summary>
        [System.Xml.Serialization.XmlAttributeAttribute("default-x")]
        public decimal DefaultX { get; set; }

        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the DefaultX property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool DefaultXSpecified { get; set; }

        /// <summary>
        /// <para>The tenths type is a number representing tenths of interline staff space (positive or negative). Both integer and decimal values are allowed, such as 5 for a half space and 2.5 for a quarter space. Interline space is measured from the middle of a staff line.
        ///
        ///Distances in a MusicXML file are measured in tenths of staff space. Tenths are then scaled to millimeters within the scaling element, used in the defaults element at the start of a score. Individual staves can apply a scaling factor to adjust staff size. When a MusicXML element or attribute refers to tenths, it means the global tenths defined by the scaling element, not the local tenths as adjusted by the staff-size element.</para>
        /// </summary>
        [System.Xml.Serialization.XmlAttributeAttribute("default-y")]
        public decimal DefaultY { get; set; }

        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the DefaultY property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool DefaultYSpecified { get; set; }

        /// <summary>
        /// <para>The tenths type is a number representing tenths of interline staff space (positive or negative). Both integer and decimal values are allowed, such as 5 for a half space and 2.5 for a quarter space. Interline space is measured from the middle of a staff line.
        ///
        ///Distances in a MusicXML file are measured in tenths of staff space. Tenths are then scaled to millimeters within the scaling element, used in the defaults element at the start of a score. Individual staves can apply a scaling factor to adjust staff size. When a MusicXML element or attribute refers to tenths, it means the global tenths defined by the scaling element, not the local tenths as adjusted by the staff-size element.</para>
        /// </summary>
        [System.Xml.Serialization.XmlAttributeAttribute("relative-x")]
        public decimal RelativeX { get; set; }

        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the RelativeX property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool RelativeXSpecified { get; set; }

        /// <summary>
        /// <para>The tenths type is a number representing tenths of interline staff space (positive or negative). Both integer and decimal values are allowed, such as 5 for a half space and 2.5 for a quarter space. Interline space is measured from the middle of a staff line.
        ///
        ///Distances in a MusicXML file are measured in tenths of staff space. Tenths are then scaled to millimeters within the scaling element, used in the defaults element at the start of a score. Individual staves can apply a scaling factor to adjust staff size. When a MusicXML element or attribute refers to tenths, it means the global tenths defined by the scaling element, not the local tenths as adjusted by the staff-size element.</para>
        /// </summary>
        [System.Xml.Serialization.XmlAttributeAttribute("relative-y")]
        public decimal RelativeY { get; set; }

        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the RelativeY property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool RelativeYSpecified { get; set; }

        /// <summary>
        /// <para>The font-family is a comma-separated list of font names. These can be specific font styles such as Maestro or Opus, or one of several generic font styles: music, engraved, handwritten, text, serif, sans-serif, handwritten, cursive, fantasy, and monospace. The music, engraved, and handwritten values refer to music fonts; the rest refer to text fonts. The fantasy style refers to decorative text such as found in older German-style printing.</para>
        /// <para xml:lang="en">Pattern: [^,]+(, ?[^,]+)*.</para>
        /// </summary>
        [System.ComponentModel.DataAnnotations.RegularExpressionAttribute("[^,]+(, ?[^,]+)*")]
        [System.Xml.Serialization.XmlAttributeAttribute("font-family")]
        public string FontFamily { get; set; }

        [System.Xml.Serialization.XmlAttributeAttribute("font-style")]
        public FontStyle FontStyle { get; set; }

        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the FontStyle property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool FontStyleSpecified { get; set; }

        /// <summary>
        /// <para>The font-size can be one of the CSS font sizes (xx-small, x-small, small, medium, large, x-large, xx-large) or a numeric point size.</para>
        /// </summary>
        [System.Xml.Serialization.XmlAttributeAttribute("font-size")]
        public string FontSize { get; set; }

        [System.Xml.Serialization.XmlAttributeAttribute("font-weight")]
        public FontWeight FontWeight { get; set; }

        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the FontWeight property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool FontWeightSpecified { get; set; }

        /// <summary>
        /// <para>The color type indicates the color of an element. Color may be represented as hexadecimal RGB triples, as in HTML, or as hexadecimal ARGB tuples, with the A indicating alpha of transparency. An alpha value of 00 is totally transparent; FF is totally opaque. If RGB is used, the A value is assumed to be FF.
        ///
        ///For instance, the RGB value "#800080" represents purple. An ARGB value of "#40800080" would be a transparent purple.
        ///
        ///As in SVG 1.1, colors are defined in terms of the sRGB color space (IEC 61966).</para>
        /// <para xml:lang="en">Pattern: #[\dA-F]{6}([\dA-F][\dA-F])?.</para>
        /// </summary>
        [System.ComponentModel.DataAnnotations.RegularExpressionAttribute("#[\\dA-F]{6}([\\dA-F][\\dA-F])?")]
        [System.Xml.Serialization.XmlAttributeAttribute("color")]
        public string Color { get; set; }

        [System.Xml.Serialization.XmlAttributeAttribute("id")]
        public string Id { get; set; }
    }

    /// <summary>
    /// <para>The harp-pedals type is used to create harp pedal diagrams. The pedal-step and pedal-alter elements use the same values as the step and alter elements. For easiest reading, the pedal-tuning elements should follow standard harp pedal order, with pedal-step values of D, C, B, E, F, G, and A.</para>
    /// </summary>
    [System.ComponentModel.DescriptionAttribute(@"The harp-pedals type is used to create harp pedal diagrams. The pedal-step and pedal-alter elements use the same values as the step and alter elements. For easiest reading, the pedal-tuning elements should follow standard harp pedal order, with pedal-step values of D, C, B, E, F, G, and A.")]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XmlSchemaClassGenerator", "2.1.1142.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute("harp-pedals", Namespace="")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class HarpPedals : IPrintStyleAlign, IOptionalUniqueId
    {

        [System.Xml.Serialization.XmlIgnoreAttribute()]
        private System.Collections.ObjectModel.Collection<PedalTuning> _pedalTuning;

        [System.ComponentModel.DataAnnotations.RequiredAttribute(AllowEmptyStrings=true)]
        [System.Xml.Serialization.XmlElementAttribute("pedal-tuning")]
        public System.Collections.ObjectModel.Collection<PedalTuning> PedalTuning
        {
            get
            {
                return _pedalTuning;
            }
            private set
            {
                _pedalTuning = value;
            }
        }

        /// <summary>
        /// <para xml:lang="en">Initializes a new instance of the <see cref="HarpPedals" /> class.</para>
        /// </summary>
        public HarpPedals()
        {
            this._pedalTuning = new System.Collections.ObjectModel.Collection<PedalTuning>();
        }

        /// <summary>
        /// <para>The tenths type is a number representing tenths of interline staff space (positive or negative). Both integer and decimal values are allowed, such as 5 for a half space and 2.5 for a quarter space. Interline space is measured from the middle of a staff line.
        ///
        ///Distances in a MusicXML file are measured in tenths of staff space. Tenths are then scaled to millimeters within the scaling element, used in the defaults element at the start of a score. Individual staves can apply a scaling factor to adjust staff size. When a MusicXML element or attribute refers to tenths, it means the global tenths defined by the scaling element, not the local tenths as adjusted by the staff-size element.</para>
        /// </summary>
        [System.Xml.Serialization.XmlAttributeAttribute("default-x")]
        public decimal DefaultX { get; set; }

        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the DefaultX property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool DefaultXSpecified { get; set; }

        /// <summary>
        /// <para>The tenths type is a number representing tenths of interline staff space (positive or negative). Both integer and decimal values are allowed, such as 5 for a half space and 2.5 for a quarter space. Interline space is measured from the middle of a staff line.
        ///
        ///Distances in a MusicXML file are measured in tenths of staff space. Tenths are then scaled to millimeters within the scaling element, used in the defaults element at the start of a score. Individual staves can apply a scaling factor to adjust staff size. When a MusicXML element or attribute refers to tenths, it means the global tenths defined by the scaling element, not the local tenths as adjusted by the staff-size element.</para>
        /// </summary>
        [System.Xml.Serialization.XmlAttributeAttribute("default-y")]
        public decimal DefaultY { get; set; }

        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the DefaultY property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool DefaultYSpecified { get; set; }

        /// <summary>
        /// <para>The tenths type is a number representing tenths of interline staff space (positive or negative). Both integer and decimal values are allowed, such as 5 for a half space and 2.5 for a quarter space. Interline space is measured from the middle of a staff line.
        ///
        ///Distances in a MusicXML file are measured in tenths of staff space. Tenths are then scaled to millimeters within the scaling element, used in the defaults element at the start of a score. Individual staves can apply a scaling factor to adjust staff size. When a MusicXML element or attribute refers to tenths, it means the global tenths defined by the scaling element, not the local tenths as adjusted by the staff-size element.</para>
        /// </summary>
        [System.Xml.Serialization.XmlAttributeAttribute("relative-x")]
        public decimal RelativeX { get; set; }

        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the RelativeX property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool RelativeXSpecified { get; set; }

        /// <summary>
        /// <para>The tenths type is a number representing tenths of interline staff space (positive or negative). Both integer and decimal values are allowed, such as 5 for a half space and 2.5 for a quarter space. Interline space is measured from the middle of a staff line.
        ///
        ///Distances in a MusicXML file are measured in tenths of staff space. Tenths are then scaled to millimeters within the scaling element, used in the defaults element at the start of a score. Individual staves can apply a scaling factor to adjust staff size. When a MusicXML element or attribute refers to tenths, it means the global tenths defined by the scaling element, not the local tenths as adjusted by the staff-size element.</para>
        /// </summary>
        [System.Xml.Serialization.XmlAttributeAttribute("relative-y")]
        public decimal RelativeY { get; set; }

        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the RelativeY property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool RelativeYSpecified { get; set; }

        /// <summary>
        /// <para>The font-family is a comma-separated list of font names. These can be specific font styles such as Maestro or Opus, or one of several generic font styles: music, engraved, handwritten, text, serif, sans-serif, handwritten, cursive, fantasy, and monospace. The music, engraved, and handwritten values refer to music fonts; the rest refer to text fonts. The fantasy style refers to decorative text such as found in older German-style printing.</para>
        /// <para xml:lang="en">Pattern: [^,]+(, ?[^,]+)*.</para>
        /// </summary>
        [System.ComponentModel.DataAnnotations.RegularExpressionAttribute("[^,]+(, ?[^,]+)*")]
        [System.Xml.Serialization.XmlAttributeAttribute("font-family")]
        public string FontFamily { get; set; }

        [System.Xml.Serialization.XmlAttributeAttribute("font-style")]
        public FontStyle FontStyle { get; set; }

        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the FontStyle property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool FontStyleSpecified { get; set; }

        /// <summary>
        /// <para>The font-size can be one of the CSS font sizes (xx-small, x-small, small, medium, large, x-large, xx-large) or a numeric point size.</para>
        /// </summary>
        [System.Xml.Serialization.XmlAttributeAttribute("font-size")]
        public string FontSize { get; set; }

        [System.Xml.Serialization.XmlAttributeAttribute("font-weight")]
        public FontWeight FontWeight { get; set; }

        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the FontWeight property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool FontWeightSpecified { get; set; }

        /// <summary>
        /// <para>The color type indicates the color of an element. Color may be represented as hexadecimal RGB triples, as in HTML, or as hexadecimal ARGB tuples, with the A indicating alpha of transparency. An alpha value of 00 is totally transparent; FF is totally opaque. If RGB is used, the A value is assumed to be FF.
        ///
        ///For instance, the RGB value "#800080" represents purple. An ARGB value of "#40800080" would be a transparent purple.
        ///
        ///As in SVG 1.1, colors are defined in terms of the sRGB color space (IEC 61966).</para>
        /// <para xml:lang="en">Pattern: #[\dA-F]{6}([\dA-F][\dA-F])?.</para>
        /// </summary>
        [System.ComponentModel.DataAnnotations.RegularExpressionAttribute("#[\\dA-F]{6}([\\dA-F][\\dA-F])?")]
        [System.Xml.Serialization.XmlAttributeAttribute("color")]
        public string Color { get; set; }

        [System.Xml.Serialization.XmlAttributeAttribute("halign")]
        public LeftCenterRight Halign { get; set; }

        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the Halign property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool HalignSpecified { get; set; }

        [System.Xml.Serialization.XmlAttributeAttribute("valign")]
        public Valign Valign { get; set; }

        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the Valign property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool ValignSpecified { get; set; }

        [System.Xml.Serialization.XmlAttributeAttribute("id")]
        public string Id { get; set; }
    }

    /// <summary>
    /// <para>The pedal-tuning type specifies the tuning of a single harp pedal.</para>
    /// </summary>
    [System.ComponentModel.DescriptionAttribute("The pedal-tuning type specifies the tuning of a single harp pedal.")]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XmlSchemaClassGenerator", "2.1.1142.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute("pedal-tuning", Namespace="")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class PedalTuning
    {

        /// <summary>
        /// <para>The pedal-step element defines the pitch step for a single harp pedal.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("The pedal-step element defines the pitch step for a single harp pedal.")]
        [System.ComponentModel.DataAnnotations.RequiredAttribute(AllowEmptyStrings=true)]
        [System.Xml.Serialization.XmlElementAttribute("pedal-step")]
        public Step PedalStep { get; set; }

        /// <summary>
        /// <para>The pedal-alter element defines the chromatic alteration for a single harp pedal.</para>
        /// <para>The semitones type is a number representing semitones, used for chromatic alteration. A value of -1 corresponds to a flat and a value of 1 to a sharp. Decimal values like 0.5 (quarter tone sharp) are used for microtones.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("The pedal-alter element defines the chromatic alteration for a single harp pedal." +
            "")]
        [System.ComponentModel.DataAnnotations.RequiredAttribute(AllowEmptyStrings=true)]
        [System.Xml.Serialization.XmlElementAttribute("pedal-alter")]
        public decimal PedalAlter { get; set; }
    }

    /// <summary>
    /// <para>The string-mute type represents string mute on and mute off symbols.</para>
    /// </summary>
    [System.ComponentModel.DescriptionAttribute("The string-mute type represents string mute on and mute off symbols.")]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XmlSchemaClassGenerator", "2.1.1142.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute("string-mute", Namespace="")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class StringMute : IPrintStyleAlign, IOptionalUniqueId
    {

        [System.ComponentModel.DataAnnotations.RequiredAttribute(AllowEmptyStrings=true)]
        [System.Xml.Serialization.XmlAttributeAttribute("type")]
        public OnOff Type { get; set; }

        /// <summary>
        /// <para>The tenths type is a number representing tenths of interline staff space (positive or negative). Both integer and decimal values are allowed, such as 5 for a half space and 2.5 for a quarter space. Interline space is measured from the middle of a staff line.
        ///
        ///Distances in a MusicXML file are measured in tenths of staff space. Tenths are then scaled to millimeters within the scaling element, used in the defaults element at the start of a score. Individual staves can apply a scaling factor to adjust staff size. When a MusicXML element or attribute refers to tenths, it means the global tenths defined by the scaling element, not the local tenths as adjusted by the staff-size element.</para>
        /// </summary>
        [System.Xml.Serialization.XmlAttributeAttribute("default-x")]
        public decimal DefaultX { get; set; }

        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the DefaultX property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool DefaultXSpecified { get; set; }

        /// <summary>
        /// <para>The tenths type is a number representing tenths of interline staff space (positive or negative). Both integer and decimal values are allowed, such as 5 for a half space and 2.5 for a quarter space. Interline space is measured from the middle of a staff line.
        ///
        ///Distances in a MusicXML file are measured in tenths of staff space. Tenths are then scaled to millimeters within the scaling element, used in the defaults element at the start of a score. Individual staves can apply a scaling factor to adjust staff size. When a MusicXML element or attribute refers to tenths, it means the global tenths defined by the scaling element, not the local tenths as adjusted by the staff-size element.</para>
        /// </summary>
        [System.Xml.Serialization.XmlAttributeAttribute("default-y")]
        public decimal DefaultY { get; set; }

        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the DefaultY property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool DefaultYSpecified { get; set; }

        /// <summary>
        /// <para>The tenths type is a number representing tenths of interline staff space (positive or negative). Both integer and decimal values are allowed, such as 5 for a half space and 2.5 for a quarter space. Interline space is measured from the middle of a staff line.
        ///
        ///Distances in a MusicXML file are measured in tenths of staff space. Tenths are then scaled to millimeters within the scaling element, used in the defaults element at the start of a score. Individual staves can apply a scaling factor to adjust staff size. When a MusicXML element or attribute refers to tenths, it means the global tenths defined by the scaling element, not the local tenths as adjusted by the staff-size element.</para>
        /// </summary>
        [System.Xml.Serialization.XmlAttributeAttribute("relative-x")]
        public decimal RelativeX { get; set; }

        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the RelativeX property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool RelativeXSpecified { get; set; }

        /// <summary>
        /// <para>The tenths type is a number representing tenths of interline staff space (positive or negative). Both integer and decimal values are allowed, such as 5 for a half space and 2.5 for a quarter space. Interline space is measured from the middle of a staff line.
        ///
        ///Distances in a MusicXML file are measured in tenths of staff space. Tenths are then scaled to millimeters within the scaling element, used in the defaults element at the start of a score. Individual staves can apply a scaling factor to adjust staff size. When a MusicXML element or attribute refers to tenths, it means the global tenths defined by the scaling element, not the local tenths as adjusted by the staff-size element.</para>
        /// </summary>
        [System.Xml.Serialization.XmlAttributeAttribute("relative-y")]
        public decimal RelativeY { get; set; }

        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the RelativeY property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool RelativeYSpecified { get; set; }

        /// <summary>
        /// <para>The font-family is a comma-separated list of font names. These can be specific font styles such as Maestro or Opus, or one of several generic font styles: music, engraved, handwritten, text, serif, sans-serif, handwritten, cursive, fantasy, and monospace. The music, engraved, and handwritten values refer to music fonts; the rest refer to text fonts. The fantasy style refers to decorative text such as found in older German-style printing.</para>
        /// <para xml:lang="en">Pattern: [^,]+(, ?[^,]+)*.</para>
        /// </summary>
        [System.ComponentModel.DataAnnotations.RegularExpressionAttribute("[^,]+(, ?[^,]+)*")]
        [System.Xml.Serialization.XmlAttributeAttribute("font-family")]
        public string FontFamily { get; set; }

        [System.Xml.Serialization.XmlAttributeAttribute("font-style")]
        public FontStyle FontStyle { get; set; }

        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the FontStyle property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool FontStyleSpecified { get; set; }

        /// <summary>
        /// <para>The font-size can be one of the CSS font sizes (xx-small, x-small, small, medium, large, x-large, xx-large) or a numeric point size.</para>
        /// </summary>
        [System.Xml.Serialization.XmlAttributeAttribute("font-size")]
        public string FontSize { get; set; }

        [System.Xml.Serialization.XmlAttributeAttribute("font-weight")]
        public FontWeight FontWeight { get; set; }

        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the FontWeight property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool FontWeightSpecified { get; set; }

        /// <summary>
        /// <para>The color type indicates the color of an element. Color may be represented as hexadecimal RGB triples, as in HTML, or as hexadecimal ARGB tuples, with the A indicating alpha of transparency. An alpha value of 00 is totally transparent; FF is totally opaque. If RGB is used, the A value is assumed to be FF.
        ///
        ///For instance, the RGB value "#800080" represents purple. An ARGB value of "#40800080" would be a transparent purple.
        ///
        ///As in SVG 1.1, colors are defined in terms of the sRGB color space (IEC 61966).</para>
        /// <para xml:lang="en">Pattern: #[\dA-F]{6}([\dA-F][\dA-F])?.</para>
        /// </summary>
        [System.ComponentModel.DataAnnotations.RegularExpressionAttribute("#[\\dA-F]{6}([\\dA-F][\\dA-F])?")]
        [System.Xml.Serialization.XmlAttributeAttribute("color")]
        public string Color { get; set; }

        [System.Xml.Serialization.XmlAttributeAttribute("halign")]
        public LeftCenterRight Halign { get; set; }

        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the Halign property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool HalignSpecified { get; set; }

        [System.Xml.Serialization.XmlAttributeAttribute("valign")]
        public Valign Valign { get; set; }

        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the Valign property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool ValignSpecified { get; set; }

        [System.Xml.Serialization.XmlAttributeAttribute("id")]
        public string Id { get; set; }
    }

    /// <summary>
    /// <para>Scordatura string tunings are represented by a series of accord elements, similar to the staff-tuning elements. Strings are numbered from high to low.</para>
    /// </summary>
    [System.ComponentModel.DescriptionAttribute("Scordatura string tunings are represented by a series of accord elements, similar" +
        " to the staff-tuning elements. Strings are numbered from high to low.")]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XmlSchemaClassGenerator", "2.1.1142.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute("scordatura", Namespace="")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class Scordatura : IOptionalUniqueId
    {

        [System.Xml.Serialization.XmlIgnoreAttribute()]
        private System.Collections.ObjectModel.Collection<Accord> _accord;

        [System.ComponentModel.DataAnnotations.RequiredAttribute(AllowEmptyStrings=true)]
        [System.Xml.Serialization.XmlElementAttribute("accord")]
        public System.Collections.ObjectModel.Collection<Accord> Accord
        {
            get
            {
                return _accord;
            }
            private set
            {
                _accord = value;
            }
        }

        /// <summary>
        /// <para xml:lang="en">Initializes a new instance of the <see cref="Scordatura" /> class.</para>
        /// </summary>
        public Scordatura()
        {
            this._accord = new System.Collections.ObjectModel.Collection<Accord>();
        }

        [System.Xml.Serialization.XmlAttributeAttribute("id")]
        public string Id { get; set; }
    }

    /// <summary>
    /// <para>The image type is used to include graphical images in a score.</para>
    /// </summary>
    [System.ComponentModel.DescriptionAttribute("The image type is used to include graphical images in a score.")]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XmlSchemaClassGenerator", "2.1.1142.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute("image", Namespace="")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class Image : IImageAttributes, IOptionalUniqueId
    {

        [System.ComponentModel.DataAnnotations.RequiredAttribute(AllowEmptyStrings=true)]
        [System.Xml.Serialization.XmlAttributeAttribute("source")]
        public string Source { get; set; }

        [System.ComponentModel.DataAnnotations.RequiredAttribute(AllowEmptyStrings=true)]
        [System.Xml.Serialization.XmlAttributeAttribute("type")]
        public string Type { get; set; }

        /// <summary>
        /// <para>The tenths type is a number representing tenths of interline staff space (positive or negative). Both integer and decimal values are allowed, such as 5 for a half space and 2.5 for a quarter space. Interline space is measured from the middle of a staff line.
        ///
        ///Distances in a MusicXML file are measured in tenths of staff space. Tenths are then scaled to millimeters within the scaling element, used in the defaults element at the start of a score. Individual staves can apply a scaling factor to adjust staff size. When a MusicXML element or attribute refers to tenths, it means the global tenths defined by the scaling element, not the local tenths as adjusted by the staff-size element.</para>
        /// </summary>
        [System.Xml.Serialization.XmlAttributeAttribute("height")]
        public decimal Height { get; set; }

        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the Height property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool HeightSpecified { get; set; }

        /// <summary>
        /// <para>The tenths type is a number representing tenths of interline staff space (positive or negative). Both integer and decimal values are allowed, such as 5 for a half space and 2.5 for a quarter space. Interline space is measured from the middle of a staff line.
        ///
        ///Distances in a MusicXML file are measured in tenths of staff space. Tenths are then scaled to millimeters within the scaling element, used in the defaults element at the start of a score. Individual staves can apply a scaling factor to adjust staff size. When a MusicXML element or attribute refers to tenths, it means the global tenths defined by the scaling element, not the local tenths as adjusted by the staff-size element.</para>
        /// </summary>
        [System.Xml.Serialization.XmlAttributeAttribute("width")]
        public decimal Width { get; set; }

        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the Width property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool WidthSpecified { get; set; }

        /// <summary>
        /// <para>The tenths type is a number representing tenths of interline staff space (positive or negative). Both integer and decimal values are allowed, such as 5 for a half space and 2.5 for a quarter space. Interline space is measured from the middle of a staff line.
        ///
        ///Distances in a MusicXML file are measured in tenths of staff space. Tenths are then scaled to millimeters within the scaling element, used in the defaults element at the start of a score. Individual staves can apply a scaling factor to adjust staff size. When a MusicXML element or attribute refers to tenths, it means the global tenths defined by the scaling element, not the local tenths as adjusted by the staff-size element.</para>
        /// </summary>
        [System.Xml.Serialization.XmlAttributeAttribute("default-x")]
        public decimal DefaultX { get; set; }

        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the DefaultX property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool DefaultXSpecified { get; set; }

        /// <summary>
        /// <para>The tenths type is a number representing tenths of interline staff space (positive or negative). Both integer and decimal values are allowed, such as 5 for a half space and 2.5 for a quarter space. Interline space is measured from the middle of a staff line.
        ///
        ///Distances in a MusicXML file are measured in tenths of staff space. Tenths are then scaled to millimeters within the scaling element, used in the defaults element at the start of a score. Individual staves can apply a scaling factor to adjust staff size. When a MusicXML element or attribute refers to tenths, it means the global tenths defined by the scaling element, not the local tenths as adjusted by the staff-size element.</para>
        /// </summary>
        [System.Xml.Serialization.XmlAttributeAttribute("default-y")]
        public decimal DefaultY { get; set; }

        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the DefaultY property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool DefaultYSpecified { get; set; }

        /// <summary>
        /// <para>The tenths type is a number representing tenths of interline staff space (positive or negative). Both integer and decimal values are allowed, such as 5 for a half space and 2.5 for a quarter space. Interline space is measured from the middle of a staff line.
        ///
        ///Distances in a MusicXML file are measured in tenths of staff space. Tenths are then scaled to millimeters within the scaling element, used in the defaults element at the start of a score. Individual staves can apply a scaling factor to adjust staff size. When a MusicXML element or attribute refers to tenths, it means the global tenths defined by the scaling element, not the local tenths as adjusted by the staff-size element.</para>
        /// </summary>
        [System.Xml.Serialization.XmlAttributeAttribute("relative-x")]
        public decimal RelativeX { get; set; }

        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the RelativeX property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool RelativeXSpecified { get; set; }

        /// <summary>
        /// <para>The tenths type is a number representing tenths of interline staff space (positive or negative). Both integer and decimal values are allowed, such as 5 for a half space and 2.5 for a quarter space. Interline space is measured from the middle of a staff line.
        ///
        ///Distances in a MusicXML file are measured in tenths of staff space. Tenths are then scaled to millimeters within the scaling element, used in the defaults element at the start of a score. Individual staves can apply a scaling factor to adjust staff size. When a MusicXML element or attribute refers to tenths, it means the global tenths defined by the scaling element, not the local tenths as adjusted by the staff-size element.</para>
        /// </summary>
        [System.Xml.Serialization.XmlAttributeAttribute("relative-y")]
        public decimal RelativeY { get; set; }

        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the RelativeY property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool RelativeYSpecified { get; set; }

        [System.Xml.Serialization.XmlAttributeAttribute("halign")]
        public LeftCenterRight Halign { get; set; }

        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the Halign property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool HalignSpecified { get; set; }

        [System.Xml.Serialization.XmlAttributeAttribute("valign")]
        public ValignImage Valign { get; set; }

        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the Valign property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool ValignSpecified { get; set; }

        [System.Xml.Serialization.XmlAttributeAttribute("id")]
        public string Id { get; set; }
    }

    /// <summary>
    /// <para>The image-attributes group is used to include graphical images in a score. The required source attribute is the URL for the image file. The required type attribute is the MIME type for the image file format. Typical choices include application/postscript, image/gif, image/jpeg, image/png, and image/tiff. The optional height and width attributes are used to size and scale an image. The image should be scaled independently in X and Y if both height and width are specified. If only one attribute is specified, the image should be scaled proportionally to fit in the specified dimension.</para>
    /// </summary>
    [System.ComponentModel.DescriptionAttribute(@"The image-attributes group is used to include graphical images in a score. The required source attribute is the URL for the image file. The required type attribute is the MIME type for the image file format. Typical choices include application/postscript, image/gif, image/jpeg, image/png, and image/tiff. The optional height and width attributes are used to size and scale an image. The image should be scaled independently in X and Y if both height and width are specified. If only one attribute is specified, the image should be scaled proportionally to fit in the specified dimension.")]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XmlSchemaClassGenerator", "2.1.1142.0")]
    public partial interface IImageAttributes : IPosition, IHalign, IValignImage
    {

        string Source
        {
            get;
            set;
        }

        string Type
        {
            get;
            set;
        }

        /// <summary>
        /// <para>The tenths type is a number representing tenths of interline staff space (positive or negative). Both integer and decimal values are allowed, such as 5 for a half space and 2.5 for a quarter space. Interline space is measured from the middle of a staff line.
        ///
        ///Distances in a MusicXML file are measured in tenths of staff space. Tenths are then scaled to millimeters within the scaling element, used in the defaults element at the start of a score. Individual staves can apply a scaling factor to adjust staff size. When a MusicXML element or attribute refers to tenths, it means the global tenths defined by the scaling element, not the local tenths as adjusted by the staff-size element.</para>
        /// </summary>
        decimal Height
        {
            get;
            set;
        }

        /// <summary>
        /// <para>The tenths type is a number representing tenths of interline staff space (positive or negative). Both integer and decimal values are allowed, such as 5 for a half space and 2.5 for a quarter space. Interline space is measured from the middle of a staff line.
        ///
        ///Distances in a MusicXML file are measured in tenths of staff space. Tenths are then scaled to millimeters within the scaling element, used in the defaults element at the start of a score. Individual staves can apply a scaling factor to adjust staff size. When a MusicXML element or attribute refers to tenths, it means the global tenths defined by the scaling element, not the local tenths as adjusted by the staff-size element.</para>
        /// </summary>
        decimal Width
        {
            get;
            set;
        }
    }

    /// <summary>
    /// <para>The valign-image attribute is used to indicate vertical alignment for images and graphics, so it removes the baseline value. Defaults are implementation-dependent.</para>
    /// </summary>
    [System.ComponentModel.DescriptionAttribute("The valign-image attribute is used to indicate vertical alignment for images and " +
        "graphics, so it removes the baseline value. Defaults are implementation-dependen" +
        "t.")]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XmlSchemaClassGenerator", "2.1.1142.0")]
    public partial interface IValignImage
    {

        ValignImage Valign
        {
            get;
            set;
        }
    }

    /// <summary>
    /// <para>The principal-voice type represents principal and secondary voices in a score, either for analysis or for square bracket symbols that appear in a score. The element content is used for analysis and may be any text value. The symbol attribute indicates the type of symbol used. When used for analysis separate from any printed score markings, it should be set to none. Otherwise if the type is stop it should be set to plain.</para>
    /// </summary>
    [System.ComponentModel.DescriptionAttribute(@"The principal-voice type represents principal and secondary voices in a score, either for analysis or for square bracket symbols that appear in a score. The element content is used for analysis and may be any text value. The symbol attribute indicates the type of symbol used. When used for analysis separate from any printed score markings, it should be set to none. Otherwise if the type is stop it should be set to plain.")]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XmlSchemaClassGenerator", "2.1.1142.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute("principal-voice", Namespace="")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class PrincipalVoice : IPrintStyleAlign, IOptionalUniqueId
    {

        /// <summary>
        /// <para xml:lang="en">Gets or sets the text value.</para>
        /// </summary>
        [System.Xml.Serialization.XmlTextAttribute()]
        public string Value { get; set; }

        [System.ComponentModel.DataAnnotations.RequiredAttribute(AllowEmptyStrings=true)]
        [System.Xml.Serialization.XmlAttributeAttribute("type")]
        public StartStop Type { get; set; }

        [System.ComponentModel.DataAnnotations.RequiredAttribute(AllowEmptyStrings=true)]
        [System.Xml.Serialization.XmlAttributeAttribute("symbol")]
        public PrincipalVoiceSymbol Symbol { get; set; }

        /// <summary>
        /// <para>The tenths type is a number representing tenths of interline staff space (positive or negative). Both integer and decimal values are allowed, such as 5 for a half space and 2.5 for a quarter space. Interline space is measured from the middle of a staff line.
        ///
        ///Distances in a MusicXML file are measured in tenths of staff space. Tenths are then scaled to millimeters within the scaling element, used in the defaults element at the start of a score. Individual staves can apply a scaling factor to adjust staff size. When a MusicXML element or attribute refers to tenths, it means the global tenths defined by the scaling element, not the local tenths as adjusted by the staff-size element.</para>
        /// </summary>
        [System.Xml.Serialization.XmlAttributeAttribute("default-x")]
        public decimal DefaultX { get; set; }

        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the DefaultX property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool DefaultXSpecified { get; set; }

        /// <summary>
        /// <para>The tenths type is a number representing tenths of interline staff space (positive or negative). Both integer and decimal values are allowed, such as 5 for a half space and 2.5 for a quarter space. Interline space is measured from the middle of a staff line.
        ///
        ///Distances in a MusicXML file are measured in tenths of staff space. Tenths are then scaled to millimeters within the scaling element, used in the defaults element at the start of a score. Individual staves can apply a scaling factor to adjust staff size. When a MusicXML element or attribute refers to tenths, it means the global tenths defined by the scaling element, not the local tenths as adjusted by the staff-size element.</para>
        /// </summary>
        [System.Xml.Serialization.XmlAttributeAttribute("default-y")]
        public decimal DefaultY { get; set; }

        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the DefaultY property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool DefaultYSpecified { get; set; }

        /// <summary>
        /// <para>The tenths type is a number representing tenths of interline staff space (positive or negative). Both integer and decimal values are allowed, such as 5 for a half space and 2.5 for a quarter space. Interline space is measured from the middle of a staff line.
        ///
        ///Distances in a MusicXML file are measured in tenths of staff space. Tenths are then scaled to millimeters within the scaling element, used in the defaults element at the start of a score. Individual staves can apply a scaling factor to adjust staff size. When a MusicXML element or attribute refers to tenths, it means the global tenths defined by the scaling element, not the local tenths as adjusted by the staff-size element.</para>
        /// </summary>
        [System.Xml.Serialization.XmlAttributeAttribute("relative-x")]
        public decimal RelativeX { get; set; }

        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the RelativeX property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool RelativeXSpecified { get; set; }

        /// <summary>
        /// <para>The tenths type is a number representing tenths of interline staff space (positive or negative). Both integer and decimal values are allowed, such as 5 for a half space and 2.5 for a quarter space. Interline space is measured from the middle of a staff line.
        ///
        ///Distances in a MusicXML file are measured in tenths of staff space. Tenths are then scaled to millimeters within the scaling element, used in the defaults element at the start of a score. Individual staves can apply a scaling factor to adjust staff size. When a MusicXML element or attribute refers to tenths, it means the global tenths defined by the scaling element, not the local tenths as adjusted by the staff-size element.</para>
        /// </summary>
        [System.Xml.Serialization.XmlAttributeAttribute("relative-y")]
        public decimal RelativeY { get; set; }

        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the RelativeY property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool RelativeYSpecified { get; set; }

        /// <summary>
        /// <para>The font-family is a comma-separated list of font names. These can be specific font styles such as Maestro or Opus, or one of several generic font styles: music, engraved, handwritten, text, serif, sans-serif, handwritten, cursive, fantasy, and monospace. The music, engraved, and handwritten values refer to music fonts; the rest refer to text fonts. The fantasy style refers to decorative text such as found in older German-style printing.</para>
        /// <para xml:lang="en">Pattern: [^,]+(, ?[^,]+)*.</para>
        /// </summary>
        [System.ComponentModel.DataAnnotations.RegularExpressionAttribute("[^,]+(, ?[^,]+)*")]
        [System.Xml.Serialization.XmlAttributeAttribute("font-family")]
        public string FontFamily { get; set; }

        [System.Xml.Serialization.XmlAttributeAttribute("font-style")]
        public FontStyle FontStyle { get; set; }

        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the FontStyle property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool FontStyleSpecified { get; set; }

        /// <summary>
        /// <para>The font-size can be one of the CSS font sizes (xx-small, x-small, small, medium, large, x-large, xx-large) or a numeric point size.</para>
        /// </summary>
        [System.Xml.Serialization.XmlAttributeAttribute("font-size")]
        public string FontSize { get; set; }

        [System.Xml.Serialization.XmlAttributeAttribute("font-weight")]
        public FontWeight FontWeight { get; set; }

        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the FontWeight property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool FontWeightSpecified { get; set; }

        /// <summary>
        /// <para>The color type indicates the color of an element. Color may be represented as hexadecimal RGB triples, as in HTML, or as hexadecimal ARGB tuples, with the A indicating alpha of transparency. An alpha value of 00 is totally transparent; FF is totally opaque. If RGB is used, the A value is assumed to be FF.
        ///
        ///For instance, the RGB value "#800080" represents purple. An ARGB value of "#40800080" would be a transparent purple.
        ///
        ///As in SVG 1.1, colors are defined in terms of the sRGB color space (IEC 61966).</para>
        /// <para xml:lang="en">Pattern: #[\dA-F]{6}([\dA-F][\dA-F])?.</para>
        /// </summary>
        [System.ComponentModel.DataAnnotations.RegularExpressionAttribute("#[\\dA-F]{6}([\\dA-F][\\dA-F])?")]
        [System.Xml.Serialization.XmlAttributeAttribute("color")]
        public string Color { get; set; }

        [System.Xml.Serialization.XmlAttributeAttribute("halign")]
        public LeftCenterRight Halign { get; set; }

        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the Halign property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool HalignSpecified { get; set; }

        [System.Xml.Serialization.XmlAttributeAttribute("valign")]
        public Valign Valign { get; set; }

        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the Valign property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool ValignSpecified { get; set; }

        [System.Xml.Serialization.XmlAttributeAttribute("id")]
        public string Id { get; set; }
    }

    /// <summary>
    /// <para>The percussion element is used to define percussion pictogram symbols. Definitions for these symbols can be found in Kurt Stone's "Music Notation in the Twentieth Century" on pages 206-212 and 223. Some values are added to these based on how usage has evolved in the 30 years since Stone's book was published.</para>
    /// </summary>
    [System.ComponentModel.DescriptionAttribute(@"The percussion element is used to define percussion pictogram symbols. Definitions for these symbols can be found in Kurt Stone's ""Music Notation in the Twentieth Century"" on pages 206-212 and 223. Some values are added to these based on how usage has evolved in the 30 years since Stone's book was published.")]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XmlSchemaClassGenerator", "2.1.1142.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute("percussion", Namespace="")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class Percussion : IPrintStyleAlign, IEnclosure, IOptionalUniqueId
    {

        [System.Xml.Serialization.XmlElementAttribute("glass")]
        public Glass Glass { get; set; }

        [System.Xml.Serialization.XmlElementAttribute("metal")]
        public Metal Metal { get; set; }

        [System.Xml.Serialization.XmlElementAttribute("wood")]
        public Wood Wood { get; set; }

        [System.Xml.Serialization.XmlElementAttribute("pitched")]
        public Pitched Pitched { get; set; }

        [System.Xml.Serialization.XmlElementAttribute("membrane")]
        public Membrane Membrane { get; set; }

        [System.Xml.Serialization.XmlElementAttribute("effect")]
        public Effect Effect { get; set; }

        [System.Xml.Serialization.XmlElementAttribute("timpani")]
        public Timpani Timpani { get; set; }

        [System.Xml.Serialization.XmlElementAttribute("beater")]
        public Beater Beater { get; set; }

        [System.Xml.Serialization.XmlElementAttribute("stick")]
        public Stick Stick { get; set; }

        [System.Xml.Serialization.XmlElementAttribute("stick-location")]
        public StickLocation StickLocation { get; set; }

        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the StickLocation property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool StickLocationSpecified { get; set; }

        /// <summary>
        /// <para>The other-percussion element represents percussion pictograms not defined elsewhere.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("The other-percussion element represents percussion pictograms not defined elsewhe" +
            "re.")]
        [System.Xml.Serialization.XmlElementAttribute("other-percussion")]
        public OtherText OtherPercussion { get; set; }

        /// <summary>
        /// <para>The tenths type is a number representing tenths of interline staff space (positive or negative). Both integer and decimal values are allowed, such as 5 for a half space and 2.5 for a quarter space. Interline space is measured from the middle of a staff line.
        ///
        ///Distances in a MusicXML file are measured in tenths of staff space. Tenths are then scaled to millimeters within the scaling element, used in the defaults element at the start of a score. Individual staves can apply a scaling factor to adjust staff size. When a MusicXML element or attribute refers to tenths, it means the global tenths defined by the scaling element, not the local tenths as adjusted by the staff-size element.</para>
        /// </summary>
        [System.Xml.Serialization.XmlAttributeAttribute("default-x")]
        public decimal DefaultX { get; set; }

        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the DefaultX property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool DefaultXSpecified { get; set; }

        /// <summary>
        /// <para>The tenths type is a number representing tenths of interline staff space (positive or negative). Both integer and decimal values are allowed, such as 5 for a half space and 2.5 for a quarter space. Interline space is measured from the middle of a staff line.
        ///
        ///Distances in a MusicXML file are measured in tenths of staff space. Tenths are then scaled to millimeters within the scaling element, used in the defaults element at the start of a score. Individual staves can apply a scaling factor to adjust staff size. When a MusicXML element or attribute refers to tenths, it means the global tenths defined by the scaling element, not the local tenths as adjusted by the staff-size element.</para>
        /// </summary>
        [System.Xml.Serialization.XmlAttributeAttribute("default-y")]
        public decimal DefaultY { get; set; }

        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the DefaultY property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool DefaultYSpecified { get; set; }

        /// <summary>
        /// <para>The tenths type is a number representing tenths of interline staff space (positive or negative). Both integer and decimal values are allowed, such as 5 for a half space and 2.5 for a quarter space. Interline space is measured from the middle of a staff line.
        ///
        ///Distances in a MusicXML file are measured in tenths of staff space. Tenths are then scaled to millimeters within the scaling element, used in the defaults element at the start of a score. Individual staves can apply a scaling factor to adjust staff size. When a MusicXML element or attribute refers to tenths, it means the global tenths defined by the scaling element, not the local tenths as adjusted by the staff-size element.</para>
        /// </summary>
        [System.Xml.Serialization.XmlAttributeAttribute("relative-x")]
        public decimal RelativeX { get; set; }

        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the RelativeX property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool RelativeXSpecified { get; set; }

        /// <summary>
        /// <para>The tenths type is a number representing tenths of interline staff space (positive or negative). Both integer and decimal values are allowed, such as 5 for a half space and 2.5 for a quarter space. Interline space is measured from the middle of a staff line.
        ///
        ///Distances in a MusicXML file are measured in tenths of staff space. Tenths are then scaled to millimeters within the scaling element, used in the defaults element at the start of a score. Individual staves can apply a scaling factor to adjust staff size. When a MusicXML element or attribute refers to tenths, it means the global tenths defined by the scaling element, not the local tenths as adjusted by the staff-size element.</para>
        /// </summary>
        [System.Xml.Serialization.XmlAttributeAttribute("relative-y")]
        public decimal RelativeY { get; set; }

        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the RelativeY property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool RelativeYSpecified { get; set; }

        /// <summary>
        /// <para>The font-family is a comma-separated list of font names. These can be specific font styles such as Maestro or Opus, or one of several generic font styles: music, engraved, handwritten, text, serif, sans-serif, handwritten, cursive, fantasy, and monospace. The music, engraved, and handwritten values refer to music fonts; the rest refer to text fonts. The fantasy style refers to decorative text such as found in older German-style printing.</para>
        /// <para xml:lang="en">Pattern: [^,]+(, ?[^,]+)*.</para>
        /// </summary>
        [System.ComponentModel.DataAnnotations.RegularExpressionAttribute("[^,]+(, ?[^,]+)*")]
        [System.Xml.Serialization.XmlAttributeAttribute("font-family")]
        public string FontFamily { get; set; }

        [System.Xml.Serialization.XmlAttributeAttribute("font-style")]
        public FontStyle FontStyle { get; set; }

        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the FontStyle property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool FontStyleSpecified { get; set; }

        /// <summary>
        /// <para>The font-size can be one of the CSS font sizes (xx-small, x-small, small, medium, large, x-large, xx-large) or a numeric point size.</para>
        /// </summary>
        [System.Xml.Serialization.XmlAttributeAttribute("font-size")]
        public string FontSize { get; set; }

        [System.Xml.Serialization.XmlAttributeAttribute("font-weight")]
        public FontWeight FontWeight { get; set; }

        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the FontWeight property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool FontWeightSpecified { get; set; }

        /// <summary>
        /// <para>The color type indicates the color of an element. Color may be represented as hexadecimal RGB triples, as in HTML, or as hexadecimal ARGB tuples, with the A indicating alpha of transparency. An alpha value of 00 is totally transparent; FF is totally opaque. If RGB is used, the A value is assumed to be FF.
        ///
        ///For instance, the RGB value "#800080" represents purple. An ARGB value of "#40800080" would be a transparent purple.
        ///
        ///As in SVG 1.1, colors are defined in terms of the sRGB color space (IEC 61966).</para>
        /// <para xml:lang="en">Pattern: #[\dA-F]{6}([\dA-F][\dA-F])?.</para>
        /// </summary>
        [System.ComponentModel.DataAnnotations.RegularExpressionAttribute("#[\\dA-F]{6}([\\dA-F][\\dA-F])?")]
        [System.Xml.Serialization.XmlAttributeAttribute("color")]
        public string Color { get; set; }

        [System.Xml.Serialization.XmlAttributeAttribute("halign")]
        public LeftCenterRight Halign { get; set; }

        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the Halign property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool HalignSpecified { get; set; }

        [System.Xml.Serialization.XmlAttributeAttribute("valign")]
        public Valign Valign { get; set; }

        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the Valign property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool ValignSpecified { get; set; }

        [System.Xml.Serialization.XmlAttributeAttribute("enclosure")]
        public EnclosureShape Enclosure { get; set; }

        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the Enclosure property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool EnclosureSpecified { get; set; }

        [System.Xml.Serialization.XmlAttributeAttribute("id")]
        public string Id { get; set; }
    }

    /// <summary>
    /// <para>The glass type represents pictograms for glass percussion instruments. The smufl attribute is used to distinguish different SMuFL glyphs for wind chimes in the Chimes pictograms range, including those made of materials other than glass.</para>
    /// </summary>
    [System.ComponentModel.DescriptionAttribute("The glass type represents pictograms for glass percussion instruments. The smufl " +
        "attribute is used to distinguish different SMuFL glyphs for wind chimes in the C" +
        "himes pictograms range, including those made of materials other than glass.")]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XmlSchemaClassGenerator", "2.1.1142.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute("glass", Namespace="")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class Glass
    {

        /// <summary>
        /// <para xml:lang="en">Gets or sets the text value.</para>
        /// </summary>
        [System.Xml.Serialization.XmlTextAttribute()]
        public GlassValue Value { get; set; }

        /// <summary>
        /// <para>The smufl-pictogram-glyph-name type is used to reference a specific Standard Music Font Layout (SMuFL) percussion pictogram character. The value is a SMuFL canonical glyph name that starts with pict.</para>
        /// <para xml:lang="en">Pattern: pict\c+.</para>
        /// </summary>
        [System.ComponentModel.DataAnnotations.RegularExpressionAttribute("pict\\c+")]
        [System.Xml.Serialization.XmlAttributeAttribute("smufl")]
        public string Smufl { get; set; }
    }

    /// <summary>
    /// <para>The metal type represents pictograms for metal percussion instruments. The smufl attribute is used to distinguish different SMuFL stylistic alternates.</para>
    /// </summary>
    [System.ComponentModel.DescriptionAttribute("The metal type represents pictograms for metal percussion instruments. The smufl " +
        "attribute is used to distinguish different SMuFL stylistic alternates.")]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XmlSchemaClassGenerator", "2.1.1142.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute("metal", Namespace="")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class Metal
    {

        /// <summary>
        /// <para xml:lang="en">Gets or sets the text value.</para>
        /// </summary>
        [System.Xml.Serialization.XmlTextAttribute()]
        public MetalValue Value { get; set; }

        /// <summary>
        /// <para>The smufl-pictogram-glyph-name type is used to reference a specific Standard Music Font Layout (SMuFL) percussion pictogram character. The value is a SMuFL canonical glyph name that starts with pict.</para>
        /// <para xml:lang="en">Pattern: pict\c+.</para>
        /// </summary>
        [System.ComponentModel.DataAnnotations.RegularExpressionAttribute("pict\\c+")]
        [System.Xml.Serialization.XmlAttributeAttribute("smufl")]
        public string Smufl { get; set; }
    }

    /// <summary>
    /// <para>The wood type represents pictograms for wood percussion instruments. The smufl attribute is used to distinguish different SMuFL stylistic alternates.</para>
    /// </summary>
    [System.ComponentModel.DescriptionAttribute("The wood type represents pictograms for wood percussion instruments. The smufl at" +
        "tribute is used to distinguish different SMuFL stylistic alternates.")]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XmlSchemaClassGenerator", "2.1.1142.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute("wood", Namespace="")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class Wood
    {

        /// <summary>
        /// <para xml:lang="en">Gets or sets the text value.</para>
        /// </summary>
        [System.Xml.Serialization.XmlTextAttribute()]
        public WoodValue Value { get; set; }

        /// <summary>
        /// <para>The smufl-pictogram-glyph-name type is used to reference a specific Standard Music Font Layout (SMuFL) percussion pictogram character. The value is a SMuFL canonical glyph name that starts with pict.</para>
        /// <para xml:lang="en">Pattern: pict\c+.</para>
        /// </summary>
        [System.ComponentModel.DataAnnotations.RegularExpressionAttribute("pict\\c+")]
        [System.Xml.Serialization.XmlAttributeAttribute("smufl")]
        public string Smufl { get; set; }
    }

    /// <summary>
    /// <para>The pitched-value type represents pictograms for pitched percussion instruments. The smufl attribute is used to distinguish different SMuFL glyphs for a particular pictogram within the Tuned mallet percussion pictograms range.</para>
    /// </summary>
    [System.ComponentModel.DescriptionAttribute("The pitched-value type represents pictograms for pitched percussion instruments. " +
        "The smufl attribute is used to distinguish different SMuFL glyphs for a particul" +
        "ar pictogram within the Tuned mallet percussion pictograms range.")]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XmlSchemaClassGenerator", "2.1.1142.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute("pitched", Namespace="")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class Pitched
    {

        /// <summary>
        /// <para xml:lang="en">Gets or sets the text value.</para>
        /// </summary>
        [System.Xml.Serialization.XmlTextAttribute()]
        public PitchedValue Value { get; set; }

        /// <summary>
        /// <para>The smufl-pictogram-glyph-name type is used to reference a specific Standard Music Font Layout (SMuFL) percussion pictogram character. The value is a SMuFL canonical glyph name that starts with pict.</para>
        /// <para xml:lang="en">Pattern: pict\c+.</para>
        /// </summary>
        [System.ComponentModel.DataAnnotations.RegularExpressionAttribute("pict\\c+")]
        [System.Xml.Serialization.XmlAttributeAttribute("smufl")]
        public string Smufl { get; set; }
    }

    /// <summary>
    /// <para>The membrane type represents pictograms for membrane percussion instruments. The smufl attribute is used to distinguish different SMuFL stylistic alternates.</para>
    /// </summary>
    [System.ComponentModel.DescriptionAttribute("The membrane type represents pictograms for membrane percussion instruments. The " +
        "smufl attribute is used to distinguish different SMuFL stylistic alternates.")]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XmlSchemaClassGenerator", "2.1.1142.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute("membrane", Namespace="")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class Membrane
    {

        /// <summary>
        /// <para xml:lang="en">Gets or sets the text value.</para>
        /// </summary>
        [System.Xml.Serialization.XmlTextAttribute()]
        public MembraneValue Value { get; set; }

        /// <summary>
        /// <para>The smufl-pictogram-glyph-name type is used to reference a specific Standard Music Font Layout (SMuFL) percussion pictogram character. The value is a SMuFL canonical glyph name that starts with pict.</para>
        /// <para xml:lang="en">Pattern: pict\c+.</para>
        /// </summary>
        [System.ComponentModel.DataAnnotations.RegularExpressionAttribute("pict\\c+")]
        [System.Xml.Serialization.XmlAttributeAttribute("smufl")]
        public string Smufl { get; set; }
    }

    /// <summary>
    /// <para>The effect type represents pictograms for sound effect percussion instruments. The smufl attribute is used to distinguish different SMuFL stylistic alternates.</para>
    /// </summary>
    [System.ComponentModel.DescriptionAttribute("The effect type represents pictograms for sound effect percussion instruments. Th" +
        "e smufl attribute is used to distinguish different SMuFL stylistic alternates.")]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XmlSchemaClassGenerator", "2.1.1142.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute("effect", Namespace="")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class Effect
    {

        /// <summary>
        /// <para xml:lang="en">Gets or sets the text value.</para>
        /// </summary>
        [System.Xml.Serialization.XmlTextAttribute()]
        public EffectValue Value { get; set; }

        /// <summary>
        /// <para>The smufl-pictogram-glyph-name type is used to reference a specific Standard Music Font Layout (SMuFL) percussion pictogram character. The value is a SMuFL canonical glyph name that starts with pict.</para>
        /// <para xml:lang="en">Pattern: pict\c+.</para>
        /// </summary>
        [System.ComponentModel.DataAnnotations.RegularExpressionAttribute("pict\\c+")]
        [System.Xml.Serialization.XmlAttributeAttribute("smufl")]
        public string Smufl { get; set; }
    }

    /// <summary>
    /// <para>The timpani type represents the timpani pictogram. The smufl attribute is used to distinguish different SMuFL stylistic alternates.</para>
    /// </summary>
    [System.ComponentModel.DescriptionAttribute("The timpani type represents the timpani pictogram. The smufl attribute is used to" +
        " distinguish different SMuFL stylistic alternates.")]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XmlSchemaClassGenerator", "2.1.1142.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute("timpani", Namespace="")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class Timpani
    {

        /// <summary>
        /// <para>The smufl-pictogram-glyph-name type is used to reference a specific Standard Music Font Layout (SMuFL) percussion pictogram character. The value is a SMuFL canonical glyph name that starts with pict.</para>
        /// <para xml:lang="en">Pattern: pict\c+.</para>
        /// </summary>
        [System.ComponentModel.DataAnnotations.RegularExpressionAttribute("pict\\c+")]
        [System.Xml.Serialization.XmlAttributeAttribute("smufl")]
        public string Smufl { get; set; }
    }

    /// <summary>
    /// <para>The stick type represents pictograms where the material of the stick, mallet, or beater is included.The parentheses and dashed-circle attributes indicate the presence of these marks around the round beater part of a pictogram. Values for these attributes are "no" if not present.</para>
    /// </summary>
    [System.ComponentModel.DescriptionAttribute(@"The stick type represents pictograms where the material of the stick, mallet, or beater is included.The parentheses and dashed-circle attributes indicate the presence of these marks around the round beater part of a pictogram. Values for these attributes are ""no"" if not present.")]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XmlSchemaClassGenerator", "2.1.1142.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute("stick", Namespace="")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class Stick
    {

        [System.ComponentModel.DataAnnotations.RequiredAttribute(AllowEmptyStrings=true)]
        [System.Xml.Serialization.XmlElementAttribute("stick-type")]
        public StickType StickType { get; set; }

        [System.ComponentModel.DataAnnotations.RequiredAttribute(AllowEmptyStrings=true)]
        [System.Xml.Serialization.XmlElementAttribute("stick-material")]
        public StickMaterial StickMaterial { get; set; }

        [System.Xml.Serialization.XmlAttributeAttribute("tip")]
        public TipDirection Tip { get; set; }

        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the Tip property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool TipSpecified { get; set; }

        [System.Xml.Serialization.XmlAttributeAttribute("parentheses")]
        public YesNo Parentheses { get; set; }

        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the Parentheses property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool ParenthesesSpecified { get; set; }

        [System.Xml.Serialization.XmlAttributeAttribute("dashed-circle")]
        public YesNo DashedCircle { get; set; }

        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the DashedCircle property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool DashedCircleSpecified { get; set; }
    }

    /// <summary>
    /// <para>The staff-divide element represents the staff division arrow symbols found at SMuFL code points U+E00B, U+E00C, and U+E00D.</para>
    /// </summary>
    [System.ComponentModel.DescriptionAttribute("The staff-divide element represents the staff division arrow symbols found at SMu" +
        "FL code points U+E00B, U+E00C, and U+E00D.")]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XmlSchemaClassGenerator", "2.1.1142.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute("staff-divide", Namespace="")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class StaffDivide : IPrintStyleAlign, IOptionalUniqueId
    {

        [System.ComponentModel.DataAnnotations.RequiredAttribute(AllowEmptyStrings=true)]
        [System.Xml.Serialization.XmlAttributeAttribute("type")]
        public StaffDivideSymbol Type { get; set; }

        /// <summary>
        /// <para>The tenths type is a number representing tenths of interline staff space (positive or negative). Both integer and decimal values are allowed, such as 5 for a half space and 2.5 for a quarter space. Interline space is measured from the middle of a staff line.
        ///
        ///Distances in a MusicXML file are measured in tenths of staff space. Tenths are then scaled to millimeters within the scaling element, used in the defaults element at the start of a score. Individual staves can apply a scaling factor to adjust staff size. When a MusicXML element or attribute refers to tenths, it means the global tenths defined by the scaling element, not the local tenths as adjusted by the staff-size element.</para>
        /// </summary>
        [System.Xml.Serialization.XmlAttributeAttribute("default-x")]
        public decimal DefaultX { get; set; }

        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the DefaultX property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool DefaultXSpecified { get; set; }

        /// <summary>
        /// <para>The tenths type is a number representing tenths of interline staff space (positive or negative). Both integer and decimal values are allowed, such as 5 for a half space and 2.5 for a quarter space. Interline space is measured from the middle of a staff line.
        ///
        ///Distances in a MusicXML file are measured in tenths of staff space. Tenths are then scaled to millimeters within the scaling element, used in the defaults element at the start of a score. Individual staves can apply a scaling factor to adjust staff size. When a MusicXML element or attribute refers to tenths, it means the global tenths defined by the scaling element, not the local tenths as adjusted by the staff-size element.</para>
        /// </summary>
        [System.Xml.Serialization.XmlAttributeAttribute("default-y")]
        public decimal DefaultY { get; set; }

        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the DefaultY property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool DefaultYSpecified { get; set; }

        /// <summary>
        /// <para>The tenths type is a number representing tenths of interline staff space (positive or negative). Both integer and decimal values are allowed, such as 5 for a half space and 2.5 for a quarter space. Interline space is measured from the middle of a staff line.
        ///
        ///Distances in a MusicXML file are measured in tenths of staff space. Tenths are then scaled to millimeters within the scaling element, used in the defaults element at the start of a score. Individual staves can apply a scaling factor to adjust staff size. When a MusicXML element or attribute refers to tenths, it means the global tenths defined by the scaling element, not the local tenths as adjusted by the staff-size element.</para>
        /// </summary>
        [System.Xml.Serialization.XmlAttributeAttribute("relative-x")]
        public decimal RelativeX { get; set; }

        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the RelativeX property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool RelativeXSpecified { get; set; }

        /// <summary>
        /// <para>The tenths type is a number representing tenths of interline staff space (positive or negative). Both integer and decimal values are allowed, such as 5 for a half space and 2.5 for a quarter space. Interline space is measured from the middle of a staff line.
        ///
        ///Distances in a MusicXML file are measured in tenths of staff space. Tenths are then scaled to millimeters within the scaling element, used in the defaults element at the start of a score. Individual staves can apply a scaling factor to adjust staff size. When a MusicXML element or attribute refers to tenths, it means the global tenths defined by the scaling element, not the local tenths as adjusted by the staff-size element.</para>
        /// </summary>
        [System.Xml.Serialization.XmlAttributeAttribute("relative-y")]
        public decimal RelativeY { get; set; }

        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the RelativeY property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool RelativeYSpecified { get; set; }

        /// <summary>
        /// <para>The font-family is a comma-separated list of font names. These can be specific font styles such as Maestro or Opus, or one of several generic font styles: music, engraved, handwritten, text, serif, sans-serif, handwritten, cursive, fantasy, and monospace. The music, engraved, and handwritten values refer to music fonts; the rest refer to text fonts. The fantasy style refers to decorative text such as found in older German-style printing.</para>
        /// <para xml:lang="en">Pattern: [^,]+(, ?[^,]+)*.</para>
        /// </summary>
        [System.ComponentModel.DataAnnotations.RegularExpressionAttribute("[^,]+(, ?[^,]+)*")]
        [System.Xml.Serialization.XmlAttributeAttribute("font-family")]
        public string FontFamily { get; set; }

        [System.Xml.Serialization.XmlAttributeAttribute("font-style")]
        public FontStyle FontStyle { get; set; }

        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the FontStyle property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool FontStyleSpecified { get; set; }

        /// <summary>
        /// <para>The font-size can be one of the CSS font sizes (xx-small, x-small, small, medium, large, x-large, xx-large) or a numeric point size.</para>
        /// </summary>
        [System.Xml.Serialization.XmlAttributeAttribute("font-size")]
        public string FontSize { get; set; }

        [System.Xml.Serialization.XmlAttributeAttribute("font-weight")]
        public FontWeight FontWeight { get; set; }

        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the FontWeight property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool FontWeightSpecified { get; set; }

        /// <summary>
        /// <para>The color type indicates the color of an element. Color may be represented as hexadecimal RGB triples, as in HTML, or as hexadecimal ARGB tuples, with the A indicating alpha of transparency. An alpha value of 00 is totally transparent; FF is totally opaque. If RGB is used, the A value is assumed to be FF.
        ///
        ///For instance, the RGB value "#800080" represents purple. An ARGB value of "#40800080" would be a transparent purple.
        ///
        ///As in SVG 1.1, colors are defined in terms of the sRGB color space (IEC 61966).</para>
        /// <para xml:lang="en">Pattern: #[\dA-F]{6}([\dA-F][\dA-F])?.</para>
        /// </summary>
        [System.ComponentModel.DataAnnotations.RegularExpressionAttribute("#[\\dA-F]{6}([\\dA-F][\\dA-F])?")]
        [System.Xml.Serialization.XmlAttributeAttribute("color")]
        public string Color { get; set; }

        [System.Xml.Serialization.XmlAttributeAttribute("halign")]
        public LeftCenterRight Halign { get; set; }

        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the Halign property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool HalignSpecified { get; set; }

        [System.Xml.Serialization.XmlAttributeAttribute("valign")]
        public Valign Valign { get; set; }

        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the Valign property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool ValignSpecified { get; set; }

        [System.Xml.Serialization.XmlAttributeAttribute("id")]
        public string Id { get; set; }
    }

    /// <summary>
    /// <para>The other-direction type is used to define any direction symbols not yet in the MusicXML format. The smufl attribute can be used to specify a particular direction symbol, allowing application interoperability without requiring every SMuFL glyph to have a MusicXML element equivalent. Using the other-direction type without the smufl attribute allows for extended representation, though without application interoperability.</para>
    /// </summary>
    [System.ComponentModel.DescriptionAttribute(@"The other-direction type is used to define any direction symbols not yet in the MusicXML format. The smufl attribute can be used to specify a particular direction symbol, allowing application interoperability without requiring every SMuFL glyph to have a MusicXML element equivalent. Using the other-direction type without the smufl attribute allows for extended representation, though without application interoperability.")]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XmlSchemaClassGenerator", "2.1.1142.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute("other-direction", Namespace="")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class OtherDirection : IPrintObject, IPrintStyleAlign, ISmufl, IOptionalUniqueId
    {

        /// <summary>
        /// <para xml:lang="en">Gets or sets the text value.</para>
        /// </summary>
        [System.Xml.Serialization.XmlTextAttribute()]
        public string Value { get; set; }

        [System.Xml.Serialization.XmlAttributeAttribute("print-object")]
        public YesNo PrintObject { get; set; }

        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the PrintObject property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool PrintObjectSpecified { get; set; }

        /// <summary>
        /// <para>The tenths type is a number representing tenths of interline staff space (positive or negative). Both integer and decimal values are allowed, such as 5 for a half space and 2.5 for a quarter space. Interline space is measured from the middle of a staff line.
        ///
        ///Distances in a MusicXML file are measured in tenths of staff space. Tenths are then scaled to millimeters within the scaling element, used in the defaults element at the start of a score. Individual staves can apply a scaling factor to adjust staff size. When a MusicXML element or attribute refers to tenths, it means the global tenths defined by the scaling element, not the local tenths as adjusted by the staff-size element.</para>
        /// </summary>
        [System.Xml.Serialization.XmlAttributeAttribute("default-x")]
        public decimal DefaultX { get; set; }

        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the DefaultX property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool DefaultXSpecified { get; set; }

        /// <summary>
        /// <para>The tenths type is a number representing tenths of interline staff space (positive or negative). Both integer and decimal values are allowed, such as 5 for a half space and 2.5 for a quarter space. Interline space is measured from the middle of a staff line.
        ///
        ///Distances in a MusicXML file are measured in tenths of staff space. Tenths are then scaled to millimeters within the scaling element, used in the defaults element at the start of a score. Individual staves can apply a scaling factor to adjust staff size. When a MusicXML element or attribute refers to tenths, it means the global tenths defined by the scaling element, not the local tenths as adjusted by the staff-size element.</para>
        /// </summary>
        [System.Xml.Serialization.XmlAttributeAttribute("default-y")]
        public decimal DefaultY { get; set; }

        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the DefaultY property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool DefaultYSpecified { get; set; }

        /// <summary>
        /// <para>The tenths type is a number representing tenths of interline staff space (positive or negative). Both integer and decimal values are allowed, such as 5 for a half space and 2.5 for a quarter space. Interline space is measured from the middle of a staff line.
        ///
        ///Distances in a MusicXML file are measured in tenths of staff space. Tenths are then scaled to millimeters within the scaling element, used in the defaults element at the start of a score. Individual staves can apply a scaling factor to adjust staff size. When a MusicXML element or attribute refers to tenths, it means the global tenths defined by the scaling element, not the local tenths as adjusted by the staff-size element.</para>
        /// </summary>
        [System.Xml.Serialization.XmlAttributeAttribute("relative-x")]
        public decimal RelativeX { get; set; }

        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the RelativeX property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool RelativeXSpecified { get; set; }

        /// <summary>
        /// <para>The tenths type is a number representing tenths of interline staff space (positive or negative). Both integer and decimal values are allowed, such as 5 for a half space and 2.5 for a quarter space. Interline space is measured from the middle of a staff line.
        ///
        ///Distances in a MusicXML file are measured in tenths of staff space. Tenths are then scaled to millimeters within the scaling element, used in the defaults element at the start of a score. Individual staves can apply a scaling factor to adjust staff size. When a MusicXML element or attribute refers to tenths, it means the global tenths defined by the scaling element, not the local tenths as adjusted by the staff-size element.</para>
        /// </summary>
        [System.Xml.Serialization.XmlAttributeAttribute("relative-y")]
        public decimal RelativeY { get; set; }

        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the RelativeY property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool RelativeYSpecified { get; set; }

        /// <summary>
        /// <para>The font-family is a comma-separated list of font names. These can be specific font styles such as Maestro or Opus, or one of several generic font styles: music, engraved, handwritten, text, serif, sans-serif, handwritten, cursive, fantasy, and monospace. The music, engraved, and handwritten values refer to music fonts; the rest refer to text fonts. The fantasy style refers to decorative text such as found in older German-style printing.</para>
        /// <para xml:lang="en">Pattern: [^,]+(, ?[^,]+)*.</para>
        /// </summary>
        [System.ComponentModel.DataAnnotations.RegularExpressionAttribute("[^,]+(, ?[^,]+)*")]
        [System.Xml.Serialization.XmlAttributeAttribute("font-family")]
        public string FontFamily { get; set; }

        [System.Xml.Serialization.XmlAttributeAttribute("font-style")]
        public FontStyle FontStyle { get; set; }

        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the FontStyle property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool FontStyleSpecified { get; set; }

        /// <summary>
        /// <para>The font-size can be one of the CSS font sizes (xx-small, x-small, small, medium, large, x-large, xx-large) or a numeric point size.</para>
        /// </summary>
        [System.Xml.Serialization.XmlAttributeAttribute("font-size")]
        public string FontSize { get; set; }

        [System.Xml.Serialization.XmlAttributeAttribute("font-weight")]
        public FontWeight FontWeight { get; set; }

        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the FontWeight property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool FontWeightSpecified { get; set; }

        /// <summary>
        /// <para>The color type indicates the color of an element. Color may be represented as hexadecimal RGB triples, as in HTML, or as hexadecimal ARGB tuples, with the A indicating alpha of transparency. An alpha value of 00 is totally transparent; FF is totally opaque. If RGB is used, the A value is assumed to be FF.
        ///
        ///For instance, the RGB value "#800080" represents purple. An ARGB value of "#40800080" would be a transparent purple.
        ///
        ///As in SVG 1.1, colors are defined in terms of the sRGB color space (IEC 61966).</para>
        /// <para xml:lang="en">Pattern: #[\dA-F]{6}([\dA-F][\dA-F])?.</para>
        /// </summary>
        [System.ComponentModel.DataAnnotations.RegularExpressionAttribute("#[\\dA-F]{6}([\\dA-F][\\dA-F])?")]
        [System.Xml.Serialization.XmlAttributeAttribute("color")]
        public string Color { get; set; }

        [System.Xml.Serialization.XmlAttributeAttribute("halign")]
        public LeftCenterRight Halign { get; set; }

        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the Halign property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool HalignSpecified { get; set; }

        [System.Xml.Serialization.XmlAttributeAttribute("valign")]
        public Valign Valign { get; set; }

        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the Valign property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool ValignSpecified { get; set; }

        /// <summary>
        /// <para>The smufl-glyph-name type is used for attributes that reference a specific Standard Music Font Layout (SMuFL) character. The value is a SMuFL canonical glyph name, not a code point. For instance, the value for a standard piano pedal mark would be keyboardPedalPed, not U+E650.</para>
        /// </summary>
        [System.Xml.Serialization.XmlAttributeAttribute("smufl")]
        public string Smufl { get; set; }

        [System.Xml.Serialization.XmlAttributeAttribute("id")]
        public string Id { get; set; }
    }

    /// <summary>
    /// <para>An offset is represented in terms of divisions, and indicates where the direction will appear relative to the current musical location. The current musical location is always within the current measure, even at the end of a measure.
    ///
    ///The offset affects the visual appearance of the direction. If the sound attribute is "yes", then the offset affects playback and listening too. If the sound attribute is "no", then any sound or listening associated with the direction takes effect at the current location. The sound attribute is "no" by default for compatibility with earlier versions of the MusicXML format. If an element within a direction includes a default-x attribute, the offset value will be ignored when determining the appearance of that element.</para>
    /// </summary>
    [System.ComponentModel.DescriptionAttribute(@"An offset is represented in terms of divisions, and indicates where the direction will appear relative to the current musical location. The current musical location is always within the current measure, even at the end of a measure. The offset affects the visual appearance of the direction. If the sound attribute is ""yes"", then the offset affects playback and listening too. If the sound attribute is ""no"", then any sound or listening associated with the direction takes effect at the current location. The sound attribute is ""no"" by default for compatibility with earlier versions of the MusicXML format. If an element within a direction includes a default-x attribute, the offset value will be ignored when determining the appearance of that element.")]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XmlSchemaClassGenerator", "2.1.1142.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute("offset", Namespace="")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class Offset
    {

        /// <summary>
        /// <para xml:lang="en">Gets or sets the text value.</para>
        /// </summary>
        [System.Xml.Serialization.XmlTextAttribute()]
        public decimal Value { get; set; }

        [System.Xml.Serialization.XmlAttributeAttribute("sound")]
        public YesNo Sound { get; set; }

        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the Sound property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool SoundSpecified { get; set; }
    }

    /// <summary>
    /// <para>The sound element contains general playback parameters. They can stand alone within a part/measure, or be a component element within a direction.
    ///
    ///Tempo is expressed in quarter notes per minute. If 0, the sound-generating program should prompt the user at the time of compiling a sound (MIDI) file.
    ///
    ///Dynamics (or MIDI velocity) are expressed as a percentage of the default forte value (90 for MIDI 1.0).
    ///
    ///Dacapo indicates to go back to the beginning of the movement. When used it always has the value "yes".
    ///
    ///Segno and dalsegno are used for backwards jumps to a segno sign; coda and tocoda are used for forward jumps to a coda sign. If there are multiple jumps, the value of these parameters can be used to name and distinguish them. If segno or coda is used, the divisions attribute can also be used to indicate the number of divisions per quarter note. Otherwise sound and MIDI generating programs may have to recompute this.
    ///
    ///By default, a dalsegno or dacapo attribute indicates that the jump should occur the first time through, while a tocoda attribute indicates the jump should occur the second time through. The time that jumps occur can be changed by using the time-only attribute.
    ///
    ///The forward-repeat attribute indicates that a forward repeat sign is implied but not displayed. It is used for example in two-part forms with repeats, such as a minuet and trio where no repeat is displayed at the start of the trio. This usually occurs after a barline. When used it always has the value of "yes".
    ///
    ///The fine attribute follows the final note or rest in a movement with a da capo or dal segno direction. If numeric, the value represents the actual duration of the final note or rest, which can be ambiguous in written notation and different among parts and voices. The value may also be "yes" to indicate no change to the final duration.
    ///
    ///If the sound element applies only particular times through a repeat, the time-only attribute indicates which times to apply the sound element.
    ///
    ///Pizzicato in a sound element effects all following notes. Yes indicates pizzicato, no indicates arco.
    ///
    ///The pan and elevation attributes are deprecated in Version 2.0. The pan and elevation elements in the midi-instrument element should be used instead. The meaning of the pan and elevation attributes is the same as for the pan and elevation elements. If both are present, the mid-instrument elements take priority.
    ///
    ///The damper-pedal, soft-pedal, and sostenuto-pedal attributes effect playback of the three common piano pedals and their MIDI controller equivalents. The yes value indicates the pedal is depressed; no indicates the pedal is released. A numeric value from 0 to 100 may also be used for half pedaling. This value is the percentage that the pedal is depressed. A value of 0 is equivalent to no, and a value of 100 is equivalent to yes.
    ///
    ///Instrument changes, MIDI devices, MIDI instruments, and playback techniques are changed using the instrument-change, midi-device, midi-instrument, and play elements. When there are multiple instances of these elements, they should be grouped together by instrument using the id attribute values.
    ///
    ///The offset element is used to indicate that the sound takes place offset from the current score position. If the sound element is a child of a direction element, the sound offset element overrides the direction offset element if both elements are present. Note that the offset reflects the intended musical position for the change in sound. It should not be used to compensate for latency issues in particular hardware configurations.</para>
    /// </summary>
    [System.ComponentModel.DescriptionAttribute("The sound element contains general playback parameters. They can stand alone with" +
        "in a part/measure, or be a component element within a direction. Tempo is expres" +
        "sed in quarter notes per minute. If 0, the sound-generating program should promp" +
        "t the user at the time of compiling a sound (MIDI) file. Dynamics (or MIDI veloc" +
        "ity) are expressed as a percentage of the default forte value (90 for MIDI 1.0)." +
        " Dacapo indicates to go back to the beginning of the movement. When used it alwa" +
        "ys has the value \"yes\". Segno and dalsegno are used for backwards jumps to a seg" +
        "no sign; coda and tocoda are used for forward jumps to a coda sign. If there are" +
        " multiple jumps, the value of these parameters can be used to name and distingui" +
        "sh them. If segno or coda is used, the divisions attribute can also be used to i" +
        "ndicate the number of divisions per quarter note. Otherwise sound and MIDI gener" +
        "ating programs may have to recompute this. By default, a dalsegno or dacapo attr" +
        "ibute indicates that the jump should occur the first time through, while a tocod" +
        "a attribute indicates the jump should occur the second time through. The time th" +
        "at jumps occur can be changed by using the time-only attribute. The forward-repe" +
        "at attribute indicates that a forward repeat sign is implied but not displayed. " +
        "It is used for example in two-part forms with repeats, such as a minuet and trio" +
        " where no repeat is displayed at the start of the trio. This usually occurs afte" +
        "r a barline. When used it always has the value of \"yes\". The fine attribute foll" +
        "ows the final note or rest in a movement with a da capo or dal segno direction. " +
        "If numeric, the value represents the actual duration of the final note or rest, " +
        "which can be ambiguous in written notation and different among parts and voices." +
        " The value may also be \"yes\" to indicate no change to the final duration. If the" +
        " sound element applies only particular times through a repeat, the time-only att" +
        "ribute indicates which times to apply the sound element. Pizzicato in a sound el" +
        "ement effects all following notes. Yes indicates pizzicato, no indicates arco. T" +
        "he pan and elevation attributes are deprecated in Version 2.0. The pan and eleva" +
        "tion elements in the midi-instrument element should be used instead. The meaning" +
        " of the pan and elevation attributes is the same as for the pan and elevation el" +
        "ements. If both are present, the mid-instrument elements take priority. The damp" +
        "er-pedal, soft-pedal, and sostenuto-pedal attributes effect playback of the thre" +
        "e common piano pedals and their MIDI controller equivalents. The yes value indic" +
        "ates the pedal is depressed; no indicates the pedal is released. A numeric value" +
        " from 0 to 100 may also be used for half pedaling. This value is the percentage " +
        "that the pedal is depressed. A value of 0 is equivalent to no, and a value of 10" +
        "0 is equivalent to yes. Instrument changes, MIDI devices, MIDI instruments, and " +
        "playback techniques are changed using the instrument-change, midi-device, midi-i" +
        "nstrument, and play elements. When there are multiple instances of these element" +
        "s, they should be grouped together by instrument using the id attribute values. " +
        "The offset element is used to indicate that the sound takes place offset from th" +
        "e current score position. If the sound element is a child of a direction element" +
        ", the sound offset element overrides the direction offset element if both elemen" +
        "ts are present. Note that the offset reflects the intended musical position for " +
        "the change in sound. It should not be used to compensate for latency issues in p" +
        "articular hardware configurations.")]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XmlSchemaClassGenerator", "2.1.1142.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute("sound", Namespace="")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class Sound : IOptionalUniqueId
    {

        [System.Xml.Serialization.XmlIgnoreAttribute()]
        private System.Collections.ObjectModel.Collection<InstrumentChange> _instrumentChange;

        [System.Xml.Serialization.XmlElementAttribute("instrument-change")]
        public System.Collections.ObjectModel.Collection<InstrumentChange> InstrumentChange
        {
            get
            {
                return _instrumentChange;
            }
            private set
            {
                _instrumentChange = value;
            }
        }

        /// <summary>
        /// <para xml:lang="en">Gets a value indicating whether the InstrumentChange collection is empty.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool InstrumentChangeSpecified
        {
            get
            {
                return (this.InstrumentChange.Count != 0);
            }
        }

        /// <summary>
        /// <para xml:lang="en">Initializes a new instance of the <see cref="Sound" /> class.</para>
        /// </summary>
        public Sound()
        {
            this._instrumentChange = new System.Collections.ObjectModel.Collection<InstrumentChange>();
            this._midiDevice = new System.Collections.ObjectModel.Collection<MidiDevice>();
            this._midiInstrument = new System.Collections.ObjectModel.Collection<MidiInstrument>();
            this._play = new System.Collections.ObjectModel.Collection<Play>();
        }

        [System.Xml.Serialization.XmlIgnoreAttribute()]
        private System.Collections.ObjectModel.Collection<MidiDevice> _midiDevice;

        [System.Xml.Serialization.XmlElementAttribute("midi-device")]
        public System.Collections.ObjectModel.Collection<MidiDevice> MidiDevice
        {
            get
            {
                return _midiDevice;
            }
            private set
            {
                _midiDevice = value;
            }
        }

        /// <summary>
        /// <para xml:lang="en">Gets a value indicating whether the MidiDevice collection is empty.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool MidiDeviceSpecified
        {
            get
            {
                return (this.MidiDevice.Count != 0);
            }
        }

        [System.Xml.Serialization.XmlIgnoreAttribute()]
        private System.Collections.ObjectModel.Collection<MidiInstrument> _midiInstrument;

        [System.Xml.Serialization.XmlElementAttribute("midi-instrument")]
        public System.Collections.ObjectModel.Collection<MidiInstrument> MidiInstrument
        {
            get
            {
                return _midiInstrument;
            }
            private set
            {
                _midiInstrument = value;
            }
        }

        /// <summary>
        /// <para xml:lang="en">Gets a value indicating whether the MidiInstrument collection is empty.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool MidiInstrumentSpecified
        {
            get
            {
                return (this.MidiInstrument.Count != 0);
            }
        }

        [System.Xml.Serialization.XmlIgnoreAttribute()]
        private System.Collections.ObjectModel.Collection<Play> _play;

        [System.Xml.Serialization.XmlElementAttribute("play")]
        public System.Collections.ObjectModel.Collection<Play> Play
        {
            get
            {
                return _play;
            }
            private set
            {
                _play = value;
            }
        }

        /// <summary>
        /// <para xml:lang="en">Gets a value indicating whether the Play collection is empty.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool PlaySpecified
        {
            get
            {
                return (this.Play.Count != 0);
            }
        }

        [System.Xml.Serialization.XmlElementAttribute("swing")]
        public Swing Swing { get; set; }

        [System.Xml.Serialization.XmlElementAttribute("offset")]
        public Offset Offset { get; set; }

        /// <summary>
        /// <para>The non-negative-decimal type specifies a non-negative decimal value.</para>
        /// <para xml:lang="en">Minimum inclusive value: 0.</para>
        /// </summary>
        [System.Xml.Serialization.XmlAttributeAttribute("tempo")]
        public decimal Tempo { get; set; }

        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the Tempo property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool TempoSpecified { get; set; }

        /// <summary>
        /// <para>The non-negative-decimal type specifies a non-negative decimal value.</para>
        /// <para xml:lang="en">Minimum inclusive value: 0.</para>
        /// </summary>
        [System.Xml.Serialization.XmlAttributeAttribute("dynamics")]
        public decimal Dynamics { get; set; }

        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the Dynamics property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool DynamicsSpecified { get; set; }

        [System.Xml.Serialization.XmlAttributeAttribute("dacapo")]
        public YesNo Dacapo { get; set; }

        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the Dacapo property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool DacapoSpecified { get; set; }

        [System.Xml.Serialization.XmlAttributeAttribute("segno")]
        public string Segno { get; set; }

        [System.Xml.Serialization.XmlAttributeAttribute("dalsegno")]
        public string Dalsegno { get; set; }

        [System.Xml.Serialization.XmlAttributeAttribute("coda")]
        public string Coda { get; set; }

        [System.Xml.Serialization.XmlAttributeAttribute("tocoda")]
        public string Tocoda { get; set; }

        /// <summary>
        /// <para>The divisions type is used to express values in terms of the musical divisions defined by the divisions element. It is preferred that these be integer values both for MIDI interoperability and to avoid roundoff errors.</para>
        /// </summary>
        [System.Xml.Serialization.XmlAttributeAttribute("divisions")]
        public decimal Divisions { get; set; }

        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the Divisions property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool DivisionsSpecified { get; set; }

        [System.Xml.Serialization.XmlAttributeAttribute("forward-repeat")]
        public YesNo ForwardRepeat { get; set; }

        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the ForwardRepeat property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool ForwardRepeatSpecified { get; set; }

        [System.Xml.Serialization.XmlAttributeAttribute("fine")]
        public string Fine { get; set; }

        /// <summary>
        /// <para>The time-only type is used to indicate that a particular playback- or listening-related element only applies particular times through a repeated section. The value is a comma-separated list of positive integers arranged in ascending order, indicating which times through the repeated section that the element applies.</para>
        /// <para xml:lang="en">Pattern: [1-9][0-9]*(, ?[1-9][0-9]*)*.</para>
        /// </summary>
        [System.ComponentModel.DataAnnotations.RegularExpressionAttribute("[1-9][0-9]*(, ?[1-9][0-9]*)*")]
        [System.Xml.Serialization.XmlAttributeAttribute("time-only")]
        public string TimeOnly { get; set; }

        [System.Xml.Serialization.XmlAttributeAttribute("pizzicato")]
        public YesNo Pizzicato { get; set; }

        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the Pizzicato property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool PizzicatoSpecified { get; set; }

        /// <summary>
        /// <para>The rotation-degrees type specifies rotation, pan, and elevation values in degrees. Values range from -180 to 180.</para>
        /// <para xml:lang="en">Minimum inclusive value: -180.</para>
        /// <para xml:lang="en">Maximum inclusive value: 180.</para>
        /// </summary>
        [System.ComponentModel.DataAnnotations.RangeAttribute(typeof(decimal), "-180", "180")]
        [System.Xml.Serialization.XmlAttributeAttribute("pan")]
        public decimal Pan { get; set; }

        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the Pan property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool PanSpecified { get; set; }

        /// <summary>
        /// <para>The rotation-degrees type specifies rotation, pan, and elevation values in degrees. Values range from -180 to 180.</para>
        /// <para xml:lang="en">Minimum inclusive value: -180.</para>
        /// <para xml:lang="en">Maximum inclusive value: 180.</para>
        /// </summary>
        [System.ComponentModel.DataAnnotations.RangeAttribute(typeof(decimal), "-180", "180")]
        [System.Xml.Serialization.XmlAttributeAttribute("elevation")]
        public decimal Elevation { get; set; }

        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the Elevation property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool ElevationSpecified { get; set; }

        /// <summary>
        /// <para>The yes-no-number type is used for attributes that can be either boolean or numeric values.</para>
        /// </summary>
        [System.Xml.Serialization.XmlAttributeAttribute("damper-pedal")]
        public string DamperPedal { get; set; }

        /// <summary>
        /// <para>The yes-no-number type is used for attributes that can be either boolean or numeric values.</para>
        /// </summary>
        [System.Xml.Serialization.XmlAttributeAttribute("soft-pedal")]
        public string SoftPedal { get; set; }

        /// <summary>
        /// <para>The yes-no-number type is used for attributes that can be either boolean or numeric values.</para>
        /// </summary>
        [System.Xml.Serialization.XmlAttributeAttribute("sostenuto-pedal")]
        public string SostenutoPedal { get; set; }

        [System.Xml.Serialization.XmlAttributeAttribute("id")]
        public string Id { get; set; }
    }

    /// <summary>
    /// <para>The instrument-change element type represents a change to the virtual instrument sound for a given score-instrument. The id attribute refers to the score-instrument affected by the change. All instrument-change child elements can also be initially specified within the score-instrument element.</para>
    /// </summary>
    [System.ComponentModel.DescriptionAttribute(@"The instrument-change element type represents a change to the virtual instrument sound for a given score-instrument. The id attribute refers to the score-instrument affected by the change. All instrument-change child elements can also be initially specified within the score-instrument element.")]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XmlSchemaClassGenerator", "2.1.1142.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute("instrument-change", Namespace="")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class InstrumentChange : IVirtualInstrumentData
    {

        /// <summary>
        /// <para>The instrument-sound element describes the default timbre of the score-instrument. This description is independent of a particular virtual or MIDI instrument specification and allows playback to be shared more easily between applications and libraries.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("The instrument-sound element describes the default timbre of the score-instrument" +
            ". This description is independent of a particular virtual or MIDI instrument spe" +
            "cification and allows playback to be shared more easily between applications and" +
            " libraries.")]
        [System.Xml.Serialization.XmlElementAttribute("instrument-sound")]
        public string InstrumentSound { get; set; }

        /// <summary>
        /// <para>The solo element is present if performance is intended by a solo instrument.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("The solo element is present if performance is intended by a solo instrument.")]
        [System.Xml.Serialization.XmlElementAttribute("solo")]
        public Empty Solo { get; set; }

        /// <summary>
        /// <para>The ensemble element is present if performance is intended by an ensemble such as an orchestral section. The text of the ensemble element contains the size of the section, or is empty if the ensemble size is not specified.</para>
        /// <para>The positive-integer-or-empty values can be either a positive integer or an empty string.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("The ensemble element is present if performance is intended by an ensemble such as" +
            " an orchestral section. The text of the ensemble element contains the size of th" +
            "e section, or is empty if the ensemble size is not specified.")]
        [System.Xml.Serialization.XmlElementAttribute("ensemble")]
        public string Ensemble { get; set; }

        [System.Xml.Serialization.XmlElementAttribute("virtual-instrument")]
        public VirtualInstrument VirtualInstrument { get; set; }

        [System.ComponentModel.DataAnnotations.RequiredAttribute(AllowEmptyStrings=true)]
        [System.Xml.Serialization.XmlAttributeAttribute("id")]
        public string Id { get; set; }
    }

    /// <summary>
    /// <para>Virtual instrument data can be part of either the score-instrument element at the start of a part, or an instrument-change element within a part.</para>
    /// </summary>
    [System.ComponentModel.DescriptionAttribute("Virtual instrument data can be part of either the score-instrument element at the" +
        " start of a part, or an instrument-change element within a part.")]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XmlSchemaClassGenerator", "2.1.1142.0")]
    public partial interface IVirtualInstrumentData
    {

        /// <summary>
        /// <para>The instrument-sound element describes the default timbre of the score-instrument. This description is independent of a particular virtual or MIDI instrument specification and allows playback to be shared more easily between applications and libraries.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("The instrument-sound element describes the default timbre of the score-instrument" +
            ". This description is independent of a particular virtual or MIDI instrument spe" +
            "cification and allows playback to be shared more easily between applications and" +
            " libraries.")]
        string InstrumentSound
        {
            get;
            set;
        }

        /// <summary>
        /// <para>The solo element is present if performance is intended by a solo instrument.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("The solo element is present if performance is intended by a solo instrument.")]
        Empty Solo
        {
            get;
            set;
        }

        /// <summary>
        /// <para>The ensemble element is present if performance is intended by an ensemble such as an orchestral section. The text of the ensemble element contains the size of the section, or is empty if the ensemble size is not specified.</para>
        /// <para>The positive-integer-or-empty values can be either a positive integer or an empty string.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("The ensemble element is present if performance is intended by an ensemble such as" +
            " an orchestral section. The text of the ensemble element contains the size of th" +
            "e section, or is empty if the ensemble size is not specified.")]
        string Ensemble
        {
            get;
            set;
        }

        VirtualInstrument VirtualInstrument
        {
            get;
            set;
        }
    }

    /// <summary>
    /// <para>The virtual-instrument element defines a specific virtual instrument used for an instrument sound.</para>
    /// </summary>
    [System.ComponentModel.DescriptionAttribute("The virtual-instrument element defines a specific virtual instrument used for an " +
        "instrument sound.")]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XmlSchemaClassGenerator", "2.1.1142.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute("virtual-instrument", Namespace="")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class VirtualInstrument
    {

        /// <summary>
        /// <para>The virtual-library element indicates the virtual instrument library name.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("The virtual-library element indicates the virtual instrument library name.")]
        [System.Xml.Serialization.XmlElementAttribute("virtual-library")]
        public string VirtualLibrary { get; set; }

        /// <summary>
        /// <para>The virtual-name element indicates the library-specific name for the virtual instrument.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("The virtual-name element indicates the library-specific name for the virtual inst" +
            "rument.")]
        [System.Xml.Serialization.XmlElementAttribute("virtual-name")]
        public string VirtualName { get; set; }
    }

    /// <summary>
    /// <para>The swing element specifies whether or not to use swing playback, where consecutive on-beat / off-beat eighth or 16th notes are played with unequal nominal durations. 
    ///
    ///The straight element specifies that no swing is present, so consecutive notes have equal durations.
    ///
    ///The first and second elements are positive integers that specify the ratio between durations of consecutive notes. For example, a first element with a value of 2 and a second element with a value of 1 applied to eighth notes specifies a quarter note / eighth note tuplet playback, where the first note is twice as long as the second note. Ratios should be specified with the smallest integers possible. For example, a ratio of 6 to 4 should be specified as 3 to 2 instead.
    ///
    ///The optional swing-type element specifies the note type, either eighth or 16th, to which the ratio is applied. The value is eighth if this element is not present.
    ///
    ///The optional swing-style element is a string describing the style of swing used.
    ///
    ///The swing element has no effect for playback of grace notes, notes where a type element is not present, and notes where the specified duration is different than the nominal value associated with the specified type. If a swung note has attack and release attributes, those values modify the swung playback.</para>
    /// </summary>
    [System.ComponentModel.DescriptionAttribute(@"The swing element specifies whether or not to use swing playback, where consecutive on-beat / off-beat eighth or 16th notes are played with unequal nominal durations. The straight element specifies that no swing is present, so consecutive notes have equal durations. The first and second elements are positive integers that specify the ratio between durations of consecutive notes. For example, a first element with a value of 2 and a second element with a value of 1 applied to eighth notes specifies a quarter note / eighth note tuplet playback, where the first note is twice as long as the second note. Ratios should be specified with the smallest integers possible. For example, a ratio of 6 to 4 should be specified as 3 to 2 instead. The optional swing-type element specifies the note type, either eighth or 16th, to which the ratio is applied. The value is eighth if this element is not present. The optional swing-style element is a string describing the style of swing used. The swing element has no effect for playback of grace notes, notes where a type element is not present, and notes where the specified duration is different than the nominal value associated with the specified type. If a swung note has attack and release attributes, those values modify the swung playback.")]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XmlSchemaClassGenerator", "2.1.1142.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute("swing", Namespace="")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class Swing
    {

        [System.Xml.Serialization.XmlElementAttribute("straight")]
        public Empty Straight { get; set; }

        [System.Xml.Serialization.XmlElementAttribute("first")]
        public string First { get; set; }

        [System.Xml.Serialization.XmlElementAttribute("second")]
        public string Second { get; set; }

        [System.Xml.Serialization.XmlElementAttribute("swing-type")]
        public SwingTypeValue SwingType { get; set; }

        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the SwingType property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool SwingTypeSpecified { get; set; }

        [System.Xml.Serialization.XmlElementAttribute("swing-style")]
        public string SwingStyle { get; set; }
    }

    /// <summary>
    /// <para>The listen and listening types, new in Version 4.0, specify different ways that a score following or machine listening application can interact with a performer. The listening type handles interactions that change the state of the listening application from the specified point in the performance onward. If multiple child elements of the same type are present, they should have distinct player and/or time-only attributes.
    ///
    ///The offset element is used to indicate that the listening change takes place offset from the current score position. If the listening element is a child of a direction element, the listening offset element overrides the direction offset element if both elements are present. Note that the offset reflects the intended musical position for the change in state. It should not be used to compensate for latency issues in particular hardware configurations.</para>
    /// </summary>
    [System.ComponentModel.DescriptionAttribute(@"The listen and listening types, new in Version 4.0, specify different ways that a score following or machine listening application can interact with a performer. The listening type handles interactions that change the state of the listening application from the specified point in the performance onward. If multiple child elements of the same type are present, they should have distinct player and/or time-only attributes. The offset element is used to indicate that the listening change takes place offset from the current score position. If the listening element is a child of a direction element, the listening offset element overrides the direction offset element if both elements are present. Note that the offset reflects the intended musical position for the change in state. It should not be used to compensate for latency issues in particular hardware configurations.")]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XmlSchemaClassGenerator", "2.1.1142.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute("listening", Namespace="")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class Listening
    {

        [System.Xml.Serialization.XmlIgnoreAttribute()]
        private System.Collections.ObjectModel.Collection<Sync> _sync;

        [System.Xml.Serialization.XmlElementAttribute("sync")]
        public System.Collections.ObjectModel.Collection<Sync> Sync
        {
            get
            {
                return _sync;
            }
            private set
            {
                _sync = value;
            }
        }

        /// <summary>
        /// <para xml:lang="en">Gets a value indicating whether the Sync collection is empty.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool SyncSpecified
        {
            get
            {
                return (this.Sync.Count != 0);
            }
        }

        /// <summary>
        /// <para xml:lang="en">Initializes a new instance of the <see cref="Listening" /> class.</para>
        /// </summary>
        public Listening()
        {
            this._sync = new System.Collections.ObjectModel.Collection<Sync>();
            this._otherListening = new System.Collections.ObjectModel.Collection<OtherListening>();
        }

        [System.Xml.Serialization.XmlIgnoreAttribute()]
        private System.Collections.ObjectModel.Collection<OtherListening> _otherListening;

        [System.Xml.Serialization.XmlElementAttribute("other-listening")]
        public System.Collections.ObjectModel.Collection<OtherListening> OtherListening
        {
            get
            {
                return _otherListening;
            }
            private set
            {
                _otherListening = value;
            }
        }

        /// <summary>
        /// <para xml:lang="en">Gets a value indicating whether the OtherListening collection is empty.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool OtherListeningSpecified
        {
            get
            {
                return (this.OtherListening.Count != 0);
            }
        }

        [System.Xml.Serialization.XmlElementAttribute("offset")]
        public Offset Offset { get; set; }
    }

    /// <summary>
    /// <para>The sync type specifies the style that a score following application should use the synchronize an accompaniment with a performer. If this type is not included in a score, default synchronization depends on the application.
    ///
    ///The optional latency attribute specifies a time in milliseconds that the listening application should expect from the performer. The optional player and time-only attributes restrict the element to apply to a single player or set of times through a repeated section, respectively.</para>
    /// </summary>
    [System.ComponentModel.DescriptionAttribute(@"The sync type specifies the style that a score following application should use the synchronize an accompaniment with a performer. If this type is not included in a score, default synchronization depends on the application. The optional latency attribute specifies a time in milliseconds that the listening application should expect from the performer. The optional player and time-only attributes restrict the element to apply to a single player or set of times through a repeated section, respectively.")]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XmlSchemaClassGenerator", "2.1.1142.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute("sync", Namespace="")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class Sync
    {

        [System.ComponentModel.DataAnnotations.RequiredAttribute(AllowEmptyStrings=true)]
        [System.Xml.Serialization.XmlAttributeAttribute("type")]
        public SyncType Type { get; set; }

        /// <summary>
        /// <para>The milliseconds type represents an integral number of milliseconds.</para>
        /// </summary>
        [System.Xml.Serialization.XmlAttributeAttribute("latency")]
        public string Latency { get; set; }

        [System.Xml.Serialization.XmlAttributeAttribute("player")]
        public string Player { get; set; }

        /// <summary>
        /// <para>The time-only type is used to indicate that a particular playback- or listening-related element only applies particular times through a repeated section. The value is a comma-separated list of positive integers arranged in ascending order, indicating which times through the repeated section that the element applies.</para>
        /// <para xml:lang="en">Pattern: [1-9][0-9]*(, ?[1-9][0-9]*)*.</para>
        /// </summary>
        [System.ComponentModel.DataAnnotations.RegularExpressionAttribute("[1-9][0-9]*(, ?[1-9][0-9]*)*")]
        [System.Xml.Serialization.XmlAttributeAttribute("time-only")]
        public string TimeOnly { get; set; }
    }

    /// <summary>
    /// <para>The other-listening type represents other types of listening control and interaction. The required type attribute indicates the type of listening to which the element content applies. The optional player and time-only attributes restrict the element to apply to a single player or set of times through a repeated section, respectively.</para>
    /// </summary>
    [System.ComponentModel.DescriptionAttribute(@"The other-listening type represents other types of listening control and interaction. The required type attribute indicates the type of listening to which the element content applies. The optional player and time-only attributes restrict the element to apply to a single player or set of times through a repeated section, respectively.")]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XmlSchemaClassGenerator", "2.1.1142.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute("other-listening", Namespace="")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class OtherListening
    {

        /// <summary>
        /// <para xml:lang="en">Gets or sets the text value.</para>
        /// </summary>
        [System.Xml.Serialization.XmlTextAttribute()]
        public string Value { get; set; }

        [System.ComponentModel.DataAnnotations.RequiredAttribute(AllowEmptyStrings=true)]
        [System.Xml.Serialization.XmlAttributeAttribute("type")]
        public string Type { get; set; }

        [System.Xml.Serialization.XmlAttributeAttribute("player")]
        public string Player { get; set; }

        /// <summary>
        /// <para>The time-only type is used to indicate that a particular playback- or listening-related element only applies particular times through a repeated section. The value is a comma-separated list of positive integers arranged in ascending order, indicating which times through the repeated section that the element applies.</para>
        /// <para xml:lang="en">Pattern: [1-9][0-9]*(, ?[1-9][0-9]*)*.</para>
        /// </summary>
        [System.ComponentModel.DataAnnotations.RegularExpressionAttribute("[1-9][0-9]*(, ?[1-9][0-9]*)*")]
        [System.Xml.Serialization.XmlAttributeAttribute("time-only")]
        public string TimeOnly { get; set; }
    }

    /// <summary>
    /// <para>The directive attribute changes the default-x position of a direction. It indicates that the left-hand side of the direction is aligned with the left-hand side of the time signature. If no time signature is present, it is aligned with the left-hand side of the first music notational element in the measure. If a default-x, justify, or halign attribute is present, it overrides the directive attribute.</para>
    /// </summary>
    [System.ComponentModel.DescriptionAttribute(@"The directive attribute changes the default-x position of a direction. It indicates that the left-hand side of the direction is aligned with the left-hand side of the time signature. If no time signature is present, it is aligned with the left-hand side of the first music notational element in the measure. If a default-x, justify, or halign attribute is present, it overrides the directive attribute.")]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XmlSchemaClassGenerator", "2.1.1142.0")]
    public partial interface IDirective
    {

        YesNo Directive
        {
            get;
            set;
        }
    }

    /// <summary>
    /// <para>The feature type is a part of the grouping element used for musical analysis. The type attribute represents the type of the feature and the element content represents its value. This type is flexible to allow for different analyses.</para>
    /// </summary>
    [System.ComponentModel.DescriptionAttribute("The feature type is a part of the grouping element used for musical analysis. The" +
        " type attribute represents the type of the feature and the element content repre" +
        "sents its value. This type is flexible to allow for different analyses.")]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XmlSchemaClassGenerator", "2.1.1142.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute("feature", Namespace="")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class Feature
    {

        /// <summary>
        /// <para xml:lang="en">Gets or sets the text value.</para>
        /// </summary>
        [System.Xml.Serialization.XmlTextAttribute()]
        public string Value { get; set; }

        [System.Xml.Serialization.XmlAttributeAttribute("type")]
        public string Type { get; set; }
    }

    /// <summary>
    /// <para>The first-fret type indicates which fret is shown in the top space of the frame; it is fret 1 if the element is not present. The optional text attribute indicates how this is represented in the fret diagram, while the location attribute indicates whether the text appears to the left or right of the frame.</para>
    /// </summary>
    [System.ComponentModel.DescriptionAttribute(@"The first-fret type indicates which fret is shown in the top space of the frame; it is fret 1 if the element is not present. The optional text attribute indicates how this is represented in the fret diagram, while the location attribute indicates whether the text appears to the left or right of the frame.")]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XmlSchemaClassGenerator", "2.1.1142.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute("first-fret", Namespace="")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class FirstFret
    {

        /// <summary>
        /// <para xml:lang="en">Gets or sets the text value.</para>
        /// </summary>
        [System.Xml.Serialization.XmlTextAttribute()]
        public string Value { get; set; }

        [System.Xml.Serialization.XmlAttributeAttribute("text")]
        public string Text { get; set; }

        [System.Xml.Serialization.XmlAttributeAttribute("location")]
        public LeftRight Location { get; set; }

        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the Location property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool LocationSpecified { get; set; }
    }

    /// <summary>
    /// <para>The frame type represents a frame or fretboard diagram used together with a chord symbol. The representation is based on the NIFF guitar grid with additional information. The frame type's unplayed attribute indicates what to display above a string that has no associated frame-note element. Typical values are x and the empty string. If the attribute is not present, the display of the unplayed string is application-defined.</para>
    /// </summary>
    [System.ComponentModel.DescriptionAttribute(@"The frame type represents a frame or fretboard diagram used together with a chord symbol. The representation is based on the NIFF guitar grid with additional information. The frame type's unplayed attribute indicates what to display above a string that has no associated frame-note element. Typical values are x and the empty string. If the attribute is not present, the display of the unplayed string is application-defined.")]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XmlSchemaClassGenerator", "2.1.1142.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute("frame", Namespace="")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class Frame : IPosition, IColor, IHalign, IValignImage, IOptionalUniqueId
    {

        /// <summary>
        /// <para>The frame-strings element gives the overall size of the frame in vertical lines (strings).</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("The frame-strings element gives the overall size of the frame in vertical lines (" +
            "strings).")]
        [System.ComponentModel.DataAnnotations.RequiredAttribute(AllowEmptyStrings=true)]
        [System.Xml.Serialization.XmlElementAttribute("frame-strings")]
        public string FrameStrings { get; set; }

        /// <summary>
        /// <para>The frame-frets element gives the overall size of the frame in horizontal spaces (frets).</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("The frame-frets element gives the overall size of the frame in horizontal spaces " +
            "(frets).")]
        [System.ComponentModel.DataAnnotations.RequiredAttribute(AllowEmptyStrings=true)]
        [System.Xml.Serialization.XmlElementAttribute("frame-frets")]
        public string FrameFrets { get; set; }

        [System.Xml.Serialization.XmlElementAttribute("first-fret")]
        public FirstFret FirstFret { get; set; }

        [System.Xml.Serialization.XmlIgnoreAttribute()]
        private System.Collections.ObjectModel.Collection<FrameNote> _frameNote;

        [System.ComponentModel.DataAnnotations.RequiredAttribute(AllowEmptyStrings=true)]
        [System.Xml.Serialization.XmlElementAttribute("frame-note")]
        public System.Collections.ObjectModel.Collection<FrameNote> FrameNote
        {
            get
            {
                return _frameNote;
            }
            private set
            {
                _frameNote = value;
            }
        }

        /// <summary>
        /// <para xml:lang="en">Initializes a new instance of the <see cref="Frame" /> class.</para>
        /// </summary>
        public Frame()
        {
            this._frameNote = new System.Collections.ObjectModel.Collection<FrameNote>();
        }

        /// <summary>
        /// <para>The tenths type is a number representing tenths of interline staff space (positive or negative). Both integer and decimal values are allowed, such as 5 for a half space and 2.5 for a quarter space. Interline space is measured from the middle of a staff line.
        ///
        ///Distances in a MusicXML file are measured in tenths of staff space. Tenths are then scaled to millimeters within the scaling element, used in the defaults element at the start of a score. Individual staves can apply a scaling factor to adjust staff size. When a MusicXML element or attribute refers to tenths, it means the global tenths defined by the scaling element, not the local tenths as adjusted by the staff-size element.</para>
        /// </summary>
        [System.Xml.Serialization.XmlAttributeAttribute("default-x")]
        public decimal DefaultX { get; set; }

        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the DefaultX property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool DefaultXSpecified { get; set; }

        /// <summary>
        /// <para>The tenths type is a number representing tenths of interline staff space (positive or negative). Both integer and decimal values are allowed, such as 5 for a half space and 2.5 for a quarter space. Interline space is measured from the middle of a staff line.
        ///
        ///Distances in a MusicXML file are measured in tenths of staff space. Tenths are then scaled to millimeters within the scaling element, used in the defaults element at the start of a score. Individual staves can apply a scaling factor to adjust staff size. When a MusicXML element or attribute refers to tenths, it means the global tenths defined by the scaling element, not the local tenths as adjusted by the staff-size element.</para>
        /// </summary>
        [System.Xml.Serialization.XmlAttributeAttribute("default-y")]
        public decimal DefaultY { get; set; }

        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the DefaultY property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool DefaultYSpecified { get; set; }

        /// <summary>
        /// <para>The tenths type is a number representing tenths of interline staff space (positive or negative). Both integer and decimal values are allowed, such as 5 for a half space and 2.5 for a quarter space. Interline space is measured from the middle of a staff line.
        ///
        ///Distances in a MusicXML file are measured in tenths of staff space. Tenths are then scaled to millimeters within the scaling element, used in the defaults element at the start of a score. Individual staves can apply a scaling factor to adjust staff size. When a MusicXML element or attribute refers to tenths, it means the global tenths defined by the scaling element, not the local tenths as adjusted by the staff-size element.</para>
        /// </summary>
        [System.Xml.Serialization.XmlAttributeAttribute("relative-x")]
        public decimal RelativeX { get; set; }

        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the RelativeX property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool RelativeXSpecified { get; set; }

        /// <summary>
        /// <para>The tenths type is a number representing tenths of interline staff space (positive or negative). Both integer and decimal values are allowed, such as 5 for a half space and 2.5 for a quarter space. Interline space is measured from the middle of a staff line.
        ///
        ///Distances in a MusicXML file are measured in tenths of staff space. Tenths are then scaled to millimeters within the scaling element, used in the defaults element at the start of a score. Individual staves can apply a scaling factor to adjust staff size. When a MusicXML element or attribute refers to tenths, it means the global tenths defined by the scaling element, not the local tenths as adjusted by the staff-size element.</para>
        /// </summary>
        [System.Xml.Serialization.XmlAttributeAttribute("relative-y")]
        public decimal RelativeY { get; set; }

        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the RelativeY property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool RelativeYSpecified { get; set; }

        /// <summary>
        /// <para>The color type indicates the color of an element. Color may be represented as hexadecimal RGB triples, as in HTML, or as hexadecimal ARGB tuples, with the A indicating alpha of transparency. An alpha value of 00 is totally transparent; FF is totally opaque. If RGB is used, the A value is assumed to be FF.
        ///
        ///For instance, the RGB value "#800080" represents purple. An ARGB value of "#40800080" would be a transparent purple.
        ///
        ///As in SVG 1.1, colors are defined in terms of the sRGB color space (IEC 61966).</para>
        /// <para xml:lang="en">Pattern: #[\dA-F]{6}([\dA-F][\dA-F])?.</para>
        /// </summary>
        [System.ComponentModel.DataAnnotations.RegularExpressionAttribute("#[\\dA-F]{6}([\\dA-F][\\dA-F])?")]
        [System.Xml.Serialization.XmlAttributeAttribute("color")]
        public string Color { get; set; }

        [System.Xml.Serialization.XmlAttributeAttribute("halign")]
        public LeftCenterRight Halign { get; set; }

        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the Halign property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool HalignSpecified { get; set; }

        [System.Xml.Serialization.XmlAttributeAttribute("valign")]
        public ValignImage Valign { get; set; }

        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the Valign property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool ValignSpecified { get; set; }

        /// <summary>
        /// <para>The tenths type is a number representing tenths of interline staff space (positive or negative). Both integer and decimal values are allowed, such as 5 for a half space and 2.5 for a quarter space. Interline space is measured from the middle of a staff line.
        ///
        ///Distances in a MusicXML file are measured in tenths of staff space. Tenths are then scaled to millimeters within the scaling element, used in the defaults element at the start of a score. Individual staves can apply a scaling factor to adjust staff size. When a MusicXML element or attribute refers to tenths, it means the global tenths defined by the scaling element, not the local tenths as adjusted by the staff-size element.</para>
        /// </summary>
        [System.Xml.Serialization.XmlAttributeAttribute("height")]
        public decimal Height { get; set; }

        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the Height property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool HeightSpecified { get; set; }

        /// <summary>
        /// <para>The tenths type is a number representing tenths of interline staff space (positive or negative). Both integer and decimal values are allowed, such as 5 for a half space and 2.5 for a quarter space. Interline space is measured from the middle of a staff line.
        ///
        ///Distances in a MusicXML file are measured in tenths of staff space. Tenths are then scaled to millimeters within the scaling element, used in the defaults element at the start of a score. Individual staves can apply a scaling factor to adjust staff size. When a MusicXML element or attribute refers to tenths, it means the global tenths defined by the scaling element, not the local tenths as adjusted by the staff-size element.</para>
        /// </summary>
        [System.Xml.Serialization.XmlAttributeAttribute("width")]
        public decimal Width { get; set; }

        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the Width property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool WidthSpecified { get; set; }

        [System.Xml.Serialization.XmlAttributeAttribute("unplayed")]
        public string Unplayed { get; set; }

        [System.Xml.Serialization.XmlAttributeAttribute("id")]
        public string Id { get; set; }
    }

    /// <summary>
    /// <para>The frame-note type represents each note included in the frame. An open string will have a fret value of 0, while a muted string will not be associated with a frame-note element.</para>
    /// </summary>
    [System.ComponentModel.DescriptionAttribute("The frame-note type represents each note included in the frame. An open string wi" +
        "ll have a fret value of 0, while a muted string will not be associated with a fr" +
        "ame-note element.")]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XmlSchemaClassGenerator", "2.1.1142.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute("frame-note", Namespace="")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class FrameNote
    {

        [System.ComponentModel.DataAnnotations.RequiredAttribute(AllowEmptyStrings=true)]
        [System.Xml.Serialization.XmlElementAttribute("string")]
        public String String { get; set; }

        [System.ComponentModel.DataAnnotations.RequiredAttribute(AllowEmptyStrings=true)]
        [System.Xml.Serialization.XmlElementAttribute("fret")]
        public Fret Fret { get; set; }

        [System.Xml.Serialization.XmlElementAttribute("fingering")]
        public Fingering Fingering { get; set; }

        [System.Xml.Serialization.XmlElementAttribute("barre")]
        public Barre Barre { get; set; }
    }

    /// <summary>
    /// <para>The grouping type is used for musical analysis. When the type attribute is "start" or "single", it usually contains one or more feature elements. The number attribute is used for distinguishing between overlapping and hierarchical groupings. The member-of attribute allows for easy distinguishing of what grouping elements are in what hierarchy. Feature elements contained within a "stop" type of grouping may be ignored.
    ///
    ///This element is flexible to allow for different types of analyses. Future versions of the MusicXML format may add elements that can represent more standardized categories of analysis data, allowing for easier data sharing.</para>
    /// </summary>
    [System.ComponentModel.DescriptionAttribute(@"The grouping type is used for musical analysis. When the type attribute is ""start"" or ""single"", it usually contains one or more feature elements. The number attribute is used for distinguishing between overlapping and hierarchical groupings. The member-of attribute allows for easy distinguishing of what grouping elements are in what hierarchy. Feature elements contained within a ""stop"" type of grouping may be ignored. This element is flexible to allow for different types of analyses. Future versions of the MusicXML format may add elements that can represent more standardized categories of analysis data, allowing for easier data sharing.")]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XmlSchemaClassGenerator", "2.1.1142.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute("grouping", Namespace="")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class Grouping : IOptionalUniqueId
    {

        [System.Xml.Serialization.XmlIgnoreAttribute()]
        private System.Collections.ObjectModel.Collection<Feature> _feature;

        [System.Xml.Serialization.XmlElementAttribute("feature")]
        public System.Collections.ObjectModel.Collection<Feature> Feature
        {
            get
            {
                return _feature;
            }
            private set
            {
                _feature = value;
            }
        }

        /// <summary>
        /// <para xml:lang="en">Gets a value indicating whether the Feature collection is empty.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool FeatureSpecified
        {
            get
            {
                return (this.Feature.Count != 0);
            }
        }

        /// <summary>
        /// <para xml:lang="en">Initializes a new instance of the <see cref="Grouping" /> class.</para>
        /// </summary>
        public Grouping()
        {
            this._feature = new System.Collections.ObjectModel.Collection<Feature>();
        }

        [System.ComponentModel.DataAnnotations.RequiredAttribute(AllowEmptyStrings=true)]
        [System.Xml.Serialization.XmlAttributeAttribute("type")]
        public StartStopSingle Type { get; set; }

        [System.Xml.Serialization.XmlIgnoreAttribute()]
        private string _number = "1";

        [System.ComponentModel.DefaultValueAttribute("1")]
        [System.Xml.Serialization.XmlAttributeAttribute("number")]
        public string Number
        {
            get
            {
                return _number;
            }
            set
            {
                _number = value;
            }
        }

        [System.Xml.Serialization.XmlAttributeAttribute("member-of")]
        public string MemberOf { get; set; }

        [System.Xml.Serialization.XmlAttributeAttribute("id")]
        public string Id { get; set; }
    }

    /// <summary>
    /// <para>The harmony type represents harmony analysis, including chord symbols in popular music as well as functional harmony analysis in classical music.
    ///
    ///If there are alternate harmonies possible, this can be specified using multiple harmony elements differentiated by type. Explicit harmonies have all note present in the music; implied have some notes missing but implied; alternate represents alternate analyses.
    ///
    ///The print-object attribute controls whether or not anything is printed due to the harmony element. The print-frame attribute controls printing of a frame or fretboard diagram. The print-style attribute group sets the default for the harmony, but individual elements can override this with their own print-style values. The arrangement attribute specifies how multiple harmony-chord groups are arranged relative to each other. Harmony-chords with vertical arrangement are separated by horizontal lines. Harmony-chords with diagonal or horizontal arrangement are separated by diagonal lines or slashes.</para>
    /// </summary>
    [System.ComponentModel.DescriptionAttribute(@"The harmony type represents harmony analysis, including chord symbols in popular music as well as functional harmony analysis in classical music. If there are alternate harmonies possible, this can be specified using multiple harmony elements differentiated by type. Explicit harmonies have all note present in the music; implied have some notes missing but implied; alternate represents alternate analyses. The print-object attribute controls whether or not anything is printed due to the harmony element. The print-frame attribute controls printing of a frame or fretboard diagram. The print-style attribute group sets the default for the harmony, but individual elements can override this with their own print-style values. The arrangement attribute specifies how multiple harmony-chord groups are arranged relative to each other. Harmony-chords with vertical arrangement are separated by horizontal lines. Harmony-chords with diagonal or horizontal arrangement are separated by diagonal lines or slashes.")]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XmlSchemaClassGenerator", "2.1.1142.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute("harmony", Namespace="")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class Harmony : IHarmonyChord, IEditorial, IStaff, IPrintObject, IPrintStyle, IPlacement, ISystemRelation, IOptionalUniqueId
    {

        [System.Xml.Serialization.XmlIgnoreAttribute()]
        private System.Collections.ObjectModel.Collection<Root> _root;

        [System.Xml.Serialization.XmlElementAttribute("root")]
        public System.Collections.ObjectModel.Collection<Root> Root
        {
            get
            {
                return _root;
            }
            private set
            {
                _root = value;
            }
        }

        /// <summary>
        /// <para xml:lang="en">Gets a value indicating whether the Root collection is empty.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool RootSpecified
        {
            get
            {
                return (this.Root.Count != 0);
            }
        }

        /// <summary>
        /// <para xml:lang="en">Initializes a new instance of the <see cref="Harmony" /> class.</para>
        /// </summary>
        public Harmony()
        {
            this._root = new System.Collections.ObjectModel.Collection<Root>();
            this._numeral = new System.Collections.ObjectModel.Collection<Numeral>();
            this._function = new System.Collections.ObjectModel.Collection<StyleText>();
            this._kind = new System.Collections.ObjectModel.Collection<Kind>();
            this._inversion = new System.Collections.ObjectModel.Collection<Inversion>();
            this._bass = new System.Collections.ObjectModel.Collection<Bass>();
            this._degree = new System.Collections.ObjectModel.Collection<Degree>();
        }

        [System.Xml.Serialization.XmlIgnoreAttribute()]
        private System.Collections.ObjectModel.Collection<Numeral> _numeral;

        [System.Xml.Serialization.XmlElementAttribute("numeral")]
        public System.Collections.ObjectModel.Collection<Numeral> Numeral
        {
            get
            {
                return _numeral;
            }
            private set
            {
                _numeral = value;
            }
        }

        /// <summary>
        /// <para xml:lang="en">Gets a value indicating whether the Numeral collection is empty.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool NumeralSpecified
        {
            get
            {
                return (this.Numeral.Count != 0);
            }
        }

        [System.Xml.Serialization.XmlIgnoreAttribute()]
        private System.Collections.ObjectModel.Collection<StyleText> _function;

        /// <summary>
        /// <para>The function element represents classical functional harmony with an indication like I, II, III rather than C, D, E. It represents the Roman numeral part of a functional harmony rather than the complete function itself. It has been deprecated as of MusicXML 4.0 in favor of the numeral element.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute(@"The function element represents classical functional harmony with an indication like I, II, III rather than C, D, E. It represents the Roman numeral part of a functional harmony rather than the complete function itself. It has been deprecated as of MusicXML 4.0 in favor of the numeral element.")]
        [System.Xml.Serialization.XmlElementAttribute("function")]
        public System.Collections.ObjectModel.Collection<StyleText> Function
        {
            get
            {
                return _function;
            }
            private set
            {
                _function = value;
            }
        }

        /// <summary>
        /// <para xml:lang="en">Gets a value indicating whether the Function collection is empty.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool FunctionSpecified
        {
            get
            {
                return (this.Function.Count != 0);
            }
        }

        [System.Xml.Serialization.XmlIgnoreAttribute()]
        private System.Collections.ObjectModel.Collection<Kind> _kind;

        [System.ComponentModel.DataAnnotations.RequiredAttribute(AllowEmptyStrings=true)]
        [System.Xml.Serialization.XmlElementAttribute("kind")]
        public System.Collections.ObjectModel.Collection<Kind> Kind
        {
            get
            {
                return _kind;
            }
            private set
            {
                _kind = value;
            }
        }

        [System.Xml.Serialization.XmlIgnoreAttribute()]
        private System.Collections.ObjectModel.Collection<Inversion> _inversion;

        [System.Xml.Serialization.XmlElementAttribute("inversion")]
        public System.Collections.ObjectModel.Collection<Inversion> Inversion
        {
            get
            {
                return _inversion;
            }
            private set
            {
                _inversion = value;
            }
        }

        /// <summary>
        /// <para xml:lang="en">Gets a value indicating whether the Inversion collection is empty.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool InversionSpecified
        {
            get
            {
                return (this.Inversion.Count != 0);
            }
        }

        [System.Xml.Serialization.XmlIgnoreAttribute()]
        private System.Collections.ObjectModel.Collection<Bass> _bass;

        [System.Xml.Serialization.XmlElementAttribute("bass")]
        public System.Collections.ObjectModel.Collection<Bass> Bass
        {
            get
            {
                return _bass;
            }
            private set
            {
                _bass = value;
            }
        }

        /// <summary>
        /// <para xml:lang="en">Gets a value indicating whether the Bass collection is empty.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool BassSpecified
        {
            get
            {
                return (this.Bass.Count != 0);
            }
        }

        [System.Xml.Serialization.XmlIgnoreAttribute()]
        private System.Collections.ObjectModel.Collection<Degree> _degree;

        [System.Xml.Serialization.XmlElementAttribute("degree")]
        public System.Collections.ObjectModel.Collection<Degree> Degree
        {
            get
            {
                return _degree;
            }
            private set
            {
                _degree = value;
            }
        }

        /// <summary>
        /// <para xml:lang="en">Gets a value indicating whether the Degree collection is empty.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool DegreeSpecified
        {
            get
            {
                return (this.Degree.Count != 0);
            }
        }

        [System.Xml.Serialization.XmlElementAttribute("frame")]
        public Frame Frame { get; set; }

        [System.Xml.Serialization.XmlElementAttribute("offset")]
        public Offset Offset { get; set; }

        [System.Xml.Serialization.XmlElementAttribute("footnote")]
        public FormattedText Footnote { get; set; }

        [System.Xml.Serialization.XmlElementAttribute("level")]
        public Level Level { get; set; }

        /// <summary>
        /// <para>Staff assignment is only needed for music notated on multiple staves. Used by both notes and directions. Staff values are numbers, with 1 referring to the top-most staff in a part.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Staff assignment is only needed for music notated on multiple staves. Used by bot" +
            "h notes and directions. Staff values are numbers, with 1 referring to the top-mo" +
            "st staff in a part.")]
        [System.Xml.Serialization.XmlElementAttribute("staff")]
        public string Staff { get; set; }

        [System.Xml.Serialization.XmlAttributeAttribute("type")]
        public HarmonyType Type { get; set; }

        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the Type property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool TypeSpecified { get; set; }

        [System.Xml.Serialization.XmlAttributeAttribute("print-object")]
        public YesNo PrintObject { get; set; }

        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the PrintObject property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool PrintObjectSpecified { get; set; }

        [System.Xml.Serialization.XmlAttributeAttribute("print-frame")]
        public YesNo PrintFrame { get; set; }

        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the PrintFrame property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool PrintFrameSpecified { get; set; }

        [System.Xml.Serialization.XmlAttributeAttribute("arrangement")]
        public HarmonyArrangement Arrangement { get; set; }

        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the Arrangement property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool ArrangementSpecified { get; set; }

        /// <summary>
        /// <para>The tenths type is a number representing tenths of interline staff space (positive or negative). Both integer and decimal values are allowed, such as 5 for a half space and 2.5 for a quarter space. Interline space is measured from the middle of a staff line.
        ///
        ///Distances in a MusicXML file are measured in tenths of staff space. Tenths are then scaled to millimeters within the scaling element, used in the defaults element at the start of a score. Individual staves can apply a scaling factor to adjust staff size. When a MusicXML element or attribute refers to tenths, it means the global tenths defined by the scaling element, not the local tenths as adjusted by the staff-size element.</para>
        /// </summary>
        [System.Xml.Serialization.XmlAttributeAttribute("default-x")]
        public decimal DefaultX { get; set; }

        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the DefaultX property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool DefaultXSpecified { get; set; }

        /// <summary>
        /// <para>The tenths type is a number representing tenths of interline staff space (positive or negative). Both integer and decimal values are allowed, such as 5 for a half space and 2.5 for a quarter space. Interline space is measured from the middle of a staff line.
        ///
        ///Distances in a MusicXML file are measured in tenths of staff space. Tenths are then scaled to millimeters within the scaling element, used in the defaults element at the start of a score. Individual staves can apply a scaling factor to adjust staff size. When a MusicXML element or attribute refers to tenths, it means the global tenths defined by the scaling element, not the local tenths as adjusted by the staff-size element.</para>
        /// </summary>
        [System.Xml.Serialization.XmlAttributeAttribute("default-y")]
        public decimal DefaultY { get; set; }

        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the DefaultY property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool DefaultYSpecified { get; set; }

        /// <summary>
        /// <para>The tenths type is a number representing tenths of interline staff space (positive or negative). Both integer and decimal values are allowed, such as 5 for a half space and 2.5 for a quarter space. Interline space is measured from the middle of a staff line.
        ///
        ///Distances in a MusicXML file are measured in tenths of staff space. Tenths are then scaled to millimeters within the scaling element, used in the defaults element at the start of a score. Individual staves can apply a scaling factor to adjust staff size. When a MusicXML element or attribute refers to tenths, it means the global tenths defined by the scaling element, not the local tenths as adjusted by the staff-size element.</para>
        /// </summary>
        [System.Xml.Serialization.XmlAttributeAttribute("relative-x")]
        public decimal RelativeX { get; set; }

        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the RelativeX property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool RelativeXSpecified { get; set; }

        /// <summary>
        /// <para>The tenths type is a number representing tenths of interline staff space (positive or negative). Both integer and decimal values are allowed, such as 5 for a half space and 2.5 for a quarter space. Interline space is measured from the middle of a staff line.
        ///
        ///Distances in a MusicXML file are measured in tenths of staff space. Tenths are then scaled to millimeters within the scaling element, used in the defaults element at the start of a score. Individual staves can apply a scaling factor to adjust staff size. When a MusicXML element or attribute refers to tenths, it means the global tenths defined by the scaling element, not the local tenths as adjusted by the staff-size element.</para>
        /// </summary>
        [System.Xml.Serialization.XmlAttributeAttribute("relative-y")]
        public decimal RelativeY { get; set; }

        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the RelativeY property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool RelativeYSpecified { get; set; }

        /// <summary>
        /// <para>The font-family is a comma-separated list of font names. These can be specific font styles such as Maestro or Opus, or one of several generic font styles: music, engraved, handwritten, text, serif, sans-serif, handwritten, cursive, fantasy, and monospace. The music, engraved, and handwritten values refer to music fonts; the rest refer to text fonts. The fantasy style refers to decorative text such as found in older German-style printing.</para>
        /// <para xml:lang="en">Pattern: [^,]+(, ?[^,]+)*.</para>
        /// </summary>
        [System.ComponentModel.DataAnnotations.RegularExpressionAttribute("[^,]+(, ?[^,]+)*")]
        [System.Xml.Serialization.XmlAttributeAttribute("font-family")]
        public string FontFamily { get; set; }

        [System.Xml.Serialization.XmlAttributeAttribute("font-style")]
        public FontStyle FontStyle { get; set; }

        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the FontStyle property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool FontStyleSpecified { get; set; }

        /// <summary>
        /// <para>The font-size can be one of the CSS font sizes (xx-small, x-small, small, medium, large, x-large, xx-large) or a numeric point size.</para>
        /// </summary>
        [System.Xml.Serialization.XmlAttributeAttribute("font-size")]
        public string FontSize { get; set; }

        [System.Xml.Serialization.XmlAttributeAttribute("font-weight")]
        public FontWeight FontWeight { get; set; }

        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the FontWeight property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool FontWeightSpecified { get; set; }

        /// <summary>
        /// <para>The color type indicates the color of an element. Color may be represented as hexadecimal RGB triples, as in HTML, or as hexadecimal ARGB tuples, with the A indicating alpha of transparency. An alpha value of 00 is totally transparent; FF is totally opaque. If RGB is used, the A value is assumed to be FF.
        ///
        ///For instance, the RGB value "#800080" represents purple. An ARGB value of "#40800080" would be a transparent purple.
        ///
        ///As in SVG 1.1, colors are defined in terms of the sRGB color space (IEC 61966).</para>
        /// <para xml:lang="en">Pattern: #[\dA-F]{6}([\dA-F][\dA-F])?.</para>
        /// </summary>
        [System.ComponentModel.DataAnnotations.RegularExpressionAttribute("#[\\dA-F]{6}([\\dA-F][\\dA-F])?")]
        [System.Xml.Serialization.XmlAttributeAttribute("color")]
        public string Color { get; set; }

        [System.Xml.Serialization.XmlAttributeAttribute("placement")]
        public AboveBelow Placement { get; set; }

        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the Placement property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool PlacementSpecified { get; set; }

        [System.Xml.Serialization.XmlAttributeAttribute("system")]
        public SystemRelation System { get; set; }

        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the System property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool SystemSpecified { get; set; }

        [System.Xml.Serialization.XmlAttributeAttribute("id")]
        public string Id { get; set; }
    }

    /// <summary>
    /// <para>A harmony element can contain many stacked chords (e.g. V of II). A sequence of harmony-chord groups is used for this type of secondary function, where V of II would be represented by a harmony-chord with a 5 numeral followed by a harmony-chord with a 2 numeral.
    ///
    ///A root is a pitch name like C, D, E, while a numeral is a scale degree like 1, 2, 3. The root element is generally used with pop chord symbols, while the numeral element is generally used with classical functional harmony and Nashville numbers. It is an either/or choice to avoid data inconsistency. The function element, which represents Roman numerals with roman numeral text, has been deprecated as of MusicXML 4.0.</para>
    /// </summary>
    [System.ComponentModel.DescriptionAttribute(@"A harmony element can contain many stacked chords (e.g. V of II). A sequence of harmony-chord groups is used for this type of secondary function, where V of II would be represented by a harmony-chord with a 5 numeral followed by a harmony-chord with a 2 numeral. A root is a pitch name like C, D, E, while a numeral is a scale degree like 1, 2, 3. The root element is generally used with pop chord symbols, while the numeral element is generally used with classical functional harmony and Nashville numbers. It is an either/or choice to avoid data inconsistency. The function element, which represents Roman numerals with roman numeral text, has been deprecated as of MusicXML 4.0.")]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XmlSchemaClassGenerator", "2.1.1142.0")]
    public partial interface IHarmonyChord
    {

        System.Collections.ObjectModel.Collection<Root> Root
        {
            get;
        }

        System.Collections.ObjectModel.Collection<Numeral> Numeral
        {
            get;
        }

        /// <summary>
        /// <para>The function element represents classical functional harmony with an indication like I, II, III rather than C, D, E. It represents the Roman numeral part of a functional harmony rather than the complete function itself. It has been deprecated as of MusicXML 4.0 in favor of the numeral element.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute(@"The function element represents classical functional harmony with an indication like I, II, III rather than C, D, E. It represents the Roman numeral part of a functional harmony rather than the complete function itself. It has been deprecated as of MusicXML 4.0 in favor of the numeral element.")]
        System.Collections.ObjectModel.Collection<StyleText> Function
        {
            get;
        }

        System.Collections.ObjectModel.Collection<Kind> Kind
        {
            get;
        }

        System.Collections.ObjectModel.Collection<Inversion> Inversion
        {
            get;
        }

        System.Collections.ObjectModel.Collection<Bass> Bass
        {
            get;
        }

        System.Collections.ObjectModel.Collection<Degree> Degree
        {
            get;
        }
    }

    /// <summary>
    /// <para>The root type indicates a pitch like C, D, E vs. a scale degree like 1, 2, 3. It is used with chord symbols in popular music. The root element has a root-step and optional root-alter element similar to the step and alter elements, but renamed to distinguish the different musical meanings.</para>
    /// </summary>
    [System.ComponentModel.DescriptionAttribute(@"The root type indicates a pitch like C, D, E vs. a scale degree like 1, 2, 3. It is used with chord symbols in popular music. The root element has a root-step and optional root-alter element similar to the step and alter elements, but renamed to distinguish the different musical meanings.")]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XmlSchemaClassGenerator", "2.1.1142.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute("root", Namespace="")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class Root
    {

        [System.ComponentModel.DataAnnotations.RequiredAttribute(AllowEmptyStrings=true)]
        [System.Xml.Serialization.XmlElementAttribute("root-step")]
        public RootStep RootStep { get; set; }

        /// <summary>
        /// <para>The root-alter element represents the chromatic alteration of the root of the current chord within the harmony element. In some chord styles, the text for the root-step element may include root-alter information. In that case, the print-object attribute of the root-alter element can be set to no. The location attribute indicates whether the alteration should appear to the left or the right of the root-step; it is right by default.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute(@"The root-alter element represents the chromatic alteration of the root of the current chord within the harmony element. In some chord styles, the text for the root-step element may include root-alter information. In that case, the print-object attribute of the root-alter element can be set to no. The location attribute indicates whether the alteration should appear to the left or the right of the root-step; it is right by default.")]
        [System.Xml.Serialization.XmlElementAttribute("root-alter")]
        public HarmonyAlter RootAlter { get; set; }
    }

    /// <summary>
    /// <para>The root-step type represents the pitch step of the root of the current chord within the harmony element. The text attribute indicates how the root should appear in a score if not using the element contents.</para>
    /// </summary>
    [System.ComponentModel.DescriptionAttribute("The root-step type represents the pitch step of the root of the current chord wit" +
        "hin the harmony element. The text attribute indicates how the root should appear" +
        " in a score if not using the element contents.")]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XmlSchemaClassGenerator", "2.1.1142.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute("root-step", Namespace="")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class RootStep : IPrintStyle
    {

        /// <summary>
        /// <para xml:lang="en">Gets or sets the text value.</para>
        /// </summary>
        [System.Xml.Serialization.XmlTextAttribute()]
        public Step Value { get; set; }

        [System.Xml.Serialization.XmlAttributeAttribute("text")]
        public string Text { get; set; }

        /// <summary>
        /// <para>The tenths type is a number representing tenths of interline staff space (positive or negative). Both integer and decimal values are allowed, such as 5 for a half space and 2.5 for a quarter space. Interline space is measured from the middle of a staff line.
        ///
        ///Distances in a MusicXML file are measured in tenths of staff space. Tenths are then scaled to millimeters within the scaling element, used in the defaults element at the start of a score. Individual staves can apply a scaling factor to adjust staff size. When a MusicXML element or attribute refers to tenths, it means the global tenths defined by the scaling element, not the local tenths as adjusted by the staff-size element.</para>
        /// </summary>
        [System.Xml.Serialization.XmlAttributeAttribute("default-x")]
        public decimal DefaultX { get; set; }

        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the DefaultX property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool DefaultXSpecified { get; set; }

        /// <summary>
        /// <para>The tenths type is a number representing tenths of interline staff space (positive or negative). Both integer and decimal values are allowed, such as 5 for a half space and 2.5 for a quarter space. Interline space is measured from the middle of a staff line.
        ///
        ///Distances in a MusicXML file are measured in tenths of staff space. Tenths are then scaled to millimeters within the scaling element, used in the defaults element at the start of a score. Individual staves can apply a scaling factor to adjust staff size. When a MusicXML element or attribute refers to tenths, it means the global tenths defined by the scaling element, not the local tenths as adjusted by the staff-size element.</para>
        /// </summary>
        [System.Xml.Serialization.XmlAttributeAttribute("default-y")]
        public decimal DefaultY { get; set; }

        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the DefaultY property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool DefaultYSpecified { get; set; }

        /// <summary>
        /// <para>The tenths type is a number representing tenths of interline staff space (positive or negative). Both integer and decimal values are allowed, such as 5 for a half space and 2.5 for a quarter space. Interline space is measured from the middle of a staff line.
        ///
        ///Distances in a MusicXML file are measured in tenths of staff space. Tenths are then scaled to millimeters within the scaling element, used in the defaults element at the start of a score. Individual staves can apply a scaling factor to adjust staff size. When a MusicXML element or attribute refers to tenths, it means the global tenths defined by the scaling element, not the local tenths as adjusted by the staff-size element.</para>
        /// </summary>
        [System.Xml.Serialization.XmlAttributeAttribute("relative-x")]
        public decimal RelativeX { get; set; }

        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the RelativeX property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool RelativeXSpecified { get; set; }

        /// <summary>
        /// <para>The tenths type is a number representing tenths of interline staff space (positive or negative). Both integer and decimal values are allowed, such as 5 for a half space and 2.5 for a quarter space. Interline space is measured from the middle of a staff line.
        ///
        ///Distances in a MusicXML file are measured in tenths of staff space. Tenths are then scaled to millimeters within the scaling element, used in the defaults element at the start of a score. Individual staves can apply a scaling factor to adjust staff size. When a MusicXML element or attribute refers to tenths, it means the global tenths defined by the scaling element, not the local tenths as adjusted by the staff-size element.</para>
        /// </summary>
        [System.Xml.Serialization.XmlAttributeAttribute("relative-y")]
        public decimal RelativeY { get; set; }

        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the RelativeY property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool RelativeYSpecified { get; set; }

        /// <summary>
        /// <para>The font-family is a comma-separated list of font names. These can be specific font styles such as Maestro or Opus, or one of several generic font styles: music, engraved, handwritten, text, serif, sans-serif, handwritten, cursive, fantasy, and monospace. The music, engraved, and handwritten values refer to music fonts; the rest refer to text fonts. The fantasy style refers to decorative text such as found in older German-style printing.</para>
        /// <para xml:lang="en">Pattern: [^,]+(, ?[^,]+)*.</para>
        /// </summary>
        [System.ComponentModel.DataAnnotations.RegularExpressionAttribute("[^,]+(, ?[^,]+)*")]
        [System.Xml.Serialization.XmlAttributeAttribute("font-family")]
        public string FontFamily { get; set; }

        [System.Xml.Serialization.XmlAttributeAttribute("font-style")]
        public FontStyle FontStyle { get; set; }

        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the FontStyle property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool FontStyleSpecified { get; set; }

        /// <summary>
        /// <para>The font-size can be one of the CSS font sizes (xx-small, x-small, small, medium, large, x-large, xx-large) or a numeric point size.</para>
        /// </summary>
        [System.Xml.Serialization.XmlAttributeAttribute("font-size")]
        public string FontSize { get; set; }

        [System.Xml.Serialization.XmlAttributeAttribute("font-weight")]
        public FontWeight FontWeight { get; set; }

        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the FontWeight property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool FontWeightSpecified { get; set; }

        /// <summary>
        /// <para>The color type indicates the color of an element. Color may be represented as hexadecimal RGB triples, as in HTML, or as hexadecimal ARGB tuples, with the A indicating alpha of transparency. An alpha value of 00 is totally transparent; FF is totally opaque. If RGB is used, the A value is assumed to be FF.
        ///
        ///For instance, the RGB value "#800080" represents purple. An ARGB value of "#40800080" would be a transparent purple.
        ///
        ///As in SVG 1.1, colors are defined in terms of the sRGB color space (IEC 61966).</para>
        /// <para xml:lang="en">Pattern: #[\dA-F]{6}([\dA-F][\dA-F])?.</para>
        /// </summary>
        [System.ComponentModel.DataAnnotations.RegularExpressionAttribute("#[\\dA-F]{6}([\\dA-F][\\dA-F])?")]
        [System.Xml.Serialization.XmlAttributeAttribute("color")]
        public string Color { get; set; }
    }

    /// <summary>
    /// <para>The numeral type represents the Roman numeral or Nashville number part of a harmony. It requires that the key be specified in the encoding, either with a key or numeral-key element.</para>
    /// </summary>
    [System.ComponentModel.DescriptionAttribute("The numeral type represents the Roman numeral or Nashville number part of a harmo" +
        "ny. It requires that the key be specified in the encoding, either with a key or " +
        "numeral-key element.")]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XmlSchemaClassGenerator", "2.1.1142.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute("numeral", Namespace="")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class Numeral
    {

        [System.ComponentModel.DataAnnotations.RequiredAttribute(AllowEmptyStrings=true)]
        [System.Xml.Serialization.XmlElementAttribute("numeral-root")]
        public NumeralRoot NumeralRoot { get; set; }

        /// <summary>
        /// <para>The numeral-alter element represents an alteration to the numeral-root, similar to the alter element for a pitch. The print-object attribute can be used to hide an alteration in cases such as when the MusicXML encoding of a 6 or 7 numeral-root in a minor key requires an alteration that is not displayed. The location attribute indicates whether the alteration should appear to the left or the right of the numeral-root. It is left by default.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute(@"The numeral-alter element represents an alteration to the numeral-root, similar to the alter element for a pitch. The print-object attribute can be used to hide an alteration in cases such as when the MusicXML encoding of a 6 or 7 numeral-root in a minor key requires an alteration that is not displayed. The location attribute indicates whether the alteration should appear to the left or the right of the numeral-root. It is left by default.")]
        [System.Xml.Serialization.XmlElementAttribute("numeral-alter")]
        public HarmonyAlter NumeralAlter { get; set; }

        [System.Xml.Serialization.XmlElementAttribute("numeral-key")]
        public NumeralKey NumeralKey { get; set; }
    }

    /// <summary>
    /// <para>The numeral-root type represents the Roman numeral or Nashville number as a positive integer from 1 to 7. The text attribute indicates how the numeral should appear in the score. A numeral-root value of 5 with a kind of major would have a text attribute of "V" if displayed as a Roman numeral, and "5" if displayed as a Nashville number. If the text attribute is not specified, the display is application-dependent.</para>
    /// </summary>
    [System.ComponentModel.DescriptionAttribute(@"The numeral-root type represents the Roman numeral or Nashville number as a positive integer from 1 to 7. The text attribute indicates how the numeral should appear in the score. A numeral-root value of 5 with a kind of major would have a text attribute of ""V"" if displayed as a Roman numeral, and ""5"" if displayed as a Nashville number. If the text attribute is not specified, the display is application-dependent.")]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XmlSchemaClassGenerator", "2.1.1142.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute("numeral-root", Namespace="")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class NumeralRoot : IPrintStyle
    {

        /// <summary>
        /// <para xml:lang="en">Gets or sets the text value.</para>
        /// <para xml:lang="en">Minimum inclusive value: 1.</para>
        /// <para xml:lang="en">Maximum inclusive value: 7.</para>
        /// </summary>
        [System.ComponentModel.DataAnnotations.RangeAttribute(typeof(decimal), "1", "7")]
        [System.Xml.Serialization.XmlTextAttribute()]
        public byte Value { get; set; }

        [System.Xml.Serialization.XmlAttributeAttribute("text")]
        public string Text { get; set; }

        /// <summary>
        /// <para>The tenths type is a number representing tenths of interline staff space (positive or negative). Both integer and decimal values are allowed, such as 5 for a half space and 2.5 for a quarter space. Interline space is measured from the middle of a staff line.
        ///
        ///Distances in a MusicXML file are measured in tenths of staff space. Tenths are then scaled to millimeters within the scaling element, used in the defaults element at the start of a score. Individual staves can apply a scaling factor to adjust staff size. When a MusicXML element or attribute refers to tenths, it means the global tenths defined by the scaling element, not the local tenths as adjusted by the staff-size element.</para>
        /// </summary>
        [System.Xml.Serialization.XmlAttributeAttribute("default-x")]
        public decimal DefaultX { get; set; }

        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the DefaultX property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool DefaultXSpecified { get; set; }

        /// <summary>
        /// <para>The tenths type is a number representing tenths of interline staff space (positive or negative). Both integer and decimal values are allowed, such as 5 for a half space and 2.5 for a quarter space. Interline space is measured from the middle of a staff line.
        ///
        ///Distances in a MusicXML file are measured in tenths of staff space. Tenths are then scaled to millimeters within the scaling element, used in the defaults element at the start of a score. Individual staves can apply a scaling factor to adjust staff size. When a MusicXML element or attribute refers to tenths, it means the global tenths defined by the scaling element, not the local tenths as adjusted by the staff-size element.</para>
        /// </summary>
        [System.Xml.Serialization.XmlAttributeAttribute("default-y")]
        public decimal DefaultY { get; set; }

        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the DefaultY property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool DefaultYSpecified { get; set; }

        /// <summary>
        /// <para>The tenths type is a number representing tenths of interline staff space (positive or negative). Both integer and decimal values are allowed, such as 5 for a half space and 2.5 for a quarter space. Interline space is measured from the middle of a staff line.
        ///
        ///Distances in a MusicXML file are measured in tenths of staff space. Tenths are then scaled to millimeters within the scaling element, used in the defaults element at the start of a score. Individual staves can apply a scaling factor to adjust staff size. When a MusicXML element or attribute refers to tenths, it means the global tenths defined by the scaling element, not the local tenths as adjusted by the staff-size element.</para>
        /// </summary>
        [System.Xml.Serialization.XmlAttributeAttribute("relative-x")]
        public decimal RelativeX { get; set; }

        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the RelativeX property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool RelativeXSpecified { get; set; }

        /// <summary>
        /// <para>The tenths type is a number representing tenths of interline staff space (positive or negative). Both integer and decimal values are allowed, such as 5 for a half space and 2.5 for a quarter space. Interline space is measured from the middle of a staff line.
        ///
        ///Distances in a MusicXML file are measured in tenths of staff space. Tenths are then scaled to millimeters within the scaling element, used in the defaults element at the start of a score. Individual staves can apply a scaling factor to adjust staff size. When a MusicXML element or attribute refers to tenths, it means the global tenths defined by the scaling element, not the local tenths as adjusted by the staff-size element.</para>
        /// </summary>
        [System.Xml.Serialization.XmlAttributeAttribute("relative-y")]
        public decimal RelativeY { get; set; }

        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the RelativeY property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool RelativeYSpecified { get; set; }

        /// <summary>
        /// <para>The font-family is a comma-separated list of font names. These can be specific font styles such as Maestro or Opus, or one of several generic font styles: music, engraved, handwritten, text, serif, sans-serif, handwritten, cursive, fantasy, and monospace. The music, engraved, and handwritten values refer to music fonts; the rest refer to text fonts. The fantasy style refers to decorative text such as found in older German-style printing.</para>
        /// <para xml:lang="en">Pattern: [^,]+(, ?[^,]+)*.</para>
        /// </summary>
        [System.ComponentModel.DataAnnotations.RegularExpressionAttribute("[^,]+(, ?[^,]+)*")]
        [System.Xml.Serialization.XmlAttributeAttribute("font-family")]
        public string FontFamily { get; set; }

        [System.Xml.Serialization.XmlAttributeAttribute("font-style")]
        public FontStyle FontStyle { get; set; }

        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the FontStyle property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool FontStyleSpecified { get; set; }

        /// <summary>
        /// <para>The font-size can be one of the CSS font sizes (xx-small, x-small, small, medium, large, x-large, xx-large) or a numeric point size.</para>
        /// </summary>
        [System.Xml.Serialization.XmlAttributeAttribute("font-size")]
        public string FontSize { get; set; }

        [System.Xml.Serialization.XmlAttributeAttribute("font-weight")]
        public FontWeight FontWeight { get; set; }

        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the FontWeight property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool FontWeightSpecified { get; set; }

        /// <summary>
        /// <para>The color type indicates the color of an element. Color may be represented as hexadecimal RGB triples, as in HTML, or as hexadecimal ARGB tuples, with the A indicating alpha of transparency. An alpha value of 00 is totally transparent; FF is totally opaque. If RGB is used, the A value is assumed to be FF.
        ///
        ///For instance, the RGB value "#800080" represents purple. An ARGB value of "#40800080" would be a transparent purple.
        ///
        ///As in SVG 1.1, colors are defined in terms of the sRGB color space (IEC 61966).</para>
        /// <para xml:lang="en">Pattern: #[\dA-F]{6}([\dA-F][\dA-F])?.</para>
        /// </summary>
        [System.ComponentModel.DataAnnotations.RegularExpressionAttribute("#[\\dA-F]{6}([\\dA-F][\\dA-F])?")]
        [System.Xml.Serialization.XmlAttributeAttribute("color")]
        public string Color { get; set; }
    }

    /// <summary>
    /// <para>The numeral-key type is used when the key for the numeral is different than the key specified by the key signature. The numeral-fifths element specifies the key in the same way as the fifths element. The numeral-mode element specifies the mode similar to the mode element, but with a restricted set of values</para>
    /// </summary>
    [System.ComponentModel.DescriptionAttribute(@"The numeral-key type is used when the key for the numeral is different than the key specified by the key signature. The numeral-fifths element specifies the key in the same way as the fifths element. The numeral-mode element specifies the mode similar to the mode element, but with a restricted set of values")]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XmlSchemaClassGenerator", "2.1.1142.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute("numeral-key", Namespace="")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class NumeralKey : IPrintObject
    {

        /// <summary>
        /// <para>The fifths type represents the number of flats or sharps in a traditional key signature. Negative numbers are used for flats and positive numbers for sharps, reflecting the key's placement within the circle of fifths (hence the type name).</para>
        /// </summary>
        [System.ComponentModel.DataAnnotations.RequiredAttribute(AllowEmptyStrings=true)]
        [System.Xml.Serialization.XmlElementAttribute("numeral-fifths")]
        public string NumeralFifths { get; set; }

        [System.ComponentModel.DataAnnotations.RequiredAttribute(AllowEmptyStrings=true)]
        [System.Xml.Serialization.XmlElementAttribute("numeral-mode")]
        public NumeralMode NumeralMode { get; set; }

        [System.Xml.Serialization.XmlAttributeAttribute("print-object")]
        public YesNo PrintObject { get; set; }

        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the PrintObject property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool PrintObjectSpecified { get; set; }
    }

    /// <summary>
    /// <para>Kind indicates the type of chord. Degree elements can then add, subtract, or alter from these starting points
    ///
    ///The attributes are used to indicate the formatting of the symbol. Since the kind element is the constant in all the harmony-chord groups that can make up a polychord, many formatting attributes are here.
    ///
    ///The use-symbols attribute is yes if the kind should be represented when possible with harmony symbols rather than letters and numbers. These symbols include:
    ///
    ///	major: a triangle, like Unicode 25B3
    ///	minor: -, like Unicode 002D
    ///	augmented: +, like Unicode 002B
    ///	diminished: °, like Unicode 00B0
    ///	half-diminished: ø, like Unicode 00F8
    ///
    ///For the major-minor kind, only the minor symbol is used when use-symbols is yes. The major symbol is set using the symbol attribute in the degree-value element. The corresponding degree-alter value will usually be 0 in this case.
    ///
    ///The text attribute describes how the kind should be spelled in a score. If use-symbols is yes, the value of the text attribute follows the symbol. The stack-degrees attribute is yes if the degree elements should be stacked above each other. The parentheses-degrees attribute is yes if all the degrees should be in parentheses. The bracket-degrees attribute is yes if all the degrees should be in a bracket. If not specified, these values are implementation-specific. The alignment attributes are for the entire harmony-chord group of which this kind element is a part.
    ///
    ///The text attribute may use strings such as "13sus" that refer to both the kind and one or more degree elements. In this case, the corresponding degree elements should have the print-object attribute set to "no" to keep redundant alterations from being displayed.</para>
    /// </summary>
    [System.ComponentModel.DescriptionAttribute("Kind indicates the type of chord. Degree elements can then add, subtract, or alte" +
        "r from these starting points The attributes are used to indicate the formatting " +
        "of the symbol. Since the kind element is the constant in all the harmony-chord g" +
        "roups that can make up a polychord, many formatting attributes are here. The use" +
        "-symbols attribute is yes if the kind should be represented when possible with h" +
        "armony symbols rather than letters and numbers. These symbols include: major: a " +
        "triangle, like Unicode 25B3 minor: -, like Unicode 002D augmented: +, like Unico" +
        "de 002B diminished: °, like Unicode 00B0 half-diminished: ø, like Unicode 00F8 F" +
        "or the major-minor kind, only the minor symbol is used when use-symbols is yes. " +
        "The major symbol is set using the symbol attribute in the degree-value element. " +
        "The corresponding degree-alter value will usually be 0 in this case. The text at" +
        "tribute describes how the kind should be spelled in a score. If use-symbols is y" +
        "es, the value of the text attribute follows the symbol. The stack-degrees attrib" +
        "ute is yes if the degree elements should be stacked above each other. The parent" +
        "heses-degrees attribute is yes if all the degrees should be in parentheses. The " +
        "bracket-degrees attribute is yes if all the degrees should be in a bracket. If n" +
        "ot specified, these values are implementation-specific. The alignment attributes" +
        " are for the entire harmony-chord group of which this kind element is a part. Th" +
        "e text attribute may use strings such as \"13sus\" that refer to both the kind and" +
        " one or more degree elements. In this case, the corresponding degree elements sh" +
        "ould have the print-object attribute set to \"no\" to keep redundant alterations f" +
        "rom being displayed.")]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XmlSchemaClassGenerator", "2.1.1142.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute("kind", Namespace="")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class Kind : IPrintStyle, IHalign, IValign
    {

        /// <summary>
        /// <para xml:lang="en">Gets or sets the text value.</para>
        /// </summary>
        [System.Xml.Serialization.XmlTextAttribute()]
        public KindValue Value { get; set; }

        [System.Xml.Serialization.XmlAttributeAttribute("use-symbols")]
        public YesNo UseSymbols { get; set; }

        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the UseSymbols property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool UseSymbolsSpecified { get; set; }

        [System.Xml.Serialization.XmlAttributeAttribute("text")]
        public string Text { get; set; }

        [System.Xml.Serialization.XmlAttributeAttribute("stack-degrees")]
        public YesNo StackDegrees { get; set; }

        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the StackDegrees property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool StackDegreesSpecified { get; set; }

        [System.Xml.Serialization.XmlAttributeAttribute("parentheses-degrees")]
        public YesNo ParenthesesDegrees { get; set; }

        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the ParenthesesDegrees property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool ParenthesesDegreesSpecified { get; set; }

        [System.Xml.Serialization.XmlAttributeAttribute("bracket-degrees")]
        public YesNo BracketDegrees { get; set; }

        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the BracketDegrees property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool BracketDegreesSpecified { get; set; }

        /// <summary>
        /// <para>The tenths type is a number representing tenths of interline staff space (positive or negative). Both integer and decimal values are allowed, such as 5 for a half space and 2.5 for a quarter space. Interline space is measured from the middle of a staff line.
        ///
        ///Distances in a MusicXML file are measured in tenths of staff space. Tenths are then scaled to millimeters within the scaling element, used in the defaults element at the start of a score. Individual staves can apply a scaling factor to adjust staff size. When a MusicXML element or attribute refers to tenths, it means the global tenths defined by the scaling element, not the local tenths as adjusted by the staff-size element.</para>
        /// </summary>
        [System.Xml.Serialization.XmlAttributeAttribute("default-x")]
        public decimal DefaultX { get; set; }

        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the DefaultX property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool DefaultXSpecified { get; set; }

        /// <summary>
        /// <para>The tenths type is a number representing tenths of interline staff space (positive or negative). Both integer and decimal values are allowed, such as 5 for a half space and 2.5 for a quarter space. Interline space is measured from the middle of a staff line.
        ///
        ///Distances in a MusicXML file are measured in tenths of staff space. Tenths are then scaled to millimeters within the scaling element, used in the defaults element at the start of a score. Individual staves can apply a scaling factor to adjust staff size. When a MusicXML element or attribute refers to tenths, it means the global tenths defined by the scaling element, not the local tenths as adjusted by the staff-size element.</para>
        /// </summary>
        [System.Xml.Serialization.XmlAttributeAttribute("default-y")]
        public decimal DefaultY { get; set; }

        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the DefaultY property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool DefaultYSpecified { get; set; }

        /// <summary>
        /// <para>The tenths type is a number representing tenths of interline staff space (positive or negative). Both integer and decimal values are allowed, such as 5 for a half space and 2.5 for a quarter space. Interline space is measured from the middle of a staff line.
        ///
        ///Distances in a MusicXML file are measured in tenths of staff space. Tenths are then scaled to millimeters within the scaling element, used in the defaults element at the start of a score. Individual staves can apply a scaling factor to adjust staff size. When a MusicXML element or attribute refers to tenths, it means the global tenths defined by the scaling element, not the local tenths as adjusted by the staff-size element.</para>
        /// </summary>
        [System.Xml.Serialization.XmlAttributeAttribute("relative-x")]
        public decimal RelativeX { get; set; }

        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the RelativeX property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool RelativeXSpecified { get; set; }

        /// <summary>
        /// <para>The tenths type is a number representing tenths of interline staff space (positive or negative). Both integer and decimal values are allowed, such as 5 for a half space and 2.5 for a quarter space. Interline space is measured from the middle of a staff line.
        ///
        ///Distances in a MusicXML file are measured in tenths of staff space. Tenths are then scaled to millimeters within the scaling element, used in the defaults element at the start of a score. Individual staves can apply a scaling factor to adjust staff size. When a MusicXML element or attribute refers to tenths, it means the global tenths defined by the scaling element, not the local tenths as adjusted by the staff-size element.</para>
        /// </summary>
        [System.Xml.Serialization.XmlAttributeAttribute("relative-y")]
        public decimal RelativeY { get; set; }

        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the RelativeY property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool RelativeYSpecified { get; set; }

        /// <summary>
        /// <para>The font-family is a comma-separated list of font names. These can be specific font styles such as Maestro or Opus, or one of several generic font styles: music, engraved, handwritten, text, serif, sans-serif, handwritten, cursive, fantasy, and monospace. The music, engraved, and handwritten values refer to music fonts; the rest refer to text fonts. The fantasy style refers to decorative text such as found in older German-style printing.</para>
        /// <para xml:lang="en">Pattern: [^,]+(, ?[^,]+)*.</para>
        /// </summary>
        [System.ComponentModel.DataAnnotations.RegularExpressionAttribute("[^,]+(, ?[^,]+)*")]
        [System.Xml.Serialization.XmlAttributeAttribute("font-family")]
        public string FontFamily { get; set; }

        [System.Xml.Serialization.XmlAttributeAttribute("font-style")]
        public FontStyle FontStyle { get; set; }

        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the FontStyle property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool FontStyleSpecified { get; set; }

        /// <summary>
        /// <para>The font-size can be one of the CSS font sizes (xx-small, x-small, small, medium, large, x-large, xx-large) or a numeric point size.</para>
        /// </summary>
        [System.Xml.Serialization.XmlAttributeAttribute("font-size")]
        public string FontSize { get; set; }

        [System.Xml.Serialization.XmlAttributeAttribute("font-weight")]
        public FontWeight FontWeight { get; set; }

        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the FontWeight property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool FontWeightSpecified { get; set; }

        /// <summary>
        /// <para>The color type indicates the color of an element. Color may be represented as hexadecimal RGB triples, as in HTML, or as hexadecimal ARGB tuples, with the A indicating alpha of transparency. An alpha value of 00 is totally transparent; FF is totally opaque. If RGB is used, the A value is assumed to be FF.
        ///
        ///For instance, the RGB value "#800080" represents purple. An ARGB value of "#40800080" would be a transparent purple.
        ///
        ///As in SVG 1.1, colors are defined in terms of the sRGB color space (IEC 61966).</para>
        /// <para xml:lang="en">Pattern: #[\dA-F]{6}([\dA-F][\dA-F])?.</para>
        /// </summary>
        [System.ComponentModel.DataAnnotations.RegularExpressionAttribute("#[\\dA-F]{6}([\\dA-F][\\dA-F])?")]
        [System.Xml.Serialization.XmlAttributeAttribute("color")]
        public string Color { get; set; }

        [System.Xml.Serialization.XmlAttributeAttribute("halign")]
        public LeftCenterRight Halign { get; set; }

        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the Halign property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool HalignSpecified { get; set; }

        [System.Xml.Serialization.XmlAttributeAttribute("valign")]
        public Valign Valign { get; set; }

        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the Valign property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool ValignSpecified { get; set; }
    }

    /// <summary>
    /// <para>The inversion type represents harmony inversions. The value is a number indicating which inversion is used: 0 for root position, 1 for first inversion, etc.  The text attribute indicates how the inversion should be displayed in a score.</para>
    /// </summary>
    [System.ComponentModel.DescriptionAttribute("The inversion type represents harmony inversions. The value is a number indicatin" +
        "g which inversion is used: 0 for root position, 1 for first inversion, etc. The " +
        "text attribute indicates how the inversion should be displayed in a score.")]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XmlSchemaClassGenerator", "2.1.1142.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute("inversion", Namespace="")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class Inversion : IPrintStyle
    {

        /// <summary>
        /// <para xml:lang="en">Gets or sets the text value.</para>
        /// </summary>
        [System.Xml.Serialization.XmlTextAttribute()]
        public string Value { get; set; }

        [System.Xml.Serialization.XmlAttributeAttribute("text")]
        public string Text { get; set; }

        /// <summary>
        /// <para>The tenths type is a number representing tenths of interline staff space (positive or negative). Both integer and decimal values are allowed, such as 5 for a half space and 2.5 for a quarter space. Interline space is measured from the middle of a staff line.
        ///
        ///Distances in a MusicXML file are measured in tenths of staff space. Tenths are then scaled to millimeters within the scaling element, used in the defaults element at the start of a score. Individual staves can apply a scaling factor to adjust staff size. When a MusicXML element or attribute refers to tenths, it means the global tenths defined by the scaling element, not the local tenths as adjusted by the staff-size element.</para>
        /// </summary>
        [System.Xml.Serialization.XmlAttributeAttribute("default-x")]
        public decimal DefaultX { get; set; }

        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the DefaultX property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool DefaultXSpecified { get; set; }

        /// <summary>
        /// <para>The tenths type is a number representing tenths of interline staff space (positive or negative). Both integer and decimal values are allowed, such as 5 for a half space and 2.5 for a quarter space. Interline space is measured from the middle of a staff line.
        ///
        ///Distances in a MusicXML file are measured in tenths of staff space. Tenths are then scaled to millimeters within the scaling element, used in the defaults element at the start of a score. Individual staves can apply a scaling factor to adjust staff size. When a MusicXML element or attribute refers to tenths, it means the global tenths defined by the scaling element, not the local tenths as adjusted by the staff-size element.</para>
        /// </summary>
        [System.Xml.Serialization.XmlAttributeAttribute("default-y")]
        public decimal DefaultY { get; set; }

        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the DefaultY property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool DefaultYSpecified { get; set; }

        /// <summary>
        /// <para>The tenths type is a number representing tenths of interline staff space (positive or negative). Both integer and decimal values are allowed, such as 5 for a half space and 2.5 for a quarter space. Interline space is measured from the middle of a staff line.
        ///
        ///Distances in a MusicXML file are measured in tenths of staff space. Tenths are then scaled to millimeters within the scaling element, used in the defaults element at the start of a score. Individual staves can apply a scaling factor to adjust staff size. When a MusicXML element or attribute refers to tenths, it means the global tenths defined by the scaling element, not the local tenths as adjusted by the staff-size element.</para>
        /// </summary>
        [System.Xml.Serialization.XmlAttributeAttribute("relative-x")]
        public decimal RelativeX { get; set; }

        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the RelativeX property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool RelativeXSpecified { get; set; }

        /// <summary>
        /// <para>The tenths type is a number representing tenths of interline staff space (positive or negative). Both integer and decimal values are allowed, such as 5 for a half space and 2.5 for a quarter space. Interline space is measured from the middle of a staff line.
        ///
        ///Distances in a MusicXML file are measured in tenths of staff space. Tenths are then scaled to millimeters within the scaling element, used in the defaults element at the start of a score. Individual staves can apply a scaling factor to adjust staff size. When a MusicXML element or attribute refers to tenths, it means the global tenths defined by the scaling element, not the local tenths as adjusted by the staff-size element.</para>
        /// </summary>
        [System.Xml.Serialization.XmlAttributeAttribute("relative-y")]
        public decimal RelativeY { get; set; }

        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the RelativeY property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool RelativeYSpecified { get; set; }

        /// <summary>
        /// <para>The font-family is a comma-separated list of font names. These can be specific font styles such as Maestro or Opus, or one of several generic font styles: music, engraved, handwritten, text, serif, sans-serif, handwritten, cursive, fantasy, and monospace. The music, engraved, and handwritten values refer to music fonts; the rest refer to text fonts. The fantasy style refers to decorative text such as found in older German-style printing.</para>
        /// <para xml:lang="en">Pattern: [^,]+(, ?[^,]+)*.</para>
        /// </summary>
        [System.ComponentModel.DataAnnotations.RegularExpressionAttribute("[^,]+(, ?[^,]+)*")]
        [System.Xml.Serialization.XmlAttributeAttribute("font-family")]
        public string FontFamily { get; set; }

        [System.Xml.Serialization.XmlAttributeAttribute("font-style")]
        public FontStyle FontStyle { get; set; }

        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the FontStyle property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool FontStyleSpecified { get; set; }

        /// <summary>
        /// <para>The font-size can be one of the CSS font sizes (xx-small, x-small, small, medium, large, x-large, xx-large) or a numeric point size.</para>
        /// </summary>
        [System.Xml.Serialization.XmlAttributeAttribute("font-size")]
        public string FontSize { get; set; }

        [System.Xml.Serialization.XmlAttributeAttribute("font-weight")]
        public FontWeight FontWeight { get; set; }

        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the FontWeight property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool FontWeightSpecified { get; set; }

        /// <summary>
        /// <para>The color type indicates the color of an element. Color may be represented as hexadecimal RGB triples, as in HTML, or as hexadecimal ARGB tuples, with the A indicating alpha of transparency. An alpha value of 00 is totally transparent; FF is totally opaque. If RGB is used, the A value is assumed to be FF.
        ///
        ///For instance, the RGB value "#800080" represents purple. An ARGB value of "#40800080" would be a transparent purple.
        ///
        ///As in SVG 1.1, colors are defined in terms of the sRGB color space (IEC 61966).</para>
        /// <para xml:lang="en">Pattern: #[\dA-F]{6}([\dA-F][\dA-F])?.</para>
        /// </summary>
        [System.ComponentModel.DataAnnotations.RegularExpressionAttribute("#[\\dA-F]{6}([\\dA-F][\\dA-F])?")]
        [System.Xml.Serialization.XmlAttributeAttribute("color")]
        public string Color { get; set; }
    }

    /// <summary>
    /// <para>The measure-numbering type describes how frequently measure numbers are displayed on this part. The text attribute from the measure element is used for display, or the number attribute if the text attribute is not present. Measures with an implicit attribute set to "yes" never display a measure number, regardless of the measure-numbering setting.
    ///
    ///The optional staff attribute refers to staff numbers within the part, from top to bottom on the system. It indicates which staff is used as the reference point for vertical positioning. A value of 1 is assumed if not present.
    ///
    ///The optional multiple-rest-always and multiple-rest-range attributes describe how measure numbers are shown on multiple rests when the measure-numbering value is not set to none. The multiple-rest-always attribute is set to yes when the measure number should always be shown, even if the multiple rest starts midway through a system when measure numbering is set to system level. The multiple-rest-range attribute is set to yes when measure numbers on multiple rests display the range of numbers for the first and last measure, rather than just the number of the first measure.</para>
    /// </summary>
    [System.ComponentModel.DescriptionAttribute(@"The measure-numbering type describes how frequently measure numbers are displayed on this part. The text attribute from the measure element is used for display, or the number attribute if the text attribute is not present. Measures with an implicit attribute set to ""yes"" never display a measure number, regardless of the measure-numbering setting. The optional staff attribute refers to staff numbers within the part, from top to bottom on the system. It indicates which staff is used as the reference point for vertical positioning. A value of 1 is assumed if not present. The optional multiple-rest-always and multiple-rest-range attributes describe how measure numbers are shown on multiple rests when the measure-numbering value is not set to none. The multiple-rest-always attribute is set to yes when the measure number should always be shown, even if the multiple rest starts midway through a system when measure numbering is set to system level. The multiple-rest-range attribute is set to yes when measure numbers on multiple rests display the range of numbers for the first and last measure, rather than just the number of the first measure.")]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XmlSchemaClassGenerator", "2.1.1142.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute("measure-numbering", Namespace="")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class MeasureNumbering : IPrintStyleAlign
    {

        /// <summary>
        /// <para xml:lang="en">Gets or sets the text value.</para>
        /// </summary>
        [System.Xml.Serialization.XmlTextAttribute()]
        public MeasureNumberingValue Value { get; set; }

        [System.Xml.Serialization.XmlAttributeAttribute("system")]
        public SystemRelationNumber System { get; set; }

        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the System property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool SystemSpecified { get; set; }

        /// <summary>
        /// <para>The staff-number type indicates staff numbers within a multi-staff part. Staves are numbered from top to bottom, with 1 being the top staff on a part.</para>
        /// </summary>
        [System.Xml.Serialization.XmlAttributeAttribute("staff")]
        public string Staff { get; set; }

        [System.Xml.Serialization.XmlAttributeAttribute("multiple-rest-always")]
        public YesNo MultipleRestAlways { get; set; }

        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the MultipleRestAlways property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool MultipleRestAlwaysSpecified { get; set; }

        [System.Xml.Serialization.XmlAttributeAttribute("multiple-rest-range")]
        public YesNo MultipleRestRange { get; set; }

        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the MultipleRestRange property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool MultipleRestRangeSpecified { get; set; }

        /// <summary>
        /// <para>The tenths type is a number representing tenths of interline staff space (positive or negative). Both integer and decimal values are allowed, such as 5 for a half space and 2.5 for a quarter space. Interline space is measured from the middle of a staff line.
        ///
        ///Distances in a MusicXML file are measured in tenths of staff space. Tenths are then scaled to millimeters within the scaling element, used in the defaults element at the start of a score. Individual staves can apply a scaling factor to adjust staff size. When a MusicXML element or attribute refers to tenths, it means the global tenths defined by the scaling element, not the local tenths as adjusted by the staff-size element.</para>
        /// </summary>
        [System.Xml.Serialization.XmlAttributeAttribute("default-x")]
        public decimal DefaultX { get; set; }

        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the DefaultX property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool DefaultXSpecified { get; set; }

        /// <summary>
        /// <para>The tenths type is a number representing tenths of interline staff space (positive or negative). Both integer and decimal values are allowed, such as 5 for a half space and 2.5 for a quarter space. Interline space is measured from the middle of a staff line.
        ///
        ///Distances in a MusicXML file are measured in tenths of staff space. Tenths are then scaled to millimeters within the scaling element, used in the defaults element at the start of a score. Individual staves can apply a scaling factor to adjust staff size. When a MusicXML element or attribute refers to tenths, it means the global tenths defined by the scaling element, not the local tenths as adjusted by the staff-size element.</para>
        /// </summary>
        [System.Xml.Serialization.XmlAttributeAttribute("default-y")]
        public decimal DefaultY { get; set; }

        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the DefaultY property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool DefaultYSpecified { get; set; }

        /// <summary>
        /// <para>The tenths type is a number representing tenths of interline staff space (positive or negative). Both integer and decimal values are allowed, such as 5 for a half space and 2.5 for a quarter space. Interline space is measured from the middle of a staff line.
        ///
        ///Distances in a MusicXML file are measured in tenths of staff space. Tenths are then scaled to millimeters within the scaling element, used in the defaults element at the start of a score. Individual staves can apply a scaling factor to adjust staff size. When a MusicXML element or attribute refers to tenths, it means the global tenths defined by the scaling element, not the local tenths as adjusted by the staff-size element.</para>
        /// </summary>
        [System.Xml.Serialization.XmlAttributeAttribute("relative-x")]
        public decimal RelativeX { get; set; }

        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the RelativeX property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool RelativeXSpecified { get; set; }

        /// <summary>
        /// <para>The tenths type is a number representing tenths of interline staff space (positive or negative). Both integer and decimal values are allowed, such as 5 for a half space and 2.5 for a quarter space. Interline space is measured from the middle of a staff line.
        ///
        ///Distances in a MusicXML file are measured in tenths of staff space. Tenths are then scaled to millimeters within the scaling element, used in the defaults element at the start of a score. Individual staves can apply a scaling factor to adjust staff size. When a MusicXML element or attribute refers to tenths, it means the global tenths defined by the scaling element, not the local tenths as adjusted by the staff-size element.</para>
        /// </summary>
        [System.Xml.Serialization.XmlAttributeAttribute("relative-y")]
        public decimal RelativeY { get; set; }

        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the RelativeY property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool RelativeYSpecified { get; set; }

        /// <summary>
        /// <para>The font-family is a comma-separated list of font names. These can be specific font styles such as Maestro or Opus, or one of several generic font styles: music, engraved, handwritten, text, serif, sans-serif, handwritten, cursive, fantasy, and monospace. The music, engraved, and handwritten values refer to music fonts; the rest refer to text fonts. The fantasy style refers to decorative text such as found in older German-style printing.</para>
        /// <para xml:lang="en">Pattern: [^,]+(, ?[^,]+)*.</para>
        /// </summary>
        [System.ComponentModel.DataAnnotations.RegularExpressionAttribute("[^,]+(, ?[^,]+)*")]
        [System.Xml.Serialization.XmlAttributeAttribute("font-family")]
        public string FontFamily { get; set; }

        [System.Xml.Serialization.XmlAttributeAttribute("font-style")]
        public FontStyle FontStyle { get; set; }

        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the FontStyle property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool FontStyleSpecified { get; set; }

        /// <summary>
        /// <para>The font-size can be one of the CSS font sizes (xx-small, x-small, small, medium, large, x-large, xx-large) or a numeric point size.</para>
        /// </summary>
        [System.Xml.Serialization.XmlAttributeAttribute("font-size")]
        public string FontSize { get; set; }

        [System.Xml.Serialization.XmlAttributeAttribute("font-weight")]
        public FontWeight FontWeight { get; set; }

        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the FontWeight property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool FontWeightSpecified { get; set; }

        /// <summary>
        /// <para>The color type indicates the color of an element. Color may be represented as hexadecimal RGB triples, as in HTML, or as hexadecimal ARGB tuples, with the A indicating alpha of transparency. An alpha value of 00 is totally transparent; FF is totally opaque. If RGB is used, the A value is assumed to be FF.
        ///
        ///For instance, the RGB value "#800080" represents purple. An ARGB value of "#40800080" would be a transparent purple.
        ///
        ///As in SVG 1.1, colors are defined in terms of the sRGB color space (IEC 61966).</para>
        /// <para xml:lang="en">Pattern: #[\dA-F]{6}([\dA-F][\dA-F])?.</para>
        /// </summary>
        [System.ComponentModel.DataAnnotations.RegularExpressionAttribute("#[\\dA-F]{6}([\\dA-F][\\dA-F])?")]
        [System.Xml.Serialization.XmlAttributeAttribute("color")]
        public string Color { get; set; }

        [System.Xml.Serialization.XmlAttributeAttribute("halign")]
        public LeftCenterRight Halign { get; set; }

        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the Halign property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool HalignSpecified { get; set; }

        [System.Xml.Serialization.XmlAttributeAttribute("valign")]
        public Valign Valign { get; set; }

        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the Valign property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool ValignSpecified { get; set; }
    }

    /// <summary>
    /// <para>The print type contains general printing parameters, including layout elements. The part-name-display and part-abbreviation-display elements may also be used here to change how a part name or abbreviation is displayed over the course of a piece. They take effect when the current measure or a succeeding measure starts a new system.
    ///
    ///Layout group elements in a print element only apply to the current page, system, or staff. Music that follows continues to take the default values from the layout determined by the defaults element.</para>
    /// </summary>
    [System.ComponentModel.DescriptionAttribute(@"The print type contains general printing parameters, including layout elements. The part-name-display and part-abbreviation-display elements may also be used here to change how a part name or abbreviation is displayed over the course of a piece. They take effect when the current measure or a succeeding measure starts a new system. Layout group elements in a print element only apply to the current page, system, or staff. Music that follows continues to take the default values from the layout determined by the defaults element.")]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XmlSchemaClassGenerator", "2.1.1142.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute("print", Namespace="")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class Print : ILayout, IPrintAttributes, IOptionalUniqueId
    {

        [System.Xml.Serialization.XmlElementAttribute("page-layout")]
        public PageLayout PageLayout { get; set; }

        [System.Xml.Serialization.XmlElementAttribute("system-layout")]
        public SystemLayout SystemLayout { get; set; }

        [System.Xml.Serialization.XmlIgnoreAttribute()]
        private System.Collections.ObjectModel.Collection<StaffLayout> _staffLayout;

        [System.Xml.Serialization.XmlElementAttribute("staff-layout")]
        public System.Collections.ObjectModel.Collection<StaffLayout> StaffLayout
        {
            get
            {
                return _staffLayout;
            }
            private set
            {
                _staffLayout = value;
            }
        }

        /// <summary>
        /// <para xml:lang="en">Gets a value indicating whether the StaffLayout collection is empty.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool StaffLayoutSpecified
        {
            get
            {
                return (this.StaffLayout.Count != 0);
            }
        }

        /// <summary>
        /// <para xml:lang="en">Initializes a new instance of the <see cref="Print" /> class.</para>
        /// </summary>
        public Print()
        {
            this._staffLayout = new System.Collections.ObjectModel.Collection<StaffLayout>();
        }

        [System.Xml.Serialization.XmlElementAttribute("measure-layout")]
        public MeasureLayout MeasureLayout { get; set; }

        [System.Xml.Serialization.XmlElementAttribute("measure-numbering")]
        public MeasureNumbering MeasureNumbering { get; set; }

        [System.Xml.Serialization.XmlElementAttribute("part-name-display")]
        public NameDisplay PartNameDisplay { get; set; }

        [System.Xml.Serialization.XmlElementAttribute("part-abbreviation-display")]
        public NameDisplay PartAbbreviationDisplay { get; set; }

        /// <summary>
        /// <para>The tenths type is a number representing tenths of interline staff space (positive or negative). Both integer and decimal values are allowed, such as 5 for a half space and 2.5 for a quarter space. Interline space is measured from the middle of a staff line.
        ///
        ///Distances in a MusicXML file are measured in tenths of staff space. Tenths are then scaled to millimeters within the scaling element, used in the defaults element at the start of a score. Individual staves can apply a scaling factor to adjust staff size. When a MusicXML element or attribute refers to tenths, it means the global tenths defined by the scaling element, not the local tenths as adjusted by the staff-size element.</para>
        /// </summary>
        [System.Xml.Serialization.XmlAttributeAttribute("staff-spacing")]
        public decimal StaffSpacing { get; set; }

        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the StaffSpacing property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool StaffSpacingSpecified { get; set; }

        [System.Xml.Serialization.XmlAttributeAttribute("new-system")]
        public YesNo NewSystem { get; set; }

        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the NewSystem property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool NewSystemSpecified { get; set; }

        [System.Xml.Serialization.XmlAttributeAttribute("new-page")]
        public YesNo NewPage { get; set; }

        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the NewPage property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool NewPageSpecified { get; set; }

        [System.Xml.Serialization.XmlAttributeAttribute("blank-page")]
        public string BlankPage { get; set; }

        [System.Xml.Serialization.XmlAttributeAttribute("page-number")]
        public string PageNumber { get; set; }

        [System.Xml.Serialization.XmlAttributeAttribute("id")]
        public string Id { get; set; }
    }

    /// <summary>
    /// <para>The layout group specifies the sequence of page, system, and staff layout elements that is common to both the defaults and print elements.</para>
    /// </summary>
    [System.ComponentModel.DescriptionAttribute("The layout group specifies the sequence of page, system, and staff layout element" +
        "s that is common to both the defaults and print elements.")]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XmlSchemaClassGenerator", "2.1.1142.0")]
    public partial interface ILayout
    {

        PageLayout PageLayout
        {
            get;
            set;
        }

        SystemLayout SystemLayout
        {
            get;
            set;
        }

        System.Collections.ObjectModel.Collection<StaffLayout> StaffLayout
        {
            get;
        }
    }

    /// <summary>
    /// <para>Page layout can be defined both in score-wide defaults and in the print element. Page margins are specified either for both even and odd pages, or via separate odd and even page number values. The type is not needed when used as part of a print element. If omitted when used in the defaults element, "both" is the default.
    ///
    ///If no page-layout element is present in the defaults element, default page layout values are chosen by the application.
    ///
    ///When used in the print element, the page-layout element affects the appearance of the current page only. All other pages use the default values as determined by the defaults element. If any child elements are missing from the page-layout element in a print element, the values determined by the defaults element are used there as well.</para>
    /// </summary>
    [System.ComponentModel.DescriptionAttribute(@"Page layout can be defined both in score-wide defaults and in the print element. Page margins are specified either for both even and odd pages, or via separate odd and even page number values. The type is not needed when used as part of a print element. If omitted when used in the defaults element, ""both"" is the default. If no page-layout element is present in the defaults element, default page layout values are chosen by the application. When used in the print element, the page-layout element affects the appearance of the current page only. All other pages use the default values as determined by the defaults element. If any child elements are missing from the page-layout element in a print element, the values determined by the defaults element are used there as well.")]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XmlSchemaClassGenerator", "2.1.1142.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute("page-layout", Namespace="")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class PageLayout
    {

        /// <summary>
        /// <para>The tenths type is a number representing tenths of interline staff space (positive or negative). Both integer and decimal values are allowed, such as 5 for a half space and 2.5 for a quarter space. Interline space is measured from the middle of a staff line.
        ///
        ///Distances in a MusicXML file are measured in tenths of staff space. Tenths are then scaled to millimeters within the scaling element, used in the defaults element at the start of a score. Individual staves can apply a scaling factor to adjust staff size. When a MusicXML element or attribute refers to tenths, it means the global tenths defined by the scaling element, not the local tenths as adjusted by the staff-size element.</para>
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute("page-height")]
        public decimal PageHeight { get; set; }

        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the PageHeight property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool PageHeightSpecified { get; set; }

        /// <summary>
        /// <para>The tenths type is a number representing tenths of interline staff space (positive or negative). Both integer and decimal values are allowed, such as 5 for a half space and 2.5 for a quarter space. Interline space is measured from the middle of a staff line.
        ///
        ///Distances in a MusicXML file are measured in tenths of staff space. Tenths are then scaled to millimeters within the scaling element, used in the defaults element at the start of a score. Individual staves can apply a scaling factor to adjust staff size. When a MusicXML element or attribute refers to tenths, it means the global tenths defined by the scaling element, not the local tenths as adjusted by the staff-size element.</para>
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute("page-width")]
        public decimal PageWidth { get; set; }

        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the PageWidth property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool PageWidthSpecified { get; set; }

        [System.Xml.Serialization.XmlIgnoreAttribute()]
        private System.Collections.ObjectModel.Collection<PageMargins> _pageMargins;

        [System.Xml.Serialization.XmlElementAttribute("page-margins")]
        public System.Collections.ObjectModel.Collection<PageMargins> PageMargins
        {
            get
            {
                return _pageMargins;
            }
            private set
            {
                _pageMargins = value;
            }
        }

        /// <summary>
        /// <para xml:lang="en">Gets a value indicating whether the PageMargins collection is empty.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool PageMarginsSpecified
        {
            get
            {
                return (this.PageMargins.Count != 0);
            }
        }

        /// <summary>
        /// <para xml:lang="en">Initializes a new instance of the <see cref="PageLayout" /> class.</para>
        /// </summary>
        public PageLayout()
        {
            this._pageMargins = new System.Collections.ObjectModel.Collection<PageMargins>();
        }
    }

    /// <summary>
    /// <para>Page margins are specified either for both even and odd pages, or via separate odd and even page number values. The type attribute is not needed when used as part of a print element. If omitted when the page-margins type is used in the defaults element, "both" is the default value.</para>
    /// </summary>
    [System.ComponentModel.DescriptionAttribute(@"Page margins are specified either for both even and odd pages, or via separate odd and even page number values. The type attribute is not needed when used as part of a print element. If omitted when the page-margins type is used in the defaults element, ""both"" is the default value.")]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XmlSchemaClassGenerator", "2.1.1142.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute("page-margins", Namespace="")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class PageMargins : IAllMargins
    {

        /// <summary>
        /// <para>The tenths type is a number representing tenths of interline staff space (positive or negative). Both integer and decimal values are allowed, such as 5 for a half space and 2.5 for a quarter space. Interline space is measured from the middle of a staff line.
        ///
        ///Distances in a MusicXML file are measured in tenths of staff space. Tenths are then scaled to millimeters within the scaling element, used in the defaults element at the start of a score. Individual staves can apply a scaling factor to adjust staff size. When a MusicXML element or attribute refers to tenths, it means the global tenths defined by the scaling element, not the local tenths as adjusted by the staff-size element.</para>
        /// </summary>
        [System.ComponentModel.DataAnnotations.RequiredAttribute(AllowEmptyStrings=true)]
        [System.Xml.Serialization.XmlElementAttribute("left-margin")]
        public decimal LeftMargin { get; set; }

        /// <summary>
        /// <para>The tenths type is a number representing tenths of interline staff space (positive or negative). Both integer and decimal values are allowed, such as 5 for a half space and 2.5 for a quarter space. Interline space is measured from the middle of a staff line.
        ///
        ///Distances in a MusicXML file are measured in tenths of staff space. Tenths are then scaled to millimeters within the scaling element, used in the defaults element at the start of a score. Individual staves can apply a scaling factor to adjust staff size. When a MusicXML element or attribute refers to tenths, it means the global tenths defined by the scaling element, not the local tenths as adjusted by the staff-size element.</para>
        /// </summary>
        [System.ComponentModel.DataAnnotations.RequiredAttribute(AllowEmptyStrings=true)]
        [System.Xml.Serialization.XmlElementAttribute("right-margin")]
        public decimal RightMargin { get; set; }

        /// <summary>
        /// <para>The tenths type is a number representing tenths of interline staff space (positive or negative). Both integer and decimal values are allowed, such as 5 for a half space and 2.5 for a quarter space. Interline space is measured from the middle of a staff line.
        ///
        ///Distances in a MusicXML file are measured in tenths of staff space. Tenths are then scaled to millimeters within the scaling element, used in the defaults element at the start of a score. Individual staves can apply a scaling factor to adjust staff size. When a MusicXML element or attribute refers to tenths, it means the global tenths defined by the scaling element, not the local tenths as adjusted by the staff-size element.</para>
        /// </summary>
        [System.ComponentModel.DataAnnotations.RequiredAttribute(AllowEmptyStrings=true)]
        [System.Xml.Serialization.XmlElementAttribute("top-margin")]
        public decimal TopMargin { get; set; }

        /// <summary>
        /// <para>The tenths type is a number representing tenths of interline staff space (positive or negative). Both integer and decimal values are allowed, such as 5 for a half space and 2.5 for a quarter space. Interline space is measured from the middle of a staff line.
        ///
        ///Distances in a MusicXML file are measured in tenths of staff space. Tenths are then scaled to millimeters within the scaling element, used in the defaults element at the start of a score. Individual staves can apply a scaling factor to adjust staff size. When a MusicXML element or attribute refers to tenths, it means the global tenths defined by the scaling element, not the local tenths as adjusted by the staff-size element.</para>
        /// </summary>
        [System.ComponentModel.DataAnnotations.RequiredAttribute(AllowEmptyStrings=true)]
        [System.Xml.Serialization.XmlElementAttribute("bottom-margin")]
        public decimal BottomMargin { get; set; }

        [System.Xml.Serialization.XmlAttributeAttribute("type")]
        public MarginType Type { get; set; }

        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the Type property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool TypeSpecified { get; set; }
    }

    /// <summary>
    /// <para>The all-margins group specifies both horizontal and vertical margins in tenths.</para>
    /// </summary>
    [System.ComponentModel.DescriptionAttribute("The all-margins group specifies both horizontal and vertical margins in tenths.")]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XmlSchemaClassGenerator", "2.1.1142.0")]
    public partial interface IAllMargins : ILeftRightMargins
    {

        /// <summary>
        /// <para>The tenths type is a number representing tenths of interline staff space (positive or negative). Both integer and decimal values are allowed, such as 5 for a half space and 2.5 for a quarter space. Interline space is measured from the middle of a staff line.
        ///
        ///Distances in a MusicXML file are measured in tenths of staff space. Tenths are then scaled to millimeters within the scaling element, used in the defaults element at the start of a score. Individual staves can apply a scaling factor to adjust staff size. When a MusicXML element or attribute refers to tenths, it means the global tenths defined by the scaling element, not the local tenths as adjusted by the staff-size element.</para>
        /// </summary>
        decimal TopMargin
        {
            get;
            set;
        }

        /// <summary>
        /// <para>The tenths type is a number representing tenths of interline staff space (positive or negative). Both integer and decimal values are allowed, such as 5 for a half space and 2.5 for a quarter space. Interline space is measured from the middle of a staff line.
        ///
        ///Distances in a MusicXML file are measured in tenths of staff space. Tenths are then scaled to millimeters within the scaling element, used in the defaults element at the start of a score. Individual staves can apply a scaling factor to adjust staff size. When a MusicXML element or attribute refers to tenths, it means the global tenths defined by the scaling element, not the local tenths as adjusted by the staff-size element.</para>
        /// </summary>
        decimal BottomMargin
        {
            get;
            set;
        }
    }

    /// <summary>
    /// <para>The left-right-margins group specifies horizontal margins in tenths.</para>
    /// </summary>
    [System.ComponentModel.DescriptionAttribute("The left-right-margins group specifies horizontal margins in tenths.")]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XmlSchemaClassGenerator", "2.1.1142.0")]
    public partial interface ILeftRightMargins
    {

        /// <summary>
        /// <para>The tenths type is a number representing tenths of interline staff space (positive or negative). Both integer and decimal values are allowed, such as 5 for a half space and 2.5 for a quarter space. Interline space is measured from the middle of a staff line.
        ///
        ///Distances in a MusicXML file are measured in tenths of staff space. Tenths are then scaled to millimeters within the scaling element, used in the defaults element at the start of a score. Individual staves can apply a scaling factor to adjust staff size. When a MusicXML element or attribute refers to tenths, it means the global tenths defined by the scaling element, not the local tenths as adjusted by the staff-size element.</para>
        /// </summary>
        decimal LeftMargin
        {
            get;
            set;
        }

        /// <summary>
        /// <para>The tenths type is a number representing tenths of interline staff space (positive or negative). Both integer and decimal values are allowed, such as 5 for a half space and 2.5 for a quarter space. Interline space is measured from the middle of a staff line.
        ///
        ///Distances in a MusicXML file are measured in tenths of staff space. Tenths are then scaled to millimeters within the scaling element, used in the defaults element at the start of a score. Individual staves can apply a scaling factor to adjust staff size. When a MusicXML element or attribute refers to tenths, it means the global tenths defined by the scaling element, not the local tenths as adjusted by the staff-size element.</para>
        /// </summary>
        decimal RightMargin
        {
            get;
            set;
        }
    }

    /// <summary>
    /// <para>A system is a group of staves that are read and played simultaneously. System layout includes left and right margins and the vertical distance from the previous system. The system distance is measured from the bottom line of the previous system to the top line of the current system. It is ignored for the first system on a page. The top system distance is measured from the page's top margin to the top line of the first system. It is ignored for all but the first system on a page.
    ///
    ///Sometimes the sum of measure widths in a system may not equal the system width specified by the layout elements due to roundoff or other errors. The behavior when reading MusicXML files in these cases is application-dependent. For instance, applications may find that the system layout data is more reliable than the sum of the measure widths, and adjust the measure widths accordingly.
    ///
    ///When used in the defaults element, the system-layout element defines a default appearance for all systems in the score. If no system-layout element is present in the defaults element, default system layout values are chosen by the application.
    ///
    ///When used in the print element, the system-layout element affects the appearance of the current system only. All other systems use the default values as determined by the defaults element. If any child elements are missing from the system-layout element in a print element, the values determined by the defaults element are used there as well. This type of system-layout element need only be read from or written to the first visible part in the score.</para>
    /// </summary>
    [System.ComponentModel.DescriptionAttribute("A system is a group of staves that are read and played simultaneously. System lay" +
        "out includes left and right margins and the vertical distance from the previous " +
        "system. The system distance is measured from the bottom line of the previous sys" +
        "tem to the top line of the current system. It is ignored for the first system on" +
        " a page. The top system distance is measured from the page\'s top margin to the t" +
        "op line of the first system. It is ignored for all but the first system on a pag" +
        "e. Sometimes the sum of measure widths in a system may not equal the system widt" +
        "h specified by the layout elements due to roundoff or other errors. The behavior" +
        " when reading MusicXML files in these cases is application-dependent. For instan" +
        "ce, applications may find that the system layout data is more reliable than the " +
        "sum of the measure widths, and adjust the measure widths accordingly. When used " +
        "in the defaults element, the system-layout element defines a default appearance " +
        "for all systems in the score. If no system-layout element is present in the defa" +
        "ults element, default system layout values are chosen by the application. When u" +
        "sed in the print element, the system-layout element affects the appearance of th" +
        "e current system only. All other systems use the default values as determined by" +
        " the defaults element. If any child elements are missing from the system-layout " +
        "element in a print element, the values determined by the defaults element are us" +
        "ed there as well. This type of system-layout element need only be read from or w" +
        "ritten to the first visible part in the score.")]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XmlSchemaClassGenerator", "2.1.1142.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute("system-layout", Namespace="")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class SystemLayout
    {

        [System.Xml.Serialization.XmlElementAttribute("system-margins")]
        public SystemMargins SystemMargins { get; set; }

        /// <summary>
        /// <para>The tenths type is a number representing tenths of interline staff space (positive or negative). Both integer and decimal values are allowed, such as 5 for a half space and 2.5 for a quarter space. Interline space is measured from the middle of a staff line.
        ///
        ///Distances in a MusicXML file are measured in tenths of staff space. Tenths are then scaled to millimeters within the scaling element, used in the defaults element at the start of a score. Individual staves can apply a scaling factor to adjust staff size. When a MusicXML element or attribute refers to tenths, it means the global tenths defined by the scaling element, not the local tenths as adjusted by the staff-size element.</para>
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute("system-distance")]
        public decimal SystemDistance { get; set; }

        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the SystemDistance property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool SystemDistanceSpecified { get; set; }

        /// <summary>
        /// <para>The tenths type is a number representing tenths of interline staff space (positive or negative). Both integer and decimal values are allowed, such as 5 for a half space and 2.5 for a quarter space. Interline space is measured from the middle of a staff line.
        ///
        ///Distances in a MusicXML file are measured in tenths of staff space. Tenths are then scaled to millimeters within the scaling element, used in the defaults element at the start of a score. Individual staves can apply a scaling factor to adjust staff size. When a MusicXML element or attribute refers to tenths, it means the global tenths defined by the scaling element, not the local tenths as adjusted by the staff-size element.</para>
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute("top-system-distance")]
        public decimal TopSystemDistance { get; set; }

        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the TopSystemDistance property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool TopSystemDistanceSpecified { get; set; }

        [System.Xml.Serialization.XmlElementAttribute("system-dividers")]
        public SystemDividers SystemDividers { get; set; }
    }

    /// <summary>
    /// <para>System margins are relative to the page margins. Positive values indent and negative values reduce the margin size.</para>
    /// </summary>
    [System.ComponentModel.DescriptionAttribute("System margins are relative to the page margins. Positive values indent and negat" +
        "ive values reduce the margin size.")]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XmlSchemaClassGenerator", "2.1.1142.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute("system-margins", Namespace="")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class SystemMargins : ILeftRightMargins
    {

        /// <summary>
        /// <para>The tenths type is a number representing tenths of interline staff space (positive or negative). Both integer and decimal values are allowed, such as 5 for a half space and 2.5 for a quarter space. Interline space is measured from the middle of a staff line.
        ///
        ///Distances in a MusicXML file are measured in tenths of staff space. Tenths are then scaled to millimeters within the scaling element, used in the defaults element at the start of a score. Individual staves can apply a scaling factor to adjust staff size. When a MusicXML element or attribute refers to tenths, it means the global tenths defined by the scaling element, not the local tenths as adjusted by the staff-size element.</para>
        /// </summary>
        [System.ComponentModel.DataAnnotations.RequiredAttribute(AllowEmptyStrings=true)]
        [System.Xml.Serialization.XmlElementAttribute("left-margin")]
        public decimal LeftMargin { get; set; }

        /// <summary>
        /// <para>The tenths type is a number representing tenths of interline staff space (positive or negative). Both integer and decimal values are allowed, such as 5 for a half space and 2.5 for a quarter space. Interline space is measured from the middle of a staff line.
        ///
        ///Distances in a MusicXML file are measured in tenths of staff space. Tenths are then scaled to millimeters within the scaling element, used in the defaults element at the start of a score. Individual staves can apply a scaling factor to adjust staff size. When a MusicXML element or attribute refers to tenths, it means the global tenths defined by the scaling element, not the local tenths as adjusted by the staff-size element.</para>
        /// </summary>
        [System.ComponentModel.DataAnnotations.RequiredAttribute(AllowEmptyStrings=true)]
        [System.Xml.Serialization.XmlElementAttribute("right-margin")]
        public decimal RightMargin { get; set; }
    }

    /// <summary>
    /// <para>The system-dividers element indicates the presence or absence of system dividers (also known as system separation marks) between systems displayed on the same page. Dividers on the left and right side of the page are controlled by the left-divider and right-divider elements respectively. The default vertical position is half the system-distance value from the top of the system that is below the divider. The default horizontal position is the left and right system margin, respectively.
    ///
    ///When used in the print element, the system-dividers element affects the dividers that would appear between the current system and the previous system.</para>
    /// </summary>
    [System.ComponentModel.DescriptionAttribute(@"The system-dividers element indicates the presence or absence of system dividers (also known as system separation marks) between systems displayed on the same page. Dividers on the left and right side of the page are controlled by the left-divider and right-divider elements respectively. The default vertical position is half the system-distance value from the top of the system that is below the divider. The default horizontal position is the left and right system margin, respectively. When used in the print element, the system-dividers element affects the dividers that would appear between the current system and the previous system.")]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XmlSchemaClassGenerator", "2.1.1142.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute("system-dividers", Namespace="")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class SystemDividers
    {

        [System.ComponentModel.DataAnnotations.RequiredAttribute(AllowEmptyStrings=true)]
        [System.Xml.Serialization.XmlElementAttribute("left-divider")]
        public EmptyPrintObjectStyleAlign LeftDivider { get; set; }

        [System.ComponentModel.DataAnnotations.RequiredAttribute(AllowEmptyStrings=true)]
        [System.Xml.Serialization.XmlElementAttribute("right-divider")]
        public EmptyPrintObjectStyleAlign RightDivider { get; set; }
    }

    /// <summary>
    /// <para>Staff layout includes the vertical distance from the bottom line of the previous staff in this system to the top line of the staff specified by the number attribute. The optional number attribute refers to staff numbers within the part, from top to bottom on the system. A value of 1 is used if not present.
    ///
    ///When used in the defaults element, the values apply to all systems in all parts. When used in the print element, the values apply to the current system only. This value is ignored for the first staff in a system.</para>
    /// </summary>
    [System.ComponentModel.DescriptionAttribute(@"Staff layout includes the vertical distance from the bottom line of the previous staff in this system to the top line of the staff specified by the number attribute. The optional number attribute refers to staff numbers within the part, from top to bottom on the system. A value of 1 is used if not present. When used in the defaults element, the values apply to all systems in all parts. When used in the print element, the values apply to the current system only. This value is ignored for the first staff in a system.")]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XmlSchemaClassGenerator", "2.1.1142.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute("staff-layout", Namespace="")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class StaffLayout
    {

        /// <summary>
        /// <para>The tenths type is a number representing tenths of interline staff space (positive or negative). Both integer and decimal values are allowed, such as 5 for a half space and 2.5 for a quarter space. Interline space is measured from the middle of a staff line.
        ///
        ///Distances in a MusicXML file are measured in tenths of staff space. Tenths are then scaled to millimeters within the scaling element, used in the defaults element at the start of a score. Individual staves can apply a scaling factor to adjust staff size. When a MusicXML element or attribute refers to tenths, it means the global tenths defined by the scaling element, not the local tenths as adjusted by the staff-size element.</para>
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute("staff-distance")]
        public decimal StaffDistance { get; set; }

        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the StaffDistance property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool StaffDistanceSpecified { get; set; }

        /// <summary>
        /// <para>The staff-number type indicates staff numbers within a multi-staff part. Staves are numbered from top to bottom, with 1 being the top staff on a part.</para>
        /// </summary>
        [System.Xml.Serialization.XmlAttributeAttribute("number")]
        public string Number { get; set; }
    }

    /// <summary>
    /// <para>The measure-layout type includes the horizontal distance from the previous measure. It applies to the current measure only.</para>
    /// </summary>
    [System.ComponentModel.DescriptionAttribute("The measure-layout type includes the horizontal distance from the previous measur" +
        "e. It applies to the current measure only.")]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XmlSchemaClassGenerator", "2.1.1142.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute("measure-layout", Namespace="")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class MeasureLayout
    {

        /// <summary>
        /// <para>The measure-distance element specifies the horizontal distance from the previous measure. This value is only used for systems where there is horizontal whitespace in the middle of a system, as in systems with codas. To specify the measure width, use the width attribute of the measure element.</para>
        /// <para>The tenths type is a number representing tenths of interline staff space (positive or negative). Both integer and decimal values are allowed, such as 5 for a half space and 2.5 for a quarter space. Interline space is measured from the middle of a staff line.
        ///
        ///Distances in a MusicXML file are measured in tenths of staff space. Tenths are then scaled to millimeters within the scaling element, used in the defaults element at the start of a score. Individual staves can apply a scaling factor to adjust staff size. When a MusicXML element or attribute refers to tenths, it means the global tenths defined by the scaling element, not the local tenths as adjusted by the staff-size element.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute(@"The measure-distance element specifies the horizontal distance from the previous measure. This value is only used for systems where there is horizontal whitespace in the middle of a system, as in systems with codas. To specify the measure width, use the width attribute of the measure element.")]
        [System.Xml.Serialization.XmlElementAttribute("measure-distance")]
        public decimal MeasureDistance { get; set; }

        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the MeasureDistance property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool MeasureDistanceSpecified { get; set; }
    }

    /// <summary>
    /// <para>The print-attributes group is used by the print element. The new-system and new-page attributes indicate whether to force a system or page break, or to force the current music onto the same system or page as the preceding music. Normally this is the first music data within a measure. If used in multi-part music, they should be placed in the same positions within each part, or the results are undefined. The page-number attribute sets the number of a new page; it is ignored if new-page is not "yes". Version 2.0 adds a blank-page attribute. This is a positive integer value that specifies the number of blank pages to insert before the current measure. It is ignored if new-page is not "yes". These blank pages have no music, but may have text or images specified by the credit element. This is used to allow a combination of pages that are all text, or all text and images, together with pages of music.
    ///
    ///The staff-spacing attribute specifies spacing between multiple staves in tenths of staff space. This is deprecated as of Version 1.1; the staff-layout element should be used instead. If both are present, the staff-layout values take priority.</para>
    /// </summary>
    [System.ComponentModel.DescriptionAttribute(@"The print-attributes group is used by the print element. The new-system and new-page attributes indicate whether to force a system or page break, or to force the current music onto the same system or page as the preceding music. Normally this is the first music data within a measure. If used in multi-part music, they should be placed in the same positions within each part, or the results are undefined. The page-number attribute sets the number of a new page; it is ignored if new-page is not ""yes"". Version 2.0 adds a blank-page attribute. This is a positive integer value that specifies the number of blank pages to insert before the current measure. It is ignored if new-page is not ""yes"". These blank pages have no music, but may have text or images specified by the credit element. This is used to allow a combination of pages that are all text, or all text and images, together with pages of music. The staff-spacing attribute specifies spacing between multiple staves in tenths of staff space. This is deprecated as of Version 1.1; the staff-layout element should be used instead. If both are present, the staff-layout values take priority.")]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XmlSchemaClassGenerator", "2.1.1142.0")]
    public partial interface IPrintAttributes
    {

        /// <summary>
        /// <para>The tenths type is a number representing tenths of interline staff space (positive or negative). Both integer and decimal values are allowed, such as 5 for a half space and 2.5 for a quarter space. Interline space is measured from the middle of a staff line.
        ///
        ///Distances in a MusicXML file are measured in tenths of staff space. Tenths are then scaled to millimeters within the scaling element, used in the defaults element at the start of a score. Individual staves can apply a scaling factor to adjust staff size. When a MusicXML element or attribute refers to tenths, it means the global tenths defined by the scaling element, not the local tenths as adjusted by the staff-size element.</para>
        /// </summary>
        decimal StaffSpacing
        {
            get;
            set;
        }

        YesNo NewSystem
        {
            get;
            set;
        }

        YesNo NewPage
        {
            get;
            set;
        }

        string BlankPage
        {
            get;
            set;
        }

        string PageNumber
        {
            get;
            set;
        }
    }

    /// <summary>
    /// <para>The encoding element contains information about who did the digital encoding, when, with what software, and in what aspects. Standard type values for the encoder element are music, words, and arrangement, but other types may be used. The type attribute is only needed when there are multiple encoder elements.</para>
    /// </summary>
    [System.ComponentModel.DescriptionAttribute(@"The encoding element contains information about who did the digital encoding, when, with what software, and in what aspects. Standard type values for the encoder element are music, words, and arrangement, but other types may be used. The type attribute is only needed when there are multiple encoder elements.")]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XmlSchemaClassGenerator", "2.1.1142.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute("encoding", Namespace="")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class Encoding
    {

        [System.Xml.Serialization.XmlIgnoreAttribute()]
        private System.Collections.ObjectModel.Collection<System.DateTime> _encodingDate;

        [System.Xml.Serialization.XmlElementAttribute("encoding-date", DataType="date")]
        public System.Collections.ObjectModel.Collection<System.DateTime> EncodingDate
        {
            get
            {
                return _encodingDate;
            }
            private set
            {
                _encodingDate = value;
            }
        }

        /// <summary>
        /// <para xml:lang="en">Gets a value indicating whether the EncodingDate collection is empty.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool EncodingDateSpecified
        {
            get
            {
                return (this.EncodingDate.Count != 0);
            }
        }

        /// <summary>
        /// <para xml:lang="en">Initializes a new instance of the <see cref="Encoding" /> class.</para>
        /// </summary>
        public Encoding()
        {
            this._encodingDate = new System.Collections.ObjectModel.Collection<System.DateTime>();
            this._encoder = new System.Collections.ObjectModel.Collection<TypedText>();
            this._software = new System.Collections.ObjectModel.Collection<string>();
            this._encodingDescription = new System.Collections.ObjectModel.Collection<string>();
            this._supports = new System.Collections.ObjectModel.Collection<Supports>();
        }

        [System.Xml.Serialization.XmlIgnoreAttribute()]
        private System.Collections.ObjectModel.Collection<TypedText> _encoder;

        [System.Xml.Serialization.XmlElementAttribute("encoder")]
        public System.Collections.ObjectModel.Collection<TypedText> Encoder
        {
            get
            {
                return _encoder;
            }
            private set
            {
                _encoder = value;
            }
        }

        /// <summary>
        /// <para xml:lang="en">Gets a value indicating whether the Encoder collection is empty.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool EncoderSpecified
        {
            get
            {
                return (this.Encoder.Count != 0);
            }
        }

        [System.Xml.Serialization.XmlIgnoreAttribute()]
        private System.Collections.ObjectModel.Collection<string> _software;

        [System.Xml.Serialization.XmlElementAttribute("software")]
        public System.Collections.ObjectModel.Collection<string> Software
        {
            get
            {
                return _software;
            }
            private set
            {
                _software = value;
            }
        }

        /// <summary>
        /// <para xml:lang="en">Gets a value indicating whether the Software collection is empty.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool SoftwareSpecified
        {
            get
            {
                return (this.Software.Count != 0);
            }
        }

        [System.Xml.Serialization.XmlIgnoreAttribute()]
        private System.Collections.ObjectModel.Collection<string> _encodingDescription;

        [System.Xml.Serialization.XmlElementAttribute("encoding-description")]
        public System.Collections.ObjectModel.Collection<string> EncodingDescription
        {
            get
            {
                return _encodingDescription;
            }
            private set
            {
                _encodingDescription = value;
            }
        }

        /// <summary>
        /// <para xml:lang="en">Gets a value indicating whether the EncodingDescription collection is empty.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool EncodingDescriptionSpecified
        {
            get
            {
                return (this.EncodingDescription.Count != 0);
            }
        }

        [System.Xml.Serialization.XmlIgnoreAttribute()]
        private System.Collections.ObjectModel.Collection<Supports> _supports;

        [System.Xml.Serialization.XmlElementAttribute("supports")]
        public System.Collections.ObjectModel.Collection<Supports> Supports
        {
            get
            {
                return _supports;
            }
            private set
            {
                _supports = value;
            }
        }

        /// <summary>
        /// <para xml:lang="en">Gets a value indicating whether the Supports collection is empty.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool SupportsSpecified
        {
            get
            {
                return (this.Supports.Count != 0);
            }
        }
    }

    /// <summary>
    /// <para>The supports type indicates if a MusicXML encoding supports a particular MusicXML element. This is recommended for elements like beam, stem, and accidental, where the absence of an element is ambiguous if you do not know if the encoding supports that element. For Version 2.0, the supports element is expanded to allow programs to indicate support for particular attributes or particular values. This lets applications communicate, for example, that all system and/or page breaks are contained in the MusicXML file.</para>
    /// </summary>
    [System.ComponentModel.DescriptionAttribute(@"The supports type indicates if a MusicXML encoding supports a particular MusicXML element. This is recommended for elements like beam, stem, and accidental, where the absence of an element is ambiguous if you do not know if the encoding supports that element. For Version 2.0, the supports element is expanded to allow programs to indicate support for particular attributes or particular values. This lets applications communicate, for example, that all system and/or page breaks are contained in the MusicXML file.")]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XmlSchemaClassGenerator", "2.1.1142.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute("supports", Namespace="")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class Supports
    {

        [System.ComponentModel.DataAnnotations.RequiredAttribute(AllowEmptyStrings=true)]
        [System.Xml.Serialization.XmlAttributeAttribute("type")]
        public YesNo Type { get; set; }

        [System.ComponentModel.DataAnnotations.RequiredAttribute(AllowEmptyStrings=true)]
        [System.Xml.Serialization.XmlAttributeAttribute("element")]
        public string Element { get; set; }

        [System.Xml.Serialization.XmlAttributeAttribute("attribute")]
        public string Attribute { get; set; }

        [System.Xml.Serialization.XmlAttributeAttribute("value")]
        public string Value { get; set; }
    }

    /// <summary>
    /// <para>Identification contains basic metadata about the score. It includes information that may apply at a score-wide, movement-wide, or part-wide level. The creator, rights, source, and relation elements are based on Dublin Core.</para>
    /// </summary>
    [System.ComponentModel.DescriptionAttribute("Identification contains basic metadata about the score. It includes information t" +
        "hat may apply at a score-wide, movement-wide, or part-wide level. The creator, r" +
        "ights, source, and relation elements are based on Dublin Core.")]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XmlSchemaClassGenerator", "2.1.1142.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute("identification", Namespace="")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class Identification
    {

        [System.Xml.Serialization.XmlIgnoreAttribute()]
        private System.Collections.ObjectModel.Collection<TypedText> _creator;

        /// <summary>
        /// <para>The creator element is borrowed from Dublin Core. It is used for the creators of the score. The type attribute is used to distinguish different creative contributions. Thus, there can be multiple creators within an identification. Standard type values are composer, lyricist, and arranger. Other type values may be used for different types of creative roles. The type attribute should usually be used even if there is just a single creator element. The MusicXML format does not use the creator / contributor distinction from Dublin Core.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute(@"The creator element is borrowed from Dublin Core. It is used for the creators of the score. The type attribute is used to distinguish different creative contributions. Thus, there can be multiple creators within an identification. Standard type values are composer, lyricist, and arranger. Other type values may be used for different types of creative roles. The type attribute should usually be used even if there is just a single creator element. The MusicXML format does not use the creator / contributor distinction from Dublin Core.")]
        [System.Xml.Serialization.XmlElementAttribute("creator")]
        public System.Collections.ObjectModel.Collection<TypedText> Creator
        {
            get
            {
                return _creator;
            }
            private set
            {
                _creator = value;
            }
        }

        /// <summary>
        /// <para xml:lang="en">Gets a value indicating whether the Creator collection is empty.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool CreatorSpecified
        {
            get
            {
                return (this.Creator.Count != 0);
            }
        }

        /// <summary>
        /// <para xml:lang="en">Initializes a new instance of the <see cref="Identification" /> class.</para>
        /// </summary>
        public Identification()
        {
            this._creator = new System.Collections.ObjectModel.Collection<TypedText>();
            this._rights = new System.Collections.ObjectModel.Collection<TypedText>();
            this._relation = new System.Collections.ObjectModel.Collection<TypedText>();
            this._miscellaneous = new System.Collections.ObjectModel.Collection<MiscellaneousField>();
        }

        [System.Xml.Serialization.XmlIgnoreAttribute()]
        private System.Collections.ObjectModel.Collection<TypedText> _rights;

        /// <summary>
        /// <para>The rights element is borrowed from Dublin Core. It contains copyright and other intellectual property notices. Words, music, and derivatives can have different types, so multiple rights elements with different type attributes are supported. Standard type values are music, words, and arrangement, but other types may be used. The type attribute is only needed when there are multiple rights elements.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute(@"The rights element is borrowed from Dublin Core. It contains copyright and other intellectual property notices. Words, music, and derivatives can have different types, so multiple rights elements with different type attributes are supported. Standard type values are music, words, and arrangement, but other types may be used. The type attribute is only needed when there are multiple rights elements.")]
        [System.Xml.Serialization.XmlElementAttribute("rights")]
        public System.Collections.ObjectModel.Collection<TypedText> Rights
        {
            get
            {
                return _rights;
            }
            private set
            {
                _rights = value;
            }
        }

        /// <summary>
        /// <para xml:lang="en">Gets a value indicating whether the Rights collection is empty.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool RightsSpecified
        {
            get
            {
                return (this.Rights.Count != 0);
            }
        }

        [System.Xml.Serialization.XmlElementAttribute("encoding")]
        public Encoding Encoding { get; set; }

        /// <summary>
        /// <para>The source for the music that is encoded. This is similar to the Dublin Core source element.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("The source for the music that is encoded. This is similar to the Dublin Core sour" +
            "ce element.")]
        [System.Xml.Serialization.XmlElementAttribute("source")]
        public string Source { get; set; }

        [System.Xml.Serialization.XmlIgnoreAttribute()]
        private System.Collections.ObjectModel.Collection<TypedText> _relation;

        /// <summary>
        /// <para>A related resource for the music that is encoded. This is similar to the Dublin Core relation element. Standard type values are music, words, and arrangement, but other types may be used.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("A related resource for the music that is encoded. This is similar to the Dublin C" +
            "ore relation element. Standard type values are music, words, and arrangement, bu" +
            "t other types may be used.")]
        [System.Xml.Serialization.XmlElementAttribute("relation")]
        public System.Collections.ObjectModel.Collection<TypedText> Relation
        {
            get
            {
                return _relation;
            }
            private set
            {
                _relation = value;
            }
        }

        /// <summary>
        /// <para xml:lang="en">Gets a value indicating whether the Relation collection is empty.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool RelationSpecified
        {
            get
            {
                return (this.Relation.Count != 0);
            }
        }

        [System.Xml.Serialization.XmlIgnoreAttribute()]
        private System.Collections.ObjectModel.Collection<MiscellaneousField> _miscellaneous;

        [System.Xml.Serialization.XmlArrayAttribute("miscellaneous")]
        [System.Xml.Serialization.XmlArrayItemAttribute("miscellaneous-field")]
        public System.Collections.ObjectModel.Collection<MiscellaneousField> Miscellaneous
        {
            get
            {
                return _miscellaneous;
            }
            private set
            {
                _miscellaneous = value;
            }
        }

        /// <summary>
        /// <para xml:lang="en">Gets a value indicating whether the Miscellaneous collection is empty.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool MiscellaneousSpecified
        {
            get
            {
                return (this.Miscellaneous.Count != 0);
            }
        }
    }

    /// <summary>
    /// <para>If a program has other metadata not yet supported in the MusicXML format, it can go in the miscellaneous element. The miscellaneous type puts each separate part of metadata into its own miscellaneous-field type.</para>
    /// </summary>
    [System.ComponentModel.DescriptionAttribute("If a program has other metadata not yet supported in the MusicXML format, it can " +
        "go in the miscellaneous element. The miscellaneous type puts each separate part " +
        "of metadata into its own miscellaneous-field type.")]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XmlSchemaClassGenerator", "2.1.1142.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute("miscellaneous", Namespace="")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class Miscellaneous
    {

        [System.Xml.Serialization.XmlIgnoreAttribute()]
        private System.Collections.ObjectModel.Collection<MiscellaneousField> _miscellaneousField;

        [System.Xml.Serialization.XmlElementAttribute("miscellaneous-field")]
        public System.Collections.ObjectModel.Collection<MiscellaneousField> MiscellaneousField
        {
            get
            {
                return _miscellaneousField;
            }
            private set
            {
                _miscellaneousField = value;
            }
        }

        /// <summary>
        /// <para xml:lang="en">Gets a value indicating whether the MiscellaneousField collection is empty.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool MiscellaneousFieldSpecified
        {
            get
            {
                return (this.MiscellaneousField.Count != 0);
            }
        }

        /// <summary>
        /// <para xml:lang="en">Initializes a new instance of the <see cref="Miscellaneous" /> class.</para>
        /// </summary>
        public Miscellaneous()
        {
            this._miscellaneousField = new System.Collections.ObjectModel.Collection<MiscellaneousField>();
        }
    }

    /// <summary>
    /// <para>If a program has other metadata not yet supported in the MusicXML format, each type of metadata can go in a miscellaneous-field element. The required name attribute indicates the type of metadata the element content represents.</para>
    /// </summary>
    [System.ComponentModel.DescriptionAttribute("If a program has other metadata not yet supported in the MusicXML format, each ty" +
        "pe of metadata can go in a miscellaneous-field element. The required name attrib" +
        "ute indicates the type of metadata the element content represents.")]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XmlSchemaClassGenerator", "2.1.1142.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute("miscellaneous-field", Namespace="")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class MiscellaneousField
    {

        /// <summary>
        /// <para xml:lang="en">Gets or sets the text value.</para>
        /// </summary>
        [System.Xml.Serialization.XmlTextAttribute()]
        public string Value { get; set; }

        [System.ComponentModel.DataAnnotations.RequiredAttribute(AllowEmptyStrings=true)]
        [System.Xml.Serialization.XmlAttributeAttribute("name")]
        public string Name { get; set; }
    }

    /// <summary>
    /// <para>The appearance type controls general graphical settings for the music's final form appearance on a printed page of display. This includes support for line widths, definitions for note sizes, and standard distances between notation elements, plus an extension element for other aspects of appearance.</para>
    /// </summary>
    [System.ComponentModel.DescriptionAttribute(@"The appearance type controls general graphical settings for the music's final form appearance on a printed page of display. This includes support for line widths, definitions for note sizes, and standard distances between notation elements, plus an extension element for other aspects of appearance.")]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XmlSchemaClassGenerator", "2.1.1142.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute("appearance", Namespace="")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class Appearance
    {

        [System.Xml.Serialization.XmlIgnoreAttribute()]
        private System.Collections.ObjectModel.Collection<LineWidth> _lineWidth;

        [System.Xml.Serialization.XmlElementAttribute("line-width")]
        public System.Collections.ObjectModel.Collection<LineWidth> LineWidth
        {
            get
            {
                return _lineWidth;
            }
            private set
            {
                _lineWidth = value;
            }
        }

        /// <summary>
        /// <para xml:lang="en">Gets a value indicating whether the LineWidth collection is empty.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool LineWidthSpecified
        {
            get
            {
                return (this.LineWidth.Count != 0);
            }
        }

        /// <summary>
        /// <para xml:lang="en">Initializes a new instance of the <see cref="Appearance" /> class.</para>
        /// </summary>
        public Appearance()
        {
            this._lineWidth = new System.Collections.ObjectModel.Collection<LineWidth>();
            this._noteSize = new System.Collections.ObjectModel.Collection<NoteSize>();
            this._distance = new System.Collections.ObjectModel.Collection<Distance>();
            this._glyph = new System.Collections.ObjectModel.Collection<Glyph>();
            this._otherAppearance = new System.Collections.ObjectModel.Collection<OtherAppearance>();
        }

        [System.Xml.Serialization.XmlIgnoreAttribute()]
        private System.Collections.ObjectModel.Collection<NoteSize> _noteSize;

        [System.Xml.Serialization.XmlElementAttribute("note-size")]
        public System.Collections.ObjectModel.Collection<NoteSize> NoteSize
        {
            get
            {
                return _noteSize;
            }
            private set
            {
                _noteSize = value;
            }
        }

        /// <summary>
        /// <para xml:lang="en">Gets a value indicating whether the NoteSize collection is empty.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool NoteSizeSpecified
        {
            get
            {
                return (this.NoteSize.Count != 0);
            }
        }

        [System.Xml.Serialization.XmlIgnoreAttribute()]
        private System.Collections.ObjectModel.Collection<Distance> _distance;

        [System.Xml.Serialization.XmlElementAttribute("distance")]
        public System.Collections.ObjectModel.Collection<Distance> Distance
        {
            get
            {
                return _distance;
            }
            private set
            {
                _distance = value;
            }
        }

        /// <summary>
        /// <para xml:lang="en">Gets a value indicating whether the Distance collection is empty.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool DistanceSpecified
        {
            get
            {
                return (this.Distance.Count != 0);
            }
        }

        [System.Xml.Serialization.XmlIgnoreAttribute()]
        private System.Collections.ObjectModel.Collection<Glyph> _glyph;

        [System.Xml.Serialization.XmlElementAttribute("glyph")]
        public System.Collections.ObjectModel.Collection<Glyph> Glyph
        {
            get
            {
                return _glyph;
            }
            private set
            {
                _glyph = value;
            }
        }

        /// <summary>
        /// <para xml:lang="en">Gets a value indicating whether the Glyph collection is empty.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool GlyphSpecified
        {
            get
            {
                return (this.Glyph.Count != 0);
            }
        }

        [System.Xml.Serialization.XmlIgnoreAttribute()]
        private System.Collections.ObjectModel.Collection<OtherAppearance> _otherAppearance;

        [System.Xml.Serialization.XmlElementAttribute("other-appearance")]
        public System.Collections.ObjectModel.Collection<OtherAppearance> OtherAppearance
        {
            get
            {
                return _otherAppearance;
            }
            private set
            {
                _otherAppearance = value;
            }
        }

        /// <summary>
        /// <para xml:lang="en">Gets a value indicating whether the OtherAppearance collection is empty.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool OtherAppearanceSpecified
        {
            get
            {
                return (this.OtherAppearance.Count != 0);
            }
        }
    }

    /// <summary>
    /// <para>The line-width type indicates the width of a line type in tenths. The type attribute defines what type of line is being defined. Values include beam, bracket, dashes, enclosure, ending, extend, heavy barline, leger, light barline, octave shift, pedal, slur middle, slur tip, staff, stem, tie middle, tie tip, tuplet bracket, and wedge. The text content is expressed in tenths.</para>
    /// </summary>
    [System.ComponentModel.DescriptionAttribute(@"The line-width type indicates the width of a line type in tenths. The type attribute defines what type of line is being defined. Values include beam, bracket, dashes, enclosure, ending, extend, heavy barline, leger, light barline, octave shift, pedal, slur middle, slur tip, staff, stem, tie middle, tie tip, tuplet bracket, and wedge. The text content is expressed in tenths.")]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XmlSchemaClassGenerator", "2.1.1142.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute("line-width", Namespace="")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class LineWidth
    {

        /// <summary>
        /// <para xml:lang="en">Gets or sets the text value.</para>
        /// </summary>
        [System.Xml.Serialization.XmlTextAttribute()]
        public decimal Value { get; set; }

        /// <summary>
        /// <para>The line-width-type defines what type of line is being defined in a line-width element. Values include beam, bracket, dashes, enclosure, ending, extend, heavy barline, leger, light barline, octave shift, pedal, slur middle, slur tip, staff, stem, tie middle, tie tip, tuplet bracket, and wedge. This is left as a string so that other application-specific types can be defined, but it is made a separate type so that it can be redefined more strictly.</para>
        /// </summary>
        [System.ComponentModel.DataAnnotations.RequiredAttribute(AllowEmptyStrings=true)]
        [System.Xml.Serialization.XmlAttributeAttribute("type")]
        public string Type { get; set; }
    }

    /// <summary>
    /// <para>The note-size type indicates the percentage of the regular note size to use for notes with a cue and large size as defined in the type element. The grace type is used for notes of cue size that that include a grace element. The cue type is used for all other notes with cue size, whether defined explicitly or implicitly via a cue element. The large type is used for notes of large size. The text content represent the numeric percentage. A value of 100 would be identical to the size of a regular note as defined by the music font.</para>
    /// </summary>
    [System.ComponentModel.DescriptionAttribute(@"The note-size type indicates the percentage of the regular note size to use for notes with a cue and large size as defined in the type element. The grace type is used for notes of cue size that that include a grace element. The cue type is used for all other notes with cue size, whether defined explicitly or implicitly via a cue element. The large type is used for notes of large size. The text content represent the numeric percentage. A value of 100 would be identical to the size of a regular note as defined by the music font.")]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XmlSchemaClassGenerator", "2.1.1142.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute("note-size", Namespace="")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class NoteSize
    {

        /// <summary>
        /// <para xml:lang="en">Gets or sets the text value.</para>
        /// <para xml:lang="en">Minimum inclusive value: 0.</para>
        /// </summary>
        [System.Xml.Serialization.XmlTextAttribute()]
        public decimal Value { get; set; }

        [System.ComponentModel.DataAnnotations.RequiredAttribute(AllowEmptyStrings=true)]
        [System.Xml.Serialization.XmlAttributeAttribute("type")]
        public NoteSizeType Type { get; set; }
    }

    /// <summary>
    /// <para>The distance element represents standard distances between notation elements in tenths. The type attribute defines what type of distance is being defined. Valid values include hyphen (for hyphens in lyrics) and beam.</para>
    /// </summary>
    [System.ComponentModel.DescriptionAttribute("The distance element represents standard distances between notation elements in t" +
        "enths. The type attribute defines what type of distance is being defined. Valid " +
        "values include hyphen (for hyphens in lyrics) and beam.")]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XmlSchemaClassGenerator", "2.1.1142.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute("distance", Namespace="")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class Distance
    {

        /// <summary>
        /// <para xml:lang="en">Gets or sets the text value.</para>
        /// </summary>
        [System.Xml.Serialization.XmlTextAttribute()]
        public decimal Value { get; set; }

        /// <summary>
        /// <para>The distance-type defines what type of distance is being defined in a distance element. Values include beam and hyphen. This is left as a string so that other application-specific types can be defined, but it is made a separate type so that it can be redefined more strictly.</para>
        /// </summary>
        [System.ComponentModel.DataAnnotations.RequiredAttribute(AllowEmptyStrings=true)]
        [System.Xml.Serialization.XmlAttributeAttribute("type")]
        public string Type { get; set; }
    }

    /// <summary>
    /// <para>The glyph element represents what SMuFL glyph should be used for different variations of symbols that are semantically identical. The type attribute specifies what type of glyph is being defined. The element value specifies what SMuFL glyph to use, including recommended stylistic alternates. The SMuFL glyph name should match the type. For instance, a type of quarter-rest would use values restQuarter, restQuarterOld, or restQuarterZ. A type of g-clef-ottava-bassa would use values gClef8vb, gClef8vbOld, or gClef8vbCClef. A type of octave-shift-up-8 would use values ottava, ottavaBassa, ottavaBassaBa, ottavaBassaVb, or octaveBassa.</para>
    /// </summary>
    [System.ComponentModel.DescriptionAttribute(@"The glyph element represents what SMuFL glyph should be used for different variations of symbols that are semantically identical. The type attribute specifies what type of glyph is being defined. The element value specifies what SMuFL glyph to use, including recommended stylistic alternates. The SMuFL glyph name should match the type. For instance, a type of quarter-rest would use values restQuarter, restQuarterOld, or restQuarterZ. A type of g-clef-ottava-bassa would use values gClef8vb, gClef8vbOld, or gClef8vbCClef. A type of octave-shift-up-8 would use values ottava, ottavaBassa, ottavaBassaBa, ottavaBassaVb, or octaveBassa.")]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XmlSchemaClassGenerator", "2.1.1142.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute("glyph", Namespace="")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class Glyph
    {

        /// <summary>
        /// <para xml:lang="en">Gets or sets the text value.</para>
        /// </summary>
        [System.Xml.Serialization.XmlTextAttribute()]
        public string Value { get; set; }

        /// <summary>
        /// <para>The glyph-type defines what type of glyph is being defined in a glyph element. Values include quarter-rest, g-clef-ottava-bassa, c-clef, f-clef, percussion-clef, octave-shift-up-8, octave-shift-down-8, octave-shift-continue-8, octave-shift-down-15, octave-shift-up-15, octave-shift-continue-15, octave-shift-down-22, octave-shift-up-22, and octave-shift-continue-22. This is left as a string so that other application-specific types can be defined, but it is made a separate type so that it can be redefined more strictly.
        ///
        ///A quarter-rest type specifies the glyph to use when a note has a rest element and a type value of quarter. The c-clef, f-clef, and percussion-clef types specify the glyph to use when a clef sign element value is C, F, or percussion respectively. The g-clef-ottava-bassa type specifies the glyph to use when a clef sign element value is G and the clef-octave-change element value is -1. The octave-shift types specify the glyph to use when an octave-shift type attribute value is up, down, or continue and the octave-shift size attribute value is 8, 15, or 22.</para>
        /// </summary>
        [System.ComponentModel.DataAnnotations.RequiredAttribute(AllowEmptyStrings=true)]
        [System.Xml.Serialization.XmlAttributeAttribute("type")]
        public string Type { get; set; }
    }

    /// <summary>
    /// <para>The other-appearance type is used to define any graphical settings not yet in the current version of the MusicXML format. This allows extended representation, though without application interoperability.</para>
    /// </summary>
    [System.ComponentModel.DescriptionAttribute("The other-appearance type is used to define any graphical settings not yet in the" +
        " current version of the MusicXML format. This allows extended representation, th" +
        "ough without application interoperability.")]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XmlSchemaClassGenerator", "2.1.1142.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute("other-appearance", Namespace="")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class OtherAppearance
    {

        /// <summary>
        /// <para xml:lang="en">Gets or sets the text value.</para>
        /// </summary>
        [System.Xml.Serialization.XmlTextAttribute()]
        public string Value { get; set; }

        [System.ComponentModel.DataAnnotations.RequiredAttribute(AllowEmptyStrings=true)]
        [System.Xml.Serialization.XmlAttributeAttribute("type")]
        public string Type { get; set; }
    }

    /// <summary>
    /// <para>Margins, page sizes, and distances are all measured in tenths to keep MusicXML data in a consistent coordinate system as much as possible. The translation to absolute units is done with the scaling type, which specifies how many millimeters are equal to how many tenths. For a staff height of 7 mm, millimeters would be set to 7 while tenths is set to 40. The ability to set a formula rather than a single scaling factor helps avoid roundoff errors.</para>
    /// </summary>
    [System.ComponentModel.DescriptionAttribute(@"Margins, page sizes, and distances are all measured in tenths to keep MusicXML data in a consistent coordinate system as much as possible. The translation to absolute units is done with the scaling type, which specifies how many millimeters are equal to how many tenths. For a staff height of 7 mm, millimeters would be set to 7 while tenths is set to 40. The ability to set a formula rather than a single scaling factor helps avoid roundoff errors.")]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XmlSchemaClassGenerator", "2.1.1142.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute("scaling", Namespace="")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class Scaling
    {

        /// <summary>
        /// <para>The millimeters type is a number representing millimeters. This is used in the scaling element to provide a default scaling from tenths to physical units.</para>
        /// </summary>
        [System.ComponentModel.DataAnnotations.RequiredAttribute(AllowEmptyStrings=true)]
        [System.Xml.Serialization.XmlElementAttribute("millimeters")]
        public decimal Millimeters { get; set; }

        /// <summary>
        /// <para>The tenths type is a number representing tenths of interline staff space (positive or negative). Both integer and decimal values are allowed, such as 5 for a half space and 2.5 for a quarter space. Interline space is measured from the middle of a staff line.
        ///
        ///Distances in a MusicXML file are measured in tenths of staff space. Tenths are then scaled to millimeters within the scaling element, used in the defaults element at the start of a score. Individual staves can apply a scaling factor to adjust staff size. When a MusicXML element or attribute refers to tenths, it means the global tenths defined by the scaling element, not the local tenths as adjusted by the staff-size element.</para>
        /// </summary>
        [System.ComponentModel.DataAnnotations.RequiredAttribute(AllowEmptyStrings=true)]
        [System.Xml.Serialization.XmlElementAttribute("tenths")]
        public decimal Tenths { get; set; }
    }

    /// <summary>
    /// <para>The bookmark type serves as a well-defined target for an incoming simple XLink.</para>
    /// </summary>
    [System.ComponentModel.DescriptionAttribute("The bookmark type serves as a well-defined target for an incoming simple XLink.")]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XmlSchemaClassGenerator", "2.1.1142.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute("bookmark", Namespace="")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class Bookmark : IElementPosition
    {

        [System.ComponentModel.DataAnnotations.RequiredAttribute(AllowEmptyStrings=true)]
        [System.Xml.Serialization.XmlAttributeAttribute("id")]
        public string Id { get; set; }

        [System.Xml.Serialization.XmlAttributeAttribute("name")]
        public string Name { get; set; }

        [System.Xml.Serialization.XmlAttributeAttribute("element")]
        public string Element { get; set; }

        [System.Xml.Serialization.XmlAttributeAttribute("position")]
        public string Position { get; set; }
    }

    /// <summary>
    /// <para>The element and position attributes are new as of Version 2.0. They allow for bookmarks and links to be positioned at higher resolution than the level of music-data elements. When no element and position attributes are present, the bookmark or link element refers to the next sibling element in the MusicXML file. The element attribute specifies an element type for a descendant of the next sibling element that is not a link or bookmark. The position attribute specifies the position of this descendant element, where the first position is 1. The position attribute is ignored if the element attribute is not present. For instance, an element value of "beam" and a position value of "2" defines the link or bookmark to refer to the second beam descendant of the next sibling element that is not a link or bookmark. This is equivalent to an XPath test of [.//beam[2]] done in the context of the sibling element.</para>
    /// </summary>
    [System.ComponentModel.DescriptionAttribute(@"The element and position attributes are new as of Version 2.0. They allow for bookmarks and links to be positioned at higher resolution than the level of music-data elements. When no element and position attributes are present, the bookmark or link element refers to the next sibling element in the MusicXML file. The element attribute specifies an element type for a descendant of the next sibling element that is not a link or bookmark. The position attribute specifies the position of this descendant element, where the first position is 1. The position attribute is ignored if the element attribute is not present. For instance, an element value of ""beam"" and a position value of ""2"" defines the link or bookmark to refer to the second beam descendant of the next sibling element that is not a link or bookmark. This is equivalent to an XPath test of [.//beam[2]] done in the context of the sibling element.")]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XmlSchemaClassGenerator", "2.1.1142.0")]
    public partial interface IElementPosition
    {

        string Element
        {
            get;
            set;
        }

        string Position
        {
            get;
            set;
        }
    }

    /// <summary>
    /// <para>The link type serves as an outgoing simple XLink. If a relative link is used within a document that is part of a compressed MusicXML file, the link is relative to the root folder of the zip file.</para>
    /// </summary>
    [System.ComponentModel.DescriptionAttribute("The link type serves as an outgoing simple XLink. If a relative link is used with" +
        "in a document that is part of a compressed MusicXML file, the link is relative t" +
        "o the root folder of the zip file.")]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XmlSchemaClassGenerator", "2.1.1142.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute("link", Namespace="")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class Link : ILinkAttributes, IElementPosition, IPosition
    {

        [System.ComponentModel.DataAnnotations.RequiredAttribute(AllowEmptyStrings=true)]
        [System.Xml.Serialization.XmlAttributeAttribute("href", Namespace="http://www.w3.org/1999/xlink", Form=System.Xml.Schema.XmlSchemaForm.Qualified)]
        public string Href { get; set; }

        [System.Xml.Serialization.XmlIgnoreAttribute()]
        private OpenUtau.Core.Format.MusicXMLSchema.Type _type = OpenUtau.Core.Format.MusicXMLSchema.Type.Simple;

        [System.ComponentModel.DefaultValueAttribute(OpenUtau.Core.Format.MusicXMLSchema.Type.Simple)]
        [System.Xml.Serialization.XmlAttributeAttribute("type", Namespace="http://www.w3.org/1999/xlink", Form=System.Xml.Schema.XmlSchemaForm.Qualified)]
        public OpenUtau.Core.Format.MusicXMLSchema.Type Type
        {
            get
            {
                return _type;
            }
            set
            {
                _type = value;
            }
        }

        [System.Xml.Serialization.XmlAttributeAttribute("role", Namespace="http://www.w3.org/1999/xlink", Form=System.Xml.Schema.XmlSchemaForm.Qualified)]
        public string Role { get; set; }

        [System.Xml.Serialization.XmlAttributeAttribute("title", Namespace="http://www.w3.org/1999/xlink", Form=System.Xml.Schema.XmlSchemaForm.Qualified)]
        public string Title { get; set; }

        [System.Xml.Serialization.XmlIgnoreAttribute()]
        private OpenUtau.Core.Format.MusicXMLSchema.Show _show = OpenUtau.Core.Format.MusicXMLSchema.Show.Replace;

        [System.ComponentModel.DefaultValueAttribute(OpenUtau.Core.Format.MusicXMLSchema.Show.Replace)]
        [System.Xml.Serialization.XmlAttributeAttribute("show", Namespace="http://www.w3.org/1999/xlink", Form=System.Xml.Schema.XmlSchemaForm.Qualified)]
        public OpenUtau.Core.Format.MusicXMLSchema.Show Show
        {
            get
            {
                return _show;
            }
            set
            {
                _show = value;
            }
        }

        [System.Xml.Serialization.XmlIgnoreAttribute()]
        private OpenUtau.Core.Format.MusicXMLSchema.Actuate _actuate = OpenUtau.Core.Format.MusicXMLSchema.Actuate.OnRequest;

        [System.ComponentModel.DefaultValueAttribute(OpenUtau.Core.Format.MusicXMLSchema.Actuate.OnRequest)]
        [System.Xml.Serialization.XmlAttributeAttribute("actuate", Namespace="http://www.w3.org/1999/xlink", Form=System.Xml.Schema.XmlSchemaForm.Qualified)]
        public OpenUtau.Core.Format.MusicXMLSchema.Actuate Actuate
        {
            get
            {
                return _actuate;
            }
            set
            {
                _actuate = value;
            }
        }

        [System.Xml.Serialization.XmlAttributeAttribute("name")]
        public string Name { get; set; }

        [System.Xml.Serialization.XmlAttributeAttribute("element")]
        public string Element { get; set; }

        [System.Xml.Serialization.XmlAttributeAttribute("position")]
        public string Position { get; set; }

        /// <summary>
        /// <para>The tenths type is a number representing tenths of interline staff space (positive or negative). Both integer and decimal values are allowed, such as 5 for a half space and 2.5 for a quarter space. Interline space is measured from the middle of a staff line.
        ///
        ///Distances in a MusicXML file are measured in tenths of staff space. Tenths are then scaled to millimeters within the scaling element, used in the defaults element at the start of a score. Individual staves can apply a scaling factor to adjust staff size. When a MusicXML element or attribute refers to tenths, it means the global tenths defined by the scaling element, not the local tenths as adjusted by the staff-size element.</para>
        /// </summary>
        [System.Xml.Serialization.XmlAttributeAttribute("default-x")]
        public decimal DefaultX { get; set; }

        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the DefaultX property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool DefaultXSpecified { get; set; }

        /// <summary>
        /// <para>The tenths type is a number representing tenths of interline staff space (positive or negative). Both integer and decimal values are allowed, such as 5 for a half space and 2.5 for a quarter space. Interline space is measured from the middle of a staff line.
        ///
        ///Distances in a MusicXML file are measured in tenths of staff space. Tenths are then scaled to millimeters within the scaling element, used in the defaults element at the start of a score. Individual staves can apply a scaling factor to adjust staff size. When a MusicXML element or attribute refers to tenths, it means the global tenths defined by the scaling element, not the local tenths as adjusted by the staff-size element.</para>
        /// </summary>
        [System.Xml.Serialization.XmlAttributeAttribute("default-y")]
        public decimal DefaultY { get; set; }

        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the DefaultY property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool DefaultYSpecified { get; set; }

        /// <summary>
        /// <para>The tenths type is a number representing tenths of interline staff space (positive or negative). Both integer and decimal values are allowed, such as 5 for a half space and 2.5 for a quarter space. Interline space is measured from the middle of a staff line.
        ///
        ///Distances in a MusicXML file are measured in tenths of staff space. Tenths are then scaled to millimeters within the scaling element, used in the defaults element at the start of a score. Individual staves can apply a scaling factor to adjust staff size. When a MusicXML element or attribute refers to tenths, it means the global tenths defined by the scaling element, not the local tenths as adjusted by the staff-size element.</para>
        /// </summary>
        [System.Xml.Serialization.XmlAttributeAttribute("relative-x")]
        public decimal RelativeX { get; set; }

        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the RelativeX property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool RelativeXSpecified { get; set; }

        /// <summary>
        /// <para>The tenths type is a number representing tenths of interline staff space (positive or negative). Both integer and decimal values are allowed, such as 5 for a half space and 2.5 for a quarter space. Interline space is measured from the middle of a staff line.
        ///
        ///Distances in a MusicXML file are measured in tenths of staff space. Tenths are then scaled to millimeters within the scaling element, used in the defaults element at the start of a score. Individual staves can apply a scaling factor to adjust staff size. When a MusicXML element or attribute refers to tenths, it means the global tenths defined by the scaling element, not the local tenths as adjusted by the staff-size element.</para>
        /// </summary>
        [System.Xml.Serialization.XmlAttributeAttribute("relative-y")]
        public decimal RelativeY { get; set; }

        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the RelativeY property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool RelativeYSpecified { get; set; }
    }

    /// <summary>
    /// <para>The link-attributes group includes all the simple XLink attributes supported in the MusicXML format. It is also used to connect a MusicXML score with MusicXML parts or a MusicXML opus.</para>
    /// </summary>
    [System.ComponentModel.DescriptionAttribute("The link-attributes group includes all the simple XLink attributes supported in t" +
        "he MusicXML format. It is also used to connect a MusicXML score with MusicXML pa" +
        "rts or a MusicXML opus.")]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XmlSchemaClassGenerator", "2.1.1142.0")]
    public partial interface ILinkAttributes
    {

        string Href
        {
            get;
            set;
        }

        [System.ComponentModel.DefaultValueAttribute(OpenUtau.Core.Format.MusicXMLSchema.Type.Simple)]
        OpenUtau.Core.Format.MusicXMLSchema.Type Type
        {
            get;
            set;
        }

        string Role
        {
            get;
            set;
        }

        string Title
        {
            get;
            set;
        }

        [System.ComponentModel.DefaultValueAttribute(OpenUtau.Core.Format.MusicXMLSchema.Show.Replace)]
        OpenUtau.Core.Format.MusicXMLSchema.Show Show
        {
            get;
            set;
        }

        [System.ComponentModel.DefaultValueAttribute(OpenUtau.Core.Format.MusicXMLSchema.Actuate.OnRequest)]
        OpenUtau.Core.Format.MusicXMLSchema.Actuate Actuate
        {
            get;
            set;
        }
    }

    /// <summary>
    /// <para>The accidental type represents actual notated accidentals. Editorial and cautionary indications are indicated by attributes. Values for these attributes are "no" if not present. Specific graphic display such as parentheses, brackets, and size are controlled by the level-display attribute group.</para>
    /// </summary>
    [System.ComponentModel.DescriptionAttribute(@"The accidental type represents actual notated accidentals. Editorial and cautionary indications are indicated by attributes. Values for these attributes are ""no"" if not present. Specific graphic display such as parentheses, brackets, and size are controlled by the level-display attribute group.")]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XmlSchemaClassGenerator", "2.1.1142.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute("accidental", Namespace="")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class Accidental : ILevelDisplay, IPrintStyle
    {

        /// <summary>
        /// <para xml:lang="en">Gets or sets the text value.</para>
        /// </summary>
        [System.Xml.Serialization.XmlTextAttribute()]
        public AccidentalValue Value { get; set; }

        [System.Xml.Serialization.XmlAttributeAttribute("cautionary")]
        public YesNo Cautionary { get; set; }

        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the Cautionary property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool CautionarySpecified { get; set; }

        [System.Xml.Serialization.XmlAttributeAttribute("editorial")]
        public YesNo Editorial { get; set; }

        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the Editorial property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool EditorialSpecified { get; set; }

        [System.Xml.Serialization.XmlAttributeAttribute("parentheses")]
        public YesNo Parentheses { get; set; }

        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the Parentheses property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool ParenthesesSpecified { get; set; }

        [System.Xml.Serialization.XmlAttributeAttribute("bracket")]
        public YesNo Bracket { get; set; }

        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the Bracket property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool BracketSpecified { get; set; }

        [System.Xml.Serialization.XmlAttributeAttribute("size")]
        public SymbolSize Size { get; set; }

        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the Size property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool SizeSpecified { get; set; }

        /// <summary>
        /// <para>The tenths type is a number representing tenths of interline staff space (positive or negative). Both integer and decimal values are allowed, such as 5 for a half space and 2.5 for a quarter space. Interline space is measured from the middle of a staff line.
        ///
        ///Distances in a MusicXML file are measured in tenths of staff space. Tenths are then scaled to millimeters within the scaling element, used in the defaults element at the start of a score. Individual staves can apply a scaling factor to adjust staff size. When a MusicXML element or attribute refers to tenths, it means the global tenths defined by the scaling element, not the local tenths as adjusted by the staff-size element.</para>
        /// </summary>
        [System.Xml.Serialization.XmlAttributeAttribute("default-x")]
        public decimal DefaultX { get; set; }

        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the DefaultX property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool DefaultXSpecified { get; set; }

        /// <summary>
        /// <para>The tenths type is a number representing tenths of interline staff space (positive or negative). Both integer and decimal values are allowed, such as 5 for a half space and 2.5 for a quarter space. Interline space is measured from the middle of a staff line.
        ///
        ///Distances in a MusicXML file are measured in tenths of staff space. Tenths are then scaled to millimeters within the scaling element, used in the defaults element at the start of a score. Individual staves can apply a scaling factor to adjust staff size. When a MusicXML element or attribute refers to tenths, it means the global tenths defined by the scaling element, not the local tenths as adjusted by the staff-size element.</para>
        /// </summary>
        [System.Xml.Serialization.XmlAttributeAttribute("default-y")]
        public decimal DefaultY { get; set; }

        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the DefaultY property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool DefaultYSpecified { get; set; }

        /// <summary>
        /// <para>The tenths type is a number representing tenths of interline staff space (positive or negative). Both integer and decimal values are allowed, such as 5 for a half space and 2.5 for a quarter space. Interline space is measured from the middle of a staff line.
        ///
        ///Distances in a MusicXML file are measured in tenths of staff space. Tenths are then scaled to millimeters within the scaling element, used in the defaults element at the start of a score. Individual staves can apply a scaling factor to adjust staff size. When a MusicXML element or attribute refers to tenths, it means the global tenths defined by the scaling element, not the local tenths as adjusted by the staff-size element.</para>
        /// </summary>
        [System.Xml.Serialization.XmlAttributeAttribute("relative-x")]
        public decimal RelativeX { get; set; }

        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the RelativeX property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool RelativeXSpecified { get; set; }

        /// <summary>
        /// <para>The tenths type is a number representing tenths of interline staff space (positive or negative). Both integer and decimal values are allowed, such as 5 for a half space and 2.5 for a quarter space. Interline space is measured from the middle of a staff line.
        ///
        ///Distances in a MusicXML file are measured in tenths of staff space. Tenths are then scaled to millimeters within the scaling element, used in the defaults element at the start of a score. Individual staves can apply a scaling factor to adjust staff size. When a MusicXML element or attribute refers to tenths, it means the global tenths defined by the scaling element, not the local tenths as adjusted by the staff-size element.</para>
        /// </summary>
        [System.Xml.Serialization.XmlAttributeAttribute("relative-y")]
        public decimal RelativeY { get; set; }

        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the RelativeY property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool RelativeYSpecified { get; set; }

        /// <summary>
        /// <para>The font-family is a comma-separated list of font names. These can be specific font styles such as Maestro or Opus, or one of several generic font styles: music, engraved, handwritten, text, serif, sans-serif, handwritten, cursive, fantasy, and monospace. The music, engraved, and handwritten values refer to music fonts; the rest refer to text fonts. The fantasy style refers to decorative text such as found in older German-style printing.</para>
        /// <para xml:lang="en">Pattern: [^,]+(, ?[^,]+)*.</para>
        /// </summary>
        [System.ComponentModel.DataAnnotations.RegularExpressionAttribute("[^,]+(, ?[^,]+)*")]
        [System.Xml.Serialization.XmlAttributeAttribute("font-family")]
        public string FontFamily { get; set; }

        [System.Xml.Serialization.XmlAttributeAttribute("font-style")]
        public FontStyle FontStyle { get; set; }

        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the FontStyle property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool FontStyleSpecified { get; set; }

        /// <summary>
        /// <para>The font-size can be one of the CSS font sizes (xx-small, x-small, small, medium, large, x-large, xx-large) or a numeric point size.</para>
        /// </summary>
        [System.Xml.Serialization.XmlAttributeAttribute("font-size")]
        public string FontSize { get; set; }

        [System.Xml.Serialization.XmlAttributeAttribute("font-weight")]
        public FontWeight FontWeight { get; set; }

        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the FontWeight property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool FontWeightSpecified { get; set; }

        /// <summary>
        /// <para>The color type indicates the color of an element. Color may be represented as hexadecimal RGB triples, as in HTML, or as hexadecimal ARGB tuples, with the A indicating alpha of transparency. An alpha value of 00 is totally transparent; FF is totally opaque. If RGB is used, the A value is assumed to be FF.
        ///
        ///For instance, the RGB value "#800080" represents purple. An ARGB value of "#40800080" would be a transparent purple.
        ///
        ///As in SVG 1.1, colors are defined in terms of the sRGB color space (IEC 61966).</para>
        /// <para xml:lang="en">Pattern: #[\dA-F]{6}([\dA-F][\dA-F])?.</para>
        /// </summary>
        [System.ComponentModel.DataAnnotations.RegularExpressionAttribute("#[\\dA-F]{6}([\\dA-F][\\dA-F])?")]
        [System.Xml.Serialization.XmlAttributeAttribute("color")]
        public string Color { get; set; }

        /// <summary>
        /// <para>The smufl-accidental-glyph-name type is used to reference a specific Standard Music Font Layout (SMuFL) accidental character. The value is a SMuFL canonical glyph name that starts with one of the strings used at the start of glyph names for SMuFL accidentals.</para>
        /// <para xml:lang="en">Pattern: (acc|medRenFla|medRenNatura|medRenShar|kievanAccidental)(\c+).</para>
        /// </summary>
        [System.ComponentModel.DataAnnotations.RegularExpressionAttribute("(acc|medRenFla|medRenNatura|medRenShar|kievanAccidental)(\\c+)")]
        [System.Xml.Serialization.XmlAttributeAttribute("smufl")]
        public string Smufl { get; set; }
    }

    /// <summary>
    /// <para>An accidental-mark can be used as a separate notation or as part of an ornament. When used in an ornament, position and placement are relative to the ornament, not relative to the note.</para>
    /// </summary>
    [System.ComponentModel.DescriptionAttribute("An accidental-mark can be used as a separate notation or as part of an ornament. " +
        "When used in an ornament, position and placement are relative to the ornament, n" +
        "ot relative to the note.")]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XmlSchemaClassGenerator", "2.1.1142.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute("accidental-mark", Namespace="")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class AccidentalMark : ILevelDisplay, IPrintStyle, IPlacement, IOptionalUniqueId
    {

        /// <summary>
        /// <para xml:lang="en">Gets or sets the text value.</para>
        /// </summary>
        [System.Xml.Serialization.XmlTextAttribute()]
        public AccidentalValue Value { get; set; }

        [System.Xml.Serialization.XmlAttributeAttribute("parentheses")]
        public YesNo Parentheses { get; set; }

        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the Parentheses property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool ParenthesesSpecified { get; set; }

        [System.Xml.Serialization.XmlAttributeAttribute("bracket")]
        public YesNo Bracket { get; set; }

        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the Bracket property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool BracketSpecified { get; set; }

        [System.Xml.Serialization.XmlAttributeAttribute("size")]
        public SymbolSize Size { get; set; }

        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the Size property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool SizeSpecified { get; set; }

        /// <summary>
        /// <para>The tenths type is a number representing tenths of interline staff space (positive or negative). Both integer and decimal values are allowed, such as 5 for a half space and 2.5 for a quarter space. Interline space is measured from the middle of a staff line.
        ///
        ///Distances in a MusicXML file are measured in tenths of staff space. Tenths are then scaled to millimeters within the scaling element, used in the defaults element at the start of a score. Individual staves can apply a scaling factor to adjust staff size. When a MusicXML element or attribute refers to tenths, it means the global tenths defined by the scaling element, not the local tenths as adjusted by the staff-size element.</para>
        /// </summary>
        [System.Xml.Serialization.XmlAttributeAttribute("default-x")]
        public decimal DefaultX { get; set; }

        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the DefaultX property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool DefaultXSpecified { get; set; }

        /// <summary>
        /// <para>The tenths type is a number representing tenths of interline staff space (positive or negative). Both integer and decimal values are allowed, such as 5 for a half space and 2.5 for a quarter space. Interline space is measured from the middle of a staff line.
        ///
        ///Distances in a MusicXML file are measured in tenths of staff space. Tenths are then scaled to millimeters within the scaling element, used in the defaults element at the start of a score. Individual staves can apply a scaling factor to adjust staff size. When a MusicXML element or attribute refers to tenths, it means the global tenths defined by the scaling element, not the local tenths as adjusted by the staff-size element.</para>
        /// </summary>
        [System.Xml.Serialization.XmlAttributeAttribute("default-y")]
        public decimal DefaultY { get; set; }

        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the DefaultY property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool DefaultYSpecified { get; set; }

        /// <summary>
        /// <para>The tenths type is a number representing tenths of interline staff space (positive or negative). Both integer and decimal values are allowed, such as 5 for a half space and 2.5 for a quarter space. Interline space is measured from the middle of a staff line.
        ///
        ///Distances in a MusicXML file are measured in tenths of staff space. Tenths are then scaled to millimeters within the scaling element, used in the defaults element at the start of a score. Individual staves can apply a scaling factor to adjust staff size. When a MusicXML element or attribute refers to tenths, it means the global tenths defined by the scaling element, not the local tenths as adjusted by the staff-size element.</para>
        /// </summary>
        [System.Xml.Serialization.XmlAttributeAttribute("relative-x")]
        public decimal RelativeX { get; set; }

        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the RelativeX property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool RelativeXSpecified { get; set; }

        /// <summary>
        /// <para>The tenths type is a number representing tenths of interline staff space (positive or negative). Both integer and decimal values are allowed, such as 5 for a half space and 2.5 for a quarter space. Interline space is measured from the middle of a staff line.
        ///
        ///Distances in a MusicXML file are measured in tenths of staff space. Tenths are then scaled to millimeters within the scaling element, used in the defaults element at the start of a score. Individual staves can apply a scaling factor to adjust staff size. When a MusicXML element or attribute refers to tenths, it means the global tenths defined by the scaling element, not the local tenths as adjusted by the staff-size element.</para>
        /// </summary>
        [System.Xml.Serialization.XmlAttributeAttribute("relative-y")]
        public decimal RelativeY { get; set; }

        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the RelativeY property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool RelativeYSpecified { get; set; }

        /// <summary>
        /// <para>The font-family is a comma-separated list of font names. These can be specific font styles such as Maestro or Opus, or one of several generic font styles: music, engraved, handwritten, text, serif, sans-serif, handwritten, cursive, fantasy, and monospace. The music, engraved, and handwritten values refer to music fonts; the rest refer to text fonts. The fantasy style refers to decorative text such as found in older German-style printing.</para>
        /// <para xml:lang="en">Pattern: [^,]+(, ?[^,]+)*.</para>
        /// </summary>
        [System.ComponentModel.DataAnnotations.RegularExpressionAttribute("[^,]+(, ?[^,]+)*")]
        [System.Xml.Serialization.XmlAttributeAttribute("font-family")]
        public string FontFamily { get; set; }

        [System.Xml.Serialization.XmlAttributeAttribute("font-style")]
        public FontStyle FontStyle { get; set; }

        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the FontStyle property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool FontStyleSpecified { get; set; }

        /// <summary>
        /// <para>The font-size can be one of the CSS font sizes (xx-small, x-small, small, medium, large, x-large, xx-large) or a numeric point size.</para>
        /// </summary>
        [System.Xml.Serialization.XmlAttributeAttribute("font-size")]
        public string FontSize { get; set; }

        [System.Xml.Serialization.XmlAttributeAttribute("font-weight")]
        public FontWeight FontWeight { get; set; }

        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the FontWeight property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool FontWeightSpecified { get; set; }

        /// <summary>
        /// <para>The color type indicates the color of an element. Color may be represented as hexadecimal RGB triples, as in HTML, or as hexadecimal ARGB tuples, with the A indicating alpha of transparency. An alpha value of 00 is totally transparent; FF is totally opaque. If RGB is used, the A value is assumed to be FF.
        ///
        ///For instance, the RGB value "#800080" represents purple. An ARGB value of "#40800080" would be a transparent purple.
        ///
        ///As in SVG 1.1, colors are defined in terms of the sRGB color space (IEC 61966).</para>
        /// <para xml:lang="en">Pattern: #[\dA-F]{6}([\dA-F][\dA-F])?.</para>
        /// </summary>
        [System.ComponentModel.DataAnnotations.RegularExpressionAttribute("#[\\dA-F]{6}([\\dA-F][\\dA-F])?")]
        [System.Xml.Serialization.XmlAttributeAttribute("color")]
        public string Color { get; set; }

        [System.Xml.Serialization.XmlAttributeAttribute("placement")]
        public AboveBelow Placement { get; set; }

        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the Placement property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool PlacementSpecified { get; set; }

        /// <summary>
        /// <para>The smufl-accidental-glyph-name type is used to reference a specific Standard Music Font Layout (SMuFL) accidental character. The value is a SMuFL canonical glyph name that starts with one of the strings used at the start of glyph names for SMuFL accidentals.</para>
        /// <para xml:lang="en">Pattern: (acc|medRenFla|medRenNatura|medRenShar|kievanAccidental)(\c+).</para>
        /// </summary>
        [System.ComponentModel.DataAnnotations.RegularExpressionAttribute("(acc|medRenFla|medRenNatura|medRenShar|kievanAccidental)(\\c+)")]
        [System.Xml.Serialization.XmlAttributeAttribute("smufl")]
        public string Smufl { get; set; }

        [System.Xml.Serialization.XmlAttributeAttribute("id")]
        public string Id { get; set; }
    }

    /// <summary>
    /// <para>The arpeggiate type indicates that this note is part of an arpeggiated chord. The number attribute can be used to distinguish between two simultaneous chords arpeggiated separately (different numbers) or together (same number). The direction attribute is used if there is an arrow on the arpeggio sign. By default, arpeggios go from the lowest to highest note.  The length of the sign can be determined from the position attributes for the arpeggiate elements used with the top and bottom notes of the arpeggiated chord. If the unbroken attribute is set to yes, it indicates that the arpeggio continues onto another staff within the part. This serves as a hint to applications and is not required for cross-staff arpeggios.</para>
    /// </summary>
    [System.ComponentModel.DescriptionAttribute(@"The arpeggiate type indicates that this note is part of an arpeggiated chord. The number attribute can be used to distinguish between two simultaneous chords arpeggiated separately (different numbers) or together (same number). The direction attribute is used if there is an arrow on the arpeggio sign. By default, arpeggios go from the lowest to highest note. The length of the sign can be determined from the position attributes for the arpeggiate elements used with the top and bottom notes of the arpeggiated chord. If the unbroken attribute is set to yes, it indicates that the arpeggio continues onto another staff within the part. This serves as a hint to applications and is not required for cross-staff arpeggios.")]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XmlSchemaClassGenerator", "2.1.1142.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute("arpeggiate", Namespace="")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class Arpeggiate : IPosition, IPlacement, IColor, IOptionalUniqueId
    {

        /// <summary>
        /// <para>Slurs, tuplets, and many other features can be concurrent and overlap within a single musical part. The number-level entity distinguishes up to 16 concurrent objects of the same type when the objects overlap in MusicXML document order. Values greater than 6 are usually only needed for music with a large number of divisi staves in a single part, or if there are more than 6 cross-staff arpeggios in a single measure. When a number-level value is implied, the value is 1 by default.
        ///
        ///When polyphonic parts are involved, the ordering within a MusicXML document can differ from musical score order. As an example, say we have a piano part in 4/4 where within a single measure, all the notes on the top staff are followed by all the notes on the bottom staff. In this example, each staff has a slur that starts on beat 2 and stops on beat 3, and there is a third slur that goes from beat 1 of one staff to beat 4 of the other staff.
        ///
        ///In this situation, the two mid-measure slurs can use the same number because they do not overlap in MusicXML document order, even though they do overlap in musical score order. Within the MusicXML document, the top staff slur will both start and stop before the bottom staff slur starts and stops.
        ///
        ///If the cross-staff slur starts in the top staff and stops in the bottom staff, it will need a separate number from the mid-measure slurs because it overlaps those slurs in MusicXML document order. However, if the cross-staff slur starts in the bottom staff and stops in the top staff, all three slurs can use the same number. None of them overlap within the MusicXML document, even though they all overlap each other in the musical score order. Within the MusicXML document, the start and stop of the top-staff slur will be followed by the stop and start of the cross-staff slur, followed by the start and stop of the bottom-staff slur.
        ///
        ///As this example demonstrates, a reading program should be prepared to handle cases where the number-levels start and stop in an arbitrary order. Because the start and stop values refer to musical score order, a program may find the stopping point of an object earlier in the MusicXML document than it will find its starting point.</para>
        /// <para xml:lang="en">Minimum inclusive value: 1.</para>
        /// <para xml:lang="en">Maximum inclusive value: 16.</para>
        /// </summary>
        [System.ComponentModel.DataAnnotations.RangeAttribute(typeof(decimal), "1", "16")]
        [System.Xml.Serialization.XmlAttributeAttribute("number")]
        public byte Number { get; set; }

        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the Number property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool NumberSpecified { get; set; }

        [System.Xml.Serialization.XmlAttributeAttribute("direction")]
        public UpDown Direction { get; set; }

        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the Direction property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool DirectionSpecified { get; set; }

        [System.Xml.Serialization.XmlAttributeAttribute("unbroken")]
        public YesNo Unbroken { get; set; }

        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the Unbroken property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool UnbrokenSpecified { get; set; }

        /// <summary>
        /// <para>The tenths type is a number representing tenths of interline staff space (positive or negative). Both integer and decimal values are allowed, such as 5 for a half space and 2.5 for a quarter space. Interline space is measured from the middle of a staff line.
        ///
        ///Distances in a MusicXML file are measured in tenths of staff space. Tenths are then scaled to millimeters within the scaling element, used in the defaults element at the start of a score. Individual staves can apply a scaling factor to adjust staff size. When a MusicXML element or attribute refers to tenths, it means the global tenths defined by the scaling element, not the local tenths as adjusted by the staff-size element.</para>
        /// </summary>
        [System.Xml.Serialization.XmlAttributeAttribute("default-x")]
        public decimal DefaultX { get; set; }

        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the DefaultX property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool DefaultXSpecified { get; set; }

        /// <summary>
        /// <para>The tenths type is a number representing tenths of interline staff space (positive or negative). Both integer and decimal values are allowed, such as 5 for a half space and 2.5 for a quarter space. Interline space is measured from the middle of a staff line.
        ///
        ///Distances in a MusicXML file are measured in tenths of staff space. Tenths are then scaled to millimeters within the scaling element, used in the defaults element at the start of a score. Individual staves can apply a scaling factor to adjust staff size. When a MusicXML element or attribute refers to tenths, it means the global tenths defined by the scaling element, not the local tenths as adjusted by the staff-size element.</para>
        /// </summary>
        [System.Xml.Serialization.XmlAttributeAttribute("default-y")]
        public decimal DefaultY { get; set; }

        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the DefaultY property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool DefaultYSpecified { get; set; }

        /// <summary>
        /// <para>The tenths type is a number representing tenths of interline staff space (positive or negative). Both integer and decimal values are allowed, such as 5 for a half space and 2.5 for a quarter space. Interline space is measured from the middle of a staff line.
        ///
        ///Distances in a MusicXML file are measured in tenths of staff space. Tenths are then scaled to millimeters within the scaling element, used in the defaults element at the start of a score. Individual staves can apply a scaling factor to adjust staff size. When a MusicXML element or attribute refers to tenths, it means the global tenths defined by the scaling element, not the local tenths as adjusted by the staff-size element.</para>
        /// </summary>
        [System.Xml.Serialization.XmlAttributeAttribute("relative-x")]
        public decimal RelativeX { get; set; }

        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the RelativeX property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool RelativeXSpecified { get; set; }

        /// <summary>
        /// <para>The tenths type is a number representing tenths of interline staff space (positive or negative). Both integer and decimal values are allowed, such as 5 for a half space and 2.5 for a quarter space. Interline space is measured from the middle of a staff line.
        ///
        ///Distances in a MusicXML file are measured in tenths of staff space. Tenths are then scaled to millimeters within the scaling element, used in the defaults element at the start of a score. Individual staves can apply a scaling factor to adjust staff size. When a MusicXML element or attribute refers to tenths, it means the global tenths defined by the scaling element, not the local tenths as adjusted by the staff-size element.</para>
        /// </summary>
        [System.Xml.Serialization.XmlAttributeAttribute("relative-y")]
        public decimal RelativeY { get; set; }

        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the RelativeY property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool RelativeYSpecified { get; set; }

        [System.Xml.Serialization.XmlAttributeAttribute("placement")]
        public AboveBelow Placement { get; set; }

        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the Placement property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool PlacementSpecified { get; set; }

        /// <summary>
        /// <para>The color type indicates the color of an element. Color may be represented as hexadecimal RGB triples, as in HTML, or as hexadecimal ARGB tuples, with the A indicating alpha of transparency. An alpha value of 00 is totally transparent; FF is totally opaque. If RGB is used, the A value is assumed to be FF.
        ///
        ///For instance, the RGB value "#800080" represents purple. An ARGB value of "#40800080" would be a transparent purple.
        ///
        ///As in SVG 1.1, colors are defined in terms of the sRGB color space (IEC 61966).</para>
        /// <para xml:lang="en">Pattern: #[\dA-F]{6}([\dA-F][\dA-F])?.</para>
        /// </summary>
        [System.ComponentModel.DataAnnotations.RegularExpressionAttribute("#[\\dA-F]{6}([\\dA-F][\\dA-F])?")]
        [System.Xml.Serialization.XmlAttributeAttribute("color")]
        public string Color { get; set; }

        [System.Xml.Serialization.XmlAttributeAttribute("id")]
        public string Id { get; set; }
    }

    /// <summary>
    /// <para>Articulations and accents are grouped together here.</para>
    /// </summary>
    [System.ComponentModel.DescriptionAttribute("Articulations and accents are grouped together here.")]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XmlSchemaClassGenerator", "2.1.1142.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute("articulations", Namespace="")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class Articulations : IOptionalUniqueId
    {

        [System.Xml.Serialization.XmlIgnoreAttribute()]
        private System.Collections.ObjectModel.Collection<EmptyPlacement> _accent;

        /// <summary>
        /// <para>The accent element indicates a regular horizontal accent mark.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("The accent element indicates a regular horizontal accent mark.")]
        [System.Xml.Serialization.XmlElementAttribute("accent")]
        public System.Collections.ObjectModel.Collection<EmptyPlacement> Accent
        {
            get
            {
                return _accent;
            }
            private set
            {
                _accent = value;
            }
        }

        /// <summary>
        /// <para xml:lang="en">Gets a value indicating whether the Accent collection is empty.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool AccentSpecified
        {
            get
            {
                return (this.Accent.Count != 0);
            }
        }

        /// <summary>
        /// <para xml:lang="en">Initializes a new instance of the <see cref="Articulations" /> class.</para>
        /// </summary>
        public Articulations()
        {
            this._accent = new System.Collections.ObjectModel.Collection<EmptyPlacement>();
            this._strongAccent = new System.Collections.ObjectModel.Collection<StrongAccent>();
            this._staccato = new System.Collections.ObjectModel.Collection<EmptyPlacement>();
            this._tenuto = new System.Collections.ObjectModel.Collection<EmptyPlacement>();
            this._detachedLegato = new System.Collections.ObjectModel.Collection<EmptyPlacement>();
            this._staccatissimo = new System.Collections.ObjectModel.Collection<EmptyPlacement>();
            this._spiccato = new System.Collections.ObjectModel.Collection<EmptyPlacement>();
            this._scoop = new System.Collections.ObjectModel.Collection<EmptyLine>();
            this._plop = new System.Collections.ObjectModel.Collection<EmptyLine>();
            this._doit = new System.Collections.ObjectModel.Collection<EmptyLine>();
            this._falloff = new System.Collections.ObjectModel.Collection<EmptyLine>();
            this._breathMark = new System.Collections.ObjectModel.Collection<BreathMark>();
            this._caesura = new System.Collections.ObjectModel.Collection<Caesura>();
            this._stress = new System.Collections.ObjectModel.Collection<EmptyPlacement>();
            this._unstress = new System.Collections.ObjectModel.Collection<EmptyPlacement>();
            this._softAccent = new System.Collections.ObjectModel.Collection<EmptyPlacement>();
            this._otherArticulation = new System.Collections.ObjectModel.Collection<OtherPlacementText>();
        }

        [System.Xml.Serialization.XmlIgnoreAttribute()]
        private System.Collections.ObjectModel.Collection<StrongAccent> _strongAccent;

        /// <summary>
        /// <para>The strong-accent element indicates a vertical accent mark.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("The strong-accent element indicates a vertical accent mark.")]
        [System.Xml.Serialization.XmlElementAttribute("strong-accent")]
        public System.Collections.ObjectModel.Collection<StrongAccent> StrongAccent
        {
            get
            {
                return _strongAccent;
            }
            private set
            {
                _strongAccent = value;
            }
        }

        /// <summary>
        /// <para xml:lang="en">Gets a value indicating whether the StrongAccent collection is empty.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool StrongAccentSpecified
        {
            get
            {
                return (this.StrongAccent.Count != 0);
            }
        }

        [System.Xml.Serialization.XmlIgnoreAttribute()]
        private System.Collections.ObjectModel.Collection<EmptyPlacement> _staccato;

        /// <summary>
        /// <para>The staccato element is used for a dot articulation, as opposed to a stroke or a wedge.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("The staccato element is used for a dot articulation, as opposed to a stroke or a " +
            "wedge.")]
        [System.Xml.Serialization.XmlElementAttribute("staccato")]
        public System.Collections.ObjectModel.Collection<EmptyPlacement> Staccato
        {
            get
            {
                return _staccato;
            }
            private set
            {
                _staccato = value;
            }
        }

        /// <summary>
        /// <para xml:lang="en">Gets a value indicating whether the Staccato collection is empty.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool StaccatoSpecified
        {
            get
            {
                return (this.Staccato.Count != 0);
            }
        }

        [System.Xml.Serialization.XmlIgnoreAttribute()]
        private System.Collections.ObjectModel.Collection<EmptyPlacement> _tenuto;

        /// <summary>
        /// <para>The tenuto element indicates a tenuto line symbol.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("The tenuto element indicates a tenuto line symbol.")]
        [System.Xml.Serialization.XmlElementAttribute("tenuto")]
        public System.Collections.ObjectModel.Collection<EmptyPlacement> Tenuto
        {
            get
            {
                return _tenuto;
            }
            private set
            {
                _tenuto = value;
            }
        }

        /// <summary>
        /// <para xml:lang="en">Gets a value indicating whether the Tenuto collection is empty.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool TenutoSpecified
        {
            get
            {
                return (this.Tenuto.Count != 0);
            }
        }

        [System.Xml.Serialization.XmlIgnoreAttribute()]
        private System.Collections.ObjectModel.Collection<EmptyPlacement> _detachedLegato;

        /// <summary>
        /// <para>The detached-legato element indicates the combination of a tenuto line and staccato dot symbol.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("The detached-legato element indicates the combination of a tenuto line and stacca" +
            "to dot symbol.")]
        [System.Xml.Serialization.XmlElementAttribute("detached-legato")]
        public System.Collections.ObjectModel.Collection<EmptyPlacement> DetachedLegato
        {
            get
            {
                return _detachedLegato;
            }
            private set
            {
                _detachedLegato = value;
            }
        }

        /// <summary>
        /// <para xml:lang="en">Gets a value indicating whether the DetachedLegato collection is empty.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool DetachedLegatoSpecified
        {
            get
            {
                return (this.DetachedLegato.Count != 0);
            }
        }

        [System.Xml.Serialization.XmlIgnoreAttribute()]
        private System.Collections.ObjectModel.Collection<EmptyPlacement> _staccatissimo;

        /// <summary>
        /// <para>The staccatissimo element is used for a wedge articulation, as opposed to a dot or a stroke.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("The staccatissimo element is used for a wedge articulation, as opposed to a dot o" +
            "r a stroke.")]
        [System.Xml.Serialization.XmlElementAttribute("staccatissimo")]
        public System.Collections.ObjectModel.Collection<EmptyPlacement> Staccatissimo
        {
            get
            {
                return _staccatissimo;
            }
            private set
            {
                _staccatissimo = value;
            }
        }

        /// <summary>
        /// <para xml:lang="en">Gets a value indicating whether the Staccatissimo collection is empty.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool StaccatissimoSpecified
        {
            get
            {
                return (this.Staccatissimo.Count != 0);
            }
        }

        [System.Xml.Serialization.XmlIgnoreAttribute()]
        private System.Collections.ObjectModel.Collection<EmptyPlacement> _spiccato;

        /// <summary>
        /// <para>The spiccato element is used for a stroke articulation, as opposed to a dot or a wedge.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("The spiccato element is used for a stroke articulation, as opposed to a dot or a " +
            "wedge.")]
        [System.Xml.Serialization.XmlElementAttribute("spiccato")]
        public System.Collections.ObjectModel.Collection<EmptyPlacement> Spiccato
        {
            get
            {
                return _spiccato;
            }
            private set
            {
                _spiccato = value;
            }
        }

        /// <summary>
        /// <para xml:lang="en">Gets a value indicating whether the Spiccato collection is empty.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool SpiccatoSpecified
        {
            get
            {
                return (this.Spiccato.Count != 0);
            }
        }

        [System.Xml.Serialization.XmlIgnoreAttribute()]
        private System.Collections.ObjectModel.Collection<EmptyLine> _scoop;

        /// <summary>
        /// <para>The scoop element is an indeterminate slide attached to a single note. The scoop appears before the main note and comes from below the main pitch.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("The scoop element is an indeterminate slide attached to a single note. The scoop " +
            "appears before the main note and comes from below the main pitch.")]
        [System.Xml.Serialization.XmlElementAttribute("scoop")]
        public System.Collections.ObjectModel.Collection<EmptyLine> Scoop
        {
            get
            {
                return _scoop;
            }
            private set
            {
                _scoop = value;
            }
        }

        /// <summary>
        /// <para xml:lang="en">Gets a value indicating whether the Scoop collection is empty.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool ScoopSpecified
        {
            get
            {
                return (this.Scoop.Count != 0);
            }
        }

        [System.Xml.Serialization.XmlIgnoreAttribute()]
        private System.Collections.ObjectModel.Collection<EmptyLine> _plop;

        /// <summary>
        /// <para>The plop element is an indeterminate slide attached to a single note. The plop appears before the main note and comes from above the main pitch.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("The plop element is an indeterminate slide attached to a single note. The plop ap" +
            "pears before the main note and comes from above the main pitch.")]
        [System.Xml.Serialization.XmlElementAttribute("plop")]
        public System.Collections.ObjectModel.Collection<EmptyLine> Plop
        {
            get
            {
                return _plop;
            }
            private set
            {
                _plop = value;
            }
        }

        /// <summary>
        /// <para xml:lang="en">Gets a value indicating whether the Plop collection is empty.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool PlopSpecified
        {
            get
            {
                return (this.Plop.Count != 0);
            }
        }

        [System.Xml.Serialization.XmlIgnoreAttribute()]
        private System.Collections.ObjectModel.Collection<EmptyLine> _doit;

        /// <summary>
        /// <para>The doit element is an indeterminate slide attached to a single note. The doit appears after the main note and goes above the main pitch.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("The doit element is an indeterminate slide attached to a single note. The doit ap" +
            "pears after the main note and goes above the main pitch.")]
        [System.Xml.Serialization.XmlElementAttribute("doit")]
        public System.Collections.ObjectModel.Collection<EmptyLine> Doit
        {
            get
            {
                return _doit;
            }
            private set
            {
                _doit = value;
            }
        }

        /// <summary>
        /// <para xml:lang="en">Gets a value indicating whether the Doit collection is empty.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool DoitSpecified
        {
            get
            {
                return (this.Doit.Count != 0);
            }
        }

        [System.Xml.Serialization.XmlIgnoreAttribute()]
        private System.Collections.ObjectModel.Collection<EmptyLine> _falloff;

        /// <summary>
        /// <para>The falloff element is an indeterminate slide attached to a single note. The falloff appears after the main note and goes below the main pitch.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("The falloff element is an indeterminate slide attached to a single note. The fall" +
            "off appears after the main note and goes below the main pitch.")]
        [System.Xml.Serialization.XmlElementAttribute("falloff")]
        public System.Collections.ObjectModel.Collection<EmptyLine> Falloff
        {
            get
            {
                return _falloff;
            }
            private set
            {
                _falloff = value;
            }
        }

        /// <summary>
        /// <para xml:lang="en">Gets a value indicating whether the Falloff collection is empty.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool FalloffSpecified
        {
            get
            {
                return (this.Falloff.Count != 0);
            }
        }

        [System.Xml.Serialization.XmlIgnoreAttribute()]
        private System.Collections.ObjectModel.Collection<BreathMark> _breathMark;

        [System.Xml.Serialization.XmlElementAttribute("breath-mark")]
        public System.Collections.ObjectModel.Collection<BreathMark> BreathMark
        {
            get
            {
                return _breathMark;
            }
            private set
            {
                _breathMark = value;
            }
        }

        /// <summary>
        /// <para xml:lang="en">Gets a value indicating whether the BreathMark collection is empty.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool BreathMarkSpecified
        {
            get
            {
                return (this.BreathMark.Count != 0);
            }
        }

        [System.Xml.Serialization.XmlIgnoreAttribute()]
        private System.Collections.ObjectModel.Collection<Caesura> _caesura;

        [System.Xml.Serialization.XmlElementAttribute("caesura")]
        public System.Collections.ObjectModel.Collection<Caesura> Caesura
        {
            get
            {
                return _caesura;
            }
            private set
            {
                _caesura = value;
            }
        }

        /// <summary>
        /// <para xml:lang="en">Gets a value indicating whether the Caesura collection is empty.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool CaesuraSpecified
        {
            get
            {
                return (this.Caesura.Count != 0);
            }
        }

        [System.Xml.Serialization.XmlIgnoreAttribute()]
        private System.Collections.ObjectModel.Collection<EmptyPlacement> _stress;

        /// <summary>
        /// <para>The stress element indicates a stressed note.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("The stress element indicates a stressed note.")]
        [System.Xml.Serialization.XmlElementAttribute("stress")]
        public System.Collections.ObjectModel.Collection<EmptyPlacement> Stress
        {
            get
            {
                return _stress;
            }
            private set
            {
                _stress = value;
            }
        }

        /// <summary>
        /// <para xml:lang="en">Gets a value indicating whether the Stress collection is empty.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool StressSpecified
        {
            get
            {
                return (this.Stress.Count != 0);
            }
        }

        [System.Xml.Serialization.XmlIgnoreAttribute()]
        private System.Collections.ObjectModel.Collection<EmptyPlacement> _unstress;

        /// <summary>
        /// <para>The unstress element indicates an unstressed note. It is often notated using a u-shaped symbol.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("The unstress element indicates an unstressed note. It is often notated using a u-" +
            "shaped symbol.")]
        [System.Xml.Serialization.XmlElementAttribute("unstress")]
        public System.Collections.ObjectModel.Collection<EmptyPlacement> Unstress
        {
            get
            {
                return _unstress;
            }
            private set
            {
                _unstress = value;
            }
        }

        /// <summary>
        /// <para xml:lang="en">Gets a value indicating whether the Unstress collection is empty.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool UnstressSpecified
        {
            get
            {
                return (this.Unstress.Count != 0);
            }
        }

        [System.Xml.Serialization.XmlIgnoreAttribute()]
        private System.Collections.ObjectModel.Collection<EmptyPlacement> _softAccent;

        /// <summary>
        /// <para>The soft-accent element indicates a soft accent that is not as heavy as a normal accent. It is often notated as &lt;&gt;. It can be combined with other articulations to implement the first eight symbols in the SMuFL Articulation supplement range.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("The soft-accent element indicates a soft accent that is not as heavy as a normal " +
            "accent. It is often notated as &lt;&gt;. It can be combined with other articulat" +
            "ions to implement the first eight symbols in the SMuFL Articulation supplement r" +
            "ange.")]
        [System.Xml.Serialization.XmlElementAttribute("soft-accent")]
        public System.Collections.ObjectModel.Collection<EmptyPlacement> SoftAccent
        {
            get
            {
                return _softAccent;
            }
            private set
            {
                _softAccent = value;
            }
        }

        /// <summary>
        /// <para xml:lang="en">Gets a value indicating whether the SoftAccent collection is empty.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool SoftAccentSpecified
        {
            get
            {
                return (this.SoftAccent.Count != 0);
            }
        }

        [System.Xml.Serialization.XmlIgnoreAttribute()]
        private System.Collections.ObjectModel.Collection<OtherPlacementText> _otherArticulation;

        /// <summary>
        /// <para>The other-articulation element is used to define any articulations not yet in the MusicXML format. The smufl attribute can be used to specify a particular articulation, allowing application interoperability without requiring every SMuFL articulation to have a MusicXML element equivalent. Using the other-articulation element without the smufl attribute allows for extended representation, though without application interoperability.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute(@"The other-articulation element is used to define any articulations not yet in the MusicXML format. The smufl attribute can be used to specify a particular articulation, allowing application interoperability without requiring every SMuFL articulation to have a MusicXML element equivalent. Using the other-articulation element without the smufl attribute allows for extended representation, though without application interoperability.")]
        [System.Xml.Serialization.XmlElementAttribute("other-articulation")]
        public System.Collections.ObjectModel.Collection<OtherPlacementText> OtherArticulation
        {
            get
            {
                return _otherArticulation;
            }
            private set
            {
                _otherArticulation = value;
            }
        }

        /// <summary>
        /// <para xml:lang="en">Gets a value indicating whether the OtherArticulation collection is empty.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool OtherArticulationSpecified
        {
            get
            {
                return (this.OtherArticulation.Count != 0);
            }
        }

        [System.Xml.Serialization.XmlAttributeAttribute("id")]
        public string Id { get; set; }
    }

    /// <summary>
    /// <para>The strong-accent type indicates a vertical accent mark. The type attribute indicates if the point of the accent is down or up.</para>
    /// </summary>
    [System.ComponentModel.DescriptionAttribute("The strong-accent type indicates a vertical accent mark. The type attribute indic" +
        "ates if the point of the accent is down or up.")]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XmlSchemaClassGenerator", "2.1.1142.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute("strong-accent", Namespace="")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class StrongAccent : EmptyPlacement
    {

        [System.Xml.Serialization.XmlIgnoreAttribute()]
        private UpDown _type = OpenUtau.Core.Format.MusicXMLSchema.UpDown.Up;

        [System.ComponentModel.DefaultValueAttribute(OpenUtau.Core.Format.MusicXMLSchema.UpDown.Up)]
        [System.Xml.Serialization.XmlAttributeAttribute("type")]
        public UpDown Type
        {
            get
            {
                return _type;
            }
            set
            {
                _type = value;
            }
        }
    }

    /// <summary>
    /// <para>The empty-line type represents an empty element with line-shape, line-type, line-length, dashed-formatting, print-style and placement attributes.</para>
    /// </summary>
    [System.ComponentModel.DescriptionAttribute("The empty-line type represents an empty element with line-shape, line-type, line-" +
        "length, dashed-formatting, print-style and placement attributes.")]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XmlSchemaClassGenerator", "2.1.1142.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute("empty-line", Namespace="")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class EmptyLine : ILineShape, ILineType, ILineLength, IDashedFormatting, IPrintStyle, IPlacement
    {

        [System.Xml.Serialization.XmlAttributeAttribute("line-shape")]
        public LineShape LineShape { get; set; }

        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the LineShape property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool LineShapeSpecified { get; set; }

        [System.Xml.Serialization.XmlAttributeAttribute("line-type")]
        public LineType LineType { get; set; }

        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the LineType property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool LineTypeSpecified { get; set; }

        [System.Xml.Serialization.XmlAttributeAttribute("line-length")]
        public LineLength LineLength { get; set; }

        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the LineLength property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool LineLengthSpecified { get; set; }

        /// <summary>
        /// <para>The tenths type is a number representing tenths of interline staff space (positive or negative). Both integer and decimal values are allowed, such as 5 for a half space and 2.5 for a quarter space. Interline space is measured from the middle of a staff line.
        ///
        ///Distances in a MusicXML file are measured in tenths of staff space. Tenths are then scaled to millimeters within the scaling element, used in the defaults element at the start of a score. Individual staves can apply a scaling factor to adjust staff size. When a MusicXML element or attribute refers to tenths, it means the global tenths defined by the scaling element, not the local tenths as adjusted by the staff-size element.</para>
        /// </summary>
        [System.Xml.Serialization.XmlAttributeAttribute("dash-length")]
        public decimal DashLength { get; set; }

        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the DashLength property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool DashLengthSpecified { get; set; }

        /// <summary>
        /// <para>The tenths type is a number representing tenths of interline staff space (positive or negative). Both integer and decimal values are allowed, such as 5 for a half space and 2.5 for a quarter space. Interline space is measured from the middle of a staff line.
        ///
        ///Distances in a MusicXML file are measured in tenths of staff space. Tenths are then scaled to millimeters within the scaling element, used in the defaults element at the start of a score. Individual staves can apply a scaling factor to adjust staff size. When a MusicXML element or attribute refers to tenths, it means the global tenths defined by the scaling element, not the local tenths as adjusted by the staff-size element.</para>
        /// </summary>
        [System.Xml.Serialization.XmlAttributeAttribute("space-length")]
        public decimal SpaceLength { get; set; }

        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the SpaceLength property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool SpaceLengthSpecified { get; set; }

        /// <summary>
        /// <para>The tenths type is a number representing tenths of interline staff space (positive or negative). Both integer and decimal values are allowed, such as 5 for a half space and 2.5 for a quarter space. Interline space is measured from the middle of a staff line.
        ///
        ///Distances in a MusicXML file are measured in tenths of staff space. Tenths are then scaled to millimeters within the scaling element, used in the defaults element at the start of a score. Individual staves can apply a scaling factor to adjust staff size. When a MusicXML element or attribute refers to tenths, it means the global tenths defined by the scaling element, not the local tenths as adjusted by the staff-size element.</para>
        /// </summary>
        [System.Xml.Serialization.XmlAttributeAttribute("default-x")]
        public decimal DefaultX { get; set; }

        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the DefaultX property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool DefaultXSpecified { get; set; }

        /// <summary>
        /// <para>The tenths type is a number representing tenths of interline staff space (positive or negative). Both integer and decimal values are allowed, such as 5 for a half space and 2.5 for a quarter space. Interline space is measured from the middle of a staff line.
        ///
        ///Distances in a MusicXML file are measured in tenths of staff space. Tenths are then scaled to millimeters within the scaling element, used in the defaults element at the start of a score. Individual staves can apply a scaling factor to adjust staff size. When a MusicXML element or attribute refers to tenths, it means the global tenths defined by the scaling element, not the local tenths as adjusted by the staff-size element.</para>
        /// </summary>
        [System.Xml.Serialization.XmlAttributeAttribute("default-y")]
        public decimal DefaultY { get; set; }

        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the DefaultY property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool DefaultYSpecified { get; set; }

        /// <summary>
        /// <para>The tenths type is a number representing tenths of interline staff space (positive or negative). Both integer and decimal values are allowed, such as 5 for a half space and 2.5 for a quarter space. Interline space is measured from the middle of a staff line.
        ///
        ///Distances in a MusicXML file are measured in tenths of staff space. Tenths are then scaled to millimeters within the scaling element, used in the defaults element at the start of a score. Individual staves can apply a scaling factor to adjust staff size. When a MusicXML element or attribute refers to tenths, it means the global tenths defined by the scaling element, not the local tenths as adjusted by the staff-size element.</para>
        /// </summary>
        [System.Xml.Serialization.XmlAttributeAttribute("relative-x")]
        public decimal RelativeX { get; set; }

        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the RelativeX property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool RelativeXSpecified { get; set; }

        /// <summary>
        /// <para>The tenths type is a number representing tenths of interline staff space (positive or negative). Both integer and decimal values are allowed, such as 5 for a half space and 2.5 for a quarter space. Interline space is measured from the middle of a staff line.
        ///
        ///Distances in a MusicXML file are measured in tenths of staff space. Tenths are then scaled to millimeters within the scaling element, used in the defaults element at the start of a score. Individual staves can apply a scaling factor to adjust staff size. When a MusicXML element or attribute refers to tenths, it means the global tenths defined by the scaling element, not the local tenths as adjusted by the staff-size element.</para>
        /// </summary>
        [System.Xml.Serialization.XmlAttributeAttribute("relative-y")]
        public decimal RelativeY { get; set; }

        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the RelativeY property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool RelativeYSpecified { get; set; }

        /// <summary>
        /// <para>The font-family is a comma-separated list of font names. These can be specific font styles such as Maestro or Opus, or one of several generic font styles: music, engraved, handwritten, text, serif, sans-serif, handwritten, cursive, fantasy, and monospace. The music, engraved, and handwritten values refer to music fonts; the rest refer to text fonts. The fantasy style refers to decorative text such as found in older German-style printing.</para>
        /// <para xml:lang="en">Pattern: [^,]+(, ?[^,]+)*.</para>
        /// </summary>
        [System.ComponentModel.DataAnnotations.RegularExpressionAttribute("[^,]+(, ?[^,]+)*")]
        [System.Xml.Serialization.XmlAttributeAttribute("font-family")]
        public string FontFamily { get; set; }

        [System.Xml.Serialization.XmlAttributeAttribute("font-style")]
        public FontStyle FontStyle { get; set; }

        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the FontStyle property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool FontStyleSpecified { get; set; }

        /// <summary>
        /// <para>The font-size can be one of the CSS font sizes (xx-small, x-small, small, medium, large, x-large, xx-large) or a numeric point size.</para>
        /// </summary>
        [System.Xml.Serialization.XmlAttributeAttribute("font-size")]
        public string FontSize { get; set; }

        [System.Xml.Serialization.XmlAttributeAttribute("font-weight")]
        public FontWeight FontWeight { get; set; }

        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the FontWeight property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool FontWeightSpecified { get; set; }

        /// <summary>
        /// <para>The color type indicates the color of an element. Color may be represented as hexadecimal RGB triples, as in HTML, or as hexadecimal ARGB tuples, with the A indicating alpha of transparency. An alpha value of 00 is totally transparent; FF is totally opaque. If RGB is used, the A value is assumed to be FF.
        ///
        ///For instance, the RGB value "#800080" represents purple. An ARGB value of "#40800080" would be a transparent purple.
        ///
        ///As in SVG 1.1, colors are defined in terms of the sRGB color space (IEC 61966).</para>
        /// <para xml:lang="en">Pattern: #[\dA-F]{6}([\dA-F][\dA-F])?.</para>
        /// </summary>
        [System.ComponentModel.DataAnnotations.RegularExpressionAttribute("#[\\dA-F]{6}([\\dA-F][\\dA-F])?")]
        [System.Xml.Serialization.XmlAttributeAttribute("color")]
        public string Color { get; set; }

        [System.Xml.Serialization.XmlAttributeAttribute("placement")]
        public AboveBelow Placement { get; set; }

        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the Placement property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool PlacementSpecified { get; set; }
    }

    /// <summary>
    /// <para>The line-shape attribute distinguishes between straight and curved lines.</para>
    /// </summary>
    [System.ComponentModel.DescriptionAttribute("The line-shape attribute distinguishes between straight and curved lines.")]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XmlSchemaClassGenerator", "2.1.1142.0")]
    public partial interface ILineShape
    {

        LineShape LineShape
        {
            get;
            set;
        }
    }

    /// <summary>
    /// <para>The line-length attribute distinguishes between different line lengths for doit, falloff, plop, and scoop articulations.</para>
    /// </summary>
    [System.ComponentModel.DescriptionAttribute("The line-length attribute distinguishes between different line lengths for doit, " +
        "falloff, plop, and scoop articulations.")]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XmlSchemaClassGenerator", "2.1.1142.0")]
    public partial interface ILineLength
    {

        LineLength LineLength
        {
            get;
            set;
        }
    }

    /// <summary>
    /// <para>The breath-mark element indicates a place to take a breath.</para>
    /// </summary>
    [System.ComponentModel.DescriptionAttribute("The breath-mark element indicates a place to take a breath.")]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XmlSchemaClassGenerator", "2.1.1142.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute("breath-mark", Namespace="")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class BreathMark : IPrintStyle, IPlacement
    {

        /// <summary>
        /// <para xml:lang="en">Gets or sets the text value.</para>
        /// </summary>
        [System.Xml.Serialization.XmlTextAttribute()]
        public BreathMarkValue Value { get; set; }

        /// <summary>
        /// <para>The tenths type is a number representing tenths of interline staff space (positive or negative). Both integer and decimal values are allowed, such as 5 for a half space and 2.5 for a quarter space. Interline space is measured from the middle of a staff line.
        ///
        ///Distances in a MusicXML file are measured in tenths of staff space. Tenths are then scaled to millimeters within the scaling element, used in the defaults element at the start of a score. Individual staves can apply a scaling factor to adjust staff size. When a MusicXML element or attribute refers to tenths, it means the global tenths defined by the scaling element, not the local tenths as adjusted by the staff-size element.</para>
        /// </summary>
        [System.Xml.Serialization.XmlAttributeAttribute("default-x")]
        public decimal DefaultX { get; set; }

        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the DefaultX property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool DefaultXSpecified { get; set; }

        /// <summary>
        /// <para>The tenths type is a number representing tenths of interline staff space (positive or negative). Both integer and decimal values are allowed, such as 5 for a half space and 2.5 for a quarter space. Interline space is measured from the middle of a staff line.
        ///
        ///Distances in a MusicXML file are measured in tenths of staff space. Tenths are then scaled to millimeters within the scaling element, used in the defaults element at the start of a score. Individual staves can apply a scaling factor to adjust staff size. When a MusicXML element or attribute refers to tenths, it means the global tenths defined by the scaling element, not the local tenths as adjusted by the staff-size element.</para>
        /// </summary>
        [System.Xml.Serialization.XmlAttributeAttribute("default-y")]
        public decimal DefaultY { get; set; }

        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the DefaultY property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool DefaultYSpecified { get; set; }

        /// <summary>
        /// <para>The tenths type is a number representing tenths of interline staff space (positive or negative). Both integer and decimal values are allowed, such as 5 for a half space and 2.5 for a quarter space. Interline space is measured from the middle of a staff line.
        ///
        ///Distances in a MusicXML file are measured in tenths of staff space. Tenths are then scaled to millimeters within the scaling element, used in the defaults element at the start of a score. Individual staves can apply a scaling factor to adjust staff size. When a MusicXML element or attribute refers to tenths, it means the global tenths defined by the scaling element, not the local tenths as adjusted by the staff-size element.</para>
        /// </summary>
        [System.Xml.Serialization.XmlAttributeAttribute("relative-x")]
        public decimal RelativeX { get; set; }

        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the RelativeX property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool RelativeXSpecified { get; set; }

        /// <summary>
        /// <para>The tenths type is a number representing tenths of interline staff space (positive or negative). Both integer and decimal values are allowed, such as 5 for a half space and 2.5 for a quarter space. Interline space is measured from the middle of a staff line.
        ///
        ///Distances in a MusicXML file are measured in tenths of staff space. Tenths are then scaled to millimeters within the scaling element, used in the defaults element at the start of a score. Individual staves can apply a scaling factor to adjust staff size. When a MusicXML element or attribute refers to tenths, it means the global tenths defined by the scaling element, not the local tenths as adjusted by the staff-size element.</para>
        /// </summary>
        [System.Xml.Serialization.XmlAttributeAttribute("relative-y")]
        public decimal RelativeY { get; set; }

        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the RelativeY property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool RelativeYSpecified { get; set; }

        /// <summary>
        /// <para>The font-family is a comma-separated list of font names. These can be specific font styles such as Maestro or Opus, or one of several generic font styles: music, engraved, handwritten, text, serif, sans-serif, handwritten, cursive, fantasy, and monospace. The music, engraved, and handwritten values refer to music fonts; the rest refer to text fonts. The fantasy style refers to decorative text such as found in older German-style printing.</para>
        /// <para xml:lang="en">Pattern: [^,]+(, ?[^,]+)*.</para>
        /// </summary>
        [System.ComponentModel.DataAnnotations.RegularExpressionAttribute("[^,]+(, ?[^,]+)*")]
        [System.Xml.Serialization.XmlAttributeAttribute("font-family")]
        public string FontFamily { get; set; }

        [System.Xml.Serialization.XmlAttributeAttribute("font-style")]
        public FontStyle FontStyle { get; set; }

        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the FontStyle property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool FontStyleSpecified { get; set; }

        /// <summary>
        /// <para>The font-size can be one of the CSS font sizes (xx-small, x-small, small, medium, large, x-large, xx-large) or a numeric point size.</para>
        /// </summary>
        [System.Xml.Serialization.XmlAttributeAttribute("font-size")]
        public string FontSize { get; set; }

        [System.Xml.Serialization.XmlAttributeAttribute("font-weight")]
        public FontWeight FontWeight { get; set; }

        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the FontWeight property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool FontWeightSpecified { get; set; }

        /// <summary>
        /// <para>The color type indicates the color of an element. Color may be represented as hexadecimal RGB triples, as in HTML, or as hexadecimal ARGB tuples, with the A indicating alpha of transparency. An alpha value of 00 is totally transparent; FF is totally opaque. If RGB is used, the A value is assumed to be FF.
        ///
        ///For instance, the RGB value "#800080" represents purple. An ARGB value of "#40800080" would be a transparent purple.
        ///
        ///As in SVG 1.1, colors are defined in terms of the sRGB color space (IEC 61966).</para>
        /// <para xml:lang="en">Pattern: #[\dA-F]{6}([\dA-F][\dA-F])?.</para>
        /// </summary>
        [System.ComponentModel.DataAnnotations.RegularExpressionAttribute("#[\\dA-F]{6}([\\dA-F][\\dA-F])?")]
        [System.Xml.Serialization.XmlAttributeAttribute("color")]
        public string Color { get; set; }

        [System.Xml.Serialization.XmlAttributeAttribute("placement")]
        public AboveBelow Placement { get; set; }

        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the Placement property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool PlacementSpecified { get; set; }
    }

    /// <summary>
    /// <para>The caesura element indicates a slight pause. It is notated using a "railroad tracks" symbol or other variations specified in the element content.</para>
    /// </summary>
    [System.ComponentModel.DescriptionAttribute("The caesura element indicates a slight pause. It is notated using a \"railroad tra" +
        "cks\" symbol or other variations specified in the element content.")]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XmlSchemaClassGenerator", "2.1.1142.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute("caesura", Namespace="")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class Caesura : IPrintStyle, IPlacement
    {

        /// <summary>
        /// <para xml:lang="en">Gets or sets the text value.</para>
        /// </summary>
        [System.Xml.Serialization.XmlTextAttribute()]
        public CaesuraValue Value { get; set; }

        /// <summary>
        /// <para>The tenths type is a number representing tenths of interline staff space (positive or negative). Both integer and decimal values are allowed, such as 5 for a half space and 2.5 for a quarter space. Interline space is measured from the middle of a staff line.
        ///
        ///Distances in a MusicXML file are measured in tenths of staff space. Tenths are then scaled to millimeters within the scaling element, used in the defaults element at the start of a score. Individual staves can apply a scaling factor to adjust staff size. When a MusicXML element or attribute refers to tenths, it means the global tenths defined by the scaling element, not the local tenths as adjusted by the staff-size element.</para>
        /// </summary>
        [System.Xml.Serialization.XmlAttributeAttribute("default-x")]
        public decimal DefaultX { get; set; }

        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the DefaultX property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool DefaultXSpecified { get; set; }

        /// <summary>
        /// <para>The tenths type is a number representing tenths of interline staff space (positive or negative). Both integer and decimal values are allowed, such as 5 for a half space and 2.5 for a quarter space. Interline space is measured from the middle of a staff line.
        ///
        ///Distances in a MusicXML file are measured in tenths of staff space. Tenths are then scaled to millimeters within the scaling element, used in the defaults element at the start of a score. Individual staves can apply a scaling factor to adjust staff size. When a MusicXML element or attribute refers to tenths, it means the global tenths defined by the scaling element, not the local tenths as adjusted by the staff-size element.</para>
        /// </summary>
        [System.Xml.Serialization.XmlAttributeAttribute("default-y")]
        public decimal DefaultY { get; set; }

        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the DefaultY property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool DefaultYSpecified { get; set; }

        /// <summary>
        /// <para>The tenths type is a number representing tenths of interline staff space (positive or negative). Both integer and decimal values are allowed, such as 5 for a half space and 2.5 for a quarter space. Interline space is measured from the middle of a staff line.
        ///
        ///Distances in a MusicXML file are measured in tenths of staff space. Tenths are then scaled to millimeters within the scaling element, used in the defaults element at the start of a score. Individual staves can apply a scaling factor to adjust staff size. When a MusicXML element or attribute refers to tenths, it means the global tenths defined by the scaling element, not the local tenths as adjusted by the staff-size element.</para>
        /// </summary>
        [System.Xml.Serialization.XmlAttributeAttribute("relative-x")]
        public decimal RelativeX { get; set; }

        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the RelativeX property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool RelativeXSpecified { get; set; }

        /// <summary>
        /// <para>The tenths type is a number representing tenths of interline staff space (positive or negative). Both integer and decimal values are allowed, such as 5 for a half space and 2.5 for a quarter space. Interline space is measured from the middle of a staff line.
        ///
        ///Distances in a MusicXML file are measured in tenths of staff space. Tenths are then scaled to millimeters within the scaling element, used in the defaults element at the start of a score. Individual staves can apply a scaling factor to adjust staff size. When a MusicXML element or attribute refers to tenths, it means the global tenths defined by the scaling element, not the local tenths as adjusted by the staff-size element.</para>
        /// </summary>
        [System.Xml.Serialization.XmlAttributeAttribute("relative-y")]
        public decimal RelativeY { get; set; }

        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the RelativeY property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool RelativeYSpecified { get; set; }

        /// <summary>
        /// <para>The font-family is a comma-separated list of font names. These can be specific font styles such as Maestro or Opus, or one of several generic font styles: music, engraved, handwritten, text, serif, sans-serif, handwritten, cursive, fantasy, and monospace. The music, engraved, and handwritten values refer to music fonts; the rest refer to text fonts. The fantasy style refers to decorative text such as found in older German-style printing.</para>
        /// <para xml:lang="en">Pattern: [^,]+(, ?[^,]+)*.</para>
        /// </summary>
        [System.ComponentModel.DataAnnotations.RegularExpressionAttribute("[^,]+(, ?[^,]+)*")]
        [System.Xml.Serialization.XmlAttributeAttribute("font-family")]
        public string FontFamily { get; set; }

        [System.Xml.Serialization.XmlAttributeAttribute("font-style")]
        public FontStyle FontStyle { get; set; }

        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the FontStyle property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool FontStyleSpecified { get; set; }

        /// <summary>
        /// <para>The font-size can be one of the CSS font sizes (xx-small, x-small, small, medium, large, x-large, xx-large) or a numeric point size.</para>
        /// </summary>
        [System.Xml.Serialization.XmlAttributeAttribute("font-size")]
        public string FontSize { get; set; }

        [System.Xml.Serialization.XmlAttributeAttribute("font-weight")]
        public FontWeight FontWeight { get; set; }

        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the FontWeight property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool FontWeightSpecified { get; set; }

        /// <summary>
        /// <para>The color type indicates the color of an element. Color may be represented as hexadecimal RGB triples, as in HTML, or as hexadecimal ARGB tuples, with the A indicating alpha of transparency. An alpha value of 00 is totally transparent; FF is totally opaque. If RGB is used, the A value is assumed to be FF.
        ///
        ///For instance, the RGB value "#800080" represents purple. An ARGB value of "#40800080" would be a transparent purple.
        ///
        ///As in SVG 1.1, colors are defined in terms of the sRGB color space (IEC 61966).</para>
        /// <para xml:lang="en">Pattern: #[\dA-F]{6}([\dA-F][\dA-F])?.</para>
        /// </summary>
        [System.ComponentModel.DataAnnotations.RegularExpressionAttribute("#[\\dA-F]{6}([\\dA-F][\\dA-F])?")]
        [System.Xml.Serialization.XmlAttributeAttribute("color")]
        public string Color { get; set; }

        [System.Xml.Serialization.XmlAttributeAttribute("placement")]
        public AboveBelow Placement { get; set; }

        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the Placement property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool PlacementSpecified { get; set; }
    }

    /// <summary>
    /// <para>The other-placement-text type represents a text element with print-style, placement, and smufl attribute groups. This type is used by MusicXML notation extension elements to allow specification of specific SMuFL glyphs without needed to add every glyph as a MusicXML element.</para>
    /// </summary>
    [System.ComponentModel.DescriptionAttribute(@"The other-placement-text type represents a text element with print-style, placement, and smufl attribute groups. This type is used by MusicXML notation extension elements to allow specification of specific SMuFL glyphs without needed to add every glyph as a MusicXML element.")]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XmlSchemaClassGenerator", "2.1.1142.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute("other-placement-text", Namespace="")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class OtherPlacementText : IPrintStyle, IPlacement, ISmufl
    {

        /// <summary>
        /// <para xml:lang="en">Gets or sets the text value.</para>
        /// </summary>
        [System.Xml.Serialization.XmlTextAttribute()]
        public string Value { get; set; }

        /// <summary>
        /// <para>The tenths type is a number representing tenths of interline staff space (positive or negative). Both integer and decimal values are allowed, such as 5 for a half space and 2.5 for a quarter space. Interline space is measured from the middle of a staff line.
        ///
        ///Distances in a MusicXML file are measured in tenths of staff space. Tenths are then scaled to millimeters within the scaling element, used in the defaults element at the start of a score. Individual staves can apply a scaling factor to adjust staff size. When a MusicXML element or attribute refers to tenths, it means the global tenths defined by the scaling element, not the local tenths as adjusted by the staff-size element.</para>
        /// </summary>
        [System.Xml.Serialization.XmlAttributeAttribute("default-x")]
        public decimal DefaultX { get; set; }

        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the DefaultX property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool DefaultXSpecified { get; set; }

        /// <summary>
        /// <para>The tenths type is a number representing tenths of interline staff space (positive or negative). Both integer and decimal values are allowed, such as 5 for a half space and 2.5 for a quarter space. Interline space is measured from the middle of a staff line.
        ///
        ///Distances in a MusicXML file are measured in tenths of staff space. Tenths are then scaled to millimeters within the scaling element, used in the defaults element at the start of a score. Individual staves can apply a scaling factor to adjust staff size. When a MusicXML element or attribute refers to tenths, it means the global tenths defined by the scaling element, not the local tenths as adjusted by the staff-size element.</para>
        /// </summary>
        [System.Xml.Serialization.XmlAttributeAttribute("default-y")]
        public decimal DefaultY { get; set; }

        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the DefaultY property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool DefaultYSpecified { get; set; }

        /// <summary>
        /// <para>The tenths type is a number representing tenths of interline staff space (positive or negative). Both integer and decimal values are allowed, such as 5 for a half space and 2.5 for a quarter space. Interline space is measured from the middle of a staff line.
        ///
        ///Distances in a MusicXML file are measured in tenths of staff space. Tenths are then scaled to millimeters within the scaling element, used in the defaults element at the start of a score. Individual staves can apply a scaling factor to adjust staff size. When a MusicXML element or attribute refers to tenths, it means the global tenths defined by the scaling element, not the local tenths as adjusted by the staff-size element.</para>
        /// </summary>
        [System.Xml.Serialization.XmlAttributeAttribute("relative-x")]
        public decimal RelativeX { get; set; }

        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the RelativeX property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool RelativeXSpecified { get; set; }

        /// <summary>
        /// <para>The tenths type is a number representing tenths of interline staff space (positive or negative). Both integer and decimal values are allowed, such as 5 for a half space and 2.5 for a quarter space. Interline space is measured from the middle of a staff line.
        ///
        ///Distances in a MusicXML file are measured in tenths of staff space. Tenths are then scaled to millimeters within the scaling element, used in the defaults element at the start of a score. Individual staves can apply a scaling factor to adjust staff size. When a MusicXML element or attribute refers to tenths, it means the global tenths defined by the scaling element, not the local tenths as adjusted by the staff-size element.</para>
        /// </summary>
        [System.Xml.Serialization.XmlAttributeAttribute("relative-y")]
        public decimal RelativeY { get; set; }

        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the RelativeY property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool RelativeYSpecified { get; set; }

        /// <summary>
        /// <para>The font-family is a comma-separated list of font names. These can be specific font styles such as Maestro or Opus, or one of several generic font styles: music, engraved, handwritten, text, serif, sans-serif, handwritten, cursive, fantasy, and monospace. The music, engraved, and handwritten values refer to music fonts; the rest refer to text fonts. The fantasy style refers to decorative text such as found in older German-style printing.</para>
        /// <para xml:lang="en">Pattern: [^,]+(, ?[^,]+)*.</para>
        /// </summary>
        [System.ComponentModel.DataAnnotations.RegularExpressionAttribute("[^,]+(, ?[^,]+)*")]
        [System.Xml.Serialization.XmlAttributeAttribute("font-family")]
        public string FontFamily { get; set; }

        [System.Xml.Serialization.XmlAttributeAttribute("font-style")]
        public FontStyle FontStyle { get; set; }

        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the FontStyle property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool FontStyleSpecified { get; set; }

        /// <summary>
        /// <para>The font-size can be one of the CSS font sizes (xx-small, x-small, small, medium, large, x-large, xx-large) or a numeric point size.</para>
        /// </summary>
        [System.Xml.Serialization.XmlAttributeAttribute("font-size")]
        public string FontSize { get; set; }

        [System.Xml.Serialization.XmlAttributeAttribute("font-weight")]
        public FontWeight FontWeight { get; set; }

        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the FontWeight property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool FontWeightSpecified { get; set; }

        /// <summary>
        /// <para>The color type indicates the color of an element. Color may be represented as hexadecimal RGB triples, as in HTML, or as hexadecimal ARGB tuples, with the A indicating alpha of transparency. An alpha value of 00 is totally transparent; FF is totally opaque. If RGB is used, the A value is assumed to be FF.
        ///
        ///For instance, the RGB value "#800080" represents purple. An ARGB value of "#40800080" would be a transparent purple.
        ///
        ///As in SVG 1.1, colors are defined in terms of the sRGB color space (IEC 61966).</para>
        /// <para xml:lang="en">Pattern: #[\dA-F]{6}([\dA-F][\dA-F])?.</para>
        /// </summary>
        [System.ComponentModel.DataAnnotations.RegularExpressionAttribute("#[\\dA-F]{6}([\\dA-F][\\dA-F])?")]
        [System.Xml.Serialization.XmlAttributeAttribute("color")]
        public string Color { get; set; }

        [System.Xml.Serialization.XmlAttributeAttribute("placement")]
        public AboveBelow Placement { get; set; }

        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the Placement property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool PlacementSpecified { get; set; }

        /// <summary>
        /// <para>The smufl-glyph-name type is used for attributes that reference a specific Standard Music Font Layout (SMuFL) character. The value is a SMuFL canonical glyph name, not a code point. For instance, the value for a standard piano pedal mark would be keyboardPedalPed, not U+E650.</para>
        /// </summary>
        [System.Xml.Serialization.XmlAttributeAttribute("smufl")]
        public string Smufl { get; set; }
    }

    /// <summary>
    /// <para>The arrow element represents an arrow used for a musical technical indication. It can represent both Unicode and SMuFL arrows. The presence of an arrowhead element indicates that only the arrowhead is displayed, not the arrow stem. The smufl attribute distinguishes different SMuFL glyphs that have an arrow appearance such as arrowBlackUp, guitarStrumUp, or handbellsSwingUp. The specified glyph should match the descriptive representation.</para>
    /// </summary>
    [System.ComponentModel.DescriptionAttribute(@"The arrow element represents an arrow used for a musical technical indication. It can represent both Unicode and SMuFL arrows. The presence of an arrowhead element indicates that only the arrowhead is displayed, not the arrow stem. The smufl attribute distinguishes different SMuFL glyphs that have an arrow appearance such as arrowBlackUp, guitarStrumUp, or handbellsSwingUp. The specified glyph should match the descriptive representation.")]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XmlSchemaClassGenerator", "2.1.1142.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute("arrow", Namespace="")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class Arrow : IPrintStyle, IPlacement, ISmufl
    {

        [System.Xml.Serialization.XmlElementAttribute("arrow-direction")]
        public ArrowDirection ArrowDirection { get; set; }

        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the ArrowDirection property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool ArrowDirectionSpecified { get; set; }

        [System.Xml.Serialization.XmlElementAttribute("arrow-style")]
        public ArrowStyle ArrowStyle { get; set; }

        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the ArrowStyle property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool ArrowStyleSpecified { get; set; }

        [System.Xml.Serialization.XmlElementAttribute("arrowhead")]
        public Empty Arrowhead { get; set; }

        [System.Xml.Serialization.XmlElementAttribute("circular-arrow")]
        public CircularArrow CircularArrow { get; set; }

        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the CircularArrow property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool CircularArrowSpecified { get; set; }

        /// <summary>
        /// <para>The tenths type is a number representing tenths of interline staff space (positive or negative). Both integer and decimal values are allowed, such as 5 for a half space and 2.5 for a quarter space. Interline space is measured from the middle of a staff line.
        ///
        ///Distances in a MusicXML file are measured in tenths of staff space. Tenths are then scaled to millimeters within the scaling element, used in the defaults element at the start of a score. Individual staves can apply a scaling factor to adjust staff size. When a MusicXML element or attribute refers to tenths, it means the global tenths defined by the scaling element, not the local tenths as adjusted by the staff-size element.</para>
        /// </summary>
        [System.Xml.Serialization.XmlAttributeAttribute("default-x")]
        public decimal DefaultX { get; set; }

        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the DefaultX property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool DefaultXSpecified { get; set; }

        /// <summary>
        /// <para>The tenths type is a number representing tenths of interline staff space (positive or negative). Both integer and decimal values are allowed, such as 5 for a half space and 2.5 for a quarter space. Interline space is measured from the middle of a staff line.
        ///
        ///Distances in a MusicXML file are measured in tenths of staff space. Tenths are then scaled to millimeters within the scaling element, used in the defaults element at the start of a score. Individual staves can apply a scaling factor to adjust staff size. When a MusicXML element or attribute refers to tenths, it means the global tenths defined by the scaling element, not the local tenths as adjusted by the staff-size element.</para>
        /// </summary>
        [System.Xml.Serialization.XmlAttributeAttribute("default-y")]
        public decimal DefaultY { get; set; }

        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the DefaultY property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool DefaultYSpecified { get; set; }

        /// <summary>
        /// <para>The tenths type is a number representing tenths of interline staff space (positive or negative). Both integer and decimal values are allowed, such as 5 for a half space and 2.5 for a quarter space. Interline space is measured from the middle of a staff line.
        ///
        ///Distances in a MusicXML file are measured in tenths of staff space. Tenths are then scaled to millimeters within the scaling element, used in the defaults element at the start of a score. Individual staves can apply a scaling factor to adjust staff size. When a MusicXML element or attribute refers to tenths, it means the global tenths defined by the scaling element, not the local tenths as adjusted by the staff-size element.</para>
        /// </summary>
        [System.Xml.Serialization.XmlAttributeAttribute("relative-x")]
        public decimal RelativeX { get; set; }

        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the RelativeX property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool RelativeXSpecified { get; set; }

        /// <summary>
        /// <para>The tenths type is a number representing tenths of interline staff space (positive or negative). Both integer and decimal values are allowed, such as 5 for a half space and 2.5 for a quarter space. Interline space is measured from the middle of a staff line.
        ///
        ///Distances in a MusicXML file are measured in tenths of staff space. Tenths are then scaled to millimeters within the scaling element, used in the defaults element at the start of a score. Individual staves can apply a scaling factor to adjust staff size. When a MusicXML element or attribute refers to tenths, it means the global tenths defined by the scaling element, not the local tenths as adjusted by the staff-size element.</para>
        /// </summary>
        [System.Xml.Serialization.XmlAttributeAttribute("relative-y")]
        public decimal RelativeY { get; set; }

        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the RelativeY property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool RelativeYSpecified { get; set; }

        /// <summary>
        /// <para>The font-family is a comma-separated list of font names. These can be specific font styles such as Maestro or Opus, or one of several generic font styles: music, engraved, handwritten, text, serif, sans-serif, handwritten, cursive, fantasy, and monospace. The music, engraved, and handwritten values refer to music fonts; the rest refer to text fonts. The fantasy style refers to decorative text such as found in older German-style printing.</para>
        /// <para xml:lang="en">Pattern: [^,]+(, ?[^,]+)*.</para>
        /// </summary>
        [System.ComponentModel.DataAnnotations.RegularExpressionAttribute("[^,]+(, ?[^,]+)*")]
        [System.Xml.Serialization.XmlAttributeAttribute("font-family")]
        public string FontFamily { get; set; }

        [System.Xml.Serialization.XmlAttributeAttribute("font-style")]
        public FontStyle FontStyle { get; set; }

        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the FontStyle property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool FontStyleSpecified { get; set; }

        /// <summary>
        /// <para>The font-size can be one of the CSS font sizes (xx-small, x-small, small, medium, large, x-large, xx-large) or a numeric point size.</para>
        /// </summary>
        [System.Xml.Serialization.XmlAttributeAttribute("font-size")]
        public string FontSize { get; set; }

        [System.Xml.Serialization.XmlAttributeAttribute("font-weight")]
        public FontWeight FontWeight { get; set; }

        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the FontWeight property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool FontWeightSpecified { get; set; }

        /// <summary>
        /// <para>The color type indicates the color of an element. Color may be represented as hexadecimal RGB triples, as in HTML, or as hexadecimal ARGB tuples, with the A indicating alpha of transparency. An alpha value of 00 is totally transparent; FF is totally opaque. If RGB is used, the A value is assumed to be FF.
        ///
        ///For instance, the RGB value "#800080" represents purple. An ARGB value of "#40800080" would be a transparent purple.
        ///
        ///As in SVG 1.1, colors are defined in terms of the sRGB color space (IEC 61966).</para>
        /// <para xml:lang="en">Pattern: #[\dA-F]{6}([\dA-F][\dA-F])?.</para>
        /// </summary>
        [System.ComponentModel.DataAnnotations.RegularExpressionAttribute("#[\\dA-F]{6}([\\dA-F][\\dA-F])?")]
        [System.Xml.Serialization.XmlAttributeAttribute("color")]
        public string Color { get; set; }

        [System.Xml.Serialization.XmlAttributeAttribute("placement")]
        public AboveBelow Placement { get; set; }

        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the Placement property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool PlacementSpecified { get; set; }

        /// <summary>
        /// <para>The smufl-glyph-name type is used for attributes that reference a specific Standard Music Font Layout (SMuFL) character. The value is a SMuFL canonical glyph name, not a code point. For instance, the value for a standard piano pedal mark would be keyboardPedalPed, not U+E650.</para>
        /// </summary>
        [System.Xml.Serialization.XmlAttributeAttribute("smufl")]
        public string Smufl { get; set; }
    }

    /// <summary>
    /// <para>By default, an assessment application should assess all notes without a cue child element, and not assess any note with a cue child element. The assess type allows this default assessment to be overridden for individual notes. The optional player and time-only attributes restrict the type to apply to a single player or set of times through a repeated section, respectively. If missing, the type applies to all players or all times through the repeated section, respectively. The player attribute references the id attribute of a player element defined within the matching score-part.</para>
    /// </summary>
    [System.ComponentModel.DescriptionAttribute(@"By default, an assessment application should assess all notes without a cue child element, and not assess any note with a cue child element. The assess type allows this default assessment to be overridden for individual notes. The optional player and time-only attributes restrict the type to apply to a single player or set of times through a repeated section, respectively. If missing, the type applies to all players or all times through the repeated section, respectively. The player attribute references the id attribute of a player element defined within the matching score-part.")]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XmlSchemaClassGenerator", "2.1.1142.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute("assess", Namespace="")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class Assess
    {

        [System.ComponentModel.DataAnnotations.RequiredAttribute(AllowEmptyStrings=true)]
        [System.Xml.Serialization.XmlAttributeAttribute("type")]
        public YesNo Type { get; set; }

        [System.Xml.Serialization.XmlAttributeAttribute("player")]
        public string Player { get; set; }

        /// <summary>
        /// <para>The time-only type is used to indicate that a particular playback- or listening-related element only applies particular times through a repeated section. The value is a comma-separated list of positive integers arranged in ascending order, indicating which times through the repeated section that the element applies.</para>
        /// <para xml:lang="en">Pattern: [1-9][0-9]*(, ?[1-9][0-9]*)*.</para>
        /// </summary>
        [System.ComponentModel.DataAnnotations.RegularExpressionAttribute("[1-9][0-9]*(, ?[1-9][0-9]*)*")]
        [System.Xml.Serialization.XmlAttributeAttribute("time-only")]
        public string TimeOnly { get; set; }
    }

    /// <summary>
    /// <para>The backup and forward elements are required to coordinate multiple voices in one part, including music on multiple staves. The backup type is generally used to move between voices and staves. Thus the backup element does not include voice or staff elements. Duration values should always be positive, and should not cross measure boundaries or mid-measure changes in the divisions value.</para>
    /// </summary>
    [System.ComponentModel.DescriptionAttribute(@"The backup and forward elements are required to coordinate multiple voices in one part, including music on multiple staves. The backup type is generally used to move between voices and staves. Thus the backup element does not include voice or staff elements. Duration values should always be positive, and should not cross measure boundaries or mid-measure changes in the divisions value.")]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XmlSchemaClassGenerator", "2.1.1142.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute("backup", Namespace="")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class Backup : IDuration, IEditorial
    {

        /// <summary>
        /// <para>Duration is a positive number specified in division units. This is the intended duration vs. notated duration (for instance, differences in dotted notes in Baroque-era music). Differences in duration specific to an interpretation or performance should be represented using the note element's attack and release attributes.
        ///
        ///The duration element moves the musical position when used in backup elements, forward elements, and note elements that do not contain a chord child element.</para>
        /// <para>The positive-divisions type restricts divisions values to positive numbers.</para>
        /// <para xml:lang="en">Minimum exclusive value: 0.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute(@"Duration is a positive number specified in division units. This is the intended duration vs. notated duration (for instance, differences in dotted notes in Baroque-era music). Differences in duration specific to an interpretation or performance should be represented using the note element's attack and release attributes. The duration element moves the musical position when used in backup elements, forward elements, and note elements that do not contain a chord child element.")]
        [System.ComponentModel.DataAnnotations.RequiredAttribute(AllowEmptyStrings=true)]
        [System.Xml.Serialization.XmlElementAttribute("duration")]
        public decimal Duration { get; set; }

        [System.Xml.Serialization.XmlElementAttribute("footnote")]
        public FormattedText Footnote { get; set; }

        [System.Xml.Serialization.XmlElementAttribute("level")]
        public Level Level { get; set; }
    }

    /// <summary>
    /// <para>The duration element is defined within a group due to its uses within the note, figured-bass, backup, and forward elements.</para>
    /// </summary>
    [System.ComponentModel.DescriptionAttribute("The duration element is defined within a group due to its uses within the note, f" +
        "igured-bass, backup, and forward elements.")]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XmlSchemaClassGenerator", "2.1.1142.0")]
    public partial interface IDuration
    {

        /// <summary>
        /// <para>Duration is a positive number specified in division units. This is the intended duration vs. notated duration (for instance, differences in dotted notes in Baroque-era music). Differences in duration specific to an interpretation or performance should be represented using the note element's attack and release attributes.
        ///
        ///The duration element moves the musical position when used in backup elements, forward elements, and note elements that do not contain a chord child element.</para>
        /// <para>The positive-divisions type restricts divisions values to positive numbers.</para>
        /// <para xml:lang="en">Minimum exclusive value: 0.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute(@"Duration is a positive number specified in division units. This is the intended duration vs. notated duration (for instance, differences in dotted notes in Baroque-era music). Differences in duration specific to an interpretation or performance should be represented using the note element's attack and release attributes. The duration element moves the musical position when used in backup elements, forward elements, and note elements that do not contain a chord child element.")]
        decimal Duration
        {
            get;
            set;
        }
    }

    /// <summary>
    /// <para>Beam values include begin, continue, end, forward hook, and backward hook. Up to eight concurrent beams are available to cover up to 1024th notes. Each beam in a note is represented with a separate beam element, starting with the eighth note beam using a number attribute of 1.
    ///
    ///Note that the beam number does not distinguish sets of beams that overlap, as it does for slur and other elements. Beaming groups are distinguished by being in different voices and/or the presence or absence of grace and cue elements.
    ///
    ///Beams that have a begin value can also have a fan attribute to indicate accelerandos and ritardandos using fanned beams. The fan attribute may also be used with a continue value if the fanning direction changes on that note. The value is "none" if not specified.
    ///
    ///The repeater attribute has been deprecated in MusicXML 3.0. Formerly used for tremolos, it needs to be specified with a "yes" value for each beam using it.</para>
    /// </summary>
    [System.ComponentModel.DescriptionAttribute(@"Beam values include begin, continue, end, forward hook, and backward hook. Up to eight concurrent beams are available to cover up to 1024th notes. Each beam in a note is represented with a separate beam element, starting with the eighth note beam using a number attribute of 1. Note that the beam number does not distinguish sets of beams that overlap, as it does for slur and other elements. Beaming groups are distinguished by being in different voices and/or the presence or absence of grace and cue elements. Beams that have a begin value can also have a fan attribute to indicate accelerandos and ritardandos using fanned beams. The fan attribute may also be used with a continue value if the fanning direction changes on that note. The value is ""none"" if not specified. The repeater attribute has been deprecated in MusicXML 3.0. Formerly used for tremolos, it needs to be specified with a ""yes"" value for each beam using it.")]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XmlSchemaClassGenerator", "2.1.1142.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute("beam", Namespace="")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class Beam : IColor, IOptionalUniqueId
    {

        /// <summary>
        /// <para xml:lang="en">Gets or sets the text value.</para>
        /// </summary>
        [System.Xml.Serialization.XmlTextAttribute()]
        public BeamValue Value { get; set; }

        [System.Xml.Serialization.XmlIgnoreAttribute()]
        private byte _number = 1;

        /// <summary>
        /// <para>The MusicXML format supports six levels of beaming, up to 1024th notes. Unlike the number-level type, the beam-level type identifies concurrent beams in a beam group. It does not distinguish overlapping beams such as grace notes within regular notes, or beams used in different voices.</para>
        /// <para xml:lang="en">Minimum inclusive value: 1.</para>
        /// <para xml:lang="en">Maximum inclusive value: 8.</para>
        /// </summary>
        [System.ComponentModel.DefaultValueAttribute(1)]
        [System.ComponentModel.DataAnnotations.RangeAttribute(typeof(decimal), "1", "8")]
        [System.Xml.Serialization.XmlAttributeAttribute("number")]
        public byte Number
        {
            get
            {
                return _number;
            }
            set
            {
                _number = value;
            }
        }

        [System.Xml.Serialization.XmlAttributeAttribute("repeater")]
        public YesNo Repeater { get; set; }

        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the Repeater property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool RepeaterSpecified { get; set; }

        [System.Xml.Serialization.XmlAttributeAttribute("fan")]
        public Fan Fan { get; set; }

        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the Fan property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool FanSpecified { get; set; }

        /// <summary>
        /// <para>The color type indicates the color of an element. Color may be represented as hexadecimal RGB triples, as in HTML, or as hexadecimal ARGB tuples, with the A indicating alpha of transparency. An alpha value of 00 is totally transparent; FF is totally opaque. If RGB is used, the A value is assumed to be FF.
        ///
        ///For instance, the RGB value "#800080" represents purple. An ARGB value of "#40800080" would be a transparent purple.
        ///
        ///As in SVG 1.1, colors are defined in terms of the sRGB color space (IEC 61966).</para>
        /// <para xml:lang="en">Pattern: #[\dA-F]{6}([\dA-F][\dA-F])?.</para>
        /// </summary>
        [System.ComponentModel.DataAnnotations.RegularExpressionAttribute("#[\\dA-F]{6}([\\dA-F][\\dA-F])?")]
        [System.Xml.Serialization.XmlAttributeAttribute("color")]
        public string Color { get; set; }

        [System.Xml.Serialization.XmlAttributeAttribute("id")]
        public string Id { get; set; }
    }

    /// <summary>
    /// <para>The bend type is used in guitar notation and tablature. A single note with a bend and release will contain two bend elements: the first to represent the bend and the second to represent the release. The shape attribute distinguishes between the angled bend symbols commonly used in standard notation and the curved bend symbols commonly used in both tablature and standard notation.</para>
    /// </summary>
    [System.ComponentModel.DescriptionAttribute(@"The bend type is used in guitar notation and tablature. A single note with a bend and release will contain two bend elements: the first to represent the bend and the second to represent the release. The shape attribute distinguishes between the angled bend symbols commonly used in standard notation and the curved bend symbols commonly used in both tablature and standard notation.")]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XmlSchemaClassGenerator", "2.1.1142.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute("bend", Namespace="")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class Bend : IPrintStyle, IBendSound
    {

        /// <summary>
        /// <para>The bend-alter element indicates the number of semitones in the bend, similar to the alter element. As with the alter element, numbers like 0.5 can be used to indicate microtones. Negative values indicate pre-bends or releases. The pre-bend and release elements are used to distinguish what is intended. Because the bend-alter element represents the number of steps in the bend, a release after a bend has a negative bend-alter value, not a zero value.</para>
        /// <para>The semitones type is a number representing semitones, used for chromatic alteration. A value of -1 corresponds to a flat and a value of 1 to a sharp. Decimal values like 0.5 (quarter tone sharp) are used for microtones.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute(@"The bend-alter element indicates the number of semitones in the bend, similar to the alter element. As with the alter element, numbers like 0.5 can be used to indicate microtones. Negative values indicate pre-bends or releases. The pre-bend and release elements are used to distinguish what is intended. Because the bend-alter element represents the number of steps in the bend, a release after a bend has a negative bend-alter value, not a zero value.")]
        [System.ComponentModel.DataAnnotations.RequiredAttribute(AllowEmptyStrings=true)]
        [System.Xml.Serialization.XmlElementAttribute("bend-alter")]
        public decimal BendAlter { get; set; }

        /// <summary>
        /// <para>The pre-bend element indicates that a bend is a pre-bend rather than a normal bend or a release.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("The pre-bend element indicates that a bend is a pre-bend rather than a normal ben" +
            "d or a release.")]
        [System.Xml.Serialization.XmlElementAttribute("pre-bend")]
        public Empty PreBend { get; set; }

        [System.Xml.Serialization.XmlElementAttribute("release")]
        public Release Release { get; set; }

        /// <summary>
        /// <para>The with-bar element indicates that the bend is to be done at the bridge with a whammy or vibrato bar. The content of the element indicates how this should be notated. Content values of "scoop" and "dip" refer to the SMuFL guitarVibratoBarScoop and guitarVibratoBarDip glyphs.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute(@"The with-bar element indicates that the bend is to be done at the bridge with a whammy or vibrato bar. The content of the element indicates how this should be notated. Content values of ""scoop"" and ""dip"" refer to the SMuFL guitarVibratoBarScoop and guitarVibratoBarDip glyphs.")]
        [System.Xml.Serialization.XmlElementAttribute("with-bar")]
        public PlacementText WithBar { get; set; }

        [System.Xml.Serialization.XmlAttributeAttribute("shape")]
        public BendShape Shape { get; set; }

        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the Shape property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool ShapeSpecified { get; set; }

        /// <summary>
        /// <para>The tenths type is a number representing tenths of interline staff space (positive or negative). Both integer and decimal values are allowed, such as 5 for a half space and 2.5 for a quarter space. Interline space is measured from the middle of a staff line.
        ///
        ///Distances in a MusicXML file are measured in tenths of staff space. Tenths are then scaled to millimeters within the scaling element, used in the defaults element at the start of a score. Individual staves can apply a scaling factor to adjust staff size. When a MusicXML element or attribute refers to tenths, it means the global tenths defined by the scaling element, not the local tenths as adjusted by the staff-size element.</para>
        /// </summary>
        [System.Xml.Serialization.XmlAttributeAttribute("default-x")]
        public decimal DefaultX { get; set; }

        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the DefaultX property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool DefaultXSpecified { get; set; }

        /// <summary>
        /// <para>The tenths type is a number representing tenths of interline staff space (positive or negative). Both integer and decimal values are allowed, such as 5 for a half space and 2.5 for a quarter space. Interline space is measured from the middle of a staff line.
        ///
        ///Distances in a MusicXML file are measured in tenths of staff space. Tenths are then scaled to millimeters within the scaling element, used in the defaults element at the start of a score. Individual staves can apply a scaling factor to adjust staff size. When a MusicXML element or attribute refers to tenths, it means the global tenths defined by the scaling element, not the local tenths as adjusted by the staff-size element.</para>
        /// </summary>
        [System.Xml.Serialization.XmlAttributeAttribute("default-y")]
        public decimal DefaultY { get; set; }

        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the DefaultY property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool DefaultYSpecified { get; set; }

        /// <summary>
        /// <para>The tenths type is a number representing tenths of interline staff space (positive or negative). Both integer and decimal values are allowed, such as 5 for a half space and 2.5 for a quarter space. Interline space is measured from the middle of a staff line.
        ///
        ///Distances in a MusicXML file are measured in tenths of staff space. Tenths are then scaled to millimeters within the scaling element, used in the defaults element at the start of a score. Individual staves can apply a scaling factor to adjust staff size. When a MusicXML element or attribute refers to tenths, it means the global tenths defined by the scaling element, not the local tenths as adjusted by the staff-size element.</para>
        /// </summary>
        [System.Xml.Serialization.XmlAttributeAttribute("relative-x")]
        public decimal RelativeX { get; set; }

        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the RelativeX property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool RelativeXSpecified { get; set; }

        /// <summary>
        /// <para>The tenths type is a number representing tenths of interline staff space (positive or negative). Both integer and decimal values are allowed, such as 5 for a half space and 2.5 for a quarter space. Interline space is measured from the middle of a staff line.
        ///
        ///Distances in a MusicXML file are measured in tenths of staff space. Tenths are then scaled to millimeters within the scaling element, used in the defaults element at the start of a score. Individual staves can apply a scaling factor to adjust staff size. When a MusicXML element or attribute refers to tenths, it means the global tenths defined by the scaling element, not the local tenths as adjusted by the staff-size element.</para>
        /// </summary>
        [System.Xml.Serialization.XmlAttributeAttribute("relative-y")]
        public decimal RelativeY { get; set; }

        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the RelativeY property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool RelativeYSpecified { get; set; }

        /// <summary>
        /// <para>The font-family is a comma-separated list of font names. These can be specific font styles such as Maestro or Opus, or one of several generic font styles: music, engraved, handwritten, text, serif, sans-serif, handwritten, cursive, fantasy, and monospace. The music, engraved, and handwritten values refer to music fonts; the rest refer to text fonts. The fantasy style refers to decorative text such as found in older German-style printing.</para>
        /// <para xml:lang="en">Pattern: [^,]+(, ?[^,]+)*.</para>
        /// </summary>
        [System.ComponentModel.DataAnnotations.RegularExpressionAttribute("[^,]+(, ?[^,]+)*")]
        [System.Xml.Serialization.XmlAttributeAttribute("font-family")]
        public string FontFamily { get; set; }

        [System.Xml.Serialization.XmlAttributeAttribute("font-style")]
        public FontStyle FontStyle { get; set; }

        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the FontStyle property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool FontStyleSpecified { get; set; }

        /// <summary>
        /// <para>The font-size can be one of the CSS font sizes (xx-small, x-small, small, medium, large, x-large, xx-large) or a numeric point size.</para>
        /// </summary>
        [System.Xml.Serialization.XmlAttributeAttribute("font-size")]
        public string FontSize { get; set; }

        [System.Xml.Serialization.XmlAttributeAttribute("font-weight")]
        public FontWeight FontWeight { get; set; }

        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the FontWeight property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool FontWeightSpecified { get; set; }

        /// <summary>
        /// <para>The color type indicates the color of an element. Color may be represented as hexadecimal RGB triples, as in HTML, or as hexadecimal ARGB tuples, with the A indicating alpha of transparency. An alpha value of 00 is totally transparent; FF is totally opaque. If RGB is used, the A value is assumed to be FF.
        ///
        ///For instance, the RGB value "#800080" represents purple. An ARGB value of "#40800080" would be a transparent purple.
        ///
        ///As in SVG 1.1, colors are defined in terms of the sRGB color space (IEC 61966).</para>
        /// <para xml:lang="en">Pattern: #[\dA-F]{6}([\dA-F][\dA-F])?.</para>
        /// </summary>
        [System.ComponentModel.DataAnnotations.RegularExpressionAttribute("#[\\dA-F]{6}([\\dA-F][\\dA-F])?")]
        [System.Xml.Serialization.XmlAttributeAttribute("color")]
        public string Color { get; set; }

        [System.Xml.Serialization.XmlAttributeAttribute("accelerate")]
        public YesNo Accelerate { get; set; }

        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the Accelerate property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool AccelerateSpecified { get; set; }

        /// <summary>
        /// <para>The trill-beats type specifies the beats used in a trill-sound or bend-sound attribute group. It is a decimal value with a minimum value of 2.</para>
        /// <para xml:lang="en">Minimum inclusive value: 2.</para>
        /// </summary>
        [System.Xml.Serialization.XmlAttributeAttribute("beats")]
        public decimal Beats { get; set; }

        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the Beats property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool BeatsSpecified { get; set; }

        /// <summary>
        /// <para>The percent type specifies a percentage from 0 to 100.</para>
        /// <para xml:lang="en">Minimum inclusive value: 0.</para>
        /// <para xml:lang="en">Maximum inclusive value: 100.</para>
        /// </summary>
        [System.ComponentModel.DataAnnotations.RangeAttribute(typeof(decimal), "0", "100")]
        [System.Xml.Serialization.XmlAttributeAttribute("first-beat")]
        public decimal FirstBeat { get; set; }

        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the FirstBeat property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool FirstBeatSpecified { get; set; }

        /// <summary>
        /// <para>The percent type specifies a percentage from 0 to 100.</para>
        /// <para xml:lang="en">Minimum inclusive value: 0.</para>
        /// <para xml:lang="en">Maximum inclusive value: 100.</para>
        /// </summary>
        [System.ComponentModel.DataAnnotations.RangeAttribute(typeof(decimal), "0", "100")]
        [System.Xml.Serialization.XmlAttributeAttribute("last-beat")]
        public decimal LastBeat { get; set; }

        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the LastBeat property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool LastBeatSpecified { get; set; }
    }

    /// <summary>
    /// <para>The release type indicates that a bend is a release rather than a normal bend or pre-bend. The offset attribute specifies where the release starts in terms of divisions relative to the current note. The first-beat and last-beat attributes of the parent bend element are relative to the original note position, not this offset value.</para>
    /// </summary>
    [System.ComponentModel.DescriptionAttribute(@"The release type indicates that a bend is a release rather than a normal bend or pre-bend. The offset attribute specifies where the release starts in terms of divisions relative to the current note. The first-beat and last-beat attributes of the parent bend element are relative to the original note position, not this offset value.")]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XmlSchemaClassGenerator", "2.1.1142.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute("release", Namespace="")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class Release : Empty
    {

        /// <summary>
        /// <para>The divisions type is used to express values in terms of the musical divisions defined by the divisions element. It is preferred that these be integer values both for MIDI interoperability and to avoid roundoff errors.</para>
        /// </summary>
        [System.Xml.Serialization.XmlAttributeAttribute("offset")]
        public decimal Offset { get; set; }

        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the Offset property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool OffsetSpecified { get; set; }
    }

    /// <summary>
    /// <para>The placement-text type represents a text element with print-style and placement attribute groups.</para>
    /// </summary>
    [System.ComponentModel.DescriptionAttribute("The placement-text type represents a text element with print-style and placement " +
        "attribute groups.")]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XmlSchemaClassGenerator", "2.1.1142.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute("placement-text", Namespace="")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class PlacementText : IPrintStyle, IPlacement
    {

        /// <summary>
        /// <para xml:lang="en">Gets or sets the text value.</para>
        /// </summary>
        [System.Xml.Serialization.XmlTextAttribute()]
        public string Value { get; set; }

        /// <summary>
        /// <para>The tenths type is a number representing tenths of interline staff space (positive or negative). Both integer and decimal values are allowed, such as 5 for a half space and 2.5 for a quarter space. Interline space is measured from the middle of a staff line.
        ///
        ///Distances in a MusicXML file are measured in tenths of staff space. Tenths are then scaled to millimeters within the scaling element, used in the defaults element at the start of a score. Individual staves can apply a scaling factor to adjust staff size. When a MusicXML element or attribute refers to tenths, it means the global tenths defined by the scaling element, not the local tenths as adjusted by the staff-size element.</para>
        /// </summary>
        [System.Xml.Serialization.XmlAttributeAttribute("default-x")]
        public decimal DefaultX { get; set; }

        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the DefaultX property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool DefaultXSpecified { get; set; }

        /// <summary>
        /// <para>The tenths type is a number representing tenths of interline staff space (positive or negative). Both integer and decimal values are allowed, such as 5 for a half space and 2.5 for a quarter space. Interline space is measured from the middle of a staff line.
        ///
        ///Distances in a MusicXML file are measured in tenths of staff space. Tenths are then scaled to millimeters within the scaling element, used in the defaults element at the start of a score. Individual staves can apply a scaling factor to adjust staff size. When a MusicXML element or attribute refers to tenths, it means the global tenths defined by the scaling element, not the local tenths as adjusted by the staff-size element.</para>
        /// </summary>
        [System.Xml.Serialization.XmlAttributeAttribute("default-y")]
        public decimal DefaultY { get; set; }

        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the DefaultY property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool DefaultYSpecified { get; set; }

        /// <summary>
        /// <para>The tenths type is a number representing tenths of interline staff space (positive or negative). Both integer and decimal values are allowed, such as 5 for a half space and 2.5 for a quarter space. Interline space is measured from the middle of a staff line.
        ///
        ///Distances in a MusicXML file are measured in tenths of staff space. Tenths are then scaled to millimeters within the scaling element, used in the defaults element at the start of a score. Individual staves can apply a scaling factor to adjust staff size. When a MusicXML element or attribute refers to tenths, it means the global tenths defined by the scaling element, not the local tenths as adjusted by the staff-size element.</para>
        /// </summary>
        [System.Xml.Serialization.XmlAttributeAttribute("relative-x")]
        public decimal RelativeX { get; set; }

        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the RelativeX property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool RelativeXSpecified { get; set; }

        /// <summary>
        /// <para>The tenths type is a number representing tenths of interline staff space (positive or negative). Both integer and decimal values are allowed, such as 5 for a half space and 2.5 for a quarter space. Interline space is measured from the middle of a staff line.
        ///
        ///Distances in a MusicXML file are measured in tenths of staff space. Tenths are then scaled to millimeters within the scaling element, used in the defaults element at the start of a score. Individual staves can apply a scaling factor to adjust staff size. When a MusicXML element or attribute refers to tenths, it means the global tenths defined by the scaling element, not the local tenths as adjusted by the staff-size element.</para>
        /// </summary>
        [System.Xml.Serialization.XmlAttributeAttribute("relative-y")]
        public decimal RelativeY { get; set; }

        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the RelativeY property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool RelativeYSpecified { get; set; }

        /// <summary>
        /// <para>The font-family is a comma-separated list of font names. These can be specific font styles such as Maestro or Opus, or one of several generic font styles: music, engraved, handwritten, text, serif, sans-serif, handwritten, cursive, fantasy, and monospace. The music, engraved, and handwritten values refer to music fonts; the rest refer to text fonts. The fantasy style refers to decorative text such as found in older German-style printing.</para>
        /// <para xml:lang="en">Pattern: [^,]+(, ?[^,]+)*.</para>
        /// </summary>
        [System.ComponentModel.DataAnnotations.RegularExpressionAttribute("[^,]+(, ?[^,]+)*")]
        [System.Xml.Serialization.XmlAttributeAttribute("font-family")]
        public string FontFamily { get; set; }

        [System.Xml.Serialization.XmlAttributeAttribute("font-style")]
        public FontStyle FontStyle { get; set; }

        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the FontStyle property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool FontStyleSpecified { get; set; }

        /// <summary>
        /// <para>The font-size can be one of the CSS font sizes (xx-small, x-small, small, medium, large, x-large, xx-large) or a numeric point size.</para>
        /// </summary>
        [System.Xml.Serialization.XmlAttributeAttribute("font-size")]
        public string FontSize { get; set; }

        [System.Xml.Serialization.XmlAttributeAttribute("font-weight")]
        public FontWeight FontWeight { get; set; }

        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the FontWeight property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool FontWeightSpecified { get; set; }

        /// <summary>
        /// <para>The color type indicates the color of an element. Color may be represented as hexadecimal RGB triples, as in HTML, or as hexadecimal ARGB tuples, with the A indicating alpha of transparency. An alpha value of 00 is totally transparent; FF is totally opaque. If RGB is used, the A value is assumed to be FF.
        ///
        ///For instance, the RGB value "#800080" represents purple. An ARGB value of "#40800080" would be a transparent purple.
        ///
        ///As in SVG 1.1, colors are defined in terms of the sRGB color space (IEC 61966).</para>
        /// <para xml:lang="en">Pattern: #[\dA-F]{6}([\dA-F][\dA-F])?.</para>
        /// </summary>
        [System.ComponentModel.DataAnnotations.RegularExpressionAttribute("#[\\dA-F]{6}([\\dA-F][\\dA-F])?")]
        [System.Xml.Serialization.XmlAttributeAttribute("color")]
        public string Color { get; set; }

        [System.Xml.Serialization.XmlAttributeAttribute("placement")]
        public AboveBelow Placement { get; set; }

        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the Placement property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool PlacementSpecified { get; set; }
    }

    /// <summary>
    /// <para>The bend-sound type is used for bend and slide elements, and is similar to the trill-sound attribute group. Here the beats element refers to the number of discrete elements (like MIDI pitch bends) used to represent a continuous bend or slide. The first-beat indicates the percentage of the duration for starting a bend; the last-beat the percentage for ending it. The default choices are:
    ///
    ///	accelerate = "no"
    ///	beats = "4"
    ///	first-beat = "25"
    ///	last-beat = "75"</para>
    /// </summary>
    [System.ComponentModel.DescriptionAttribute(@"The bend-sound type is used for bend and slide elements, and is similar to the trill-sound attribute group. Here the beats element refers to the number of discrete elements (like MIDI pitch bends) used to represent a continuous bend or slide. The first-beat indicates the percentage of the duration for starting a bend; the last-beat the percentage for ending it. The default choices are: accelerate = ""no"" beats = ""4"" first-beat = ""25"" last-beat = ""75""")]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XmlSchemaClassGenerator", "2.1.1142.0")]
    public partial interface IBendSound
    {

        YesNo Accelerate
        {
            get;
            set;
        }

        /// <summary>
        /// <para>The trill-beats type specifies the beats used in a trill-sound or bend-sound attribute group. It is a decimal value with a minimum value of 2.</para>
        /// <para xml:lang="en">Minimum inclusive value: 2.</para>
        /// </summary>
        decimal Beats
        {
            get;
            set;
        }

        /// <summary>
        /// <para>The percent type specifies a percentage from 0 to 100.</para>
        /// <para xml:lang="en">Minimum inclusive value: 0.</para>
        /// <para xml:lang="en">Maximum inclusive value: 100.</para>
        /// </summary>
        [System.ComponentModel.DataAnnotations.RangeAttribute(typeof(decimal), "0", "100")]
        decimal FirstBeat
        {
            get;
            set;
        }

        /// <summary>
        /// <para>The percent type specifies a percentage from 0 to 100.</para>
        /// <para xml:lang="en">Minimum inclusive value: 0.</para>
        /// <para xml:lang="en">Maximum inclusive value: 100.</para>
        /// </summary>
        [System.ComponentModel.DataAnnotations.RangeAttribute(typeof(decimal), "0", "100")]
        decimal LastBeat
        {
            get;
            set;
        }
    }

    /// <summary>
    /// <para>The elision type represents an elision between lyric syllables. The text content specifies the symbol used to display the elision. Common values are a no-break space (Unicode 00A0), an underscore (Unicode 005F), or an undertie (Unicode 203F). If the text content is empty, the smufl attribute is used to specify the symbol to use. Its value is a SMuFL canonical glyph name that starts with lyrics. The SMuFL attribute is ignored if the elision glyph is already specified by the text content. If neither text content nor a smufl attribute are present, the elision glyph is application-specific.</para>
    /// </summary>
    [System.ComponentModel.DescriptionAttribute(@"The elision type represents an elision between lyric syllables. The text content specifies the symbol used to display the elision. Common values are a no-break space (Unicode 00A0), an underscore (Unicode 005F), or an undertie (Unicode 203F). If the text content is empty, the smufl attribute is used to specify the symbol to use. Its value is a SMuFL canonical glyph name that starts with lyrics. The SMuFL attribute is ignored if the elision glyph is already specified by the text content. If neither text content nor a smufl attribute are present, the elision glyph is application-specific.")]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XmlSchemaClassGenerator", "2.1.1142.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute("elision", Namespace="")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class Elision : IFont, IColor
    {

        /// <summary>
        /// <para xml:lang="en">Gets or sets the text value.</para>
        /// </summary>
        [System.Xml.Serialization.XmlTextAttribute()]
        public string Value { get; set; }

        /// <summary>
        /// <para>The font-family is a comma-separated list of font names. These can be specific font styles such as Maestro or Opus, or one of several generic font styles: music, engraved, handwritten, text, serif, sans-serif, handwritten, cursive, fantasy, and monospace. The music, engraved, and handwritten values refer to music fonts; the rest refer to text fonts. The fantasy style refers to decorative text such as found in older German-style printing.</para>
        /// <para xml:lang="en">Pattern: [^,]+(, ?[^,]+)*.</para>
        /// </summary>
        [System.ComponentModel.DataAnnotations.RegularExpressionAttribute("[^,]+(, ?[^,]+)*")]
        [System.Xml.Serialization.XmlAttributeAttribute("font-family")]
        public string FontFamily { get; set; }

        [System.Xml.Serialization.XmlAttributeAttribute("font-style")]
        public FontStyle FontStyle { get; set; }

        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the FontStyle property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool FontStyleSpecified { get; set; }

        /// <summary>
        /// <para>The font-size can be one of the CSS font sizes (xx-small, x-small, small, medium, large, x-large, xx-large) or a numeric point size.</para>
        /// </summary>
        [System.Xml.Serialization.XmlAttributeAttribute("font-size")]
        public string FontSize { get; set; }

        [System.Xml.Serialization.XmlAttributeAttribute("font-weight")]
        public FontWeight FontWeight { get; set; }

        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the FontWeight property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool FontWeightSpecified { get; set; }

        /// <summary>
        /// <para>The color type indicates the color of an element. Color may be represented as hexadecimal RGB triples, as in HTML, or as hexadecimal ARGB tuples, with the A indicating alpha of transparency. An alpha value of 00 is totally transparent; FF is totally opaque. If RGB is used, the A value is assumed to be FF.
        ///
        ///For instance, the RGB value "#800080" represents purple. An ARGB value of "#40800080" would be a transparent purple.
        ///
        ///As in SVG 1.1, colors are defined in terms of the sRGB color space (IEC 61966).</para>
        /// <para xml:lang="en">Pattern: #[\dA-F]{6}([\dA-F][\dA-F])?.</para>
        /// </summary>
        [System.ComponentModel.DataAnnotations.RegularExpressionAttribute("#[\\dA-F]{6}([\\dA-F][\\dA-F])?")]
        [System.Xml.Serialization.XmlAttributeAttribute("color")]
        public string Color { get; set; }

        /// <summary>
        /// <para>The smufl-lyrics-glyph-name type is used to reference a specific Standard Music Font Layout (SMuFL) lyrics elision character. The value is a SMuFL canonical glyph name that starts with lyrics.</para>
        /// <para xml:lang="en">Pattern: lyrics\c+.</para>
        /// </summary>
        [System.ComponentModel.DataAnnotations.RegularExpressionAttribute("lyrics\\c+")]
        [System.Xml.Serialization.XmlAttributeAttribute("smufl")]
        public string Smufl { get; set; }
    }

    /// <summary>
    /// <para>The extend type represents lyric word extension / melisma lines as well as figured bass extensions. The optional type and position attributes are added in Version 3.0 to provide better formatting control.</para>
    /// </summary>
    [System.ComponentModel.DescriptionAttribute("The extend type represents lyric word extension / melisma lines as well as figure" +
        "d bass extensions. The optional type and position attributes are added in Versio" +
        "n 3.0 to provide better formatting control.")]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XmlSchemaClassGenerator", "2.1.1142.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute("extend", Namespace="")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class Extend : IPosition, IColor
    {

        [System.Xml.Serialization.XmlAttributeAttribute("type")]
        public StartStopContinue Type { get; set; }

        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the Type property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool TypeSpecified { get; set; }

        /// <summary>
        /// <para>The tenths type is a number representing tenths of interline staff space (positive or negative). Both integer and decimal values are allowed, such as 5 for a half space and 2.5 for a quarter space. Interline space is measured from the middle of a staff line.
        ///
        ///Distances in a MusicXML file are measured in tenths of staff space. Tenths are then scaled to millimeters within the scaling element, used in the defaults element at the start of a score. Individual staves can apply a scaling factor to adjust staff size. When a MusicXML element or attribute refers to tenths, it means the global tenths defined by the scaling element, not the local tenths as adjusted by the staff-size element.</para>
        /// </summary>
        [System.Xml.Serialization.XmlAttributeAttribute("default-x")]
        public decimal DefaultX { get; set; }

        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the DefaultX property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool DefaultXSpecified { get; set; }

        /// <summary>
        /// <para>The tenths type is a number representing tenths of interline staff space (positive or negative). Both integer and decimal values are allowed, such as 5 for a half space and 2.5 for a quarter space. Interline space is measured from the middle of a staff line.
        ///
        ///Distances in a MusicXML file are measured in tenths of staff space. Tenths are then scaled to millimeters within the scaling element, used in the defaults element at the start of a score. Individual staves can apply a scaling factor to adjust staff size. When a MusicXML element or attribute refers to tenths, it means the global tenths defined by the scaling element, not the local tenths as adjusted by the staff-size element.</para>
        /// </summary>
        [System.Xml.Serialization.XmlAttributeAttribute("default-y")]
        public decimal DefaultY { get; set; }

        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the DefaultY property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool DefaultYSpecified { get; set; }

        /// <summary>
        /// <para>The tenths type is a number representing tenths of interline staff space (positive or negative). Both integer and decimal values are allowed, such as 5 for a half space and 2.5 for a quarter space. Interline space is measured from the middle of a staff line.
        ///
        ///Distances in a MusicXML file are measured in tenths of staff space. Tenths are then scaled to millimeters within the scaling element, used in the defaults element at the start of a score. Individual staves can apply a scaling factor to adjust staff size. When a MusicXML element or attribute refers to tenths, it means the global tenths defined by the scaling element, not the local tenths as adjusted by the staff-size element.</para>
        /// </summary>
        [System.Xml.Serialization.XmlAttributeAttribute("relative-x")]
        public decimal RelativeX { get; set; }

        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the RelativeX property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool RelativeXSpecified { get; set; }

        /// <summary>
        /// <para>The tenths type is a number representing tenths of interline staff space (positive or negative). Both integer and decimal values are allowed, such as 5 for a half space and 2.5 for a quarter space. Interline space is measured from the middle of a staff line.
        ///
        ///Distances in a MusicXML file are measured in tenths of staff space. Tenths are then scaled to millimeters within the scaling element, used in the defaults element at the start of a score. Individual staves can apply a scaling factor to adjust staff size. When a MusicXML element or attribute refers to tenths, it means the global tenths defined by the scaling element, not the local tenths as adjusted by the staff-size element.</para>
        /// </summary>
        [System.Xml.Serialization.XmlAttributeAttribute("relative-y")]
        public decimal RelativeY { get; set; }

        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the RelativeY property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool RelativeYSpecified { get; set; }

        /// <summary>
        /// <para>The color type indicates the color of an element. Color may be represented as hexadecimal RGB triples, as in HTML, or as hexadecimal ARGB tuples, with the A indicating alpha of transparency. An alpha value of 00 is totally transparent; FF is totally opaque. If RGB is used, the A value is assumed to be FF.
        ///
        ///For instance, the RGB value "#800080" represents purple. An ARGB value of "#40800080" would be a transparent purple.
        ///
        ///As in SVG 1.1, colors are defined in terms of the sRGB color space (IEC 61966).</para>
        /// <para xml:lang="en">Pattern: #[\dA-F]{6}([\dA-F][\dA-F])?.</para>
        /// </summary>
        [System.ComponentModel.DataAnnotations.RegularExpressionAttribute("#[\\dA-F]{6}([\\dA-F][\\dA-F])?")]
        [System.Xml.Serialization.XmlAttributeAttribute("color")]
        public string Color { get; set; }
    }

    /// <summary>
    /// <para>The figure type represents a single figure within a figured-bass element.</para>
    /// </summary>
    [System.ComponentModel.DescriptionAttribute("The figure type represents a single figure within a figured-bass element.")]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XmlSchemaClassGenerator", "2.1.1142.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute("figure", Namespace="")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class Figure : IEditorial
    {

        /// <summary>
        /// <para>Values for the prefix element include plus and the accidental values sharp, flat, natural, double-sharp, flat-flat, and sharp-sharp. The prefix element may contain additional values for symbols specific to particular figured bass styles.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Values for the prefix element include plus and the accidental values sharp, flat," +
            " natural, double-sharp, flat-flat, and sharp-sharp. The prefix element may conta" +
            "in additional values for symbols specific to particular figured bass styles.")]
        [System.Xml.Serialization.XmlElementAttribute("prefix")]
        public StyleText Prefix { get; set; }

        /// <summary>
        /// <para>A figure-number is a number. Overstrikes of the figure number are represented in the suffix element.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("A figure-number is a number. Overstrikes of the figure number are represented in " +
            "the suffix element.")]
        [System.Xml.Serialization.XmlElementAttribute("figure-number")]
        public StyleText FigureNumber { get; set; }

        /// <summary>
        /// <para>Values for the suffix element include plus and the accidental values sharp, flat, natural, double-sharp, flat-flat, and sharp-sharp. Suffixes include both symbols that come after the figure number and those that overstrike the figure number. The suffix values slash, back-slash, and vertical are used for slashed numbers indicating chromatic alteration. The orientation and display of the slash usually depends on the figure number. The suffix element may contain additional values for symbols specific to particular figured bass styles.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute(@"Values for the suffix element include plus and the accidental values sharp, flat, natural, double-sharp, flat-flat, and sharp-sharp. Suffixes include both symbols that come after the figure number and those that overstrike the figure number. The suffix values slash, back-slash, and vertical are used for slashed numbers indicating chromatic alteration. The orientation and display of the slash usually depends on the figure number. The suffix element may contain additional values for symbols specific to particular figured bass styles.")]
        [System.Xml.Serialization.XmlElementAttribute("suffix")]
        public StyleText Suffix { get; set; }

        [System.Xml.Serialization.XmlElementAttribute("extend")]
        public Extend Extend { get; set; }

        [System.Xml.Serialization.XmlElementAttribute("footnote")]
        public FormattedText Footnote { get; set; }

        [System.Xml.Serialization.XmlElementAttribute("level")]
        public Level Level { get; set; }
    }

    /// <summary>
    /// <para>The figured-bass element represents figured bass notation. Figured bass elements take their position from the first regular note (not a grace note or chord note) that follows in score order. The optional duration element is used to indicate changes of figures under a note.
    ///
    ///Figures are ordered from top to bottom. The value of parentheses is "no" if not present.</para>
    /// </summary>
    [System.ComponentModel.DescriptionAttribute(@"The figured-bass element represents figured bass notation. Figured bass elements take their position from the first regular note (not a grace note or chord note) that follows in score order. The optional duration element is used to indicate changes of figures under a note. Figures are ordered from top to bottom. The value of parentheses is ""no"" if not present.")]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XmlSchemaClassGenerator", "2.1.1142.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute("figured-bass", Namespace="")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class FiguredBass : IDuration, IEditorial, IPrintStyleAlign, IPlacement, IPrintout, IOptionalUniqueId
    {

        [System.Xml.Serialization.XmlIgnoreAttribute()]
        private System.Collections.ObjectModel.Collection<Figure> _figure;

        [System.ComponentModel.DataAnnotations.RequiredAttribute(AllowEmptyStrings=true)]
        [System.Xml.Serialization.XmlElementAttribute("figure")]
        public System.Collections.ObjectModel.Collection<Figure> Figure
        {
            get
            {
                return _figure;
            }
            private set
            {
                _figure = value;
            }
        }

        /// <summary>
        /// <para xml:lang="en">Initializes a new instance of the <see cref="FiguredBass" /> class.</para>
        /// </summary>
        public FiguredBass()
        {
            this._figure = new System.Collections.ObjectModel.Collection<Figure>();
        }

        /// <summary>
        /// <para>Duration is a positive number specified in division units. This is the intended duration vs. notated duration (for instance, differences in dotted notes in Baroque-era music). Differences in duration specific to an interpretation or performance should be represented using the note element's attack and release attributes.
        ///
        ///The duration element moves the musical position when used in backup elements, forward elements, and note elements that do not contain a chord child element.</para>
        /// <para>The positive-divisions type restricts divisions values to positive numbers.</para>
        /// <para xml:lang="en">Minimum exclusive value: 0.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute(@"Duration is a positive number specified in division units. This is the intended duration vs. notated duration (for instance, differences in dotted notes in Baroque-era music). Differences in duration specific to an interpretation or performance should be represented using the note element's attack and release attributes. The duration element moves the musical position when used in backup elements, forward elements, and note elements that do not contain a chord child element.")]
        [System.Xml.Serialization.XmlElementAttribute("duration")]
        public decimal Duration { get; set; }

        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the Duration property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool DurationSpecified { get; set; }

        [System.Xml.Serialization.XmlElementAttribute("footnote")]
        public FormattedText Footnote { get; set; }

        [System.Xml.Serialization.XmlElementAttribute("level")]
        public Level Level { get; set; }

        /// <summary>
        /// <para>The tenths type is a number representing tenths of interline staff space (positive or negative). Both integer and decimal values are allowed, such as 5 for a half space and 2.5 for a quarter space. Interline space is measured from the middle of a staff line.
        ///
        ///Distances in a MusicXML file are measured in tenths of staff space. Tenths are then scaled to millimeters within the scaling element, used in the defaults element at the start of a score. Individual staves can apply a scaling factor to adjust staff size. When a MusicXML element or attribute refers to tenths, it means the global tenths defined by the scaling element, not the local tenths as adjusted by the staff-size element.</para>
        /// </summary>
        [System.Xml.Serialization.XmlAttributeAttribute("default-x")]
        public decimal DefaultX { get; set; }

        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the DefaultX property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool DefaultXSpecified { get; set; }

        /// <summary>
        /// <para>The tenths type is a number representing tenths of interline staff space (positive or negative). Both integer and decimal values are allowed, such as 5 for a half space and 2.5 for a quarter space. Interline space is measured from the middle of a staff line.
        ///
        ///Distances in a MusicXML file are measured in tenths of staff space. Tenths are then scaled to millimeters within the scaling element, used in the defaults element at the start of a score. Individual staves can apply a scaling factor to adjust staff size. When a MusicXML element or attribute refers to tenths, it means the global tenths defined by the scaling element, not the local tenths as adjusted by the staff-size element.</para>
        /// </summary>
        [System.Xml.Serialization.XmlAttributeAttribute("default-y")]
        public decimal DefaultY { get; set; }

        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the DefaultY property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool DefaultYSpecified { get; set; }

        /// <summary>
        /// <para>The tenths type is a number representing tenths of interline staff space (positive or negative). Both integer and decimal values are allowed, such as 5 for a half space and 2.5 for a quarter space. Interline space is measured from the middle of a staff line.
        ///
        ///Distances in a MusicXML file are measured in tenths of staff space. Tenths are then scaled to millimeters within the scaling element, used in the defaults element at the start of a score. Individual staves can apply a scaling factor to adjust staff size. When a MusicXML element or attribute refers to tenths, it means the global tenths defined by the scaling element, not the local tenths as adjusted by the staff-size element.</para>
        /// </summary>
        [System.Xml.Serialization.XmlAttributeAttribute("relative-x")]
        public decimal RelativeX { get; set; }

        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the RelativeX property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool RelativeXSpecified { get; set; }

        /// <summary>
        /// <para>The tenths type is a number representing tenths of interline staff space (positive or negative). Both integer and decimal values are allowed, such as 5 for a half space and 2.5 for a quarter space. Interline space is measured from the middle of a staff line.
        ///
        ///Distances in a MusicXML file are measured in tenths of staff space. Tenths are then scaled to millimeters within the scaling element, used in the defaults element at the start of a score. Individual staves can apply a scaling factor to adjust staff size. When a MusicXML element or attribute refers to tenths, it means the global tenths defined by the scaling element, not the local tenths as adjusted by the staff-size element.</para>
        /// </summary>
        [System.Xml.Serialization.XmlAttributeAttribute("relative-y")]
        public decimal RelativeY { get; set; }

        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the RelativeY property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool RelativeYSpecified { get; set; }

        /// <summary>
        /// <para>The font-family is a comma-separated list of font names. These can be specific font styles such as Maestro or Opus, or one of several generic font styles: music, engraved, handwritten, text, serif, sans-serif, handwritten, cursive, fantasy, and monospace. The music, engraved, and handwritten values refer to music fonts; the rest refer to text fonts. The fantasy style refers to decorative text such as found in older German-style printing.</para>
        /// <para xml:lang="en">Pattern: [^,]+(, ?[^,]+)*.</para>
        /// </summary>
        [System.ComponentModel.DataAnnotations.RegularExpressionAttribute("[^,]+(, ?[^,]+)*")]
        [System.Xml.Serialization.XmlAttributeAttribute("font-family")]
        public string FontFamily { get; set; }

        [System.Xml.Serialization.XmlAttributeAttribute("font-style")]
        public FontStyle FontStyle { get; set; }

        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the FontStyle property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool FontStyleSpecified { get; set; }

        /// <summary>
        /// <para>The font-size can be one of the CSS font sizes (xx-small, x-small, small, medium, large, x-large, xx-large) or a numeric point size.</para>
        /// </summary>
        [System.Xml.Serialization.XmlAttributeAttribute("font-size")]
        public string FontSize { get; set; }

        [System.Xml.Serialization.XmlAttributeAttribute("font-weight")]
        public FontWeight FontWeight { get; set; }

        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the FontWeight property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool FontWeightSpecified { get; set; }

        /// <summary>
        /// <para>The color type indicates the color of an element. Color may be represented as hexadecimal RGB triples, as in HTML, or as hexadecimal ARGB tuples, with the A indicating alpha of transparency. An alpha value of 00 is totally transparent; FF is totally opaque. If RGB is used, the A value is assumed to be FF.
        ///
        ///For instance, the RGB value "#800080" represents purple. An ARGB value of "#40800080" would be a transparent purple.
        ///
        ///As in SVG 1.1, colors are defined in terms of the sRGB color space (IEC 61966).</para>
        /// <para xml:lang="en">Pattern: #[\dA-F]{6}([\dA-F][\dA-F])?.</para>
        /// </summary>
        [System.ComponentModel.DataAnnotations.RegularExpressionAttribute("#[\\dA-F]{6}([\\dA-F][\\dA-F])?")]
        [System.Xml.Serialization.XmlAttributeAttribute("color")]
        public string Color { get; set; }

        [System.Xml.Serialization.XmlAttributeAttribute("halign")]
        public LeftCenterRight Halign { get; set; }

        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the Halign property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool HalignSpecified { get; set; }

        [System.Xml.Serialization.XmlAttributeAttribute("valign")]
        public Valign Valign { get; set; }

        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the Valign property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool ValignSpecified { get; set; }

        [System.Xml.Serialization.XmlAttributeAttribute("placement")]
        public AboveBelow Placement { get; set; }

        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the Placement property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool PlacementSpecified { get; set; }

        [System.Xml.Serialization.XmlAttributeAttribute("print-object")]
        public YesNo PrintObject { get; set; }

        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the PrintObject property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool PrintObjectSpecified { get; set; }

        [System.Xml.Serialization.XmlAttributeAttribute("print-dot")]
        public YesNo PrintDot { get; set; }

        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the PrintDot property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool PrintDotSpecified { get; set; }

        [System.Xml.Serialization.XmlAttributeAttribute("print-spacing")]
        public YesNo PrintSpacing { get; set; }

        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the PrintSpacing property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool PrintSpacingSpecified { get; set; }

        [System.Xml.Serialization.XmlAttributeAttribute("print-lyric")]
        public YesNo PrintLyric { get; set; }

        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the PrintLyric property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool PrintLyricSpecified { get; set; }

        [System.Xml.Serialization.XmlAttributeAttribute("parentheses")]
        public YesNo Parentheses { get; set; }

        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the Parentheses property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool ParenthesesSpecified { get; set; }

        [System.Xml.Serialization.XmlAttributeAttribute("id")]
        public string Id { get; set; }
    }

    /// <summary>
    /// <para>The printout attribute group collects the different controls over printing an object (e.g. a note or rest) and its parts, including augmentation dots and lyrics. This is especially useful for notes that overlap in different voices, or for chord sheets that contain lyrics and chords but no melody.
    ///
    ///By default, all these attributes are set to yes. If print-object is set to no, the print-dot and print-lyric attributes are interpreted to also be set to no if they are not present.</para>
    /// </summary>
    [System.ComponentModel.DescriptionAttribute(@"The printout attribute group collects the different controls over printing an object (e.g. a note or rest) and its parts, including augmentation dots and lyrics. This is especially useful for notes that overlap in different voices, or for chord sheets that contain lyrics and chords but no melody. By default, all these attributes are set to yes. If print-object is set to no, the print-dot and print-lyric attributes are interpreted to also be set to no if they are not present.")]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XmlSchemaClassGenerator", "2.1.1142.0")]
    public partial interface IPrintout : IPrintObject, IPrintSpacing
    {

        YesNo PrintDot
        {
            get;
            set;
        }

        YesNo PrintLyric
        {
            get;
            set;
        }
    }

    /// <summary>
    /// <para>The backup and forward elements are required to coordinate multiple voices in one part, including music on multiple staves. The forward element is generally used within voices and staves. Duration values should always be positive, and should not cross measure boundaries or mid-measure changes in the divisions value.</para>
    /// </summary>
    [System.ComponentModel.DescriptionAttribute(@"The backup and forward elements are required to coordinate multiple voices in one part, including music on multiple staves. The forward element is generally used within voices and staves. Duration values should always be positive, and should not cross measure boundaries or mid-measure changes in the divisions value.")]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XmlSchemaClassGenerator", "2.1.1142.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute("forward", Namespace="")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class Forward : IDuration, IEditorialVoice, IStaff
    {

        /// <summary>
        /// <para>Duration is a positive number specified in division units. This is the intended duration vs. notated duration (for instance, differences in dotted notes in Baroque-era music). Differences in duration specific to an interpretation or performance should be represented using the note element's attack and release attributes.
        ///
        ///The duration element moves the musical position when used in backup elements, forward elements, and note elements that do not contain a chord child element.</para>
        /// <para>The positive-divisions type restricts divisions values to positive numbers.</para>
        /// <para xml:lang="en">Minimum exclusive value: 0.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute(@"Duration is a positive number specified in division units. This is the intended duration vs. notated duration (for instance, differences in dotted notes in Baroque-era music). Differences in duration specific to an interpretation or performance should be represented using the note element's attack and release attributes. The duration element moves the musical position when used in backup elements, forward elements, and note elements that do not contain a chord child element.")]
        [System.ComponentModel.DataAnnotations.RequiredAttribute(AllowEmptyStrings=true)]
        [System.Xml.Serialization.XmlElementAttribute("duration")]
        public decimal Duration { get; set; }

        [System.Xml.Serialization.XmlElementAttribute("footnote")]
        public FormattedText Footnote { get; set; }

        [System.Xml.Serialization.XmlElementAttribute("level")]
        public Level Level { get; set; }

        [System.Xml.Serialization.XmlElementAttribute("voice")]
        public string Voice { get; set; }

        /// <summary>
        /// <para>Staff assignment is only needed for music notated on multiple staves. Used by both notes and directions. Staff values are numbers, with 1 referring to the top-most staff in a part.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Staff assignment is only needed for music notated on multiple staves. Used by bot" +
            "h notes and directions. Staff values are numbers, with 1 referring to the top-mo" +
            "st staff in a part.")]
        [System.Xml.Serialization.XmlElementAttribute("staff")]
        public string Staff { get; set; }
    }

    /// <summary>
    /// <para>The editorial-voice group supports the common combination of editorial and voice information for a musical element.</para>
    /// </summary>
    [System.ComponentModel.DescriptionAttribute("The editorial-voice group supports the common combination of editorial and voice " +
        "information for a musical element.")]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XmlSchemaClassGenerator", "2.1.1142.0")]
    public partial interface IEditorialVoice : IFootnote, ILevel, IVoice
    {
    }

    /// <summary>
    /// <para>Glissando and slide types both indicate rapidly moving from one pitch to the other so that individual notes are not discerned. A glissando sounds the distinct notes in between the two pitches and defaults to a wavy line. The optional text is printed alongside the line.</para>
    /// </summary>
    [System.ComponentModel.DescriptionAttribute(@"Glissando and slide types both indicate rapidly moving from one pitch to the other so that individual notes are not discerned. A glissando sounds the distinct notes in between the two pitches and defaults to a wavy line. The optional text is printed alongside the line.")]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XmlSchemaClassGenerator", "2.1.1142.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute("glissando", Namespace="")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class Glissando : ILineType, IDashedFormatting, IPrintStyle, IOptionalUniqueId
    {

        /// <summary>
        /// <para xml:lang="en">Gets or sets the text value.</para>
        /// </summary>
        [System.Xml.Serialization.XmlTextAttribute()]
        public string Value { get; set; }

        [System.ComponentModel.DataAnnotations.RequiredAttribute(AllowEmptyStrings=true)]
        [System.Xml.Serialization.XmlAttributeAttribute("type")]
        public StartStop Type { get; set; }

        [System.Xml.Serialization.XmlIgnoreAttribute()]
        private byte _number = 1;

        /// <summary>
        /// <para>Slurs, tuplets, and many other features can be concurrent and overlap within a single musical part. The number-level entity distinguishes up to 16 concurrent objects of the same type when the objects overlap in MusicXML document order. Values greater than 6 are usually only needed for music with a large number of divisi staves in a single part, or if there are more than 6 cross-staff arpeggios in a single measure. When a number-level value is implied, the value is 1 by default.
        ///
        ///When polyphonic parts are involved, the ordering within a MusicXML document can differ from musical score order. As an example, say we have a piano part in 4/4 where within a single measure, all the notes on the top staff are followed by all the notes on the bottom staff. In this example, each staff has a slur that starts on beat 2 and stops on beat 3, and there is a third slur that goes from beat 1 of one staff to beat 4 of the other staff.
        ///
        ///In this situation, the two mid-measure slurs can use the same number because they do not overlap in MusicXML document order, even though they do overlap in musical score order. Within the MusicXML document, the top staff slur will both start and stop before the bottom staff slur starts and stops.
        ///
        ///If the cross-staff slur starts in the top staff and stops in the bottom staff, it will need a separate number from the mid-measure slurs because it overlaps those slurs in MusicXML document order. However, if the cross-staff slur starts in the bottom staff and stops in the top staff, all three slurs can use the same number. None of them overlap within the MusicXML document, even though they all overlap each other in the musical score order. Within the MusicXML document, the start and stop of the top-staff slur will be followed by the stop and start of the cross-staff slur, followed by the start and stop of the bottom-staff slur.
        ///
        ///As this example demonstrates, a reading program should be prepared to handle cases where the number-levels start and stop in an arbitrary order. Because the start and stop values refer to musical score order, a program may find the stopping point of an object earlier in the MusicXML document than it will find its starting point.</para>
        /// <para xml:lang="en">Minimum inclusive value: 1.</para>
        /// <para xml:lang="en">Maximum inclusive value: 16.</para>
        /// </summary>
        [System.ComponentModel.DefaultValueAttribute(1)]
        [System.ComponentModel.DataAnnotations.RangeAttribute(typeof(decimal), "1", "16")]
        [System.Xml.Serialization.XmlAttributeAttribute("number")]
        public byte Number
        {
            get
            {
                return _number;
            }
            set
            {
                _number = value;
            }
        }

        [System.Xml.Serialization.XmlAttributeAttribute("line-type")]
        public LineType LineType { get; set; }

        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the LineType property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool LineTypeSpecified { get; set; }

        /// <summary>
        /// <para>The tenths type is a number representing tenths of interline staff space (positive or negative). Both integer and decimal values are allowed, such as 5 for a half space and 2.5 for a quarter space. Interline space is measured from the middle of a staff line.
        ///
        ///Distances in a MusicXML file are measured in tenths of staff space. Tenths are then scaled to millimeters within the scaling element, used in the defaults element at the start of a score. Individual staves can apply a scaling factor to adjust staff size. When a MusicXML element or attribute refers to tenths, it means the global tenths defined by the scaling element, not the local tenths as adjusted by the staff-size element.</para>
        /// </summary>
        [System.Xml.Serialization.XmlAttributeAttribute("dash-length")]
        public decimal DashLength { get; set; }

        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the DashLength property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool DashLengthSpecified { get; set; }

        /// <summary>
        /// <para>The tenths type is a number representing tenths of interline staff space (positive or negative). Both integer and decimal values are allowed, such as 5 for a half space and 2.5 for a quarter space. Interline space is measured from the middle of a staff line.
        ///
        ///Distances in a MusicXML file are measured in tenths of staff space. Tenths are then scaled to millimeters within the scaling element, used in the defaults element at the start of a score. Individual staves can apply a scaling factor to adjust staff size. When a MusicXML element or attribute refers to tenths, it means the global tenths defined by the scaling element, not the local tenths as adjusted by the staff-size element.</para>
        /// </summary>
        [System.Xml.Serialization.XmlAttributeAttribute("space-length")]
        public decimal SpaceLength { get; set; }

        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the SpaceLength property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool SpaceLengthSpecified { get; set; }

        /// <summary>
        /// <para>The tenths type is a number representing tenths of interline staff space (positive or negative). Both integer and decimal values are allowed, such as 5 for a half space and 2.5 for a quarter space. Interline space is measured from the middle of a staff line.
        ///
        ///Distances in a MusicXML file are measured in tenths of staff space. Tenths are then scaled to millimeters within the scaling element, used in the defaults element at the start of a score. Individual staves can apply a scaling factor to adjust staff size. When a MusicXML element or attribute refers to tenths, it means the global tenths defined by the scaling element, not the local tenths as adjusted by the staff-size element.</para>
        /// </summary>
        [System.Xml.Serialization.XmlAttributeAttribute("default-x")]
        public decimal DefaultX { get; set; }

        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the DefaultX property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool DefaultXSpecified { get; set; }

        /// <summary>
        /// <para>The tenths type is a number representing tenths of interline staff space (positive or negative). Both integer and decimal values are allowed, such as 5 for a half space and 2.5 for a quarter space. Interline space is measured from the middle of a staff line.
        ///
        ///Distances in a MusicXML file are measured in tenths of staff space. Tenths are then scaled to millimeters within the scaling element, used in the defaults element at the start of a score. Individual staves can apply a scaling factor to adjust staff size. When a MusicXML element or attribute refers to tenths, it means the global tenths defined by the scaling element, not the local tenths as adjusted by the staff-size element.</para>
        /// </summary>
        [System.Xml.Serialization.XmlAttributeAttribute("default-y")]
        public decimal DefaultY { get; set; }

        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the DefaultY property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool DefaultYSpecified { get; set; }

        /// <summary>
        /// <para>The tenths type is a number representing tenths of interline staff space (positive or negative). Both integer and decimal values are allowed, such as 5 for a half space and 2.5 for a quarter space. Interline space is measured from the middle of a staff line.
        ///
        ///Distances in a MusicXML file are measured in tenths of staff space. Tenths are then scaled to millimeters within the scaling element, used in the defaults element at the start of a score. Individual staves can apply a scaling factor to adjust staff size. When a MusicXML element or attribute refers to tenths, it means the global tenths defined by the scaling element, not the local tenths as adjusted by the staff-size element.</para>
        /// </summary>
        [System.Xml.Serialization.XmlAttributeAttribute("relative-x")]
        public decimal RelativeX { get; set; }

        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the RelativeX property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool RelativeXSpecified { get; set; }

        /// <summary>
        /// <para>The tenths type is a number representing tenths of interline staff space (positive or negative). Both integer and decimal values are allowed, such as 5 for a half space and 2.5 for a quarter space. Interline space is measured from the middle of a staff line.
        ///
        ///Distances in a MusicXML file are measured in tenths of staff space. Tenths are then scaled to millimeters within the scaling element, used in the defaults element at the start of a score. Individual staves can apply a scaling factor to adjust staff size. When a MusicXML element or attribute refers to tenths, it means the global tenths defined by the scaling element, not the local tenths as adjusted by the staff-size element.</para>
        /// </summary>
        [System.Xml.Serialization.XmlAttributeAttribute("relative-y")]
        public decimal RelativeY { get; set; }

        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the RelativeY property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool RelativeYSpecified { get; set; }

        /// <summary>
        /// <para>The font-family is a comma-separated list of font names. These can be specific font styles such as Maestro or Opus, or one of several generic font styles: music, engraved, handwritten, text, serif, sans-serif, handwritten, cursive, fantasy, and monospace. The music, engraved, and handwritten values refer to music fonts; the rest refer to text fonts. The fantasy style refers to decorative text such as found in older German-style printing.</para>
        /// <para xml:lang="en">Pattern: [^,]+(, ?[^,]+)*.</para>
        /// </summary>
        [System.ComponentModel.DataAnnotations.RegularExpressionAttribute("[^,]+(, ?[^,]+)*")]
        [System.Xml.Serialization.XmlAttributeAttribute("font-family")]
        public string FontFamily { get; set; }

        [System.Xml.Serialization.XmlAttributeAttribute("font-style")]
        public FontStyle FontStyle { get; set; }

        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the FontStyle property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool FontStyleSpecified { get; set; }

        /// <summary>
        /// <para>The font-size can be one of the CSS font sizes (xx-small, x-small, small, medium, large, x-large, xx-large) or a numeric point size.</para>
        /// </summary>
        [System.Xml.Serialization.XmlAttributeAttribute("font-size")]
        public string FontSize { get; set; }

        [System.Xml.Serialization.XmlAttributeAttribute("font-weight")]
        public FontWeight FontWeight { get; set; }

        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the FontWeight property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool FontWeightSpecified { get; set; }

        /// <summary>
        /// <para>The color type indicates the color of an element. Color may be represented as hexadecimal RGB triples, as in HTML, or as hexadecimal ARGB tuples, with the A indicating alpha of transparency. An alpha value of 00 is totally transparent; FF is totally opaque. If RGB is used, the A value is assumed to be FF.
        ///
        ///For instance, the RGB value "#800080" represents purple. An ARGB value of "#40800080" would be a transparent purple.
        ///
        ///As in SVG 1.1, colors are defined in terms of the sRGB color space (IEC 61966).</para>
        /// <para xml:lang="en">Pattern: #[\dA-F]{6}([\dA-F][\dA-F])?.</para>
        /// </summary>
        [System.ComponentModel.DataAnnotations.RegularExpressionAttribute("#[\\dA-F]{6}([\\dA-F][\\dA-F])?")]
        [System.Xml.Serialization.XmlAttributeAttribute("color")]
        public string Color { get; set; }

        [System.Xml.Serialization.XmlAttributeAttribute("id")]
        public string Id { get; set; }
    }

    /// <summary>
    /// <para>The grace type indicates the presence of a grace note. The slash attribute for a grace note is yes for slashed grace notes. The steal-time-previous attribute indicates the percentage of time to steal from the previous note for the grace note. The steal-time-following attribute indicates the percentage of time to steal from the following note for the grace note, as for appoggiaturas. The make-time attribute indicates to make time, not steal time; the units are in real-time divisions for the grace note.</para>
    /// </summary>
    [System.ComponentModel.DescriptionAttribute(@"The grace type indicates the presence of a grace note. The slash attribute for a grace note is yes for slashed grace notes. The steal-time-previous attribute indicates the percentage of time to steal from the previous note for the grace note. The steal-time-following attribute indicates the percentage of time to steal from the following note for the grace note, as for appoggiaturas. The make-time attribute indicates to make time, not steal time; the units are in real-time divisions for the grace note.")]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XmlSchemaClassGenerator", "2.1.1142.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute("grace", Namespace="")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class Grace
    {

        /// <summary>
        /// <para>The percent type specifies a percentage from 0 to 100.</para>
        /// <para xml:lang="en">Minimum inclusive value: 0.</para>
        /// <para xml:lang="en">Maximum inclusive value: 100.</para>
        /// </summary>
        [System.ComponentModel.DataAnnotations.RangeAttribute(typeof(decimal), "0", "100")]
        [System.Xml.Serialization.XmlAttributeAttribute("steal-time-previous")]
        public decimal StealTimePrevious { get; set; }

        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the StealTimePrevious property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool StealTimePreviousSpecified { get; set; }

        /// <summary>
        /// <para>The percent type specifies a percentage from 0 to 100.</para>
        /// <para xml:lang="en">Minimum inclusive value: 0.</para>
        /// <para xml:lang="en">Maximum inclusive value: 100.</para>
        /// </summary>
        [System.ComponentModel.DataAnnotations.RangeAttribute(typeof(decimal), "0", "100")]
        [System.Xml.Serialization.XmlAttributeAttribute("steal-time-following")]
        public decimal StealTimeFollowing { get; set; }

        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the StealTimeFollowing property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool StealTimeFollowingSpecified { get; set; }

        /// <summary>
        /// <para>The divisions type is used to express values in terms of the musical divisions defined by the divisions element. It is preferred that these be integer values both for MIDI interoperability and to avoid roundoff errors.</para>
        /// </summary>
        [System.Xml.Serialization.XmlAttributeAttribute("make-time")]
        public decimal MakeTime { get; set; }

        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the MakeTime property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool MakeTimeSpecified { get; set; }

        [System.Xml.Serialization.XmlAttributeAttribute("slash")]
        public YesNo Slash { get; set; }

        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the Slash property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool SlashSpecified { get; set; }
    }

    /// <summary>
    /// <para>The hammer-on and pull-off elements are used in guitar and fretted instrument notation. Since a single slur can be marked over many notes, the hammer-on and pull-off elements are separate so the individual pair of notes can be specified. The element content can be used to specify how the hammer-on or pull-off should be notated. An empty element leaves this choice up to the application.</para>
    /// </summary>
    [System.ComponentModel.DescriptionAttribute(@"The hammer-on and pull-off elements are used in guitar and fretted instrument notation. Since a single slur can be marked over many notes, the hammer-on and pull-off elements are separate so the individual pair of notes can be specified. The element content can be used to specify how the hammer-on or pull-off should be notated. An empty element leaves this choice up to the application.")]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XmlSchemaClassGenerator", "2.1.1142.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute("hammer-on-pull-off", Namespace="")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class HammerOnPullOff : IPrintStyle, IPlacement
    {

        /// <summary>
        /// <para xml:lang="en">Gets or sets the text value.</para>
        /// </summary>
        [System.Xml.Serialization.XmlTextAttribute()]
        public string Value { get; set; }

        [System.ComponentModel.DataAnnotations.RequiredAttribute(AllowEmptyStrings=true)]
        [System.Xml.Serialization.XmlAttributeAttribute("type")]
        public StartStop Type { get; set; }

        [System.Xml.Serialization.XmlIgnoreAttribute()]
        private byte _number = 1;

        /// <summary>
        /// <para>Slurs, tuplets, and many other features can be concurrent and overlap within a single musical part. The number-level entity distinguishes up to 16 concurrent objects of the same type when the objects overlap in MusicXML document order. Values greater than 6 are usually only needed for music with a large number of divisi staves in a single part, or if there are more than 6 cross-staff arpeggios in a single measure. When a number-level value is implied, the value is 1 by default.
        ///
        ///When polyphonic parts are involved, the ordering within a MusicXML document can differ from musical score order. As an example, say we have a piano part in 4/4 where within a single measure, all the notes on the top staff are followed by all the notes on the bottom staff. In this example, each staff has a slur that starts on beat 2 and stops on beat 3, and there is a third slur that goes from beat 1 of one staff to beat 4 of the other staff.
        ///
        ///In this situation, the two mid-measure slurs can use the same number because they do not overlap in MusicXML document order, even though they do overlap in musical score order. Within the MusicXML document, the top staff slur will both start and stop before the bottom staff slur starts and stops.
        ///
        ///If the cross-staff slur starts in the top staff and stops in the bottom staff, it will need a separate number from the mid-measure slurs because it overlaps those slurs in MusicXML document order. However, if the cross-staff slur starts in the bottom staff and stops in the top staff, all three slurs can use the same number. None of them overlap within the MusicXML document, even though they all overlap each other in the musical score order. Within the MusicXML document, the start and stop of the top-staff slur will be followed by the stop and start of the cross-staff slur, followed by the start and stop of the bottom-staff slur.
        ///
        ///As this example demonstrates, a reading program should be prepared to handle cases where the number-levels start and stop in an arbitrary order. Because the start and stop values refer to musical score order, a program may find the stopping point of an object earlier in the MusicXML document than it will find its starting point.</para>
        /// <para xml:lang="en">Minimum inclusive value: 1.</para>
        /// <para xml:lang="en">Maximum inclusive value: 16.</para>
        /// </summary>
        [System.ComponentModel.DefaultValueAttribute(1)]
        [System.ComponentModel.DataAnnotations.RangeAttribute(typeof(decimal), "1", "16")]
        [System.Xml.Serialization.XmlAttributeAttribute("number")]
        public byte Number
        {
            get
            {
                return _number;
            }
            set
            {
                _number = value;
            }
        }

        /// <summary>
        /// <para>The tenths type is a number representing tenths of interline staff space (positive or negative). Both integer and decimal values are allowed, such as 5 for a half space and 2.5 for a quarter space. Interline space is measured from the middle of a staff line.
        ///
        ///Distances in a MusicXML file are measured in tenths of staff space. Tenths are then scaled to millimeters within the scaling element, used in the defaults element at the start of a score. Individual staves can apply a scaling factor to adjust staff size. When a MusicXML element or attribute refers to tenths, it means the global tenths defined by the scaling element, not the local tenths as adjusted by the staff-size element.</para>
        /// </summary>
        [System.Xml.Serialization.XmlAttributeAttribute("default-x")]
        public decimal DefaultX { get; set; }

        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the DefaultX property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool DefaultXSpecified { get; set; }

        /// <summary>
        /// <para>The tenths type is a number representing tenths of interline staff space (positive or negative). Both integer and decimal values are allowed, such as 5 for a half space and 2.5 for a quarter space. Interline space is measured from the middle of a staff line.
        ///
        ///Distances in a MusicXML file are measured in tenths of staff space. Tenths are then scaled to millimeters within the scaling element, used in the defaults element at the start of a score. Individual staves can apply a scaling factor to adjust staff size. When a MusicXML element or attribute refers to tenths, it means the global tenths defined by the scaling element, not the local tenths as adjusted by the staff-size element.</para>
        /// </summary>
        [System.Xml.Serialization.XmlAttributeAttribute("default-y")]
        public decimal DefaultY { get; set; }

        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the DefaultY property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool DefaultYSpecified { get; set; }

        /// <summary>
        /// <para>The tenths type is a number representing tenths of interline staff space (positive or negative). Both integer and decimal values are allowed, such as 5 for a half space and 2.5 for a quarter space. Interline space is measured from the middle of a staff line.
        ///
        ///Distances in a MusicXML file are measured in tenths of staff space. Tenths are then scaled to millimeters within the scaling element, used in the defaults element at the start of a score. Individual staves can apply a scaling factor to adjust staff size. When a MusicXML element or attribute refers to tenths, it means the global tenths defined by the scaling element, not the local tenths as adjusted by the staff-size element.</para>
        /// </summary>
        [System.Xml.Serialization.XmlAttributeAttribute("relative-x")]
        public decimal RelativeX { get; set; }

        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the RelativeX property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool RelativeXSpecified { get; set; }

        /// <summary>
        /// <para>The tenths type is a number representing tenths of interline staff space (positive or negative). Both integer and decimal values are allowed, such as 5 for a half space and 2.5 for a quarter space. Interline space is measured from the middle of a staff line.
        ///
        ///Distances in a MusicXML file are measured in tenths of staff space. Tenths are then scaled to millimeters within the scaling element, used in the defaults element at the start of a score. Individual staves can apply a scaling factor to adjust staff size. When a MusicXML element or attribute refers to tenths, it means the global tenths defined by the scaling element, not the local tenths as adjusted by the staff-size element.</para>
        /// </summary>
        [System.Xml.Serialization.XmlAttributeAttribute("relative-y")]
        public decimal RelativeY { get; set; }

        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the RelativeY property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool RelativeYSpecified { get; set; }

        /// <summary>
        /// <para>The font-family is a comma-separated list of font names. These can be specific font styles such as Maestro or Opus, or one of several generic font styles: music, engraved, handwritten, text, serif, sans-serif, handwritten, cursive, fantasy, and monospace. The music, engraved, and handwritten values refer to music fonts; the rest refer to text fonts. The fantasy style refers to decorative text such as found in older German-style printing.</para>
        /// <para xml:lang="en">Pattern: [^,]+(, ?[^,]+)*.</para>
        /// </summary>
        [System.ComponentModel.DataAnnotations.RegularExpressionAttribute("[^,]+(, ?[^,]+)*")]
        [System.Xml.Serialization.XmlAttributeAttribute("font-family")]
        public string FontFamily { get; set; }

        [System.Xml.Serialization.XmlAttributeAttribute("font-style")]
        public FontStyle FontStyle { get; set; }

        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the FontStyle property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool FontStyleSpecified { get; set; }

        /// <summary>
        /// <para>The font-size can be one of the CSS font sizes (xx-small, x-small, small, medium, large, x-large, xx-large) or a numeric point size.</para>
        /// </summary>
        [System.Xml.Serialization.XmlAttributeAttribute("font-size")]
        public string FontSize { get; set; }

        [System.Xml.Serialization.XmlAttributeAttribute("font-weight")]
        public FontWeight FontWeight { get; set; }

        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the FontWeight property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool FontWeightSpecified { get; set; }

        /// <summary>
        /// <para>The color type indicates the color of an element. Color may be represented as hexadecimal RGB triples, as in HTML, or as hexadecimal ARGB tuples, with the A indicating alpha of transparency. An alpha value of 00 is totally transparent; FF is totally opaque. If RGB is used, the A value is assumed to be FF.
        ///
        ///For instance, the RGB value "#800080" represents purple. An ARGB value of "#40800080" would be a transparent purple.
        ///
        ///As in SVG 1.1, colors are defined in terms of the sRGB color space (IEC 61966).</para>
        /// <para xml:lang="en">Pattern: #[\dA-F]{6}([\dA-F][\dA-F])?.</para>
        /// </summary>
        [System.ComponentModel.DataAnnotations.RegularExpressionAttribute("#[\\dA-F]{6}([\\dA-F][\\dA-F])?")]
        [System.Xml.Serialization.XmlAttributeAttribute("color")]
        public string Color { get; set; }

        [System.Xml.Serialization.XmlAttributeAttribute("placement")]
        public AboveBelow Placement { get; set; }

        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the Placement property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool PlacementSpecified { get; set; }
    }

    /// <summary>
    /// <para>The handbell element represents notation for various techniques used in handbell and handchime music.</para>
    /// </summary>
    [System.ComponentModel.DescriptionAttribute("The handbell element represents notation for various techniques used in handbell " +
        "and handchime music.")]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XmlSchemaClassGenerator", "2.1.1142.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute("handbell", Namespace="")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class Handbell : IPrintStyle, IPlacement
    {

        /// <summary>
        /// <para xml:lang="en">Gets or sets the text value.</para>
        /// </summary>
        [System.Xml.Serialization.XmlTextAttribute()]
        public HandbellValue Value { get; set; }

        /// <summary>
        /// <para>The tenths type is a number representing tenths of interline staff space (positive or negative). Both integer and decimal values are allowed, such as 5 for a half space and 2.5 for a quarter space. Interline space is measured from the middle of a staff line.
        ///
        ///Distances in a MusicXML file are measured in tenths of staff space. Tenths are then scaled to millimeters within the scaling element, used in the defaults element at the start of a score. Individual staves can apply a scaling factor to adjust staff size. When a MusicXML element or attribute refers to tenths, it means the global tenths defined by the scaling element, not the local tenths as adjusted by the staff-size element.</para>
        /// </summary>
        [System.Xml.Serialization.XmlAttributeAttribute("default-x")]
        public decimal DefaultX { get; set; }

        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the DefaultX property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool DefaultXSpecified { get; set; }

        /// <summary>
        /// <para>The tenths type is a number representing tenths of interline staff space (positive or negative). Both integer and decimal values are allowed, such as 5 for a half space and 2.5 for a quarter space. Interline space is measured from the middle of a staff line.
        ///
        ///Distances in a MusicXML file are measured in tenths of staff space. Tenths are then scaled to millimeters within the scaling element, used in the defaults element at the start of a score. Individual staves can apply a scaling factor to adjust staff size. When a MusicXML element or attribute refers to tenths, it means the global tenths defined by the scaling element, not the local tenths as adjusted by the staff-size element.</para>
        /// </summary>
        [System.Xml.Serialization.XmlAttributeAttribute("default-y")]
        public decimal DefaultY { get; set; }

        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the DefaultY property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool DefaultYSpecified { get; set; }

        /// <summary>
        /// <para>The tenths type is a number representing tenths of interline staff space (positive or negative). Both integer and decimal values are allowed, such as 5 for a half space and 2.5 for a quarter space. Interline space is measured from the middle of a staff line.
        ///
        ///Distances in a MusicXML file are measured in tenths of staff space. Tenths are then scaled to millimeters within the scaling element, used in the defaults element at the start of a score. Individual staves can apply a scaling factor to adjust staff size. When a MusicXML element or attribute refers to tenths, it means the global tenths defined by the scaling element, not the local tenths as adjusted by the staff-size element.</para>
        /// </summary>
        [System.Xml.Serialization.XmlAttributeAttribute("relative-x")]
        public decimal RelativeX { get; set; }

        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the RelativeX property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool RelativeXSpecified { get; set; }

        /// <summary>
        /// <para>The tenths type is a number representing tenths of interline staff space (positive or negative). Both integer and decimal values are allowed, such as 5 for a half space and 2.5 for a quarter space. Interline space is measured from the middle of a staff line.
        ///
        ///Distances in a MusicXML file are measured in tenths of staff space. Tenths are then scaled to millimeters within the scaling element, used in the defaults element at the start of a score. Individual staves can apply a scaling factor to adjust staff size. When a MusicXML element or attribute refers to tenths, it means the global tenths defined by the scaling element, not the local tenths as adjusted by the staff-size element.</para>
        /// </summary>
        [System.Xml.Serialization.XmlAttributeAttribute("relative-y")]
        public decimal RelativeY { get; set; }

        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the RelativeY property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool RelativeYSpecified { get; set; }

        /// <summary>
        /// <para>The font-family is a comma-separated list of font names. These can be specific font styles such as Maestro or Opus, or one of several generic font styles: music, engraved, handwritten, text, serif, sans-serif, handwritten, cursive, fantasy, and monospace. The music, engraved, and handwritten values refer to music fonts; the rest refer to text fonts. The fantasy style refers to decorative text such as found in older German-style printing.</para>
        /// <para xml:lang="en">Pattern: [^,]+(, ?[^,]+)*.</para>
        /// </summary>
        [System.ComponentModel.DataAnnotations.RegularExpressionAttribute("[^,]+(, ?[^,]+)*")]
        [System.Xml.Serialization.XmlAttributeAttribute("font-family")]
        public string FontFamily { get; set; }

        [System.Xml.Serialization.XmlAttributeAttribute("font-style")]
        public FontStyle FontStyle { get; set; }

        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the FontStyle property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool FontStyleSpecified { get; set; }

        /// <summary>
        /// <para>The font-size can be one of the CSS font sizes (xx-small, x-small, small, medium, large, x-large, xx-large) or a numeric point size.</para>
        /// </summary>
        [System.Xml.Serialization.XmlAttributeAttribute("font-size")]
        public string FontSize { get; set; }

        [System.Xml.Serialization.XmlAttributeAttribute("font-weight")]
        public FontWeight FontWeight { get; set; }

        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the FontWeight property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool FontWeightSpecified { get; set; }

        /// <summary>
        /// <para>The color type indicates the color of an element. Color may be represented as hexadecimal RGB triples, as in HTML, or as hexadecimal ARGB tuples, with the A indicating alpha of transparency. An alpha value of 00 is totally transparent; FF is totally opaque. If RGB is used, the A value is assumed to be FF.
        ///
        ///For instance, the RGB value "#800080" represents purple. An ARGB value of "#40800080" would be a transparent purple.
        ///
        ///As in SVG 1.1, colors are defined in terms of the sRGB color space (IEC 61966).</para>
        /// <para xml:lang="en">Pattern: #[\dA-F]{6}([\dA-F][\dA-F])?.</para>
        /// </summary>
        [System.ComponentModel.DataAnnotations.RegularExpressionAttribute("#[\\dA-F]{6}([\\dA-F][\\dA-F])?")]
        [System.Xml.Serialization.XmlAttributeAttribute("color")]
        public string Color { get; set; }

        [System.Xml.Serialization.XmlAttributeAttribute("placement")]
        public AboveBelow Placement { get; set; }

        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the Placement property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool PlacementSpecified { get; set; }
    }

    /// <summary>
    /// <para>The harmon-closed type represents whether the harmon mute is closed, open, or half-open. The optional location attribute indicates which portion of the symbol is filled in when the element value is half.</para>
    /// </summary>
    [System.ComponentModel.DescriptionAttribute("The harmon-closed type represents whether the harmon mute is closed, open, or hal" +
        "f-open. The optional location attribute indicates which portion of the symbol is" +
        " filled in when the element value is half.")]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XmlSchemaClassGenerator", "2.1.1142.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute("harmon-closed", Namespace="")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class HarmonClosed
    {

        /// <summary>
        /// <para xml:lang="en">Gets or sets the text value.</para>
        /// </summary>
        [System.Xml.Serialization.XmlTextAttribute()]
        public HarmonClosedValue Value { get; set; }

        [System.Xml.Serialization.XmlAttributeAttribute("location")]
        public HarmonClosedLocation Location { get; set; }

        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the Location property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool LocationSpecified { get; set; }
    }

    /// <summary>
    /// <para>The harmon-mute type represents the symbols used for harmon mutes in brass notation.</para>
    /// </summary>
    [System.ComponentModel.DescriptionAttribute("The harmon-mute type represents the symbols used for harmon mutes in brass notati" +
        "on.")]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XmlSchemaClassGenerator", "2.1.1142.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute("harmon-mute", Namespace="")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class HarmonMute : IPrintStyle, IPlacement
    {

        [System.ComponentModel.DataAnnotations.RequiredAttribute(AllowEmptyStrings=true)]
        [System.Xml.Serialization.XmlElementAttribute("harmon-closed")]
        public HarmonClosed HarmonClosed { get; set; }

        /// <summary>
        /// <para>The tenths type is a number representing tenths of interline staff space (positive or negative). Both integer and decimal values are allowed, such as 5 for a half space and 2.5 for a quarter space. Interline space is measured from the middle of a staff line.
        ///
        ///Distances in a MusicXML file are measured in tenths of staff space. Tenths are then scaled to millimeters within the scaling element, used in the defaults element at the start of a score. Individual staves can apply a scaling factor to adjust staff size. When a MusicXML element or attribute refers to tenths, it means the global tenths defined by the scaling element, not the local tenths as adjusted by the staff-size element.</para>
        /// </summary>
        [System.Xml.Serialization.XmlAttributeAttribute("default-x")]
        public decimal DefaultX { get; set; }

        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the DefaultX property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool DefaultXSpecified { get; set; }

        /// <summary>
        /// <para>The tenths type is a number representing tenths of interline staff space (positive or negative). Both integer and decimal values are allowed, such as 5 for a half space and 2.5 for a quarter space. Interline space is measured from the middle of a staff line.
        ///
        ///Distances in a MusicXML file are measured in tenths of staff space. Tenths are then scaled to millimeters within the scaling element, used in the defaults element at the start of a score. Individual staves can apply a scaling factor to adjust staff size. When a MusicXML element or attribute refers to tenths, it means the global tenths defined by the scaling element, not the local tenths as adjusted by the staff-size element.</para>
        /// </summary>
        [System.Xml.Serialization.XmlAttributeAttribute("default-y")]
        public decimal DefaultY { get; set; }

        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the DefaultY property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool DefaultYSpecified { get; set; }

        /// <summary>
        /// <para>The tenths type is a number representing tenths of interline staff space (positive or negative). Both integer and decimal values are allowed, such as 5 for a half space and 2.5 for a quarter space. Interline space is measured from the middle of a staff line.
        ///
        ///Distances in a MusicXML file are measured in tenths of staff space. Tenths are then scaled to millimeters within the scaling element, used in the defaults element at the start of a score. Individual staves can apply a scaling factor to adjust staff size. When a MusicXML element or attribute refers to tenths, it means the global tenths defined by the scaling element, not the local tenths as adjusted by the staff-size element.</para>
        /// </summary>
        [System.Xml.Serialization.XmlAttributeAttribute("relative-x")]
        public decimal RelativeX { get; set; }

        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the RelativeX property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool RelativeXSpecified { get; set; }

        /// <summary>
        /// <para>The tenths type is a number representing tenths of interline staff space (positive or negative). Both integer and decimal values are allowed, such as 5 for a half space and 2.5 for a quarter space. Interline space is measured from the middle of a staff line.
        ///
        ///Distances in a MusicXML file are measured in tenths of staff space. Tenths are then scaled to millimeters within the scaling element, used in the defaults element at the start of a score. Individual staves can apply a scaling factor to adjust staff size. When a MusicXML element or attribute refers to tenths, it means the global tenths defined by the scaling element, not the local tenths as adjusted by the staff-size element.</para>
        /// </summary>
        [System.Xml.Serialization.XmlAttributeAttribute("relative-y")]
        public decimal RelativeY { get; set; }

        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the RelativeY property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool RelativeYSpecified { get; set; }

        /// <summary>
        /// <para>The font-family is a comma-separated list of font names. These can be specific font styles such as Maestro or Opus, or one of several generic font styles: music, engraved, handwritten, text, serif, sans-serif, handwritten, cursive, fantasy, and monospace. The music, engraved, and handwritten values refer to music fonts; the rest refer to text fonts. The fantasy style refers to decorative text such as found in older German-style printing.</para>
        /// <para xml:lang="en">Pattern: [^,]+(, ?[^,]+)*.</para>
        /// </summary>
        [System.ComponentModel.DataAnnotations.RegularExpressionAttribute("[^,]+(, ?[^,]+)*")]
        [System.Xml.Serialization.XmlAttributeAttribute("font-family")]
        public string FontFamily { get; set; }

        [System.Xml.Serialization.XmlAttributeAttribute("font-style")]
        public FontStyle FontStyle { get; set; }

        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the FontStyle property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool FontStyleSpecified { get; set; }

        /// <summary>
        /// <para>The font-size can be one of the CSS font sizes (xx-small, x-small, small, medium, large, x-large, xx-large) or a numeric point size.</para>
        /// </summary>
        [System.Xml.Serialization.XmlAttributeAttribute("font-size")]
        public string FontSize { get; set; }

        [System.Xml.Serialization.XmlAttributeAttribute("font-weight")]
        public FontWeight FontWeight { get; set; }

        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the FontWeight property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool FontWeightSpecified { get; set; }

        /// <summary>
        /// <para>The color type indicates the color of an element. Color may be represented as hexadecimal RGB triples, as in HTML, or as hexadecimal ARGB tuples, with the A indicating alpha of transparency. An alpha value of 00 is totally transparent; FF is totally opaque. If RGB is used, the A value is assumed to be FF.
        ///
        ///For instance, the RGB value "#800080" represents purple. An ARGB value of "#40800080" would be a transparent purple.
        ///
        ///As in SVG 1.1, colors are defined in terms of the sRGB color space (IEC 61966).</para>
        /// <para xml:lang="en">Pattern: #[\dA-F]{6}([\dA-F][\dA-F])?.</para>
        /// </summary>
        [System.ComponentModel.DataAnnotations.RegularExpressionAttribute("#[\\dA-F]{6}([\\dA-F][\\dA-F])?")]
        [System.Xml.Serialization.XmlAttributeAttribute("color")]
        public string Color { get; set; }

        [System.Xml.Serialization.XmlAttributeAttribute("placement")]
        public AboveBelow Placement { get; set; }

        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the Placement property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool PlacementSpecified { get; set; }
    }

    /// <summary>
    /// <para>The harmonic type indicates natural and artificial harmonics. Allowing the type of pitch to be specified, combined with controls for appearance/playback differences, allows both the notation and the sound to be represented. Artificial harmonics can add a notated touching pitch; artificial pinch harmonics will usually not notate a touching pitch. The attributes for the harmonic element refer to the use of the circular harmonic symbol, typically but not always used with natural harmonics.</para>
    /// </summary>
    [System.ComponentModel.DescriptionAttribute(@"The harmonic type indicates natural and artificial harmonics. Allowing the type of pitch to be specified, combined with controls for appearance/playback differences, allows both the notation and the sound to be represented. Artificial harmonics can add a notated touching pitch; artificial pinch harmonics will usually not notate a touching pitch. The attributes for the harmonic element refer to the use of the circular harmonic symbol, typically but not always used with natural harmonics.")]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XmlSchemaClassGenerator", "2.1.1142.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute("harmonic", Namespace="")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class Harmonic : IPrintObject, IPrintStyle, IPlacement
    {

        /// <summary>
        /// <para>The natural element indicates that this is a natural harmonic. These are usually notated at base pitch rather than sounding pitch.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("The natural element indicates that this is a natural harmonic. These are usually " +
            "notated at base pitch rather than sounding pitch.")]
        [System.Xml.Serialization.XmlElementAttribute("natural")]
        public Empty Natural { get; set; }

        /// <summary>
        /// <para>The artificial element indicates that this is an artificial harmonic.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("The artificial element indicates that this is an artificial harmonic.")]
        [System.Xml.Serialization.XmlElementAttribute("artificial")]
        public Empty Artificial { get; set; }

        /// <summary>
        /// <para>The base pitch is the pitch at which the string is played before touching to create the harmonic.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("The base pitch is the pitch at which the string is played before touching to crea" +
            "te the harmonic.")]
        [System.Xml.Serialization.XmlElementAttribute("base-pitch")]
        public Empty BasePitch { get; set; }

        /// <summary>
        /// <para>The touching-pitch is the pitch at which the string is touched lightly to produce the harmonic.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("The touching-pitch is the pitch at which the string is touched lightly to produce" +
            " the harmonic.")]
        [System.Xml.Serialization.XmlElementAttribute("touching-pitch")]
        public Empty TouchingPitch { get; set; }

        /// <summary>
        /// <para>The sounding-pitch is the pitch which is heard when playing the harmonic.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("The sounding-pitch is the pitch which is heard when playing the harmonic.")]
        [System.Xml.Serialization.XmlElementAttribute("sounding-pitch")]
        public Empty SoundingPitch { get; set; }

        [System.Xml.Serialization.XmlAttributeAttribute("print-object")]
        public YesNo PrintObject { get; set; }

        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the PrintObject property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool PrintObjectSpecified { get; set; }

        /// <summary>
        /// <para>The tenths type is a number representing tenths of interline staff space (positive or negative). Both integer and decimal values are allowed, such as 5 for a half space and 2.5 for a quarter space. Interline space is measured from the middle of a staff line.
        ///
        ///Distances in a MusicXML file are measured in tenths of staff space. Tenths are then scaled to millimeters within the scaling element, used in the defaults element at the start of a score. Individual staves can apply a scaling factor to adjust staff size. When a MusicXML element or attribute refers to tenths, it means the global tenths defined by the scaling element, not the local tenths as adjusted by the staff-size element.</para>
        /// </summary>
        [System.Xml.Serialization.XmlAttributeAttribute("default-x")]
        public decimal DefaultX { get; set; }

        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the DefaultX property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool DefaultXSpecified { get; set; }

        /// <summary>
        /// <para>The tenths type is a number representing tenths of interline staff space (positive or negative). Both integer and decimal values are allowed, such as 5 for a half space and 2.5 for a quarter space. Interline space is measured from the middle of a staff line.
        ///
        ///Distances in a MusicXML file are measured in tenths of staff space. Tenths are then scaled to millimeters within the scaling element, used in the defaults element at the start of a score. Individual staves can apply a scaling factor to adjust staff size. When a MusicXML element or attribute refers to tenths, it means the global tenths defined by the scaling element, not the local tenths as adjusted by the staff-size element.</para>
        /// </summary>
        [System.Xml.Serialization.XmlAttributeAttribute("default-y")]
        public decimal DefaultY { get; set; }

        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the DefaultY property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool DefaultYSpecified { get; set; }

        /// <summary>
        /// <para>The tenths type is a number representing tenths of interline staff space (positive or negative). Both integer and decimal values are allowed, such as 5 for a half space and 2.5 for a quarter space. Interline space is measured from the middle of a staff line.
        ///
        ///Distances in a MusicXML file are measured in tenths of staff space. Tenths are then scaled to millimeters within the scaling element, used in the defaults element at the start of a score. Individual staves can apply a scaling factor to adjust staff size. When a MusicXML element or attribute refers to tenths, it means the global tenths defined by the scaling element, not the local tenths as adjusted by the staff-size element.</para>
        /// </summary>
        [System.Xml.Serialization.XmlAttributeAttribute("relative-x")]
        public decimal RelativeX { get; set; }

        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the RelativeX property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool RelativeXSpecified { get; set; }

        /// <summary>
        /// <para>The tenths type is a number representing tenths of interline staff space (positive or negative). Both integer and decimal values are allowed, such as 5 for a half space and 2.5 for a quarter space. Interline space is measured from the middle of a staff line.
        ///
        ///Distances in a MusicXML file are measured in tenths of staff space. Tenths are then scaled to millimeters within the scaling element, used in the defaults element at the start of a score. Individual staves can apply a scaling factor to adjust staff size. When a MusicXML element or attribute refers to tenths, it means the global tenths defined by the scaling element, not the local tenths as adjusted by the staff-size element.</para>
        /// </summary>
        [System.Xml.Serialization.XmlAttributeAttribute("relative-y")]
        public decimal RelativeY { get; set; }

        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the RelativeY property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool RelativeYSpecified { get; set; }

        /// <summary>
        /// <para>The font-family is a comma-separated list of font names. These can be specific font styles such as Maestro or Opus, or one of several generic font styles: music, engraved, handwritten, text, serif, sans-serif, handwritten, cursive, fantasy, and monospace. The music, engraved, and handwritten values refer to music fonts; the rest refer to text fonts. The fantasy style refers to decorative text such as found in older German-style printing.</para>
        /// <para xml:lang="en">Pattern: [^,]+(, ?[^,]+)*.</para>
        /// </summary>
        [System.ComponentModel.DataAnnotations.RegularExpressionAttribute("[^,]+(, ?[^,]+)*")]
        [System.Xml.Serialization.XmlAttributeAttribute("font-family")]
        public string FontFamily { get; set; }

        [System.Xml.Serialization.XmlAttributeAttribute("font-style")]
        public FontStyle FontStyle { get; set; }

        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the FontStyle property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool FontStyleSpecified { get; set; }

        /// <summary>
        /// <para>The font-size can be one of the CSS font sizes (xx-small, x-small, small, medium, large, x-large, xx-large) or a numeric point size.</para>
        /// </summary>
        [System.Xml.Serialization.XmlAttributeAttribute("font-size")]
        public string FontSize { get; set; }

        [System.Xml.Serialization.XmlAttributeAttribute("font-weight")]
        public FontWeight FontWeight { get; set; }

        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the FontWeight property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool FontWeightSpecified { get; set; }

        /// <summary>
        /// <para>The color type indicates the color of an element. Color may be represented as hexadecimal RGB triples, as in HTML, or as hexadecimal ARGB tuples, with the A indicating alpha of transparency. An alpha value of 00 is totally transparent; FF is totally opaque. If RGB is used, the A value is assumed to be FF.
        ///
        ///For instance, the RGB value "#800080" represents purple. An ARGB value of "#40800080" would be a transparent purple.
        ///
        ///As in SVG 1.1, colors are defined in terms of the sRGB color space (IEC 61966).</para>
        /// <para xml:lang="en">Pattern: #[\dA-F]{6}([\dA-F][\dA-F])?.</para>
        /// </summary>
        [System.ComponentModel.DataAnnotations.RegularExpressionAttribute("#[\\dA-F]{6}([\\dA-F][\\dA-F])?")]
        [System.Xml.Serialization.XmlAttributeAttribute("color")]
        public string Color { get; set; }

        [System.Xml.Serialization.XmlAttributeAttribute("placement")]
        public AboveBelow Placement { get; set; }

        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the Placement property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool PlacementSpecified { get; set; }
    }

    /// <summary>
    /// <para>The heel and toe elements are used with organ pedals. The substitution value is "no" if the attribute is not present.</para>
    /// </summary>
    [System.ComponentModel.DescriptionAttribute("The heel and toe elements are used with organ pedals. The substitution value is \"" +
        "no\" if the attribute is not present.")]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XmlSchemaClassGenerator", "2.1.1142.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute("heel-toe", Namespace="")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class HeelToe : EmptyPlacement
    {

        [System.Xml.Serialization.XmlAttributeAttribute("substitution")]
        public YesNo Substitution { get; set; }

        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the Substitution property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool SubstitutionSpecified { get; set; }
    }

    /// <summary>
    /// <para>The hole type represents the symbols used for woodwind and brass fingerings as well as other notations.</para>
    /// </summary>
    [System.ComponentModel.DescriptionAttribute("The hole type represents the symbols used for woodwind and brass fingerings as we" +
        "ll as other notations.")]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XmlSchemaClassGenerator", "2.1.1142.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute("hole", Namespace="")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class Hole : IPrintStyle, IPlacement
    {

        /// <summary>
        /// <para>The content of the optional hole-type element indicates what the hole symbol represents in terms of instrument fingering or other techniques.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("The content of the optional hole-type element indicates what the hole symbol repr" +
            "esents in terms of instrument fingering or other techniques.")]
        [System.Xml.Serialization.XmlElementAttribute("hole-type")]
        public string HoleType { get; set; }

        [System.ComponentModel.DataAnnotations.RequiredAttribute(AllowEmptyStrings=true)]
        [System.Xml.Serialization.XmlElementAttribute("hole-closed")]
        public HoleClosed HoleClosed { get; set; }

        /// <summary>
        /// <para>The optional hole-shape element indicates the shape of the hole symbol; the default is a circle.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("The optional hole-shape element indicates the shape of the hole symbol; the defau" +
            "lt is a circle.")]
        [System.Xml.Serialization.XmlElementAttribute("hole-shape")]
        public string HoleShape { get; set; }

        /// <summary>
        /// <para>The tenths type is a number representing tenths of interline staff space (positive or negative). Both integer and decimal values are allowed, such as 5 for a half space and 2.5 for a quarter space. Interline space is measured from the middle of a staff line.
        ///
        ///Distances in a MusicXML file are measured in tenths of staff space. Tenths are then scaled to millimeters within the scaling element, used in the defaults element at the start of a score. Individual staves can apply a scaling factor to adjust staff size. When a MusicXML element or attribute refers to tenths, it means the global tenths defined by the scaling element, not the local tenths as adjusted by the staff-size element.</para>
        /// </summary>
        [System.Xml.Serialization.XmlAttributeAttribute("default-x")]
        public decimal DefaultX { get; set; }

        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the DefaultX property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool DefaultXSpecified { get; set; }

        /// <summary>
        /// <para>The tenths type is a number representing tenths of interline staff space (positive or negative). Both integer and decimal values are allowed, such as 5 for a half space and 2.5 for a quarter space. Interline space is measured from the middle of a staff line.
        ///
        ///Distances in a MusicXML file are measured in tenths of staff space. Tenths are then scaled to millimeters within the scaling element, used in the defaults element at the start of a score. Individual staves can apply a scaling factor to adjust staff size. When a MusicXML element or attribute refers to tenths, it means the global tenths defined by the scaling element, not the local tenths as adjusted by the staff-size element.</para>
        /// </summary>
        [System.Xml.Serialization.XmlAttributeAttribute("default-y")]
        public decimal DefaultY { get; set; }

        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the DefaultY property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool DefaultYSpecified { get; set; }

        /// <summary>
        /// <para>The tenths type is a number representing tenths of interline staff space (positive or negative). Both integer and decimal values are allowed, such as 5 for a half space and 2.5 for a quarter space. Interline space is measured from the middle of a staff line.
        ///
        ///Distances in a MusicXML file are measured in tenths of staff space. Tenths are then scaled to millimeters within the scaling element, used in the defaults element at the start of a score. Individual staves can apply a scaling factor to adjust staff size. When a MusicXML element or attribute refers to tenths, it means the global tenths defined by the scaling element, not the local tenths as adjusted by the staff-size element.</para>
        /// </summary>
        [System.Xml.Serialization.XmlAttributeAttribute("relative-x")]
        public decimal RelativeX { get; set; }

        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the RelativeX property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool RelativeXSpecified { get; set; }

        /// <summary>
        /// <para>The tenths type is a number representing tenths of interline staff space (positive or negative). Both integer and decimal values are allowed, such as 5 for a half space and 2.5 for a quarter space. Interline space is measured from the middle of a staff line.
        ///
        ///Distances in a MusicXML file are measured in tenths of staff space. Tenths are then scaled to millimeters within the scaling element, used in the defaults element at the start of a score. Individual staves can apply a scaling factor to adjust staff size. When a MusicXML element or attribute refers to tenths, it means the global tenths defined by the scaling element, not the local tenths as adjusted by the staff-size element.</para>
        /// </summary>
        [System.Xml.Serialization.XmlAttributeAttribute("relative-y")]
        public decimal RelativeY { get; set; }

        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the RelativeY property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool RelativeYSpecified { get; set; }

        /// <summary>
        /// <para>The font-family is a comma-separated list of font names. These can be specific font styles such as Maestro or Opus, or one of several generic font styles: music, engraved, handwritten, text, serif, sans-serif, handwritten, cursive, fantasy, and monospace. The music, engraved, and handwritten values refer to music fonts; the rest refer to text fonts. The fantasy style refers to decorative text such as found in older German-style printing.</para>
        /// <para xml:lang="en">Pattern: [^,]+(, ?[^,]+)*.</para>
        /// </summary>
        [System.ComponentModel.DataAnnotations.RegularExpressionAttribute("[^,]+(, ?[^,]+)*")]
        [System.Xml.Serialization.XmlAttributeAttribute("font-family")]
        public string FontFamily { get; set; }

        [System.Xml.Serialization.XmlAttributeAttribute("font-style")]
        public FontStyle FontStyle { get; set; }

        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the FontStyle property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool FontStyleSpecified { get; set; }

        /// <summary>
        /// <para>The font-size can be one of the CSS font sizes (xx-small, x-small, small, medium, large, x-large, xx-large) or a numeric point size.</para>
        /// </summary>
        [System.Xml.Serialization.XmlAttributeAttribute("font-size")]
        public string FontSize { get; set; }

        [System.Xml.Serialization.XmlAttributeAttribute("font-weight")]
        public FontWeight FontWeight { get; set; }

        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the FontWeight property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool FontWeightSpecified { get; set; }

        /// <summary>
        /// <para>The color type indicates the color of an element. Color may be represented as hexadecimal RGB triples, as in HTML, or as hexadecimal ARGB tuples, with the A indicating alpha of transparency. An alpha value of 00 is totally transparent; FF is totally opaque. If RGB is used, the A value is assumed to be FF.
        ///
        ///For instance, the RGB value "#800080" represents purple. An ARGB value of "#40800080" would be a transparent purple.
        ///
        ///As in SVG 1.1, colors are defined in terms of the sRGB color space (IEC 61966).</para>
        /// <para xml:lang="en">Pattern: #[\dA-F]{6}([\dA-F][\dA-F])?.</para>
        /// </summary>
        [System.ComponentModel.DataAnnotations.RegularExpressionAttribute("#[\\dA-F]{6}([\\dA-F][\\dA-F])?")]
        [System.Xml.Serialization.XmlAttributeAttribute("color")]
        public string Color { get; set; }

        [System.Xml.Serialization.XmlAttributeAttribute("placement")]
        public AboveBelow Placement { get; set; }

        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the Placement property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool PlacementSpecified { get; set; }
    }

    /// <summary>
    /// <para>The hole-closed type represents whether the hole is closed, open, or half-open. The optional location attribute indicates which portion of the hole is filled in when the element value is half.</para>
    /// </summary>
    [System.ComponentModel.DescriptionAttribute("The hole-closed type represents whether the hole is closed, open, or half-open. T" +
        "he optional location attribute indicates which portion of the hole is filled in " +
        "when the element value is half.")]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XmlSchemaClassGenerator", "2.1.1142.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute("hole-closed", Namespace="")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class HoleClosed
    {

        /// <summary>
        /// <para xml:lang="en">Gets or sets the text value.</para>
        /// </summary>
        [System.Xml.Serialization.XmlTextAttribute()]
        public HoleClosedValue Value { get; set; }

        [System.Xml.Serialization.XmlAttributeAttribute("location")]
        public HoleClosedLocation Location { get; set; }

        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the Location property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool LocationSpecified { get; set; }
    }

    /// <summary>
    /// <para>The instrument type distinguishes between score-instrument elements in a score-part. The id attribute is an IDREF back to the score-instrument ID. If multiple score-instruments are specified in a score-part, there should be an instrument element for each note in the part. Notes that are shared between multiple score-instruments can have more than one instrument element.</para>
    /// </summary>
    [System.ComponentModel.DescriptionAttribute(@"The instrument type distinguishes between score-instrument elements in a score-part. The id attribute is an IDREF back to the score-instrument ID. If multiple score-instruments are specified in a score-part, there should be an instrument element for each note in the part. Notes that are shared between multiple score-instruments can have more than one instrument element.")]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XmlSchemaClassGenerator", "2.1.1142.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute("instrument", Namespace="")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class Instrument
    {

        [System.ComponentModel.DataAnnotations.RequiredAttribute(AllowEmptyStrings=true)]
        [System.Xml.Serialization.XmlAttributeAttribute("id")]
        public string Id { get; set; }
    }

    /// <summary>
    /// <para>The listen and listening types, new in Version 4.0, specify different ways that a score following or machine listening application can interact with a performer. The listen type handles interactions that are specific to a note. If multiple child elements of the same type are present, they should have distinct player and/or time-only attributes.</para>
    /// </summary>
    [System.ComponentModel.DescriptionAttribute(@"The listen and listening types, new in Version 4.0, specify different ways that a score following or machine listening application can interact with a performer. The listen type handles interactions that are specific to a note. If multiple child elements of the same type are present, they should have distinct player and/or time-only attributes.")]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XmlSchemaClassGenerator", "2.1.1142.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute("listen", Namespace="")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class Listen
    {

        [System.Xml.Serialization.XmlIgnoreAttribute()]
        private System.Collections.ObjectModel.Collection<Assess> _assess;

        [System.Xml.Serialization.XmlElementAttribute("assess")]
        public System.Collections.ObjectModel.Collection<Assess> Assess
        {
            get
            {
                return _assess;
            }
            private set
            {
                _assess = value;
            }
        }

        /// <summary>
        /// <para xml:lang="en">Gets a value indicating whether the Assess collection is empty.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool AssessSpecified
        {
            get
            {
                return (this.Assess.Count != 0);
            }
        }

        /// <summary>
        /// <para xml:lang="en">Initializes a new instance of the <see cref="Listen" /> class.</para>
        /// </summary>
        public Listen()
        {
            this._assess = new System.Collections.ObjectModel.Collection<Assess>();
            this._wait = new System.Collections.ObjectModel.Collection<Wait>();
            this._otherListen = new System.Collections.ObjectModel.Collection<OtherListening>();
        }

        [System.Xml.Serialization.XmlIgnoreAttribute()]
        private System.Collections.ObjectModel.Collection<Wait> _wait;

        [System.Xml.Serialization.XmlElementAttribute("wait")]
        public System.Collections.ObjectModel.Collection<Wait> Wait
        {
            get
            {
                return _wait;
            }
            private set
            {
                _wait = value;
            }
        }

        /// <summary>
        /// <para xml:lang="en">Gets a value indicating whether the Wait collection is empty.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool WaitSpecified
        {
            get
            {
                return (this.Wait.Count != 0);
            }
        }

        [System.Xml.Serialization.XmlIgnoreAttribute()]
        private System.Collections.ObjectModel.Collection<OtherListening> _otherListen;

        [System.Xml.Serialization.XmlElementAttribute("other-listen")]
        public System.Collections.ObjectModel.Collection<OtherListening> OtherListen
        {
            get
            {
                return _otherListen;
            }
            private set
            {
                _otherListen = value;
            }
        }

        /// <summary>
        /// <para xml:lang="en">Gets a value indicating whether the OtherListen collection is empty.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool OtherListenSpecified
        {
            get
            {
                return (this.OtherListen.Count != 0);
            }
        }
    }

    /// <summary>
    /// <para>The wait type specifies a point where the accompaniment should wait for a performer event before continuing. This typically happens at the start of new sections or after a held note or indeterminate music. These waiting points cannot always be inferred reliably from the contents of the displayed score. The optional player and time-only attributes restrict the type to apply to a single player or set of times through a repeated section, respectively.</para>
    /// </summary>
    [System.ComponentModel.DescriptionAttribute(@"The wait type specifies a point where the accompaniment should wait for a performer event before continuing. This typically happens at the start of new sections or after a held note or indeterminate music. These waiting points cannot always be inferred reliably from the contents of the displayed score. The optional player and time-only attributes restrict the type to apply to a single player or set of times through a repeated section, respectively.")]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XmlSchemaClassGenerator", "2.1.1142.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute("wait", Namespace="")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class Wait
    {

        [System.Xml.Serialization.XmlAttributeAttribute("player")]
        public string Player { get; set; }

        /// <summary>
        /// <para>The time-only type is used to indicate that a particular playback- or listening-related element only applies particular times through a repeated section. The value is a comma-separated list of positive integers arranged in ascending order, indicating which times through the repeated section that the element applies.</para>
        /// <para xml:lang="en">Pattern: [1-9][0-9]*(, ?[1-9][0-9]*)*.</para>
        /// </summary>
        [System.ComponentModel.DataAnnotations.RegularExpressionAttribute("[1-9][0-9]*(, ?[1-9][0-9]*)*")]
        [System.Xml.Serialization.XmlAttributeAttribute("time-only")]
        public string TimeOnly { get; set; }
    }

    /// <summary>
    /// <para>The lyric type represents text underlays for lyrics. Two text elements that are not separated by an elision element are part of the same syllable, but may have different text formatting. The MusicXML XSD is more strict than the DTD in enforcing this by disallowing a second syllabic element unless preceded by an elision element. The lyric number indicates multiple lines, though a name can be used as well. Common name examples are verse and chorus.
    ///
    ///Justification is center by default; placement is below by default. Vertical alignment is to the baseline of the text and horizontal alignment matches justification. The print-object attribute can override a note's print-lyric attribute in cases where only some lyrics on a note are printed, as when lyrics for later verses are printed in a block of text rather than with each note. The time-only attribute precisely specifies which lyrics are to be sung which time through a repeated section.</para>
    /// </summary>
    [System.ComponentModel.DescriptionAttribute(@"The lyric type represents text underlays for lyrics. Two text elements that are not separated by an elision element are part of the same syllable, but may have different text formatting. The MusicXML XSD is more strict than the DTD in enforcing this by disallowing a second syllabic element unless preceded by an elision element. The lyric number indicates multiple lines, though a name can be used as well. Common name examples are verse and chorus. Justification is center by default; placement is below by default. Vertical alignment is to the baseline of the text and horizontal alignment matches justification. The print-object attribute can override a note's print-lyric attribute in cases where only some lyrics on a note are printed, as when lyrics for later verses are printed in a block of text rather than with each note. The time-only attribute precisely specifies which lyrics are to be sung which time through a repeated section.")]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XmlSchemaClassGenerator", "2.1.1142.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute("lyric", Namespace="")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class Lyric : IEditorial, IJustify, IPosition, IPlacement, IColor, IPrintObject, IOptionalUniqueId
    {

        [System.Xml.Serialization.XmlIgnoreAttribute()]
        private System.Collections.ObjectModel.Collection<Syllabic> _syllabic;

        [System.Xml.Serialization.XmlElementAttribute("syllabic")]
        public System.Collections.ObjectModel.Collection<Syllabic> Syllabic
        {
            get
            {
                return _syllabic;
            }
            private set
            {
                _syllabic = value;
            }
        }

        /// <summary>
        /// <para xml:lang="en">Gets a value indicating whether the Syllabic collection is empty.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool SyllabicSpecified
        {
            get
            {
                return (this.Syllabic.Count != 0);
            }
        }

        /// <summary>
        /// <para xml:lang="en">Initializes a new instance of the <see cref="Lyric" /> class.</para>
        /// </summary>
        public Lyric()
        {
            this._syllabic = new System.Collections.ObjectModel.Collection<Syllabic>();
            this._text = new System.Collections.ObjectModel.Collection<TextElementData>();
            this._elision = new System.Collections.ObjectModel.Collection<Elision>();
            this._extend = new System.Collections.ObjectModel.Collection<Extend>();
        }

        [System.Xml.Serialization.XmlIgnoreAttribute()]
        private System.Collections.ObjectModel.Collection<TextElementData> _text;

        [System.Xml.Serialization.XmlElementAttribute("text")]
        public System.Collections.ObjectModel.Collection<TextElementData> Text
        {
            get
            {
                return _text;
            }
            private set
            {
                _text = value;
            }
        }

        /// <summary>
        /// <para xml:lang="en">Gets a value indicating whether the Text collection is empty.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool TextSpecified
        {
            get
            {
                return (this.Text.Count != 0);
            }
        }

        [System.Xml.Serialization.XmlIgnoreAttribute()]
        private System.Collections.ObjectModel.Collection<Elision> _elision;

        [System.Xml.Serialization.XmlElementAttribute("elision")]
        public System.Collections.ObjectModel.Collection<Elision> Elision
        {
            get
            {
                return _elision;
            }
            private set
            {
                _elision = value;
            }
        }

        /// <summary>
        /// <para xml:lang="en">Gets a value indicating whether the Elision collection is empty.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool ElisionSpecified
        {
            get
            {
                return (this.Elision.Count != 0);
            }
        }

        [System.Xml.Serialization.XmlIgnoreAttribute()]
        private System.Collections.ObjectModel.Collection<Extend> _extend;

        [System.Xml.Serialization.XmlElementAttribute("extend")]
        public System.Collections.ObjectModel.Collection<Extend> Extend
        {
            get
            {
                return _extend;
            }
            private set
            {
                _extend = value;
            }
        }

        /// <summary>
        /// <para xml:lang="en">Gets a value indicating whether the Extend collection is empty.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool ExtendSpecified
        {
            get
            {
                return (this.Extend.Count != 0);
            }
        }

        /// <summary>
        /// <para>The laughing element represents a laughing voice.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("The laughing element represents a laughing voice.")]
        [System.Xml.Serialization.XmlElementAttribute("laughing")]
        public Empty Laughing { get; set; }

        /// <summary>
        /// <para>The humming element represents a humming voice.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("The humming element represents a humming voice.")]
        [System.Xml.Serialization.XmlElementAttribute("humming")]
        public Empty Humming { get; set; }

        /// <summary>
        /// <para>The end-line element comes from RP-017 for Standard MIDI File Lyric meta-events. It facilitates lyric display for Karaoke and similar applications.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("The end-line element comes from RP-017 for Standard MIDI File Lyric meta-events. " +
            "It facilitates lyric display for Karaoke and similar applications.")]
        [System.Xml.Serialization.XmlElementAttribute("end-line")]
        public Empty EndLine { get; set; }

        /// <summary>
        /// <para>The end-paragraph element comes from RP-017 for Standard MIDI File Lyric meta-events. It facilitates lyric display for Karaoke and similar applications.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("The end-paragraph element comes from RP-017 for Standard MIDI File Lyric meta-eve" +
            "nts. It facilitates lyric display for Karaoke and similar applications.")]
        [System.Xml.Serialization.XmlElementAttribute("end-paragraph")]
        public Empty EndParagraph { get; set; }

        [System.Xml.Serialization.XmlElementAttribute("footnote")]
        public FormattedText Footnote { get; set; }

        [System.Xml.Serialization.XmlElementAttribute("level")]
        public Level Level { get; set; }

        [System.Xml.Serialization.XmlAttributeAttribute("number")]
        public string Number { get; set; }

        [System.Xml.Serialization.XmlAttributeAttribute("name")]
        public string Name { get; set; }

        [System.Xml.Serialization.XmlAttributeAttribute("justify")]
        public LeftCenterRight Justify { get; set; }

        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the Justify property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool JustifySpecified { get; set; }

        /// <summary>
        /// <para>The tenths type is a number representing tenths of interline staff space (positive or negative). Both integer and decimal values are allowed, such as 5 for a half space and 2.5 for a quarter space. Interline space is measured from the middle of a staff line.
        ///
        ///Distances in a MusicXML file are measured in tenths of staff space. Tenths are then scaled to millimeters within the scaling element, used in the defaults element at the start of a score. Individual staves can apply a scaling factor to adjust staff size. When a MusicXML element or attribute refers to tenths, it means the global tenths defined by the scaling element, not the local tenths as adjusted by the staff-size element.</para>
        /// </summary>
        [System.Xml.Serialization.XmlAttributeAttribute("default-x")]
        public decimal DefaultX { get; set; }

        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the DefaultX property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool DefaultXSpecified { get; set; }

        /// <summary>
        /// <para>The tenths type is a number representing tenths of interline staff space (positive or negative). Both integer and decimal values are allowed, such as 5 for a half space and 2.5 for a quarter space. Interline space is measured from the middle of a staff line.
        ///
        ///Distances in a MusicXML file are measured in tenths of staff space. Tenths are then scaled to millimeters within the scaling element, used in the defaults element at the start of a score. Individual staves can apply a scaling factor to adjust staff size. When a MusicXML element or attribute refers to tenths, it means the global tenths defined by the scaling element, not the local tenths as adjusted by the staff-size element.</para>
        /// </summary>
        [System.Xml.Serialization.XmlAttributeAttribute("default-y")]
        public decimal DefaultY { get; set; }

        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the DefaultY property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool DefaultYSpecified { get; set; }

        /// <summary>
        /// <para>The tenths type is a number representing tenths of interline staff space (positive or negative). Both integer and decimal values are allowed, such as 5 for a half space and 2.5 for a quarter space. Interline space is measured from the middle of a staff line.
        ///
        ///Distances in a MusicXML file are measured in tenths of staff space. Tenths are then scaled to millimeters within the scaling element, used in the defaults element at the start of a score. Individual staves can apply a scaling factor to adjust staff size. When a MusicXML element or attribute refers to tenths, it means the global tenths defined by the scaling element, not the local tenths as adjusted by the staff-size element.</para>
        /// </summary>
        [System.Xml.Serialization.XmlAttributeAttribute("relative-x")]
        public decimal RelativeX { get; set; }

        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the RelativeX property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool RelativeXSpecified { get; set; }

        /// <summary>
        /// <para>The tenths type is a number representing tenths of interline staff space (positive or negative). Both integer and decimal values are allowed, such as 5 for a half space and 2.5 for a quarter space. Interline space is measured from the middle of a staff line.
        ///
        ///Distances in a MusicXML file are measured in tenths of staff space. Tenths are then scaled to millimeters within the scaling element, used in the defaults element at the start of a score. Individual staves can apply a scaling factor to adjust staff size. When a MusicXML element or attribute refers to tenths, it means the global tenths defined by the scaling element, not the local tenths as adjusted by the staff-size element.</para>
        /// </summary>
        [System.Xml.Serialization.XmlAttributeAttribute("relative-y")]
        public decimal RelativeY { get; set; }

        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the RelativeY property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool RelativeYSpecified { get; set; }

        [System.Xml.Serialization.XmlAttributeAttribute("placement")]
        public AboveBelow Placement { get; set; }

        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the Placement property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool PlacementSpecified { get; set; }

        /// <summary>
        /// <para>The color type indicates the color of an element. Color may be represented as hexadecimal RGB triples, as in HTML, or as hexadecimal ARGB tuples, with the A indicating alpha of transparency. An alpha value of 00 is totally transparent; FF is totally opaque. If RGB is used, the A value is assumed to be FF.
        ///
        ///For instance, the RGB value "#800080" represents purple. An ARGB value of "#40800080" would be a transparent purple.
        ///
        ///As in SVG 1.1, colors are defined in terms of the sRGB color space (IEC 61966).</para>
        /// <para xml:lang="en">Pattern: #[\dA-F]{6}([\dA-F][\dA-F])?.</para>
        /// </summary>
        [System.ComponentModel.DataAnnotations.RegularExpressionAttribute("#[\\dA-F]{6}([\\dA-F][\\dA-F])?")]
        [System.Xml.Serialization.XmlAttributeAttribute("color")]
        public string Color { get; set; }

        [System.Xml.Serialization.XmlAttributeAttribute("print-object")]
        public YesNo PrintObject { get; set; }

        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the PrintObject property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool PrintObjectSpecified { get; set; }

        /// <summary>
        /// <para>The time-only type is used to indicate that a particular playback- or listening-related element only applies particular times through a repeated section. The value is a comma-separated list of positive integers arranged in ascending order, indicating which times through the repeated section that the element applies.</para>
        /// <para xml:lang="en">Pattern: [1-9][0-9]*(, ?[1-9][0-9]*)*.</para>
        /// </summary>
        [System.ComponentModel.DataAnnotations.RegularExpressionAttribute("[1-9][0-9]*(, ?[1-9][0-9]*)*")]
        [System.Xml.Serialization.XmlAttributeAttribute("time-only")]
        public string TimeOnly { get; set; }

        [System.Xml.Serialization.XmlAttributeAttribute("id")]
        public string Id { get; set; }
    }

    /// <summary>
    /// <para>The text-element-data type represents a syllable or portion of a syllable for lyric text underlay. A hyphen in the string content should only be used for an actual hyphenated word. Language names for text elements come from ISO 639, with optional country subcodes from ISO 3166.</para>
    /// </summary>
    [System.ComponentModel.DescriptionAttribute(@"The text-element-data type represents a syllable or portion of a syllable for lyric text underlay. A hyphen in the string content should only be used for an actual hyphenated word. Language names for text elements come from ISO 639, with optional country subcodes from ISO 3166.")]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XmlSchemaClassGenerator", "2.1.1142.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute("text-element-data", Namespace="")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class TextElementData : IFont, IColor, ITextDecoration, ITextRotation, ILetterSpacing, ITextDirection
    {

        /// <summary>
        /// <para xml:lang="en">Gets or sets the text value.</para>
        /// </summary>
        [System.Xml.Serialization.XmlTextAttribute()]
        public string Value { get; set; }

        /// <summary>
        /// <para>The font-family is a comma-separated list of font names. These can be specific font styles such as Maestro or Opus, or one of several generic font styles: music, engraved, handwritten, text, serif, sans-serif, handwritten, cursive, fantasy, and monospace. The music, engraved, and handwritten values refer to music fonts; the rest refer to text fonts. The fantasy style refers to decorative text such as found in older German-style printing.</para>
        /// <para xml:lang="en">Pattern: [^,]+(, ?[^,]+)*.</para>
        /// </summary>
        [System.ComponentModel.DataAnnotations.RegularExpressionAttribute("[^,]+(, ?[^,]+)*")]
        [System.Xml.Serialization.XmlAttributeAttribute("font-family")]
        public string FontFamily { get; set; }

        [System.Xml.Serialization.XmlAttributeAttribute("font-style")]
        public FontStyle FontStyle { get; set; }

        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the FontStyle property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool FontStyleSpecified { get; set; }

        /// <summary>
        /// <para>The font-size can be one of the CSS font sizes (xx-small, x-small, small, medium, large, x-large, xx-large) or a numeric point size.</para>
        /// </summary>
        [System.Xml.Serialization.XmlAttributeAttribute("font-size")]
        public string FontSize { get; set; }

        [System.Xml.Serialization.XmlAttributeAttribute("font-weight")]
        public FontWeight FontWeight { get; set; }

        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the FontWeight property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool FontWeightSpecified { get; set; }

        /// <summary>
        /// <para>The color type indicates the color of an element. Color may be represented as hexadecimal RGB triples, as in HTML, or as hexadecimal ARGB tuples, with the A indicating alpha of transparency. An alpha value of 00 is totally transparent; FF is totally opaque. If RGB is used, the A value is assumed to be FF.
        ///
        ///For instance, the RGB value "#800080" represents purple. An ARGB value of "#40800080" would be a transparent purple.
        ///
        ///As in SVG 1.1, colors are defined in terms of the sRGB color space (IEC 61966).</para>
        /// <para xml:lang="en">Pattern: #[\dA-F]{6}([\dA-F][\dA-F])?.</para>
        /// </summary>
        [System.ComponentModel.DataAnnotations.RegularExpressionAttribute("#[\\dA-F]{6}([\\dA-F][\\dA-F])?")]
        [System.Xml.Serialization.XmlAttributeAttribute("color")]
        public string Color { get; set; }

        /// <summary>
        /// <para>The number-of-lines type is used to specify the number of lines in text decoration attributes.</para>
        /// <para xml:lang="en">Minimum inclusive value: 0.</para>
        /// <para xml:lang="en">Maximum inclusive value: 3.</para>
        /// </summary>
        [System.ComponentModel.DataAnnotations.RangeAttribute(typeof(decimal), "0", "3")]
        [System.Xml.Serialization.XmlAttributeAttribute("underline")]
        public byte Underline { get; set; }

        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the Underline property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool UnderlineSpecified { get; set; }

        /// <summary>
        /// <para>The number-of-lines type is used to specify the number of lines in text decoration attributes.</para>
        /// <para xml:lang="en">Minimum inclusive value: 0.</para>
        /// <para xml:lang="en">Maximum inclusive value: 3.</para>
        /// </summary>
        [System.ComponentModel.DataAnnotations.RangeAttribute(typeof(decimal), "0", "3")]
        [System.Xml.Serialization.XmlAttributeAttribute("overline")]
        public byte Overline { get; set; }

        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the Overline property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool OverlineSpecified { get; set; }

        /// <summary>
        /// <para>The number-of-lines type is used to specify the number of lines in text decoration attributes.</para>
        /// <para xml:lang="en">Minimum inclusive value: 0.</para>
        /// <para xml:lang="en">Maximum inclusive value: 3.</para>
        /// </summary>
        [System.ComponentModel.DataAnnotations.RangeAttribute(typeof(decimal), "0", "3")]
        [System.Xml.Serialization.XmlAttributeAttribute("line-through")]
        public byte LineThrough { get; set; }

        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the LineThrough property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool LineThroughSpecified { get; set; }

        /// <summary>
        /// <para>The rotation-degrees type specifies rotation, pan, and elevation values in degrees. Values range from -180 to 180.</para>
        /// <para xml:lang="en">Minimum inclusive value: -180.</para>
        /// <para xml:lang="en">Maximum inclusive value: 180.</para>
        /// </summary>
        [System.ComponentModel.DataAnnotations.RangeAttribute(typeof(decimal), "-180", "180")]
        [System.Xml.Serialization.XmlAttributeAttribute("rotation")]
        public decimal Rotation { get; set; }

        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the Rotation property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool RotationSpecified { get; set; }

        /// <summary>
        /// <para>The number-or-normal values can be either a decimal number or the string "normal". This is used by the line-height and letter-spacing attributes.</para>
        /// </summary>
        [System.Xml.Serialization.XmlAttributeAttribute("letter-spacing")]
        public string LetterSpacing { get; set; }

        [System.Xml.Serialization.XmlAttributeAttribute("lang", Namespace="http://www.w3.org/XML/1998/namespace", Form=System.Xml.Schema.XmlSchemaForm.Qualified)]
        public string Lang { get; set; }

        [System.Xml.Serialization.XmlAttributeAttribute("dir")]
        public TextDirection Dir { get; set; }

        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the Dir property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool DirSpecified { get; set; }
    }

    /// <summary>
    /// <para>The mordent type is used for both represents the mordent sign with the vertical line and the inverted-mordent sign without the line. The long attribute is "no" by default. The approach and departure attributes are used for compound ornaments, indicating how the beginning and ending of the ornament look relative to the main part of the mordent.</para>
    /// </summary>
    [System.ComponentModel.DescriptionAttribute(@"The mordent type is used for both represents the mordent sign with the vertical line and the inverted-mordent sign without the line. The long attribute is ""no"" by default. The approach and departure attributes are used for compound ornaments, indicating how the beginning and ending of the ornament look relative to the main part of the mordent.")]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XmlSchemaClassGenerator", "2.1.1142.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute("mordent", Namespace="")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class Mordent : EmptyTrillSound
    {

        [System.Xml.Serialization.XmlAttributeAttribute("long")]
        public YesNo Long { get; set; }

        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the Long property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool LongSpecified { get; set; }

        [System.Xml.Serialization.XmlAttributeAttribute("approach")]
        public AboveBelow Approach { get; set; }

        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the Approach property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool ApproachSpecified { get; set; }

        [System.Xml.Serialization.XmlAttributeAttribute("departure")]
        public AboveBelow Departure { get; set; }

        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the Departure property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool DepartureSpecified { get; set; }
    }

    /// <summary>
    /// <para>The non-arpeggiate type indicates that this note is at the top or bottom of a bracket indicating to not arpeggiate these notes. Since this does not involve playback, it is only used on the top or bottom notes, not on each note as for the arpeggiate type.</para>
    /// </summary>
    [System.ComponentModel.DescriptionAttribute("The non-arpeggiate type indicates that this note is at the top or bottom of a bra" +
        "cket indicating to not arpeggiate these notes. Since this does not involve playb" +
        "ack, it is only used on the top or bottom notes, not on each note as for the arp" +
        "eggiate type.")]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XmlSchemaClassGenerator", "2.1.1142.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute("non-arpeggiate", Namespace="")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class NonArpeggiate : IPosition, IPlacement, IColor, IOptionalUniqueId
    {

        [System.ComponentModel.DataAnnotations.RequiredAttribute(AllowEmptyStrings=true)]
        [System.Xml.Serialization.XmlAttributeAttribute("type")]
        public TopBottom Type { get; set; }

        /// <summary>
        /// <para>Slurs, tuplets, and many other features can be concurrent and overlap within a single musical part. The number-level entity distinguishes up to 16 concurrent objects of the same type when the objects overlap in MusicXML document order. Values greater than 6 are usually only needed for music with a large number of divisi staves in a single part, or if there are more than 6 cross-staff arpeggios in a single measure. When a number-level value is implied, the value is 1 by default.
        ///
        ///When polyphonic parts are involved, the ordering within a MusicXML document can differ from musical score order. As an example, say we have a piano part in 4/4 where within a single measure, all the notes on the top staff are followed by all the notes on the bottom staff. In this example, each staff has a slur that starts on beat 2 and stops on beat 3, and there is a third slur that goes from beat 1 of one staff to beat 4 of the other staff.
        ///
        ///In this situation, the two mid-measure slurs can use the same number because they do not overlap in MusicXML document order, even though they do overlap in musical score order. Within the MusicXML document, the top staff slur will both start and stop before the bottom staff slur starts and stops.
        ///
        ///If the cross-staff slur starts in the top staff and stops in the bottom staff, it will need a separate number from the mid-measure slurs because it overlaps those slurs in MusicXML document order. However, if the cross-staff slur starts in the bottom staff and stops in the top staff, all three slurs can use the same number. None of them overlap within the MusicXML document, even though they all overlap each other in the musical score order. Within the MusicXML document, the start and stop of the top-staff slur will be followed by the stop and start of the cross-staff slur, followed by the start and stop of the bottom-staff slur.
        ///
        ///As this example demonstrates, a reading program should be prepared to handle cases where the number-levels start and stop in an arbitrary order. Because the start and stop values refer to musical score order, a program may find the stopping point of an object earlier in the MusicXML document than it will find its starting point.</para>
        /// <para xml:lang="en">Minimum inclusive value: 1.</para>
        /// <para xml:lang="en">Maximum inclusive value: 16.</para>
        /// </summary>
        [System.ComponentModel.DataAnnotations.RangeAttribute(typeof(decimal), "1", "16")]
        [System.Xml.Serialization.XmlAttributeAttribute("number")]
        public byte Number { get; set; }

        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the Number property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool NumberSpecified { get; set; }

        /// <summary>
        /// <para>The tenths type is a number representing tenths of interline staff space (positive or negative). Both integer and decimal values are allowed, such as 5 for a half space and 2.5 for a quarter space. Interline space is measured from the middle of a staff line.
        ///
        ///Distances in a MusicXML file are measured in tenths of staff space. Tenths are then scaled to millimeters within the scaling element, used in the defaults element at the start of a score. Individual staves can apply a scaling factor to adjust staff size. When a MusicXML element or attribute refers to tenths, it means the global tenths defined by the scaling element, not the local tenths as adjusted by the staff-size element.</para>
        /// </summary>
        [System.Xml.Serialization.XmlAttributeAttribute("default-x")]
        public decimal DefaultX { get; set; }

        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the DefaultX property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool DefaultXSpecified { get; set; }

        /// <summary>
        /// <para>The tenths type is a number representing tenths of interline staff space (positive or negative). Both integer and decimal values are allowed, such as 5 for a half space and 2.5 for a quarter space. Interline space is measured from the middle of a staff line.
        ///
        ///Distances in a MusicXML file are measured in tenths of staff space. Tenths are then scaled to millimeters within the scaling element, used in the defaults element at the start of a score. Individual staves can apply a scaling factor to adjust staff size. When a MusicXML element or attribute refers to tenths, it means the global tenths defined by the scaling element, not the local tenths as adjusted by the staff-size element.</para>
        /// </summary>
        [System.Xml.Serialization.XmlAttributeAttribute("default-y")]
        public decimal DefaultY { get; set; }

        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the DefaultY property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool DefaultYSpecified { get; set; }

        /// <summary>
        /// <para>The tenths type is a number representing tenths of interline staff space (positive or negative). Both integer and decimal values are allowed, such as 5 for a half space and 2.5 for a quarter space. Interline space is measured from the middle of a staff line.
        ///
        ///Distances in a MusicXML file are measured in tenths of staff space. Tenths are then scaled to millimeters within the scaling element, used in the defaults element at the start of a score. Individual staves can apply a scaling factor to adjust staff size. When a MusicXML element or attribute refers to tenths, it means the global tenths defined by the scaling element, not the local tenths as adjusted by the staff-size element.</para>
        /// </summary>
        [System.Xml.Serialization.XmlAttributeAttribute("relative-x")]
        public decimal RelativeX { get; set; }

        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the RelativeX property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool RelativeXSpecified { get; set; }

        /// <summary>
        /// <para>The tenths type is a number representing tenths of interline staff space (positive or negative). Both integer and decimal values are allowed, such as 5 for a half space and 2.5 for a quarter space. Interline space is measured from the middle of a staff line.
        ///
        ///Distances in a MusicXML file are measured in tenths of staff space. Tenths are then scaled to millimeters within the scaling element, used in the defaults element at the start of a score. Individual staves can apply a scaling factor to adjust staff size. When a MusicXML element or attribute refers to tenths, it means the global tenths defined by the scaling element, not the local tenths as adjusted by the staff-size element.</para>
        /// </summary>
        [System.Xml.Serialization.XmlAttributeAttribute("relative-y")]
        public decimal RelativeY { get; set; }

        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the RelativeY property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool RelativeYSpecified { get; set; }

        [System.Xml.Serialization.XmlAttributeAttribute("placement")]
        public AboveBelow Placement { get; set; }

        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the Placement property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool PlacementSpecified { get; set; }

        /// <summary>
        /// <para>The color type indicates the color of an element. Color may be represented as hexadecimal RGB triples, as in HTML, or as hexadecimal ARGB tuples, with the A indicating alpha of transparency. An alpha value of 00 is totally transparent; FF is totally opaque. If RGB is used, the A value is assumed to be FF.
        ///
        ///For instance, the RGB value "#800080" represents purple. An ARGB value of "#40800080" would be a transparent purple.
        ///
        ///As in SVG 1.1, colors are defined in terms of the sRGB color space (IEC 61966).</para>
        /// <para xml:lang="en">Pattern: #[\dA-F]{6}([\dA-F][\dA-F])?.</para>
        /// </summary>
        [System.ComponentModel.DataAnnotations.RegularExpressionAttribute("#[\\dA-F]{6}([\\dA-F][\\dA-F])?")]
        [System.Xml.Serialization.XmlAttributeAttribute("color")]
        public string Color { get; set; }

        [System.Xml.Serialization.XmlAttributeAttribute("id")]
        public string Id { get; set; }
    }

    /// <summary>
    /// <para>Notations refer to musical notations, not XML notations. Multiple notations are allowed in order to represent multiple editorial levels. The print-object attribute, added in Version 3.0, allows notations to represent details of performance technique, such as fingerings, without having them appear in the score.</para>
    /// </summary>
    [System.ComponentModel.DescriptionAttribute(@"Notations refer to musical notations, not XML notations. Multiple notations are allowed in order to represent multiple editorial levels. The print-object attribute, added in Version 3.0, allows notations to represent details of performance technique, such as fingerings, without having them appear in the score.")]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XmlSchemaClassGenerator", "2.1.1142.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute("notations", Namespace="")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class Notations : IEditorial, IPrintObject, IOptionalUniqueId
    {

        [System.Xml.Serialization.XmlElementAttribute("footnote")]
        public FormattedText Footnote { get; set; }

        [System.Xml.Serialization.XmlElementAttribute("level")]
        public Level Level { get; set; }

        [System.Xml.Serialization.XmlIgnoreAttribute()]
        private System.Collections.ObjectModel.Collection<Tied> _tied;

        [System.Xml.Serialization.XmlElementAttribute("tied")]
        public System.Collections.ObjectModel.Collection<Tied> Tied
        {
            get
            {
                return _tied;
            }
            private set
            {
                _tied = value;
            }
        }

        /// <summary>
        /// <para xml:lang="en">Gets a value indicating whether the Tied collection is empty.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool TiedSpecified
        {
            get
            {
                return (this.Tied.Count != 0);
            }
        }

        /// <summary>
        /// <para xml:lang="en">Initializes a new instance of the <see cref="Notations" /> class.</para>
        /// </summary>
        public Notations()
        {
            this._tied = new System.Collections.ObjectModel.Collection<Tied>();
            this._slur = new System.Collections.ObjectModel.Collection<Slur>();
            this._tuplet = new System.Collections.ObjectModel.Collection<Tuplet>();
            this._glissando = new System.Collections.ObjectModel.Collection<Glissando>();
            this._slide = new System.Collections.ObjectModel.Collection<Slide>();
            this._ornaments = new System.Collections.ObjectModel.Collection<Ornaments>();
            this._technical = new System.Collections.ObjectModel.Collection<Technical>();
            this._articulations = new System.Collections.ObjectModel.Collection<Articulations>();
            this._dynamics = new System.Collections.ObjectModel.Collection<Dynamics>();
            this._fermata = new System.Collections.ObjectModel.Collection<Fermata>();
            this._arpeggiate = new System.Collections.ObjectModel.Collection<Arpeggiate>();
            this._nonArpeggiate = new System.Collections.ObjectModel.Collection<NonArpeggiate>();
            this._accidentalMark = new System.Collections.ObjectModel.Collection<AccidentalMark>();
            this._otherNotation = new System.Collections.ObjectModel.Collection<OtherNotation>();
        }

        [System.Xml.Serialization.XmlIgnoreAttribute()]
        private System.Collections.ObjectModel.Collection<Slur> _slur;

        [System.Xml.Serialization.XmlElementAttribute("slur")]
        public System.Collections.ObjectModel.Collection<Slur> Slur
        {
            get
            {
                return _slur;
            }
            private set
            {
                _slur = value;
            }
        }

        /// <summary>
        /// <para xml:lang="en">Gets a value indicating whether the Slur collection is empty.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool SlurSpecified
        {
            get
            {
                return (this.Slur.Count != 0);
            }
        }

        [System.Xml.Serialization.XmlIgnoreAttribute()]
        private System.Collections.ObjectModel.Collection<Tuplet> _tuplet;

        [System.Xml.Serialization.XmlElementAttribute("tuplet")]
        public System.Collections.ObjectModel.Collection<Tuplet> Tuplet
        {
            get
            {
                return _tuplet;
            }
            private set
            {
                _tuplet = value;
            }
        }

        /// <summary>
        /// <para xml:lang="en">Gets a value indicating whether the Tuplet collection is empty.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool TupletSpecified
        {
            get
            {
                return (this.Tuplet.Count != 0);
            }
        }

        [System.Xml.Serialization.XmlIgnoreAttribute()]
        private System.Collections.ObjectModel.Collection<Glissando> _glissando;

        [System.Xml.Serialization.XmlElementAttribute("glissando")]
        public System.Collections.ObjectModel.Collection<Glissando> Glissando
        {
            get
            {
                return _glissando;
            }
            private set
            {
                _glissando = value;
            }
        }

        /// <summary>
        /// <para xml:lang="en">Gets a value indicating whether the Glissando collection is empty.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool GlissandoSpecified
        {
            get
            {
                return (this.Glissando.Count != 0);
            }
        }

        [System.Xml.Serialization.XmlIgnoreAttribute()]
        private System.Collections.ObjectModel.Collection<Slide> _slide;

        [System.Xml.Serialization.XmlElementAttribute("slide")]
        public System.Collections.ObjectModel.Collection<Slide> Slide
        {
            get
            {
                return _slide;
            }
            private set
            {
                _slide = value;
            }
        }

        /// <summary>
        /// <para xml:lang="en">Gets a value indicating whether the Slide collection is empty.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool SlideSpecified
        {
            get
            {
                return (this.Slide.Count != 0);
            }
        }

        [System.Xml.Serialization.XmlIgnoreAttribute()]
        private System.Collections.ObjectModel.Collection<Ornaments> _ornaments;

        [System.Xml.Serialization.XmlElementAttribute("ornaments")]
        public System.Collections.ObjectModel.Collection<Ornaments> Ornaments
        {
            get
            {
                return _ornaments;
            }
            private set
            {
                _ornaments = value;
            }
        }

        /// <summary>
        /// <para xml:lang="en">Gets a value indicating whether the Ornaments collection is empty.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool OrnamentsSpecified
        {
            get
            {
                return (this.Ornaments.Count != 0);
            }
        }

        [System.Xml.Serialization.XmlIgnoreAttribute()]
        private System.Collections.ObjectModel.Collection<Technical> _technical;

        [System.Xml.Serialization.XmlElementAttribute("technical")]
        public System.Collections.ObjectModel.Collection<Technical> Technical
        {
            get
            {
                return _technical;
            }
            private set
            {
                _technical = value;
            }
        }

        /// <summary>
        /// <para xml:lang="en">Gets a value indicating whether the Technical collection is empty.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool TechnicalSpecified
        {
            get
            {
                return (this.Technical.Count != 0);
            }
        }

        [System.Xml.Serialization.XmlIgnoreAttribute()]
        private System.Collections.ObjectModel.Collection<Articulations> _articulations;

        [System.Xml.Serialization.XmlElementAttribute("articulations")]
        public System.Collections.ObjectModel.Collection<Articulations> Articulations
        {
            get
            {
                return _articulations;
            }
            private set
            {
                _articulations = value;
            }
        }

        /// <summary>
        /// <para xml:lang="en">Gets a value indicating whether the Articulations collection is empty.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool ArticulationsSpecified
        {
            get
            {
                return (this.Articulations.Count != 0);
            }
        }

        [System.Xml.Serialization.XmlIgnoreAttribute()]
        private System.Collections.ObjectModel.Collection<Dynamics> _dynamics;

        [System.Xml.Serialization.XmlElementAttribute("dynamics")]
        public System.Collections.ObjectModel.Collection<Dynamics> Dynamics
        {
            get
            {
                return _dynamics;
            }
            private set
            {
                _dynamics = value;
            }
        }

        /// <summary>
        /// <para xml:lang="en">Gets a value indicating whether the Dynamics collection is empty.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool DynamicsSpecified
        {
            get
            {
                return (this.Dynamics.Count != 0);
            }
        }

        [System.Xml.Serialization.XmlIgnoreAttribute()]
        private System.Collections.ObjectModel.Collection<Fermata> _fermata;

        [System.Xml.Serialization.XmlElementAttribute("fermata")]
        public System.Collections.ObjectModel.Collection<Fermata> Fermata
        {
            get
            {
                return _fermata;
            }
            private set
            {
                _fermata = value;
            }
        }

        /// <summary>
        /// <para xml:lang="en">Gets a value indicating whether the Fermata collection is empty.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool FermataSpecified
        {
            get
            {
                return (this.Fermata.Count != 0);
            }
        }

        [System.Xml.Serialization.XmlIgnoreAttribute()]
        private System.Collections.ObjectModel.Collection<Arpeggiate> _arpeggiate;

        [System.Xml.Serialization.XmlElementAttribute("arpeggiate")]
        public System.Collections.ObjectModel.Collection<Arpeggiate> Arpeggiate
        {
            get
            {
                return _arpeggiate;
            }
            private set
            {
                _arpeggiate = value;
            }
        }

        /// <summary>
        /// <para xml:lang="en">Gets a value indicating whether the Arpeggiate collection is empty.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool ArpeggiateSpecified
        {
            get
            {
                return (this.Arpeggiate.Count != 0);
            }
        }

        [System.Xml.Serialization.XmlIgnoreAttribute()]
        private System.Collections.ObjectModel.Collection<NonArpeggiate> _nonArpeggiate;

        [System.Xml.Serialization.XmlElementAttribute("non-arpeggiate")]
        public System.Collections.ObjectModel.Collection<NonArpeggiate> NonArpeggiate
        {
            get
            {
                return _nonArpeggiate;
            }
            private set
            {
                _nonArpeggiate = value;
            }
        }

        /// <summary>
        /// <para xml:lang="en">Gets a value indicating whether the NonArpeggiate collection is empty.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool NonArpeggiateSpecified
        {
            get
            {
                return (this.NonArpeggiate.Count != 0);
            }
        }

        [System.Xml.Serialization.XmlIgnoreAttribute()]
        private System.Collections.ObjectModel.Collection<AccidentalMark> _accidentalMark;

        [System.Xml.Serialization.XmlElementAttribute("accidental-mark")]
        public System.Collections.ObjectModel.Collection<AccidentalMark> AccidentalMark
        {
            get
            {
                return _accidentalMark;
            }
            private set
            {
                _accidentalMark = value;
            }
        }

        /// <summary>
        /// <para xml:lang="en">Gets a value indicating whether the AccidentalMark collection is empty.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool AccidentalMarkSpecified
        {
            get
            {
                return (this.AccidentalMark.Count != 0);
            }
        }

        [System.Xml.Serialization.XmlIgnoreAttribute()]
        private System.Collections.ObjectModel.Collection<OtherNotation> _otherNotation;

        [System.Xml.Serialization.XmlElementAttribute("other-notation")]
        public System.Collections.ObjectModel.Collection<OtherNotation> OtherNotation
        {
            get
            {
                return _otherNotation;
            }
            private set
            {
                _otherNotation = value;
            }
        }

        /// <summary>
        /// <para xml:lang="en">Gets a value indicating whether the OtherNotation collection is empty.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool OtherNotationSpecified
        {
            get
            {
                return (this.OtherNotation.Count != 0);
            }
        }

        [System.Xml.Serialization.XmlAttributeAttribute("print-object")]
        public YesNo PrintObject { get; set; }

        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the PrintObject property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool PrintObjectSpecified { get; set; }

        [System.Xml.Serialization.XmlAttributeAttribute("id")]
        public string Id { get; set; }
    }

    /// <summary>
    /// <para>The tied element represents the notated tie. The tie element represents the tie sound.
    ///
    ///The number attribute is rarely needed to disambiguate ties, since note pitches will usually suffice. The attribute is implied rather than defaulting to 1 as with most elements. It is available for use in more complex tied notation situations.
    ///
    ///Ties that join two notes of the same pitch together should be represented with a tied element on the first note with type="start" and a tied element on the second note with type="stop".  This can also be done if the two notes being tied are enharmonically equivalent, but have different step values. It is not recommended to use tied elements to join two notes with enharmonically inequivalent pitches.
    ///
    ///Ties that indicate that an instrument should be undamped are specified with a single tied element with type="let-ring".
    ///
    ///Ties that are visually attached to only one note, other than undamped ties, should be specified with two tied elements on the same note, first type="start" then type="stop". This can be used to represent ties into or out of repeated sections or codas.</para>
    /// </summary>
    [System.ComponentModel.DescriptionAttribute(@"The tied element represents the notated tie. The tie element represents the tie sound. The number attribute is rarely needed to disambiguate ties, since note pitches will usually suffice. The attribute is implied rather than defaulting to 1 as with most elements. It is available for use in more complex tied notation situations. Ties that join two notes of the same pitch together should be represented with a tied element on the first note with type=""start"" and a tied element on the second note with type=""stop"". This can also be done if the two notes being tied are enharmonically equivalent, but have different step values. It is not recommended to use tied elements to join two notes with enharmonically inequivalent pitches. Ties that indicate that an instrument should be undamped are specified with a single tied element with type=""let-ring"". Ties that are visually attached to only one note, other than undamped ties, should be specified with two tied elements on the same note, first type=""start"" then type=""stop"". This can be used to represent ties into or out of repeated sections or codas.")]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XmlSchemaClassGenerator", "2.1.1142.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute("tied", Namespace="")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class Tied : ILineType, IDashedFormatting, IPosition, IPlacement, IOrientation, IBezier, IColor, IOptionalUniqueId
    {

        [System.ComponentModel.DataAnnotations.RequiredAttribute(AllowEmptyStrings=true)]
        [System.Xml.Serialization.XmlAttributeAttribute("type")]
        public TiedType Type { get; set; }

        /// <summary>
        /// <para>Slurs, tuplets, and many other features can be concurrent and overlap within a single musical part. The number-level entity distinguishes up to 16 concurrent objects of the same type when the objects overlap in MusicXML document order. Values greater than 6 are usually only needed for music with a large number of divisi staves in a single part, or if there are more than 6 cross-staff arpeggios in a single measure. When a number-level value is implied, the value is 1 by default.
        ///
        ///When polyphonic parts are involved, the ordering within a MusicXML document can differ from musical score order. As an example, say we have a piano part in 4/4 where within a single measure, all the notes on the top staff are followed by all the notes on the bottom staff. In this example, each staff has a slur that starts on beat 2 and stops on beat 3, and there is a third slur that goes from beat 1 of one staff to beat 4 of the other staff.
        ///
        ///In this situation, the two mid-measure slurs can use the same number because they do not overlap in MusicXML document order, even though they do overlap in musical score order. Within the MusicXML document, the top staff slur will both start and stop before the bottom staff slur starts and stops.
        ///
        ///If the cross-staff slur starts in the top staff and stops in the bottom staff, it will need a separate number from the mid-measure slurs because it overlaps those slurs in MusicXML document order. However, if the cross-staff slur starts in the bottom staff and stops in the top staff, all three slurs can use the same number. None of them overlap within the MusicXML document, even though they all overlap each other in the musical score order. Within the MusicXML document, the start and stop of the top-staff slur will be followed by the stop and start of the cross-staff slur, followed by the start and stop of the bottom-staff slur.
        ///
        ///As this example demonstrates, a reading program should be prepared to handle cases where the number-levels start and stop in an arbitrary order. Because the start and stop values refer to musical score order, a program may find the stopping point of an object earlier in the MusicXML document than it will find its starting point.</para>
        /// <para xml:lang="en">Minimum inclusive value: 1.</para>
        /// <para xml:lang="en">Maximum inclusive value: 16.</para>
        /// </summary>
        [System.ComponentModel.DataAnnotations.RangeAttribute(typeof(decimal), "1", "16")]
        [System.Xml.Serialization.XmlAttributeAttribute("number")]
        public byte Number { get; set; }

        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the Number property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool NumberSpecified { get; set; }

        [System.Xml.Serialization.XmlAttributeAttribute("line-type")]
        public LineType LineType { get; set; }

        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the LineType property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool LineTypeSpecified { get; set; }

        /// <summary>
        /// <para>The tenths type is a number representing tenths of interline staff space (positive or negative). Both integer and decimal values are allowed, such as 5 for a half space and 2.5 for a quarter space. Interline space is measured from the middle of a staff line.
        ///
        ///Distances in a MusicXML file are measured in tenths of staff space. Tenths are then scaled to millimeters within the scaling element, used in the defaults element at the start of a score. Individual staves can apply a scaling factor to adjust staff size. When a MusicXML element or attribute refers to tenths, it means the global tenths defined by the scaling element, not the local tenths as adjusted by the staff-size element.</para>
        /// </summary>
        [System.Xml.Serialization.XmlAttributeAttribute("dash-length")]
        public decimal DashLength { get; set; }

        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the DashLength property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool DashLengthSpecified { get; set; }

        /// <summary>
        /// <para>The tenths type is a number representing tenths of interline staff space (positive or negative). Both integer and decimal values are allowed, such as 5 for a half space and 2.5 for a quarter space. Interline space is measured from the middle of a staff line.
        ///
        ///Distances in a MusicXML file are measured in tenths of staff space. Tenths are then scaled to millimeters within the scaling element, used in the defaults element at the start of a score. Individual staves can apply a scaling factor to adjust staff size. When a MusicXML element or attribute refers to tenths, it means the global tenths defined by the scaling element, not the local tenths as adjusted by the staff-size element.</para>
        /// </summary>
        [System.Xml.Serialization.XmlAttributeAttribute("space-length")]
        public decimal SpaceLength { get; set; }

        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the SpaceLength property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool SpaceLengthSpecified { get; set; }

        /// <summary>
        /// <para>The tenths type is a number representing tenths of interline staff space (positive or negative). Both integer and decimal values are allowed, such as 5 for a half space and 2.5 for a quarter space. Interline space is measured from the middle of a staff line.
        ///
        ///Distances in a MusicXML file are measured in tenths of staff space. Tenths are then scaled to millimeters within the scaling element, used in the defaults element at the start of a score. Individual staves can apply a scaling factor to adjust staff size. When a MusicXML element or attribute refers to tenths, it means the global tenths defined by the scaling element, not the local tenths as adjusted by the staff-size element.</para>
        /// </summary>
        [System.Xml.Serialization.XmlAttributeAttribute("default-x")]
        public decimal DefaultX { get; set; }

        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the DefaultX property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool DefaultXSpecified { get; set; }

        /// <summary>
        /// <para>The tenths type is a number representing tenths of interline staff space (positive or negative). Both integer and decimal values are allowed, such as 5 for a half space and 2.5 for a quarter space. Interline space is measured from the middle of a staff line.
        ///
        ///Distances in a MusicXML file are measured in tenths of staff space. Tenths are then scaled to millimeters within the scaling element, used in the defaults element at the start of a score. Individual staves can apply a scaling factor to adjust staff size. When a MusicXML element or attribute refers to tenths, it means the global tenths defined by the scaling element, not the local tenths as adjusted by the staff-size element.</para>
        /// </summary>
        [System.Xml.Serialization.XmlAttributeAttribute("default-y")]
        public decimal DefaultY { get; set; }

        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the DefaultY property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool DefaultYSpecified { get; set; }

        /// <summary>
        /// <para>The tenths type is a number representing tenths of interline staff space (positive or negative). Both integer and decimal values are allowed, such as 5 for a half space and 2.5 for a quarter space. Interline space is measured from the middle of a staff line.
        ///
        ///Distances in a MusicXML file are measured in tenths of staff space. Tenths are then scaled to millimeters within the scaling element, used in the defaults element at the start of a score. Individual staves can apply a scaling factor to adjust staff size. When a MusicXML element or attribute refers to tenths, it means the global tenths defined by the scaling element, not the local tenths as adjusted by the staff-size element.</para>
        /// </summary>
        [System.Xml.Serialization.XmlAttributeAttribute("relative-x")]
        public decimal RelativeX { get; set; }

        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the RelativeX property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool RelativeXSpecified { get; set; }

        /// <summary>
        /// <para>The tenths type is a number representing tenths of interline staff space (positive or negative). Both integer and decimal values are allowed, such as 5 for a half space and 2.5 for a quarter space. Interline space is measured from the middle of a staff line.
        ///
        ///Distances in a MusicXML file are measured in tenths of staff space. Tenths are then scaled to millimeters within the scaling element, used in the defaults element at the start of a score. Individual staves can apply a scaling factor to adjust staff size. When a MusicXML element or attribute refers to tenths, it means the global tenths defined by the scaling element, not the local tenths as adjusted by the staff-size element.</para>
        /// </summary>
        [System.Xml.Serialization.XmlAttributeAttribute("relative-y")]
        public decimal RelativeY { get; set; }

        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the RelativeY property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool RelativeYSpecified { get; set; }

        [System.Xml.Serialization.XmlAttributeAttribute("placement")]
        public AboveBelow Placement { get; set; }

        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the Placement property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool PlacementSpecified { get; set; }

        [System.Xml.Serialization.XmlAttributeAttribute("orientation")]
        public OverUnder Orientation { get; set; }

        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the Orientation property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool OrientationSpecified { get; set; }

        /// <summary>
        /// <para>The tenths type is a number representing tenths of interline staff space (positive or negative). Both integer and decimal values are allowed, such as 5 for a half space and 2.5 for a quarter space. Interline space is measured from the middle of a staff line.
        ///
        ///Distances in a MusicXML file are measured in tenths of staff space. Tenths are then scaled to millimeters within the scaling element, used in the defaults element at the start of a score. Individual staves can apply a scaling factor to adjust staff size. When a MusicXML element or attribute refers to tenths, it means the global tenths defined by the scaling element, not the local tenths as adjusted by the staff-size element.</para>
        /// </summary>
        [System.Xml.Serialization.XmlAttributeAttribute("bezier-x")]
        public decimal BezierX { get; set; }

        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the BezierX property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool BezierXSpecified { get; set; }

        /// <summary>
        /// <para>The tenths type is a number representing tenths of interline staff space (positive or negative). Both integer and decimal values are allowed, such as 5 for a half space and 2.5 for a quarter space. Interline space is measured from the middle of a staff line.
        ///
        ///Distances in a MusicXML file are measured in tenths of staff space. Tenths are then scaled to millimeters within the scaling element, used in the defaults element at the start of a score. Individual staves can apply a scaling factor to adjust staff size. When a MusicXML element or attribute refers to tenths, it means the global tenths defined by the scaling element, not the local tenths as adjusted by the staff-size element.</para>
        /// </summary>
        [System.Xml.Serialization.XmlAttributeAttribute("bezier-y")]
        public decimal BezierY { get; set; }

        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the BezierY property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool BezierYSpecified { get; set; }

        /// <summary>
        /// <para>The tenths type is a number representing tenths of interline staff space (positive or negative). Both integer and decimal values are allowed, such as 5 for a half space and 2.5 for a quarter space. Interline space is measured from the middle of a staff line.
        ///
        ///Distances in a MusicXML file are measured in tenths of staff space. Tenths are then scaled to millimeters within the scaling element, used in the defaults element at the start of a score. Individual staves can apply a scaling factor to adjust staff size. When a MusicXML element or attribute refers to tenths, it means the global tenths defined by the scaling element, not the local tenths as adjusted by the staff-size element.</para>
        /// </summary>
        [System.Xml.Serialization.XmlAttributeAttribute("bezier-x2")]
        public decimal BezierX2 { get; set; }

        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the BezierX2 property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool BezierX2Specified { get; set; }

        /// <summary>
        /// <para>The tenths type is a number representing tenths of interline staff space (positive or negative). Both integer and decimal values are allowed, such as 5 for a half space and 2.5 for a quarter space. Interline space is measured from the middle of a staff line.
        ///
        ///Distances in a MusicXML file are measured in tenths of staff space. Tenths are then scaled to millimeters within the scaling element, used in the defaults element at the start of a score. Individual staves can apply a scaling factor to adjust staff size. When a MusicXML element or attribute refers to tenths, it means the global tenths defined by the scaling element, not the local tenths as adjusted by the staff-size element.</para>
        /// </summary>
        [System.Xml.Serialization.XmlAttributeAttribute("bezier-y2")]
        public decimal BezierY2 { get; set; }

        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the BezierY2 property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool BezierY2Specified { get; set; }

        /// <summary>
        /// <para>The divisions type is used to express values in terms of the musical divisions defined by the divisions element. It is preferred that these be integer values both for MIDI interoperability and to avoid roundoff errors.</para>
        /// </summary>
        [System.Xml.Serialization.XmlAttributeAttribute("bezier-offset")]
        public decimal BezierOffset { get; set; }

        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the BezierOffset property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool BezierOffsetSpecified { get; set; }

        /// <summary>
        /// <para>The divisions type is used to express values in terms of the musical divisions defined by the divisions element. It is preferred that these be integer values both for MIDI interoperability and to avoid roundoff errors.</para>
        /// </summary>
        [System.Xml.Serialization.XmlAttributeAttribute("bezier-offset2")]
        public decimal BezierOffset2 { get; set; }

        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the BezierOffset2 property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool BezierOffset2Specified { get; set; }

        /// <summary>
        /// <para>The color type indicates the color of an element. Color may be represented as hexadecimal RGB triples, as in HTML, or as hexadecimal ARGB tuples, with the A indicating alpha of transparency. An alpha value of 00 is totally transparent; FF is totally opaque. If RGB is used, the A value is assumed to be FF.
        ///
        ///For instance, the RGB value "#800080" represents purple. An ARGB value of "#40800080" would be a transparent purple.
        ///
        ///As in SVG 1.1, colors are defined in terms of the sRGB color space (IEC 61966).</para>
        /// <para xml:lang="en">Pattern: #[\dA-F]{6}([\dA-F][\dA-F])?.</para>
        /// </summary>
        [System.ComponentModel.DataAnnotations.RegularExpressionAttribute("#[\\dA-F]{6}([\\dA-F][\\dA-F])?")]
        [System.Xml.Serialization.XmlAttributeAttribute("color")]
        public string Color { get; set; }

        [System.Xml.Serialization.XmlAttributeAttribute("id")]
        public string Id { get; set; }
    }

    /// <summary>
    /// <para>The orientation attribute indicates whether slurs and ties are overhand (tips down) or underhand (tips up). This is distinct from the placement attribute used by any notation type.</para>
    /// </summary>
    [System.ComponentModel.DescriptionAttribute("The orientation attribute indicates whether slurs and ties are overhand (tips dow" +
        "n) or underhand (tips up). This is distinct from the placement attribute used by" +
        " any notation type.")]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XmlSchemaClassGenerator", "2.1.1142.0")]
    public partial interface IOrientation
    {

        OverUnder Orientation
        {
            get;
            set;
        }
    }

    /// <summary>
    /// <para>The bezier attribute group is used to indicate the curvature of slurs and ties, representing the control points for a cubic bezier curve. For ties, the bezier attribute group is used with the tied element.
    ///
    ///Normal slurs, S-shaped slurs, and ties need only two bezier points: one associated with the start of the slur or tie, the other with the stop. Complex slurs and slurs divided over system breaks can specify additional bezier data at slur elements with a continue type.
    ///
    ///The bezier-x, bezier-y, and bezier-offset attributes describe the outgoing bezier point for slurs and ties with a start type, and the incoming bezier point for slurs and ties with types of stop or continue. The bezier-x2, bezier-y2, and bezier-offset2 attributes are only valid with slurs of type continue, and describe the outgoing bezier point.
    ///
    ///The bezier-x, bezier-y, bezier-x2, and bezier-y2 attributes are specified in tenths, relative to any position settings associated with the slur or tied element. The bezier-offset and bezier-offset2 attributes are measured in terms of musical divisions, like the offset element. 
    ///
    ///The bezier-offset and bezier-offset2 attributes are deprecated as of MusicXML 3.1. If both the bezier-x and bezier-offset attributes are present, the bezier-x attribute takes priority. Similarly, the bezier-x2 attribute takes priority over the bezier-offset2 attribute. The two types of bezier attributes are not additive.</para>
    /// </summary>
    [System.ComponentModel.DescriptionAttribute(@"The bezier attribute group is used to indicate the curvature of slurs and ties, representing the control points for a cubic bezier curve. For ties, the bezier attribute group is used with the tied element. Normal slurs, S-shaped slurs, and ties need only two bezier points: one associated with the start of the slur or tie, the other with the stop. Complex slurs and slurs divided over system breaks can specify additional bezier data at slur elements with a continue type. The bezier-x, bezier-y, and bezier-offset attributes describe the outgoing bezier point for slurs and ties with a start type, and the incoming bezier point for slurs and ties with types of stop or continue. The bezier-x2, bezier-y2, and bezier-offset2 attributes are only valid with slurs of type continue, and describe the outgoing bezier point. The bezier-x, bezier-y, bezier-x2, and bezier-y2 attributes are specified in tenths, relative to any position settings associated with the slur or tied element. The bezier-offset and bezier-offset2 attributes are measured in terms of musical divisions, like the offset element. The bezier-offset and bezier-offset2 attributes are deprecated as of MusicXML 3.1. If both the bezier-x and bezier-offset attributes are present, the bezier-x attribute takes priority. Similarly, the bezier-x2 attribute takes priority over the bezier-offset2 attribute. The two types of bezier attributes are not additive.")]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XmlSchemaClassGenerator", "2.1.1142.0")]
    public partial interface IBezier
    {

        /// <summary>
        /// <para>The tenths type is a number representing tenths of interline staff space (positive or negative). Both integer and decimal values are allowed, such as 5 for a half space and 2.5 for a quarter space. Interline space is measured from the middle of a staff line.
        ///
        ///Distances in a MusicXML file are measured in tenths of staff space. Tenths are then scaled to millimeters within the scaling element, used in the defaults element at the start of a score. Individual staves can apply a scaling factor to adjust staff size. When a MusicXML element or attribute refers to tenths, it means the global tenths defined by the scaling element, not the local tenths as adjusted by the staff-size element.</para>
        /// </summary>
        decimal BezierX
        {
            get;
            set;
        }

        /// <summary>
        /// <para>The tenths type is a number representing tenths of interline staff space (positive or negative). Both integer and decimal values are allowed, such as 5 for a half space and 2.5 for a quarter space. Interline space is measured from the middle of a staff line.
        ///
        ///Distances in a MusicXML file are measured in tenths of staff space. Tenths are then scaled to millimeters within the scaling element, used in the defaults element at the start of a score. Individual staves can apply a scaling factor to adjust staff size. When a MusicXML element or attribute refers to tenths, it means the global tenths defined by the scaling element, not the local tenths as adjusted by the staff-size element.</para>
        /// </summary>
        decimal BezierY
        {
            get;
            set;
        }

        /// <summary>
        /// <para>The tenths type is a number representing tenths of interline staff space (positive or negative). Both integer and decimal values are allowed, such as 5 for a half space and 2.5 for a quarter space. Interline space is measured from the middle of a staff line.
        ///
        ///Distances in a MusicXML file are measured in tenths of staff space. Tenths are then scaled to millimeters within the scaling element, used in the defaults element at the start of a score. Individual staves can apply a scaling factor to adjust staff size. When a MusicXML element or attribute refers to tenths, it means the global tenths defined by the scaling element, not the local tenths as adjusted by the staff-size element.</para>
        /// </summary>
        decimal BezierX2
        {
            get;
            set;
        }

        /// <summary>
        /// <para>The tenths type is a number representing tenths of interline staff space (positive or negative). Both integer and decimal values are allowed, such as 5 for a half space and 2.5 for a quarter space. Interline space is measured from the middle of a staff line.
        ///
        ///Distances in a MusicXML file are measured in tenths of staff space. Tenths are then scaled to millimeters within the scaling element, used in the defaults element at the start of a score. Individual staves can apply a scaling factor to adjust staff size. When a MusicXML element or attribute refers to tenths, it means the global tenths defined by the scaling element, not the local tenths as adjusted by the staff-size element.</para>
        /// </summary>
        decimal BezierY2
        {
            get;
            set;
        }

        /// <summary>
        /// <para>The divisions type is used to express values in terms of the musical divisions defined by the divisions element. It is preferred that these be integer values both for MIDI interoperability and to avoid roundoff errors.</para>
        /// </summary>
        decimal BezierOffset
        {
            get;
            set;
        }

        /// <summary>
        /// <para>The divisions type is used to express values in terms of the musical divisions defined by the divisions element. It is preferred that these be integer values both for MIDI interoperability and to avoid roundoff errors.</para>
        /// </summary>
        decimal BezierOffset2
        {
            get;
            set;
        }
    }

    /// <summary>
    /// <para>Slur types are empty. Most slurs are represented with two elements: one with a start type, and one with a stop type. Slurs can add more elements using a continue type. This is typically used to specify the formatting of cross-system slurs, or to specify the shape of very complex slurs.</para>
    /// </summary>
    [System.ComponentModel.DescriptionAttribute(@"Slur types are empty. Most slurs are represented with two elements: one with a start type, and one with a stop type. Slurs can add more elements using a continue type. This is typically used to specify the formatting of cross-system slurs, or to specify the shape of very complex slurs.")]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XmlSchemaClassGenerator", "2.1.1142.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute("slur", Namespace="")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class Slur : ILineType, IDashedFormatting, IPosition, IPlacement, IOrientation, IBezier, IColor, IOptionalUniqueId
    {

        [System.ComponentModel.DataAnnotations.RequiredAttribute(AllowEmptyStrings=true)]
        [System.Xml.Serialization.XmlAttributeAttribute("type")]
        public StartStopContinue Type { get; set; }

        [System.Xml.Serialization.XmlIgnoreAttribute()]
        private byte _number = 1;

        /// <summary>
        /// <para>Slurs, tuplets, and many other features can be concurrent and overlap within a single musical part. The number-level entity distinguishes up to 16 concurrent objects of the same type when the objects overlap in MusicXML document order. Values greater than 6 are usually only needed for music with a large number of divisi staves in a single part, or if there are more than 6 cross-staff arpeggios in a single measure. When a number-level value is implied, the value is 1 by default.
        ///
        ///When polyphonic parts are involved, the ordering within a MusicXML document can differ from musical score order. As an example, say we have a piano part in 4/4 where within a single measure, all the notes on the top staff are followed by all the notes on the bottom staff. In this example, each staff has a slur that starts on beat 2 and stops on beat 3, and there is a third slur that goes from beat 1 of one staff to beat 4 of the other staff.
        ///
        ///In this situation, the two mid-measure slurs can use the same number because they do not overlap in MusicXML document order, even though they do overlap in musical score order. Within the MusicXML document, the top staff slur will both start and stop before the bottom staff slur starts and stops.
        ///
        ///If the cross-staff slur starts in the top staff and stops in the bottom staff, it will need a separate number from the mid-measure slurs because it overlaps those slurs in MusicXML document order. However, if the cross-staff slur starts in the bottom staff and stops in the top staff, all three slurs can use the same number. None of them overlap within the MusicXML document, even though they all overlap each other in the musical score order. Within the MusicXML document, the start and stop of the top-staff slur will be followed by the stop and start of the cross-staff slur, followed by the start and stop of the bottom-staff slur.
        ///
        ///As this example demonstrates, a reading program should be prepared to handle cases where the number-levels start and stop in an arbitrary order. Because the start and stop values refer to musical score order, a program may find the stopping point of an object earlier in the MusicXML document than it will find its starting point.</para>
        /// <para xml:lang="en">Minimum inclusive value: 1.</para>
        /// <para xml:lang="en">Maximum inclusive value: 16.</para>
        /// </summary>
        [System.ComponentModel.DefaultValueAttribute(1)]
        [System.ComponentModel.DataAnnotations.RangeAttribute(typeof(decimal), "1", "16")]
        [System.Xml.Serialization.XmlAttributeAttribute("number")]
        public byte Number
        {
            get
            {
                return _number;
            }
            set
            {
                _number = value;
            }
        }

        [System.Xml.Serialization.XmlAttributeAttribute("line-type")]
        public LineType LineType { get; set; }

        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the LineType property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool LineTypeSpecified { get; set; }

        /// <summary>
        /// <para>The tenths type is a number representing tenths of interline staff space (positive or negative). Both integer and decimal values are allowed, such as 5 for a half space and 2.5 for a quarter space. Interline space is measured from the middle of a staff line.
        ///
        ///Distances in a MusicXML file are measured in tenths of staff space. Tenths are then scaled to millimeters within the scaling element, used in the defaults element at the start of a score. Individual staves can apply a scaling factor to adjust staff size. When a MusicXML element or attribute refers to tenths, it means the global tenths defined by the scaling element, not the local tenths as adjusted by the staff-size element.</para>
        /// </summary>
        [System.Xml.Serialization.XmlAttributeAttribute("dash-length")]
        public decimal DashLength { get; set; }

        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the DashLength property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool DashLengthSpecified { get; set; }

        /// <summary>
        /// <para>The tenths type is a number representing tenths of interline staff space (positive or negative). Both integer and decimal values are allowed, such as 5 for a half space and 2.5 for a quarter space. Interline space is measured from the middle of a staff line.
        ///
        ///Distances in a MusicXML file are measured in tenths of staff space. Tenths are then scaled to millimeters within the scaling element, used in the defaults element at the start of a score. Individual staves can apply a scaling factor to adjust staff size. When a MusicXML element or attribute refers to tenths, it means the global tenths defined by the scaling element, not the local tenths as adjusted by the staff-size element.</para>
        /// </summary>
        [System.Xml.Serialization.XmlAttributeAttribute("space-length")]
        public decimal SpaceLength { get; set; }

        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the SpaceLength property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool SpaceLengthSpecified { get; set; }

        /// <summary>
        /// <para>The tenths type is a number representing tenths of interline staff space (positive or negative). Both integer and decimal values are allowed, such as 5 for a half space and 2.5 for a quarter space. Interline space is measured from the middle of a staff line.
        ///
        ///Distances in a MusicXML file are measured in tenths of staff space. Tenths are then scaled to millimeters within the scaling element, used in the defaults element at the start of a score. Individual staves can apply a scaling factor to adjust staff size. When a MusicXML element or attribute refers to tenths, it means the global tenths defined by the scaling element, not the local tenths as adjusted by the staff-size element.</para>
        /// </summary>
        [System.Xml.Serialization.XmlAttributeAttribute("default-x")]
        public decimal DefaultX { get; set; }

        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the DefaultX property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool DefaultXSpecified { get; set; }

        /// <summary>
        /// <para>The tenths type is a number representing tenths of interline staff space (positive or negative). Both integer and decimal values are allowed, such as 5 for a half space and 2.5 for a quarter space. Interline space is measured from the middle of a staff line.
        ///
        ///Distances in a MusicXML file are measured in tenths of staff space. Tenths are then scaled to millimeters within the scaling element, used in the defaults element at the start of a score. Individual staves can apply a scaling factor to adjust staff size. When a MusicXML element or attribute refers to tenths, it means the global tenths defined by the scaling element, not the local tenths as adjusted by the staff-size element.</para>
        /// </summary>
        [System.Xml.Serialization.XmlAttributeAttribute("default-y")]
        public decimal DefaultY { get; set; }

        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the DefaultY property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool DefaultYSpecified { get; set; }

        /// <summary>
        /// <para>The tenths type is a number representing tenths of interline staff space (positive or negative). Both integer and decimal values are allowed, such as 5 for a half space and 2.5 for a quarter space. Interline space is measured from the middle of a staff line.
        ///
        ///Distances in a MusicXML file are measured in tenths of staff space. Tenths are then scaled to millimeters within the scaling element, used in the defaults element at the start of a score. Individual staves can apply a scaling factor to adjust staff size. When a MusicXML element or attribute refers to tenths, it means the global tenths defined by the scaling element, not the local tenths as adjusted by the staff-size element.</para>
        /// </summary>
        [System.Xml.Serialization.XmlAttributeAttribute("relative-x")]
        public decimal RelativeX { get; set; }

        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the RelativeX property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool RelativeXSpecified { get; set; }

        /// <summary>
        /// <para>The tenths type is a number representing tenths of interline staff space (positive or negative). Both integer and decimal values are allowed, such as 5 for a half space and 2.5 for a quarter space. Interline space is measured from the middle of a staff line.
        ///
        ///Distances in a MusicXML file are measured in tenths of staff space. Tenths are then scaled to millimeters within the scaling element, used in the defaults element at the start of a score. Individual staves can apply a scaling factor to adjust staff size. When a MusicXML element or attribute refers to tenths, it means the global tenths defined by the scaling element, not the local tenths as adjusted by the staff-size element.</para>
        /// </summary>
        [System.Xml.Serialization.XmlAttributeAttribute("relative-y")]
        public decimal RelativeY { get; set; }

        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the RelativeY property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool RelativeYSpecified { get; set; }

        [System.Xml.Serialization.XmlAttributeAttribute("placement")]
        public AboveBelow Placement { get; set; }

        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the Placement property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool PlacementSpecified { get; set; }

        [System.Xml.Serialization.XmlAttributeAttribute("orientation")]
        public OverUnder Orientation { get; set; }

        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the Orientation property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool OrientationSpecified { get; set; }

        /// <summary>
        /// <para>The tenths type is a number representing tenths of interline staff space (positive or negative). Both integer and decimal values are allowed, such as 5 for a half space and 2.5 for a quarter space. Interline space is measured from the middle of a staff line.
        ///
        ///Distances in a MusicXML file are measured in tenths of staff space. Tenths are then scaled to millimeters within the scaling element, used in the defaults element at the start of a score. Individual staves can apply a scaling factor to adjust staff size. When a MusicXML element or attribute refers to tenths, it means the global tenths defined by the scaling element, not the local tenths as adjusted by the staff-size element.</para>
        /// </summary>
        [System.Xml.Serialization.XmlAttributeAttribute("bezier-x")]
        public decimal BezierX { get; set; }

        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the BezierX property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool BezierXSpecified { get; set; }

        /// <summary>
        /// <para>The tenths type is a number representing tenths of interline staff space (positive or negative). Both integer and decimal values are allowed, such as 5 for a half space and 2.5 for a quarter space. Interline space is measured from the middle of a staff line.
        ///
        ///Distances in a MusicXML file are measured in tenths of staff space. Tenths are then scaled to millimeters within the scaling element, used in the defaults element at the start of a score. Individual staves can apply a scaling factor to adjust staff size. When a MusicXML element or attribute refers to tenths, it means the global tenths defined by the scaling element, not the local tenths as adjusted by the staff-size element.</para>
        /// </summary>
        [System.Xml.Serialization.XmlAttributeAttribute("bezier-y")]
        public decimal BezierY { get; set; }

        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the BezierY property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool BezierYSpecified { get; set; }

        /// <summary>
        /// <para>The tenths type is a number representing tenths of interline staff space (positive or negative). Both integer and decimal values are allowed, such as 5 for a half space and 2.5 for a quarter space. Interline space is measured from the middle of a staff line.
        ///
        ///Distances in a MusicXML file are measured in tenths of staff space. Tenths are then scaled to millimeters within the scaling element, used in the defaults element at the start of a score. Individual staves can apply a scaling factor to adjust staff size. When a MusicXML element or attribute refers to tenths, it means the global tenths defined by the scaling element, not the local tenths as adjusted by the staff-size element.</para>
        /// </summary>
        [System.Xml.Serialization.XmlAttributeAttribute("bezier-x2")]
        public decimal BezierX2 { get; set; }

        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the BezierX2 property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool BezierX2Specified { get; set; }

        /// <summary>
        /// <para>The tenths type is a number representing tenths of interline staff space (positive or negative). Both integer and decimal values are allowed, such as 5 for a half space and 2.5 for a quarter space. Interline space is measured from the middle of a staff line.
        ///
        ///Distances in a MusicXML file are measured in tenths of staff space. Tenths are then scaled to millimeters within the scaling element, used in the defaults element at the start of a score. Individual staves can apply a scaling factor to adjust staff size. When a MusicXML element or attribute refers to tenths, it means the global tenths defined by the scaling element, not the local tenths as adjusted by the staff-size element.</para>
        /// </summary>
        [System.Xml.Serialization.XmlAttributeAttribute("bezier-y2")]
        public decimal BezierY2 { get; set; }

        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the BezierY2 property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool BezierY2Specified { get; set; }

        /// <summary>
        /// <para>The divisions type is used to express values in terms of the musical divisions defined by the divisions element. It is preferred that these be integer values both for MIDI interoperability and to avoid roundoff errors.</para>
        /// </summary>
        [System.Xml.Serialization.XmlAttributeAttribute("bezier-offset")]
        public decimal BezierOffset { get; set; }

        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the BezierOffset property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool BezierOffsetSpecified { get; set; }

        /// <summary>
        /// <para>The divisions type is used to express values in terms of the musical divisions defined by the divisions element. It is preferred that these be integer values both for MIDI interoperability and to avoid roundoff errors.</para>
        /// </summary>
        [System.Xml.Serialization.XmlAttributeAttribute("bezier-offset2")]
        public decimal BezierOffset2 { get; set; }

        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the BezierOffset2 property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool BezierOffset2Specified { get; set; }

        /// <summary>
        /// <para>The color type indicates the color of an element. Color may be represented as hexadecimal RGB triples, as in HTML, or as hexadecimal ARGB tuples, with the A indicating alpha of transparency. An alpha value of 00 is totally transparent; FF is totally opaque. If RGB is used, the A value is assumed to be FF.
        ///
        ///For instance, the RGB value "#800080" represents purple. An ARGB value of "#40800080" would be a transparent purple.
        ///
        ///As in SVG 1.1, colors are defined in terms of the sRGB color space (IEC 61966).</para>
        /// <para xml:lang="en">Pattern: #[\dA-F]{6}([\dA-F][\dA-F])?.</para>
        /// </summary>
        [System.ComponentModel.DataAnnotations.RegularExpressionAttribute("#[\\dA-F]{6}([\\dA-F][\\dA-F])?")]
        [System.Xml.Serialization.XmlAttributeAttribute("color")]
        public string Color { get; set; }

        [System.Xml.Serialization.XmlAttributeAttribute("id")]
        public string Id { get; set; }
    }

    /// <summary>
    /// <para>A tuplet element is present when a tuplet is to be displayed graphically, in addition to the sound data provided by the time-modification elements. The number attribute is used to distinguish nested tuplets. The bracket attribute is used to indicate the presence of a bracket. If unspecified, the results are implementation-dependent. The line-shape attribute is used to specify whether the bracket is straight or in the older curved or slurred style. It is straight by default.
    ///
    ///Whereas a time-modification element shows how the cumulative, sounding effect of tuplets and double-note tremolos compare to the written note type, the tuplet element describes how this is displayed. The tuplet element also provides more detailed representation information than the time-modification element, and is needed to represent nested tuplets and other complex tuplets accurately.
    ///
    ///The show-number attribute is used to display either the number of actual notes, the number of both actual and normal notes, or neither. It is actual by default. The show-type attribute is used to display either the actual type, both the actual and normal types, or neither. It is none by default.</para>
    /// </summary>
    [System.ComponentModel.DescriptionAttribute(@"A tuplet element is present when a tuplet is to be displayed graphically, in addition to the sound data provided by the time-modification elements. The number attribute is used to distinguish nested tuplets. The bracket attribute is used to indicate the presence of a bracket. If unspecified, the results are implementation-dependent. The line-shape attribute is used to specify whether the bracket is straight or in the older curved or slurred style. It is straight by default. Whereas a time-modification element shows how the cumulative, sounding effect of tuplets and double-note tremolos compare to the written note type, the tuplet element describes how this is displayed. The tuplet element also provides more detailed representation information than the time-modification element, and is needed to represent nested tuplets and other complex tuplets accurately. The show-number attribute is used to display either the number of actual notes, the number of both actual and normal notes, or neither. It is actual by default. The show-type attribute is used to display either the actual type, both the actual and normal types, or neither. It is none by default.")]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XmlSchemaClassGenerator", "2.1.1142.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute("tuplet", Namespace="")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class Tuplet : ILineShape, IPosition, IPlacement, IOptionalUniqueId
    {

        /// <summary>
        /// <para>The tuplet-actual element provide optional full control over how the actual part of the tuplet is displayed, including number and note type (with dots). If any of these elements are absent, their values are based on the time-modification element.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("The tuplet-actual element provide optional full control over how the actual part " +
            "of the tuplet is displayed, including number and note type (with dots). If any o" +
            "f these elements are absent, their values are based on the time-modification ele" +
            "ment.")]
        [System.Xml.Serialization.XmlElementAttribute("tuplet-actual")]
        public TupletPortion TupletActual { get; set; }

        /// <summary>
        /// <para>The tuplet-normal element provide optional full control over how the normal part of the tuplet is displayed, including number and note type (with dots). If any of these elements are absent, their values are based on the time-modification element.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("The tuplet-normal element provide optional full control over how the normal part " +
            "of the tuplet is displayed, including number and note type (with dots). If any o" +
            "f these elements are absent, their values are based on the time-modification ele" +
            "ment.")]
        [System.Xml.Serialization.XmlElementAttribute("tuplet-normal")]
        public TupletPortion TupletNormal { get; set; }

        [System.ComponentModel.DataAnnotations.RequiredAttribute(AllowEmptyStrings=true)]
        [System.Xml.Serialization.XmlAttributeAttribute("type")]
        public StartStop Type { get; set; }

        /// <summary>
        /// <para>Slurs, tuplets, and many other features can be concurrent and overlap within a single musical part. The number-level entity distinguishes up to 16 concurrent objects of the same type when the objects overlap in MusicXML document order. Values greater than 6 are usually only needed for music with a large number of divisi staves in a single part, or if there are more than 6 cross-staff arpeggios in a single measure. When a number-level value is implied, the value is 1 by default.
        ///
        ///When polyphonic parts are involved, the ordering within a MusicXML document can differ from musical score order. As an example, say we have a piano part in 4/4 where within a single measure, all the notes on the top staff are followed by all the notes on the bottom staff. In this example, each staff has a slur that starts on beat 2 and stops on beat 3, and there is a third slur that goes from beat 1 of one staff to beat 4 of the other staff.
        ///
        ///In this situation, the two mid-measure slurs can use the same number because they do not overlap in MusicXML document order, even though they do overlap in musical score order. Within the MusicXML document, the top staff slur will both start and stop before the bottom staff slur starts and stops.
        ///
        ///If the cross-staff slur starts in the top staff and stops in the bottom staff, it will need a separate number from the mid-measure slurs because it overlaps those slurs in MusicXML document order. However, if the cross-staff slur starts in the bottom staff and stops in the top staff, all three slurs can use the same number. None of them overlap within the MusicXML document, even though they all overlap each other in the musical score order. Within the MusicXML document, the start and stop of the top-staff slur will be followed by the stop and start of the cross-staff slur, followed by the start and stop of the bottom-staff slur.
        ///
        ///As this example demonstrates, a reading program should be prepared to handle cases where the number-levels start and stop in an arbitrary order. Because the start and stop values refer to musical score order, a program may find the stopping point of an object earlier in the MusicXML document than it will find its starting point.</para>
        /// <para xml:lang="en">Minimum inclusive value: 1.</para>
        /// <para xml:lang="en">Maximum inclusive value: 16.</para>
        /// </summary>
        [System.ComponentModel.DataAnnotations.RangeAttribute(typeof(decimal), "1", "16")]
        [System.Xml.Serialization.XmlAttributeAttribute("number")]
        public byte Number { get; set; }

        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the Number property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool NumberSpecified { get; set; }

        [System.Xml.Serialization.XmlAttributeAttribute("bracket")]
        public YesNo Bracket { get; set; }

        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the Bracket property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool BracketSpecified { get; set; }

        [System.Xml.Serialization.XmlAttributeAttribute("show-number")]
        public ShowTuplet ShowNumber { get; set; }

        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the ShowNumber property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool ShowNumberSpecified { get; set; }

        [System.Xml.Serialization.XmlAttributeAttribute("show-type")]
        public ShowTuplet ShowType { get; set; }

        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the ShowType property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool ShowTypeSpecified { get; set; }

        [System.Xml.Serialization.XmlAttributeAttribute("line-shape")]
        public LineShape LineShape { get; set; }

        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the LineShape property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool LineShapeSpecified { get; set; }

        /// <summary>
        /// <para>The tenths type is a number representing tenths of interline staff space (positive or negative). Both integer and decimal values are allowed, such as 5 for a half space and 2.5 for a quarter space. Interline space is measured from the middle of a staff line.
        ///
        ///Distances in a MusicXML file are measured in tenths of staff space. Tenths are then scaled to millimeters within the scaling element, used in the defaults element at the start of a score. Individual staves can apply a scaling factor to adjust staff size. When a MusicXML element or attribute refers to tenths, it means the global tenths defined by the scaling element, not the local tenths as adjusted by the staff-size element.</para>
        /// </summary>
        [System.Xml.Serialization.XmlAttributeAttribute("default-x")]
        public decimal DefaultX { get; set; }

        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the DefaultX property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool DefaultXSpecified { get; set; }

        /// <summary>
        /// <para>The tenths type is a number representing tenths of interline staff space (positive or negative). Both integer and decimal values are allowed, such as 5 for a half space and 2.5 for a quarter space. Interline space is measured from the middle of a staff line.
        ///
        ///Distances in a MusicXML file are measured in tenths of staff space. Tenths are then scaled to millimeters within the scaling element, used in the defaults element at the start of a score. Individual staves can apply a scaling factor to adjust staff size. When a MusicXML element or attribute refers to tenths, it means the global tenths defined by the scaling element, not the local tenths as adjusted by the staff-size element.</para>
        /// </summary>
        [System.Xml.Serialization.XmlAttributeAttribute("default-y")]
        public decimal DefaultY { get; set; }

        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the DefaultY property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool DefaultYSpecified { get; set; }

        /// <summary>
        /// <para>The tenths type is a number representing tenths of interline staff space (positive or negative). Both integer and decimal values are allowed, such as 5 for a half space and 2.5 for a quarter space. Interline space is measured from the middle of a staff line.
        ///
        ///Distances in a MusicXML file are measured in tenths of staff space. Tenths are then scaled to millimeters within the scaling element, used in the defaults element at the start of a score. Individual staves can apply a scaling factor to adjust staff size. When a MusicXML element or attribute refers to tenths, it means the global tenths defined by the scaling element, not the local tenths as adjusted by the staff-size element.</para>
        /// </summary>
        [System.Xml.Serialization.XmlAttributeAttribute("relative-x")]
        public decimal RelativeX { get; set; }

        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the RelativeX property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool RelativeXSpecified { get; set; }

        /// <summary>
        /// <para>The tenths type is a number representing tenths of interline staff space (positive or negative). Both integer and decimal values are allowed, such as 5 for a half space and 2.5 for a quarter space. Interline space is measured from the middle of a staff line.
        ///
        ///Distances in a MusicXML file are measured in tenths of staff space. Tenths are then scaled to millimeters within the scaling element, used in the defaults element at the start of a score. Individual staves can apply a scaling factor to adjust staff size. When a MusicXML element or attribute refers to tenths, it means the global tenths defined by the scaling element, not the local tenths as adjusted by the staff-size element.</para>
        /// </summary>
        [System.Xml.Serialization.XmlAttributeAttribute("relative-y")]
        public decimal RelativeY { get; set; }

        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the RelativeY property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool RelativeYSpecified { get; set; }

        [System.Xml.Serialization.XmlAttributeAttribute("placement")]
        public AboveBelow Placement { get; set; }

        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the Placement property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool PlacementSpecified { get; set; }

        [System.Xml.Serialization.XmlAttributeAttribute("id")]
        public string Id { get; set; }
    }

    /// <summary>
    /// <para>The tuplet-portion type provides optional full control over tuplet specifications. It allows the number and note type (including dots) to be set for the actual and normal portions of a single tuplet. If any of these elements are absent, their values are based on the time-modification element.</para>
    /// </summary>
    [System.ComponentModel.DescriptionAttribute(@"The tuplet-portion type provides optional full control over tuplet specifications. It allows the number and note type (including dots) to be set for the actual and normal portions of a single tuplet. If any of these elements are absent, their values are based on the time-modification element.")]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XmlSchemaClassGenerator", "2.1.1142.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute("tuplet-portion", Namespace="")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class TupletPortion
    {

        [System.Xml.Serialization.XmlElementAttribute("tuplet-number")]
        public TupletNumber TupletNumber { get; set; }

        [System.Xml.Serialization.XmlElementAttribute("tuplet-type")]
        public TupletType TupletType { get; set; }

        [System.Xml.Serialization.XmlIgnoreAttribute()]
        private System.Collections.ObjectModel.Collection<TupletDot> _tupletDot;

        [System.Xml.Serialization.XmlElementAttribute("tuplet-dot")]
        public System.Collections.ObjectModel.Collection<TupletDot> TupletDot
        {
            get
            {
                return _tupletDot;
            }
            private set
            {
                _tupletDot = value;
            }
        }

        /// <summary>
        /// <para xml:lang="en">Gets a value indicating whether the TupletDot collection is empty.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool TupletDotSpecified
        {
            get
            {
                return (this.TupletDot.Count != 0);
            }
        }

        /// <summary>
        /// <para xml:lang="en">Initializes a new instance of the <see cref="TupletPortion" /> class.</para>
        /// </summary>
        public TupletPortion()
        {
            this._tupletDot = new System.Collections.ObjectModel.Collection<TupletDot>();
        }
    }

    /// <summary>
    /// <para>The tuplet-number type indicates the number of notes for this portion of the tuplet.</para>
    /// </summary>
    [System.ComponentModel.DescriptionAttribute("The tuplet-number type indicates the number of notes for this portion of the tupl" +
        "et.")]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XmlSchemaClassGenerator", "2.1.1142.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute("tuplet-number", Namespace="")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class TupletNumber : IFont, IColor
    {

        /// <summary>
        /// <para xml:lang="en">Gets or sets the text value.</para>
        /// </summary>
        [System.Xml.Serialization.XmlTextAttribute()]
        public string Value { get; set; }

        /// <summary>
        /// <para>The font-family is a comma-separated list of font names. These can be specific font styles such as Maestro or Opus, or one of several generic font styles: music, engraved, handwritten, text, serif, sans-serif, handwritten, cursive, fantasy, and monospace. The music, engraved, and handwritten values refer to music fonts; the rest refer to text fonts. The fantasy style refers to decorative text such as found in older German-style printing.</para>
        /// <para xml:lang="en">Pattern: [^,]+(, ?[^,]+)*.</para>
        /// </summary>
        [System.ComponentModel.DataAnnotations.RegularExpressionAttribute("[^,]+(, ?[^,]+)*")]
        [System.Xml.Serialization.XmlAttributeAttribute("font-family")]
        public string FontFamily { get; set; }

        [System.Xml.Serialization.XmlAttributeAttribute("font-style")]
        public FontStyle FontStyle { get; set; }

        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the FontStyle property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool FontStyleSpecified { get; set; }

        /// <summary>
        /// <para>The font-size can be one of the CSS font sizes (xx-small, x-small, small, medium, large, x-large, xx-large) or a numeric point size.</para>
        /// </summary>
        [System.Xml.Serialization.XmlAttributeAttribute("font-size")]
        public string FontSize { get; set; }

        [System.Xml.Serialization.XmlAttributeAttribute("font-weight")]
        public FontWeight FontWeight { get; set; }

        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the FontWeight property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool FontWeightSpecified { get; set; }

        /// <summary>
        /// <para>The color type indicates the color of an element. Color may be represented as hexadecimal RGB triples, as in HTML, or as hexadecimal ARGB tuples, with the A indicating alpha of transparency. An alpha value of 00 is totally transparent; FF is totally opaque. If RGB is used, the A value is assumed to be FF.
        ///
        ///For instance, the RGB value "#800080" represents purple. An ARGB value of "#40800080" would be a transparent purple.
        ///
        ///As in SVG 1.1, colors are defined in terms of the sRGB color space (IEC 61966).</para>
        /// <para xml:lang="en">Pattern: #[\dA-F]{6}([\dA-F][\dA-F])?.</para>
        /// </summary>
        [System.ComponentModel.DataAnnotations.RegularExpressionAttribute("#[\\dA-F]{6}([\\dA-F][\\dA-F])?")]
        [System.Xml.Serialization.XmlAttributeAttribute("color")]
        public string Color { get; set; }
    }

    /// <summary>
    /// <para>The tuplet-type type indicates the graphical note type of the notes for this portion of the tuplet.</para>
    /// </summary>
    [System.ComponentModel.DescriptionAttribute("The tuplet-type type indicates the graphical note type of the notes for this port" +
        "ion of the tuplet.")]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XmlSchemaClassGenerator", "2.1.1142.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute("tuplet-type", Namespace="")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class TupletType : IFont, IColor
    {

        /// <summary>
        /// <para xml:lang="en">Gets or sets the text value.</para>
        /// </summary>
        [System.Xml.Serialization.XmlTextAttribute()]
        public NoteTypeValue Value { get; set; }

        /// <summary>
        /// <para>The font-family is a comma-separated list of font names. These can be specific font styles such as Maestro or Opus, or one of several generic font styles: music, engraved, handwritten, text, serif, sans-serif, handwritten, cursive, fantasy, and monospace. The music, engraved, and handwritten values refer to music fonts; the rest refer to text fonts. The fantasy style refers to decorative text such as found in older German-style printing.</para>
        /// <para xml:lang="en">Pattern: [^,]+(, ?[^,]+)*.</para>
        /// </summary>
        [System.ComponentModel.DataAnnotations.RegularExpressionAttribute("[^,]+(, ?[^,]+)*")]
        [System.Xml.Serialization.XmlAttributeAttribute("font-family")]
        public string FontFamily { get; set; }

        [System.Xml.Serialization.XmlAttributeAttribute("font-style")]
        public FontStyle FontStyle { get; set; }

        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the FontStyle property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool FontStyleSpecified { get; set; }

        /// <summary>
        /// <para>The font-size can be one of the CSS font sizes (xx-small, x-small, small, medium, large, x-large, xx-large) or a numeric point size.</para>
        /// </summary>
        [System.Xml.Serialization.XmlAttributeAttribute("font-size")]
        public string FontSize { get; set; }

        [System.Xml.Serialization.XmlAttributeAttribute("font-weight")]
        public FontWeight FontWeight { get; set; }

        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the FontWeight property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool FontWeightSpecified { get; set; }

        /// <summary>
        /// <para>The color type indicates the color of an element. Color may be represented as hexadecimal RGB triples, as in HTML, or as hexadecimal ARGB tuples, with the A indicating alpha of transparency. An alpha value of 00 is totally transparent; FF is totally opaque. If RGB is used, the A value is assumed to be FF.
        ///
        ///For instance, the RGB value "#800080" represents purple. An ARGB value of "#40800080" would be a transparent purple.
        ///
        ///As in SVG 1.1, colors are defined in terms of the sRGB color space (IEC 61966).</para>
        /// <para xml:lang="en">Pattern: #[\dA-F]{6}([\dA-F][\dA-F])?.</para>
        /// </summary>
        [System.ComponentModel.DataAnnotations.RegularExpressionAttribute("#[\\dA-F]{6}([\\dA-F][\\dA-F])?")]
        [System.Xml.Serialization.XmlAttributeAttribute("color")]
        public string Color { get; set; }
    }

    /// <summary>
    /// <para>The tuplet-dot type is used to specify dotted tuplet types.</para>
    /// </summary>
    [System.ComponentModel.DescriptionAttribute("The tuplet-dot type is used to specify dotted tuplet types.")]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XmlSchemaClassGenerator", "2.1.1142.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute("tuplet-dot", Namespace="")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class TupletDot : IFont, IColor
    {

        /// <summary>
        /// <para>The font-family is a comma-separated list of font names. These can be specific font styles such as Maestro or Opus, or one of several generic font styles: music, engraved, handwritten, text, serif, sans-serif, handwritten, cursive, fantasy, and monospace. The music, engraved, and handwritten values refer to music fonts; the rest refer to text fonts. The fantasy style refers to decorative text such as found in older German-style printing.</para>
        /// <para xml:lang="en">Pattern: [^,]+(, ?[^,]+)*.</para>
        /// </summary>
        [System.ComponentModel.DataAnnotations.RegularExpressionAttribute("[^,]+(, ?[^,]+)*")]
        [System.Xml.Serialization.XmlAttributeAttribute("font-family")]
        public string FontFamily { get; set; }

        [System.Xml.Serialization.XmlAttributeAttribute("font-style")]
        public FontStyle FontStyle { get; set; }

        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the FontStyle property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool FontStyleSpecified { get; set; }

        /// <summary>
        /// <para>The font-size can be one of the CSS font sizes (xx-small, x-small, small, medium, large, x-large, xx-large) or a numeric point size.</para>
        /// </summary>
        [System.Xml.Serialization.XmlAttributeAttribute("font-size")]
        public string FontSize { get; set; }

        [System.Xml.Serialization.XmlAttributeAttribute("font-weight")]
        public FontWeight FontWeight { get; set; }

        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the FontWeight property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool FontWeightSpecified { get; set; }

        /// <summary>
        /// <para>The color type indicates the color of an element. Color may be represented as hexadecimal RGB triples, as in HTML, or as hexadecimal ARGB tuples, with the A indicating alpha of transparency. An alpha value of 00 is totally transparent; FF is totally opaque. If RGB is used, the A value is assumed to be FF.
        ///
        ///For instance, the RGB value "#800080" represents purple. An ARGB value of "#40800080" would be a transparent purple.
        ///
        ///As in SVG 1.1, colors are defined in terms of the sRGB color space (IEC 61966).</para>
        /// <para xml:lang="en">Pattern: #[\dA-F]{6}([\dA-F][\dA-F])?.</para>
        /// </summary>
        [System.ComponentModel.DataAnnotations.RegularExpressionAttribute("#[\\dA-F]{6}([\\dA-F][\\dA-F])?")]
        [System.Xml.Serialization.XmlAttributeAttribute("color")]
        public string Color { get; set; }
    }

    /// <summary>
    /// <para>Glissando and slide types both indicate rapidly moving from one pitch to the other so that individual notes are not discerned. A slide is continuous between the two pitches and defaults to a solid line. The optional text for a is printed alongside the line.</para>
    /// </summary>
    [System.ComponentModel.DescriptionAttribute(@"Glissando and slide types both indicate rapidly moving from one pitch to the other so that individual notes are not discerned. A slide is continuous between the two pitches and defaults to a solid line. The optional text for a is printed alongside the line.")]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XmlSchemaClassGenerator", "2.1.1142.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute("slide", Namespace="")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class Slide : ILineType, IDashedFormatting, IPrintStyle, IBendSound, IOptionalUniqueId
    {

        /// <summary>
        /// <para xml:lang="en">Gets or sets the text value.</para>
        /// </summary>
        [System.Xml.Serialization.XmlTextAttribute()]
        public string Value { get; set; }

        [System.ComponentModel.DataAnnotations.RequiredAttribute(AllowEmptyStrings=true)]
        [System.Xml.Serialization.XmlAttributeAttribute("type")]
        public StartStop Type { get; set; }

        [System.Xml.Serialization.XmlIgnoreAttribute()]
        private byte _number = 1;

        /// <summary>
        /// <para>Slurs, tuplets, and many other features can be concurrent and overlap within a single musical part. The number-level entity distinguishes up to 16 concurrent objects of the same type when the objects overlap in MusicXML document order. Values greater than 6 are usually only needed for music with a large number of divisi staves in a single part, or if there are more than 6 cross-staff arpeggios in a single measure. When a number-level value is implied, the value is 1 by default.
        ///
        ///When polyphonic parts are involved, the ordering within a MusicXML document can differ from musical score order. As an example, say we have a piano part in 4/4 where within a single measure, all the notes on the top staff are followed by all the notes on the bottom staff. In this example, each staff has a slur that starts on beat 2 and stops on beat 3, and there is a third slur that goes from beat 1 of one staff to beat 4 of the other staff.
        ///
        ///In this situation, the two mid-measure slurs can use the same number because they do not overlap in MusicXML document order, even though they do overlap in musical score order. Within the MusicXML document, the top staff slur will both start and stop before the bottom staff slur starts and stops.
        ///
        ///If the cross-staff slur starts in the top staff and stops in the bottom staff, it will need a separate number from the mid-measure slurs because it overlaps those slurs in MusicXML document order. However, if the cross-staff slur starts in the bottom staff and stops in the top staff, all three slurs can use the same number. None of them overlap within the MusicXML document, even though they all overlap each other in the musical score order. Within the MusicXML document, the start and stop of the top-staff slur will be followed by the stop and start of the cross-staff slur, followed by the start and stop of the bottom-staff slur.
        ///
        ///As this example demonstrates, a reading program should be prepared to handle cases where the number-levels start and stop in an arbitrary order. Because the start and stop values refer to musical score order, a program may find the stopping point of an object earlier in the MusicXML document than it will find its starting point.</para>
        /// <para xml:lang="en">Minimum inclusive value: 1.</para>
        /// <para xml:lang="en">Maximum inclusive value: 16.</para>
        /// </summary>
        [System.ComponentModel.DefaultValueAttribute(1)]
        [System.ComponentModel.DataAnnotations.RangeAttribute(typeof(decimal), "1", "16")]
        [System.Xml.Serialization.XmlAttributeAttribute("number")]
        public byte Number
        {
            get
            {
                return _number;
            }
            set
            {
                _number = value;
            }
        }

        [System.Xml.Serialization.XmlAttributeAttribute("line-type")]
        public LineType LineType { get; set; }

        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the LineType property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool LineTypeSpecified { get; set; }

        /// <summary>
        /// <para>The tenths type is a number representing tenths of interline staff space (positive or negative). Both integer and decimal values are allowed, such as 5 for a half space and 2.5 for a quarter space. Interline space is measured from the middle of a staff line.
        ///
        ///Distances in a MusicXML file are measured in tenths of staff space. Tenths are then scaled to millimeters within the scaling element, used in the defaults element at the start of a score. Individual staves can apply a scaling factor to adjust staff size. When a MusicXML element or attribute refers to tenths, it means the global tenths defined by the scaling element, not the local tenths as adjusted by the staff-size element.</para>
        /// </summary>
        [System.Xml.Serialization.XmlAttributeAttribute("dash-length")]
        public decimal DashLength { get; set; }

        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the DashLength property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool DashLengthSpecified { get; set; }

        /// <summary>
        /// <para>The tenths type is a number representing tenths of interline staff space (positive or negative). Both integer and decimal values are allowed, such as 5 for a half space and 2.5 for a quarter space. Interline space is measured from the middle of a staff line.
        ///
        ///Distances in a MusicXML file are measured in tenths of staff space. Tenths are then scaled to millimeters within the scaling element, used in the defaults element at the start of a score. Individual staves can apply a scaling factor to adjust staff size. When a MusicXML element or attribute refers to tenths, it means the global tenths defined by the scaling element, not the local tenths as adjusted by the staff-size element.</para>
        /// </summary>
        [System.Xml.Serialization.XmlAttributeAttribute("space-length")]
        public decimal SpaceLength { get; set; }

        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the SpaceLength property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool SpaceLengthSpecified { get; set; }

        /// <summary>
        /// <para>The tenths type is a number representing tenths of interline staff space (positive or negative). Both integer and decimal values are allowed, such as 5 for a half space and 2.5 for a quarter space. Interline space is measured from the middle of a staff line.
        ///
        ///Distances in a MusicXML file are measured in tenths of staff space. Tenths are then scaled to millimeters within the scaling element, used in the defaults element at the start of a score. Individual staves can apply a scaling factor to adjust staff size. When a MusicXML element or attribute refers to tenths, it means the global tenths defined by the scaling element, not the local tenths as adjusted by the staff-size element.</para>
        /// </summary>
        [System.Xml.Serialization.XmlAttributeAttribute("default-x")]
        public decimal DefaultX { get; set; }

        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the DefaultX property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool DefaultXSpecified { get; set; }

        /// <summary>
        /// <para>The tenths type is a number representing tenths of interline staff space (positive or negative). Both integer and decimal values are allowed, such as 5 for a half space and 2.5 for a quarter space. Interline space is measured from the middle of a staff line.
        ///
        ///Distances in a MusicXML file are measured in tenths of staff space. Tenths are then scaled to millimeters within the scaling element, used in the defaults element at the start of a score. Individual staves can apply a scaling factor to adjust staff size. When a MusicXML element or attribute refers to tenths, it means the global tenths defined by the scaling element, not the local tenths as adjusted by the staff-size element.</para>
        /// </summary>
        [System.Xml.Serialization.XmlAttributeAttribute("default-y")]
        public decimal DefaultY { get; set; }

        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the DefaultY property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool DefaultYSpecified { get; set; }

        /// <summary>
        /// <para>The tenths type is a number representing tenths of interline staff space (positive or negative). Both integer and decimal values are allowed, such as 5 for a half space and 2.5 for a quarter space. Interline space is measured from the middle of a staff line.
        ///
        ///Distances in a MusicXML file are measured in tenths of staff space. Tenths are then scaled to millimeters within the scaling element, used in the defaults element at the start of a score. Individual staves can apply a scaling factor to adjust staff size. When a MusicXML element or attribute refers to tenths, it means the global tenths defined by the scaling element, not the local tenths as adjusted by the staff-size element.</para>
        /// </summary>
        [System.Xml.Serialization.XmlAttributeAttribute("relative-x")]
        public decimal RelativeX { get; set; }

        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the RelativeX property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool RelativeXSpecified { get; set; }

        /// <summary>
        /// <para>The tenths type is a number representing tenths of interline staff space (positive or negative). Both integer and decimal values are allowed, such as 5 for a half space and 2.5 for a quarter space. Interline space is measured from the middle of a staff line.
        ///
        ///Distances in a MusicXML file are measured in tenths of staff space. Tenths are then scaled to millimeters within the scaling element, used in the defaults element at the start of a score. Individual staves can apply a scaling factor to adjust staff size. When a MusicXML element or attribute refers to tenths, it means the global tenths defined by the scaling element, not the local tenths as adjusted by the staff-size element.</para>
        /// </summary>
        [System.Xml.Serialization.XmlAttributeAttribute("relative-y")]
        public decimal RelativeY { get; set; }

        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the RelativeY property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool RelativeYSpecified { get; set; }

        /// <summary>
        /// <para>The font-family is a comma-separated list of font names. These can be specific font styles such as Maestro or Opus, or one of several generic font styles: music, engraved, handwritten, text, serif, sans-serif, handwritten, cursive, fantasy, and monospace. The music, engraved, and handwritten values refer to music fonts; the rest refer to text fonts. The fantasy style refers to decorative text such as found in older German-style printing.</para>
        /// <para xml:lang="en">Pattern: [^,]+(, ?[^,]+)*.</para>
        /// </summary>
        [System.ComponentModel.DataAnnotations.RegularExpressionAttribute("[^,]+(, ?[^,]+)*")]
        [System.Xml.Serialization.XmlAttributeAttribute("font-family")]
        public string FontFamily { get; set; }

        [System.Xml.Serialization.XmlAttributeAttribute("font-style")]
        public FontStyle FontStyle { get; set; }

        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the FontStyle property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool FontStyleSpecified { get; set; }

        /// <summary>
        /// <para>The font-size can be one of the CSS font sizes (xx-small, x-small, small, medium, large, x-large, xx-large) or a numeric point size.</para>
        /// </summary>
        [System.Xml.Serialization.XmlAttributeAttribute("font-size")]
        public string FontSize { get; set; }

        [System.Xml.Serialization.XmlAttributeAttribute("font-weight")]
        public FontWeight FontWeight { get; set; }

        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the FontWeight property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool FontWeightSpecified { get; set; }

        /// <summary>
        /// <para>The color type indicates the color of an element. Color may be represented as hexadecimal RGB triples, as in HTML, or as hexadecimal ARGB tuples, with the A indicating alpha of transparency. An alpha value of 00 is totally transparent; FF is totally opaque. If RGB is used, the A value is assumed to be FF.
        ///
        ///For instance, the RGB value "#800080" represents purple. An ARGB value of "#40800080" would be a transparent purple.
        ///
        ///As in SVG 1.1, colors are defined in terms of the sRGB color space (IEC 61966).</para>
        /// <para xml:lang="en">Pattern: #[\dA-F]{6}([\dA-F][\dA-F])?.</para>
        /// </summary>
        [System.ComponentModel.DataAnnotations.RegularExpressionAttribute("#[\\dA-F]{6}([\\dA-F][\\dA-F])?")]
        [System.Xml.Serialization.XmlAttributeAttribute("color")]
        public string Color { get; set; }

        [System.Xml.Serialization.XmlAttributeAttribute("accelerate")]
        public YesNo Accelerate { get; set; }

        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the Accelerate property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool AccelerateSpecified { get; set; }

        /// <summary>
        /// <para>The trill-beats type specifies the beats used in a trill-sound or bend-sound attribute group. It is a decimal value with a minimum value of 2.</para>
        /// <para xml:lang="en">Minimum inclusive value: 2.</para>
        /// </summary>
        [System.Xml.Serialization.XmlAttributeAttribute("beats")]
        public decimal Beats { get; set; }

        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the Beats property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool BeatsSpecified { get; set; }

        /// <summary>
        /// <para>The percent type specifies a percentage from 0 to 100.</para>
        /// <para xml:lang="en">Minimum inclusive value: 0.</para>
        /// <para xml:lang="en">Maximum inclusive value: 100.</para>
        /// </summary>
        [System.ComponentModel.DataAnnotations.RangeAttribute(typeof(decimal), "0", "100")]
        [System.Xml.Serialization.XmlAttributeAttribute("first-beat")]
        public decimal FirstBeat { get; set; }

        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the FirstBeat property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool FirstBeatSpecified { get; set; }

        /// <summary>
        /// <para>The percent type specifies a percentage from 0 to 100.</para>
        /// <para xml:lang="en">Minimum inclusive value: 0.</para>
        /// <para xml:lang="en">Maximum inclusive value: 100.</para>
        /// </summary>
        [System.ComponentModel.DataAnnotations.RangeAttribute(typeof(decimal), "0", "100")]
        [System.Xml.Serialization.XmlAttributeAttribute("last-beat")]
        public decimal LastBeat { get; set; }

        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the LastBeat property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool LastBeatSpecified { get; set; }

        [System.Xml.Serialization.XmlAttributeAttribute("id")]
        public string Id { get; set; }
    }

    /// <summary>
    /// <para>Ornaments can be any of several types, followed optionally by accidentals. The accidental-mark element's content is represented the same as an accidental element, but with a different name to reflect the different musical meaning.</para>
    /// </summary>
    [System.ComponentModel.DescriptionAttribute("Ornaments can be any of several types, followed optionally by accidentals. The ac" +
        "cidental-mark element\'s content is represented the same as an accidental element" +
        ", but with a different name to reflect the different musical meaning.")]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XmlSchemaClassGenerator", "2.1.1142.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute("ornaments", Namespace="")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class Ornaments : IOptionalUniqueId
    {

        [System.Xml.Serialization.XmlIgnoreAttribute()]
        private System.Collections.ObjectModel.Collection<EmptyTrillSound> _trillMark;

        /// <summary>
        /// <para>The trill-mark element represents the trill-mark symbol.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("The trill-mark element represents the trill-mark symbol.")]
        [System.Xml.Serialization.XmlElementAttribute("trill-mark")]
        public System.Collections.ObjectModel.Collection<EmptyTrillSound> TrillMark
        {
            get
            {
                return _trillMark;
            }
            private set
            {
                _trillMark = value;
            }
        }

        /// <summary>
        /// <para xml:lang="en">Gets a value indicating whether the TrillMark collection is empty.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool TrillMarkSpecified
        {
            get
            {
                return (this.TrillMark.Count != 0);
            }
        }

        /// <summary>
        /// <para xml:lang="en">Initializes a new instance of the <see cref="Ornaments" /> class.</para>
        /// </summary>
        public Ornaments()
        {
            this._trillMark = new System.Collections.ObjectModel.Collection<EmptyTrillSound>();
            this._turn = new System.Collections.ObjectModel.Collection<HorizontalTurn>();
            this._delayedTurn = new System.Collections.ObjectModel.Collection<HorizontalTurn>();
            this._invertedTurn = new System.Collections.ObjectModel.Collection<HorizontalTurn>();
            this._delayedInvertedTurn = new System.Collections.ObjectModel.Collection<HorizontalTurn>();
            this._verticalTurn = new System.Collections.ObjectModel.Collection<EmptyTrillSound>();
            this._invertedVerticalTurn = new System.Collections.ObjectModel.Collection<EmptyTrillSound>();
            this._shake = new System.Collections.ObjectModel.Collection<EmptyTrillSound>();
            this._wavyLine = new System.Collections.ObjectModel.Collection<WavyLine>();
            this._mordent = new System.Collections.ObjectModel.Collection<Mordent>();
            this._invertedMordent = new System.Collections.ObjectModel.Collection<Mordent>();
            this._schleifer = new System.Collections.ObjectModel.Collection<EmptyPlacement>();
            this._tremolo = new System.Collections.ObjectModel.Collection<Tremolo>();
            this._haydn = new System.Collections.ObjectModel.Collection<EmptyTrillSound>();
            this._otherOrnament = new System.Collections.ObjectModel.Collection<OtherPlacementText>();
            this._accidentalMark = new System.Collections.ObjectModel.Collection<AccidentalMark>();
        }

        [System.Xml.Serialization.XmlIgnoreAttribute()]
        private System.Collections.ObjectModel.Collection<HorizontalTurn> _turn;

        /// <summary>
        /// <para>The turn element is the normal turn shape which goes up then down.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("The turn element is the normal turn shape which goes up then down.")]
        [System.Xml.Serialization.XmlElementAttribute("turn")]
        public System.Collections.ObjectModel.Collection<HorizontalTurn> Turn
        {
            get
            {
                return _turn;
            }
            private set
            {
                _turn = value;
            }
        }

        /// <summary>
        /// <para xml:lang="en">Gets a value indicating whether the Turn collection is empty.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool TurnSpecified
        {
            get
            {
                return (this.Turn.Count != 0);
            }
        }

        [System.Xml.Serialization.XmlIgnoreAttribute()]
        private System.Collections.ObjectModel.Collection<HorizontalTurn> _delayedTurn;

        /// <summary>
        /// <para>The delayed-turn element indicates a normal turn that is delayed until the end of the current note.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("The delayed-turn element indicates a normal turn that is delayed until the end of" +
            " the current note.")]
        [System.Xml.Serialization.XmlElementAttribute("delayed-turn")]
        public System.Collections.ObjectModel.Collection<HorizontalTurn> DelayedTurn
        {
            get
            {
                return _delayedTurn;
            }
            private set
            {
                _delayedTurn = value;
            }
        }

        /// <summary>
        /// <para xml:lang="en">Gets a value indicating whether the DelayedTurn collection is empty.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool DelayedTurnSpecified
        {
            get
            {
                return (this.DelayedTurn.Count != 0);
            }
        }

        [System.Xml.Serialization.XmlIgnoreAttribute()]
        private System.Collections.ObjectModel.Collection<HorizontalTurn> _invertedTurn;

        /// <summary>
        /// <para>The inverted-turn element has the shape which goes down and then up.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("The inverted-turn element has the shape which goes down and then up.")]
        [System.Xml.Serialization.XmlElementAttribute("inverted-turn")]
        public System.Collections.ObjectModel.Collection<HorizontalTurn> InvertedTurn
        {
            get
            {
                return _invertedTurn;
            }
            private set
            {
                _invertedTurn = value;
            }
        }

        /// <summary>
        /// <para xml:lang="en">Gets a value indicating whether the InvertedTurn collection is empty.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool InvertedTurnSpecified
        {
            get
            {
                return (this.InvertedTurn.Count != 0);
            }
        }

        [System.Xml.Serialization.XmlIgnoreAttribute()]
        private System.Collections.ObjectModel.Collection<HorizontalTurn> _delayedInvertedTurn;

        /// <summary>
        /// <para>The delayed-inverted-turn element indicates an inverted turn that is delayed until the end of the current note.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("The delayed-inverted-turn element indicates an inverted turn that is delayed unti" +
            "l the end of the current note.")]
        [System.Xml.Serialization.XmlElementAttribute("delayed-inverted-turn")]
        public System.Collections.ObjectModel.Collection<HorizontalTurn> DelayedInvertedTurn
        {
            get
            {
                return _delayedInvertedTurn;
            }
            private set
            {
                _delayedInvertedTurn = value;
            }
        }

        /// <summary>
        /// <para xml:lang="en">Gets a value indicating whether the DelayedInvertedTurn collection is empty.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool DelayedInvertedTurnSpecified
        {
            get
            {
                return (this.DelayedInvertedTurn.Count != 0);
            }
        }

        [System.Xml.Serialization.XmlIgnoreAttribute()]
        private System.Collections.ObjectModel.Collection<EmptyTrillSound> _verticalTurn;

        /// <summary>
        /// <para>The vertical-turn element has the turn symbol shape arranged vertically going from upper left to lower right.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("The vertical-turn element has the turn symbol shape arranged vertically going fro" +
            "m upper left to lower right.")]
        [System.Xml.Serialization.XmlElementAttribute("vertical-turn")]
        public System.Collections.ObjectModel.Collection<EmptyTrillSound> VerticalTurn
        {
            get
            {
                return _verticalTurn;
            }
            private set
            {
                _verticalTurn = value;
            }
        }

        /// <summary>
        /// <para xml:lang="en">Gets a value indicating whether the VerticalTurn collection is empty.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool VerticalTurnSpecified
        {
            get
            {
                return (this.VerticalTurn.Count != 0);
            }
        }

        [System.Xml.Serialization.XmlIgnoreAttribute()]
        private System.Collections.ObjectModel.Collection<EmptyTrillSound> _invertedVerticalTurn;

        /// <summary>
        /// <para>The inverted-vertical-turn element has the turn symbol shape arranged vertically going from upper right to lower left.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("The inverted-vertical-turn element has the turn symbol shape arranged vertically " +
            "going from upper right to lower left.")]
        [System.Xml.Serialization.XmlElementAttribute("inverted-vertical-turn")]
        public System.Collections.ObjectModel.Collection<EmptyTrillSound> InvertedVerticalTurn
        {
            get
            {
                return _invertedVerticalTurn;
            }
            private set
            {
                _invertedVerticalTurn = value;
            }
        }

        /// <summary>
        /// <para xml:lang="en">Gets a value indicating whether the InvertedVerticalTurn collection is empty.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool InvertedVerticalTurnSpecified
        {
            get
            {
                return (this.InvertedVerticalTurn.Count != 0);
            }
        }

        [System.Xml.Serialization.XmlIgnoreAttribute()]
        private System.Collections.ObjectModel.Collection<EmptyTrillSound> _shake;

        /// <summary>
        /// <para>The shake element has a similar appearance to an inverted-mordent element.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("The shake element has a similar appearance to an inverted-mordent element.")]
        [System.Xml.Serialization.XmlElementAttribute("shake")]
        public System.Collections.ObjectModel.Collection<EmptyTrillSound> Shake
        {
            get
            {
                return _shake;
            }
            private set
            {
                _shake = value;
            }
        }

        /// <summary>
        /// <para xml:lang="en">Gets a value indicating whether the Shake collection is empty.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool ShakeSpecified
        {
            get
            {
                return (this.Shake.Count != 0);
            }
        }

        [System.Xml.Serialization.XmlIgnoreAttribute()]
        private System.Collections.ObjectModel.Collection<WavyLine> _wavyLine;

        [System.Xml.Serialization.XmlElementAttribute("wavy-line")]
        public System.Collections.ObjectModel.Collection<WavyLine> WavyLine
        {
            get
            {
                return _wavyLine;
            }
            private set
            {
                _wavyLine = value;
            }
        }

        /// <summary>
        /// <para xml:lang="en">Gets a value indicating whether the WavyLine collection is empty.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool WavyLineSpecified
        {
            get
            {
                return (this.WavyLine.Count != 0);
            }
        }

        [System.Xml.Serialization.XmlIgnoreAttribute()]
        private System.Collections.ObjectModel.Collection<Mordent> _mordent;

        /// <summary>
        /// <para>The mordent element represents the sign with the vertical line. The choice of which mordent sign is inverted differs between MusicXML and SMuFL. The long attribute is "no" by default.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("The mordent element represents the sign with the vertical line. The choice of whi" +
            "ch mordent sign is inverted differs between MusicXML and SMuFL. The long attribu" +
            "te is \"no\" by default.")]
        [System.Xml.Serialization.XmlElementAttribute("mordent")]
        public System.Collections.ObjectModel.Collection<Mordent> Mordent
        {
            get
            {
                return _mordent;
            }
            private set
            {
                _mordent = value;
            }
        }

        /// <summary>
        /// <para xml:lang="en">Gets a value indicating whether the Mordent collection is empty.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool MordentSpecified
        {
            get
            {
                return (this.Mordent.Count != 0);
            }
        }

        [System.Xml.Serialization.XmlIgnoreAttribute()]
        private System.Collections.ObjectModel.Collection<Mordent> _invertedMordent;

        /// <summary>
        /// <para>The inverted-mordent element represents the sign without the vertical line. The choice of which mordent is inverted differs between MusicXML and SMuFL. The long attribute is "no" by default.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("The inverted-mordent element represents the sign without the vertical line. The c" +
            "hoice of which mordent is inverted differs between MusicXML and SMuFL. The long " +
            "attribute is \"no\" by default.")]
        [System.Xml.Serialization.XmlElementAttribute("inverted-mordent")]
        public System.Collections.ObjectModel.Collection<Mordent> InvertedMordent
        {
            get
            {
                return _invertedMordent;
            }
            private set
            {
                _invertedMordent = value;
            }
        }

        /// <summary>
        /// <para xml:lang="en">Gets a value indicating whether the InvertedMordent collection is empty.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool InvertedMordentSpecified
        {
            get
            {
                return (this.InvertedMordent.Count != 0);
            }
        }

        [System.Xml.Serialization.XmlIgnoreAttribute()]
        private System.Collections.ObjectModel.Collection<EmptyPlacement> _schleifer;

        /// <summary>
        /// <para>The name for this ornament is based on the German, to avoid confusion with the more common slide element defined earlier.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("The name for this ornament is based on the German, to avoid confusion with the mo" +
            "re common slide element defined earlier.")]
        [System.Xml.Serialization.XmlElementAttribute("schleifer")]
        public System.Collections.ObjectModel.Collection<EmptyPlacement> Schleifer
        {
            get
            {
                return _schleifer;
            }
            private set
            {
                _schleifer = value;
            }
        }

        /// <summary>
        /// <para xml:lang="en">Gets a value indicating whether the Schleifer collection is empty.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool SchleiferSpecified
        {
            get
            {
                return (this.Schleifer.Count != 0);
            }
        }

        [System.Xml.Serialization.XmlIgnoreAttribute()]
        private System.Collections.ObjectModel.Collection<Tremolo> _tremolo;

        [System.Xml.Serialization.XmlElementAttribute("tremolo")]
        public System.Collections.ObjectModel.Collection<Tremolo> Tremolo
        {
            get
            {
                return _tremolo;
            }
            private set
            {
                _tremolo = value;
            }
        }

        /// <summary>
        /// <para xml:lang="en">Gets a value indicating whether the Tremolo collection is empty.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool TremoloSpecified
        {
            get
            {
                return (this.Tremolo.Count != 0);
            }
        }

        [System.Xml.Serialization.XmlIgnoreAttribute()]
        private System.Collections.ObjectModel.Collection<EmptyTrillSound> _haydn;

        /// <summary>
        /// <para>The haydn element represents the Haydn ornament. This is defined in SMuFL as ornamentHaydn.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("The haydn element represents the Haydn ornament. This is defined in SMuFL as orna" +
            "mentHaydn.")]
        [System.Xml.Serialization.XmlElementAttribute("haydn")]
        public System.Collections.ObjectModel.Collection<EmptyTrillSound> Haydn
        {
            get
            {
                return _haydn;
            }
            private set
            {
                _haydn = value;
            }
        }

        /// <summary>
        /// <para xml:lang="en">Gets a value indicating whether the Haydn collection is empty.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool HaydnSpecified
        {
            get
            {
                return (this.Haydn.Count != 0);
            }
        }

        [System.Xml.Serialization.XmlIgnoreAttribute()]
        private System.Collections.ObjectModel.Collection<OtherPlacementText> _otherOrnament;

        /// <summary>
        /// <para>The other-ornament element is used to define any ornaments not yet in the MusicXML format. The smufl attribute can be used to specify a particular ornament, allowing application interoperability without requiring every SMuFL ornament to have a MusicXML element equivalent. Using the other-ornament element without the smufl attribute allows for extended representation, though without application interoperability.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute(@"The other-ornament element is used to define any ornaments not yet in the MusicXML format. The smufl attribute can be used to specify a particular ornament, allowing application interoperability without requiring every SMuFL ornament to have a MusicXML element equivalent. Using the other-ornament element without the smufl attribute allows for extended representation, though without application interoperability.")]
        [System.Xml.Serialization.XmlElementAttribute("other-ornament")]
        public System.Collections.ObjectModel.Collection<OtherPlacementText> OtherOrnament
        {
            get
            {
                return _otherOrnament;
            }
            private set
            {
                _otherOrnament = value;
            }
        }

        /// <summary>
        /// <para xml:lang="en">Gets a value indicating whether the OtherOrnament collection is empty.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool OtherOrnamentSpecified
        {
            get
            {
                return (this.OtherOrnament.Count != 0);
            }
        }

        [System.Xml.Serialization.XmlIgnoreAttribute()]
        private System.Collections.ObjectModel.Collection<AccidentalMark> _accidentalMark;

        [System.Xml.Serialization.XmlElementAttribute("accidental-mark")]
        public System.Collections.ObjectModel.Collection<AccidentalMark> AccidentalMark
        {
            get
            {
                return _accidentalMark;
            }
            private set
            {
                _accidentalMark = value;
            }
        }

        /// <summary>
        /// <para xml:lang="en">Gets a value indicating whether the AccidentalMark collection is empty.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool AccidentalMarkSpecified
        {
            get
            {
                return (this.AccidentalMark.Count != 0);
            }
        }

        [System.Xml.Serialization.XmlAttributeAttribute("id")]
        public string Id { get; set; }
    }

    /// <summary>
    /// <para>The tremolo ornament can be used to indicate single-note, double-note, or unmeasured tremolos. Single-note tremolos use the single type, double-note tremolos use the start and stop types, and unmeasured tremolos use the unmeasured type. The default is "single" for compatibility with Version 1.1. The text of the element indicates the number of tremolo marks and is an integer from 0 to 8. Note that the number of attached beams is not included in this value, but is represented separately using the beam element. The value should be 0 for unmeasured tremolos.
    ///
    ///When using double-note tremolos, the duration of each note in the tremolo should correspond to half of the notated type value. A time-modification element should also be added with an actual-notes value of 2 and a normal-notes value of 1. If used within a tuplet, this 2/1 ratio should be multiplied by the existing tuplet ratio.
    ///
    ///The smufl attribute specifies the glyph to use from the SMuFL Tremolos range for an unmeasured tremolo. It is ignored for other tremolo types. The SMuFL buzzRoll glyph is used by default if the attribute is missing.
    ///
    ///Using repeater beams for indicating tremolos is deprecated as of MusicXML 3.0.</para>
    /// </summary>
    [System.ComponentModel.DescriptionAttribute(@"The tremolo ornament can be used to indicate single-note, double-note, or unmeasured tremolos. Single-note tremolos use the single type, double-note tremolos use the start and stop types, and unmeasured tremolos use the unmeasured type. The default is ""single"" for compatibility with Version 1.1. The text of the element indicates the number of tremolo marks and is an integer from 0 to 8. Note that the number of attached beams is not included in this value, but is represented separately using the beam element. The value should be 0 for unmeasured tremolos. When using double-note tremolos, the duration of each note in the tremolo should correspond to half of the notated type value. A time-modification element should also be added with an actual-notes value of 2 and a normal-notes value of 1. If used within a tuplet, this 2/1 ratio should be multiplied by the existing tuplet ratio. The smufl attribute specifies the glyph to use from the SMuFL Tremolos range for an unmeasured tremolo. It is ignored for other tremolo types. The SMuFL buzzRoll glyph is used by default if the attribute is missing. Using repeater beams for indicating tremolos is deprecated as of MusicXML 3.0.")]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XmlSchemaClassGenerator", "2.1.1142.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute("tremolo", Namespace="")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class Tremolo : IPrintStyle, IPlacement, ISmufl
    {

        /// <summary>
        /// <para xml:lang="en">Gets or sets the text value.</para>
        /// <para xml:lang="en">Minimum inclusive value: 0.</para>
        /// <para xml:lang="en">Maximum inclusive value: 8.</para>
        /// </summary>
        [System.ComponentModel.DataAnnotations.RangeAttribute(typeof(decimal), "0", "8")]
        [System.Xml.Serialization.XmlTextAttribute()]
        public byte Value { get; set; }

        [System.Xml.Serialization.XmlIgnoreAttribute()]
        private TremoloType _type = OpenUtau.Core.Format.MusicXMLSchema.TremoloType.Single;

        [System.ComponentModel.DefaultValueAttribute(OpenUtau.Core.Format.MusicXMLSchema.TremoloType.Single)]
        [System.Xml.Serialization.XmlAttributeAttribute("type")]
        public TremoloType Type
        {
            get
            {
                return _type;
            }
            set
            {
                _type = value;
            }
        }

        /// <summary>
        /// <para>The tenths type is a number representing tenths of interline staff space (positive or negative). Both integer and decimal values are allowed, such as 5 for a half space and 2.5 for a quarter space. Interline space is measured from the middle of a staff line.
        ///
        ///Distances in a MusicXML file are measured in tenths of staff space. Tenths are then scaled to millimeters within the scaling element, used in the defaults element at the start of a score. Individual staves can apply a scaling factor to adjust staff size. When a MusicXML element or attribute refers to tenths, it means the global tenths defined by the scaling element, not the local tenths as adjusted by the staff-size element.</para>
        /// </summary>
        [System.Xml.Serialization.XmlAttributeAttribute("default-x")]
        public decimal DefaultX { get; set; }

        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the DefaultX property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool DefaultXSpecified { get; set; }

        /// <summary>
        /// <para>The tenths type is a number representing tenths of interline staff space (positive or negative). Both integer and decimal values are allowed, such as 5 for a half space and 2.5 for a quarter space. Interline space is measured from the middle of a staff line.
        ///
        ///Distances in a MusicXML file are measured in tenths of staff space. Tenths are then scaled to millimeters within the scaling element, used in the defaults element at the start of a score. Individual staves can apply a scaling factor to adjust staff size. When a MusicXML element or attribute refers to tenths, it means the global tenths defined by the scaling element, not the local tenths as adjusted by the staff-size element.</para>
        /// </summary>
        [System.Xml.Serialization.XmlAttributeAttribute("default-y")]
        public decimal DefaultY { get; set; }

        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the DefaultY property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool DefaultYSpecified { get; set; }

        /// <summary>
        /// <para>The tenths type is a number representing tenths of interline staff space (positive or negative). Both integer and decimal values are allowed, such as 5 for a half space and 2.5 for a quarter space. Interline space is measured from the middle of a staff line.
        ///
        ///Distances in a MusicXML file are measured in tenths of staff space. Tenths are then scaled to millimeters within the scaling element, used in the defaults element at the start of a score. Individual staves can apply a scaling factor to adjust staff size. When a MusicXML element or attribute refers to tenths, it means the global tenths defined by the scaling element, not the local tenths as adjusted by the staff-size element.</para>
        /// </summary>
        [System.Xml.Serialization.XmlAttributeAttribute("relative-x")]
        public decimal RelativeX { get; set; }

        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the RelativeX property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool RelativeXSpecified { get; set; }

        /// <summary>
        /// <para>The tenths type is a number representing tenths of interline staff space (positive or negative). Both integer and decimal values are allowed, such as 5 for a half space and 2.5 for a quarter space. Interline space is measured from the middle of a staff line.
        ///
        ///Distances in a MusicXML file are measured in tenths of staff space. Tenths are then scaled to millimeters within the scaling element, used in the defaults element at the start of a score. Individual staves can apply a scaling factor to adjust staff size. When a MusicXML element or attribute refers to tenths, it means the global tenths defined by the scaling element, not the local tenths as adjusted by the staff-size element.</para>
        /// </summary>
        [System.Xml.Serialization.XmlAttributeAttribute("relative-y")]
        public decimal RelativeY { get; set; }

        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the RelativeY property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool RelativeYSpecified { get; set; }

        /// <summary>
        /// <para>The font-family is a comma-separated list of font names. These can be specific font styles such as Maestro or Opus, or one of several generic font styles: music, engraved, handwritten, text, serif, sans-serif, handwritten, cursive, fantasy, and monospace. The music, engraved, and handwritten values refer to music fonts; the rest refer to text fonts. The fantasy style refers to decorative text such as found in older German-style printing.</para>
        /// <para xml:lang="en">Pattern: [^,]+(, ?[^,]+)*.</para>
        /// </summary>
        [System.ComponentModel.DataAnnotations.RegularExpressionAttribute("[^,]+(, ?[^,]+)*")]
        [System.Xml.Serialization.XmlAttributeAttribute("font-family")]
        public string FontFamily { get; set; }

        [System.Xml.Serialization.XmlAttributeAttribute("font-style")]
        public FontStyle FontStyle { get; set; }

        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the FontStyle property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool FontStyleSpecified { get; set; }

        /// <summary>
        /// <para>The font-size can be one of the CSS font sizes (xx-small, x-small, small, medium, large, x-large, xx-large) or a numeric point size.</para>
        /// </summary>
        [System.Xml.Serialization.XmlAttributeAttribute("font-size")]
        public string FontSize { get; set; }

        [System.Xml.Serialization.XmlAttributeAttribute("font-weight")]
        public FontWeight FontWeight { get; set; }

        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the FontWeight property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool FontWeightSpecified { get; set; }

        /// <summary>
        /// <para>The color type indicates the color of an element. Color may be represented as hexadecimal RGB triples, as in HTML, or as hexadecimal ARGB tuples, with the A indicating alpha of transparency. An alpha value of 00 is totally transparent; FF is totally opaque. If RGB is used, the A value is assumed to be FF.
        ///
        ///For instance, the RGB value "#800080" represents purple. An ARGB value of "#40800080" would be a transparent purple.
        ///
        ///As in SVG 1.1, colors are defined in terms of the sRGB color space (IEC 61966).</para>
        /// <para xml:lang="en">Pattern: #[\dA-F]{6}([\dA-F][\dA-F])?.</para>
        /// </summary>
        [System.ComponentModel.DataAnnotations.RegularExpressionAttribute("#[\\dA-F]{6}([\\dA-F][\\dA-F])?")]
        [System.Xml.Serialization.XmlAttributeAttribute("color")]
        public string Color { get; set; }

        [System.Xml.Serialization.XmlAttributeAttribute("placement")]
        public AboveBelow Placement { get; set; }

        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the Placement property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool PlacementSpecified { get; set; }

        /// <summary>
        /// <para>The smufl-glyph-name type is used for attributes that reference a specific Standard Music Font Layout (SMuFL) character. The value is a SMuFL canonical glyph name, not a code point. For instance, the value for a standard piano pedal mark would be keyboardPedalPed, not U+E650.</para>
        /// </summary>
        [System.Xml.Serialization.XmlAttributeAttribute("smufl")]
        public string Smufl { get; set; }
    }

    /// <summary>
    /// <para>Technical indications give performance information for individual instruments.</para>
    /// </summary>
    [System.ComponentModel.DescriptionAttribute("Technical indications give performance information for individual instruments.")]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XmlSchemaClassGenerator", "2.1.1142.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute("technical", Namespace="")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class Technical : IOptionalUniqueId
    {

        [System.Xml.Serialization.XmlIgnoreAttribute()]
        private System.Collections.ObjectModel.Collection<EmptyPlacement> _upBow;

        /// <summary>
        /// <para>The up-bow element represents the symbol that is used both for up-bowing on bowed instruments, and up-stroke on plucked instruments.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("The up-bow element represents the symbol that is used both for up-bowing on bowed" +
            " instruments, and up-stroke on plucked instruments.")]
        [System.Xml.Serialization.XmlElementAttribute("up-bow")]
        public System.Collections.ObjectModel.Collection<EmptyPlacement> UpBow
        {
            get
            {
                return _upBow;
            }
            private set
            {
                _upBow = value;
            }
        }

        /// <summary>
        /// <para xml:lang="en">Gets a value indicating whether the UpBow collection is empty.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool UpBowSpecified
        {
            get
            {
                return (this.UpBow.Count != 0);
            }
        }

        /// <summary>
        /// <para xml:lang="en">Initializes a new instance of the <see cref="Technical" /> class.</para>
        /// </summary>
        public Technical()
        {
            this._upBow = new System.Collections.ObjectModel.Collection<EmptyPlacement>();
            this._downBow = new System.Collections.ObjectModel.Collection<EmptyPlacement>();
            this._harmonic = new System.Collections.ObjectModel.Collection<Harmonic>();
            this._openString = new System.Collections.ObjectModel.Collection<EmptyPlacement>();
            this._thumbPosition = new System.Collections.ObjectModel.Collection<EmptyPlacement>();
            this._fingering = new System.Collections.ObjectModel.Collection<Fingering>();
            this._pluck = new System.Collections.ObjectModel.Collection<PlacementText>();
            this._doubleTongue = new System.Collections.ObjectModel.Collection<EmptyPlacement>();
            this._tripleTongue = new System.Collections.ObjectModel.Collection<EmptyPlacement>();
            this._stopped = new System.Collections.ObjectModel.Collection<EmptyPlacementSmufl>();
            this._snapPizzicato = new System.Collections.ObjectModel.Collection<EmptyPlacement>();
            this._fret = new System.Collections.ObjectModel.Collection<Fret>();
            this._string = new System.Collections.ObjectModel.Collection<String>();
            this._hammerOn = new System.Collections.ObjectModel.Collection<HammerOnPullOff>();
            this._pullOff = new System.Collections.ObjectModel.Collection<HammerOnPullOff>();
            this._bend = new System.Collections.ObjectModel.Collection<Bend>();
            this._tap = new System.Collections.ObjectModel.Collection<Tap>();
            this._heel = new System.Collections.ObjectModel.Collection<HeelToe>();
            this._toe = new System.Collections.ObjectModel.Collection<HeelToe>();
            this._fingernails = new System.Collections.ObjectModel.Collection<EmptyPlacement>();
            this._hole = new System.Collections.ObjectModel.Collection<Hole>();
            this._arrow = new System.Collections.ObjectModel.Collection<Arrow>();
            this._handbell = new System.Collections.ObjectModel.Collection<Handbell>();
            this._brassBend = new System.Collections.ObjectModel.Collection<EmptyPlacement>();
            this._flip = new System.Collections.ObjectModel.Collection<EmptyPlacement>();
            this._smear = new System.Collections.ObjectModel.Collection<EmptyPlacement>();
            this._open = new System.Collections.ObjectModel.Collection<EmptyPlacementSmufl>();
            this._halfMuted = new System.Collections.ObjectModel.Collection<EmptyPlacementSmufl>();
            this._harmonMute = new System.Collections.ObjectModel.Collection<HarmonMute>();
            this._golpe = new System.Collections.ObjectModel.Collection<EmptyPlacement>();
            this._otherTechnical = new System.Collections.ObjectModel.Collection<OtherPlacementText>();
        }

        [System.Xml.Serialization.XmlIgnoreAttribute()]
        private System.Collections.ObjectModel.Collection<EmptyPlacement> _downBow;

        /// <summary>
        /// <para>The down-bow element represents the symbol that is used both for down-bowing on bowed instruments, and down-stroke on plucked instruments.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("The down-bow element represents the symbol that is used both for down-bowing on b" +
            "owed instruments, and down-stroke on plucked instruments.")]
        [System.Xml.Serialization.XmlElementAttribute("down-bow")]
        public System.Collections.ObjectModel.Collection<EmptyPlacement> DownBow
        {
            get
            {
                return _downBow;
            }
            private set
            {
                _downBow = value;
            }
        }

        /// <summary>
        /// <para xml:lang="en">Gets a value indicating whether the DownBow collection is empty.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool DownBowSpecified
        {
            get
            {
                return (this.DownBow.Count != 0);
            }
        }

        [System.Xml.Serialization.XmlIgnoreAttribute()]
        private System.Collections.ObjectModel.Collection<Harmonic> _harmonic;

        [System.Xml.Serialization.XmlElementAttribute("harmonic")]
        public System.Collections.ObjectModel.Collection<Harmonic> Harmonic
        {
            get
            {
                return _harmonic;
            }
            private set
            {
                _harmonic = value;
            }
        }

        /// <summary>
        /// <para xml:lang="en">Gets a value indicating whether the Harmonic collection is empty.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool HarmonicSpecified
        {
            get
            {
                return (this.Harmonic.Count != 0);
            }
        }

        [System.Xml.Serialization.XmlIgnoreAttribute()]
        private System.Collections.ObjectModel.Collection<EmptyPlacement> _openString;

        /// <summary>
        /// <para>The open-string element represents the zero-shaped open string symbol.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("The open-string element represents the zero-shaped open string symbol.")]
        [System.Xml.Serialization.XmlElementAttribute("open-string")]
        public System.Collections.ObjectModel.Collection<EmptyPlacement> OpenString
        {
            get
            {
                return _openString;
            }
            private set
            {
                _openString = value;
            }
        }

        /// <summary>
        /// <para xml:lang="en">Gets a value indicating whether the OpenString collection is empty.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool OpenStringSpecified
        {
            get
            {
                return (this.OpenString.Count != 0);
            }
        }

        [System.Xml.Serialization.XmlIgnoreAttribute()]
        private System.Collections.ObjectModel.Collection<EmptyPlacement> _thumbPosition;

        /// <summary>
        /// <para>The thumb-position element represents the thumb position symbol. This is a circle with a line, where the line does not come within the circle. It is distinct from the snap pizzicato symbol, where the line comes inside the circle.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("The thumb-position element represents the thumb position symbol. This is a circle" +
            " with a line, where the line does not come within the circle. It is distinct fro" +
            "m the snap pizzicato symbol, where the line comes inside the circle.")]
        [System.Xml.Serialization.XmlElementAttribute("thumb-position")]
        public System.Collections.ObjectModel.Collection<EmptyPlacement> ThumbPosition
        {
            get
            {
                return _thumbPosition;
            }
            private set
            {
                _thumbPosition = value;
            }
        }

        /// <summary>
        /// <para xml:lang="en">Gets a value indicating whether the ThumbPosition collection is empty.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool ThumbPositionSpecified
        {
            get
            {
                return (this.ThumbPosition.Count != 0);
            }
        }

        [System.Xml.Serialization.XmlIgnoreAttribute()]
        private System.Collections.ObjectModel.Collection<Fingering> _fingering;

        [System.Xml.Serialization.XmlElementAttribute("fingering")]
        public System.Collections.ObjectModel.Collection<Fingering> Fingering
        {
            get
            {
                return _fingering;
            }
            private set
            {
                _fingering = value;
            }
        }

        /// <summary>
        /// <para xml:lang="en">Gets a value indicating whether the Fingering collection is empty.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool FingeringSpecified
        {
            get
            {
                return (this.Fingering.Count != 0);
            }
        }

        [System.Xml.Serialization.XmlIgnoreAttribute()]
        private System.Collections.ObjectModel.Collection<PlacementText> _pluck;

        /// <summary>
        /// <para>The pluck element is used to specify the plucking fingering on a fretted instrument, where the fingering element refers to the fretting fingering. Typical values are p, i, m, a for pulgar/thumb, indicio/index, medio/middle, and anular/ring fingers.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("The pluck element is used to specify the plucking fingering on a fretted instrume" +
            "nt, where the fingering element refers to the fretting fingering. Typical values" +
            " are p, i, m, a for pulgar/thumb, indicio/index, medio/middle, and anular/ring f" +
            "ingers.")]
        [System.Xml.Serialization.XmlElementAttribute("pluck")]
        public System.Collections.ObjectModel.Collection<PlacementText> Pluck
        {
            get
            {
                return _pluck;
            }
            private set
            {
                _pluck = value;
            }
        }

        /// <summary>
        /// <para xml:lang="en">Gets a value indicating whether the Pluck collection is empty.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool PluckSpecified
        {
            get
            {
                return (this.Pluck.Count != 0);
            }
        }

        [System.Xml.Serialization.XmlIgnoreAttribute()]
        private System.Collections.ObjectModel.Collection<EmptyPlacement> _doubleTongue;

        /// <summary>
        /// <para>The double-tongue element represents the double tongue symbol (two dots arranged horizontally).</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("The double-tongue element represents the double tongue symbol (two dots arranged " +
            "horizontally).")]
        [System.Xml.Serialization.XmlElementAttribute("double-tongue")]
        public System.Collections.ObjectModel.Collection<EmptyPlacement> DoubleTongue
        {
            get
            {
                return _doubleTongue;
            }
            private set
            {
                _doubleTongue = value;
            }
        }

        /// <summary>
        /// <para xml:lang="en">Gets a value indicating whether the DoubleTongue collection is empty.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool DoubleTongueSpecified
        {
            get
            {
                return (this.DoubleTongue.Count != 0);
            }
        }

        [System.Xml.Serialization.XmlIgnoreAttribute()]
        private System.Collections.ObjectModel.Collection<EmptyPlacement> _tripleTongue;

        /// <summary>
        /// <para>The triple-tongue element represents the triple tongue symbol (three dots arranged horizontally).</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("The triple-tongue element represents the triple tongue symbol (three dots arrange" +
            "d horizontally).")]
        [System.Xml.Serialization.XmlElementAttribute("triple-tongue")]
        public System.Collections.ObjectModel.Collection<EmptyPlacement> TripleTongue
        {
            get
            {
                return _tripleTongue;
            }
            private set
            {
                _tripleTongue = value;
            }
        }

        /// <summary>
        /// <para xml:lang="en">Gets a value indicating whether the TripleTongue collection is empty.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool TripleTongueSpecified
        {
            get
            {
                return (this.TripleTongue.Count != 0);
            }
        }

        [System.Xml.Serialization.XmlIgnoreAttribute()]
        private System.Collections.ObjectModel.Collection<EmptyPlacementSmufl> _stopped;

        /// <summary>
        /// <para>The stopped element represents the stopped symbol, which looks like a plus sign. The smufl attribute distinguishes different SMuFL glyphs that have a similar appearance such as handbellsMalletBellSuspended and guitarClosePedal. If not present, the default glyph is brassMuteClosed.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute(@"The stopped element represents the stopped symbol, which looks like a plus sign. The smufl attribute distinguishes different SMuFL glyphs that have a similar appearance such as handbellsMalletBellSuspended and guitarClosePedal. If not present, the default glyph is brassMuteClosed.")]
        [System.Xml.Serialization.XmlElementAttribute("stopped")]
        public System.Collections.ObjectModel.Collection<EmptyPlacementSmufl> Stopped
        {
            get
            {
                return _stopped;
            }
            private set
            {
                _stopped = value;
            }
        }

        /// <summary>
        /// <para xml:lang="en">Gets a value indicating whether the Stopped collection is empty.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool StoppedSpecified
        {
            get
            {
                return (this.Stopped.Count != 0);
            }
        }

        [System.Xml.Serialization.XmlIgnoreAttribute()]
        private System.Collections.ObjectModel.Collection<EmptyPlacement> _snapPizzicato;

        /// <summary>
        /// <para>The snap-pizzicato element represents the snap pizzicato symbol. This is a circle with a line, where the line comes inside the circle. It is distinct from the thumb-position symbol, where the line does not come inside the circle.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("The snap-pizzicato element represents the snap pizzicato symbol. This is a circle" +
            " with a line, where the line comes inside the circle. It is distinct from the th" +
            "umb-position symbol, where the line does not come inside the circle.")]
        [System.Xml.Serialization.XmlElementAttribute("snap-pizzicato")]
        public System.Collections.ObjectModel.Collection<EmptyPlacement> SnapPizzicato
        {
            get
            {
                return _snapPizzicato;
            }
            private set
            {
                _snapPizzicato = value;
            }
        }

        /// <summary>
        /// <para xml:lang="en">Gets a value indicating whether the SnapPizzicato collection is empty.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool SnapPizzicatoSpecified
        {
            get
            {
                return (this.SnapPizzicato.Count != 0);
            }
        }

        [System.Xml.Serialization.XmlIgnoreAttribute()]
        private System.Collections.ObjectModel.Collection<Fret> _fret;

        [System.Xml.Serialization.XmlElementAttribute("fret")]
        public System.Collections.ObjectModel.Collection<Fret> Fret
        {
            get
            {
                return _fret;
            }
            private set
            {
                _fret = value;
            }
        }

        /// <summary>
        /// <para xml:lang="en">Gets a value indicating whether the Fret collection is empty.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool FretSpecified
        {
            get
            {
                return (this.Fret.Count != 0);
            }
        }

        [System.Xml.Serialization.XmlIgnoreAttribute()]
        private System.Collections.ObjectModel.Collection<String> _string;

        [System.Xml.Serialization.XmlElementAttribute("string")]
        public System.Collections.ObjectModel.Collection<String> String
        {
            get
            {
                return _string;
            }
            private set
            {
                _string = value;
            }
        }

        /// <summary>
        /// <para xml:lang="en">Gets a value indicating whether the String collection is empty.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool StringSpecified
        {
            get
            {
                return (this.String.Count != 0);
            }
        }

        [System.Xml.Serialization.XmlIgnoreAttribute()]
        private System.Collections.ObjectModel.Collection<HammerOnPullOff> _hammerOn;

        [System.Xml.Serialization.XmlElementAttribute("hammer-on")]
        public System.Collections.ObjectModel.Collection<HammerOnPullOff> HammerOn
        {
            get
            {
                return _hammerOn;
            }
            private set
            {
                _hammerOn = value;
            }
        }

        /// <summary>
        /// <para xml:lang="en">Gets a value indicating whether the HammerOn collection is empty.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool HammerOnSpecified
        {
            get
            {
                return (this.HammerOn.Count != 0);
            }
        }

        [System.Xml.Serialization.XmlIgnoreAttribute()]
        private System.Collections.ObjectModel.Collection<HammerOnPullOff> _pullOff;

        [System.Xml.Serialization.XmlElementAttribute("pull-off")]
        public System.Collections.ObjectModel.Collection<HammerOnPullOff> PullOff
        {
            get
            {
                return _pullOff;
            }
            private set
            {
                _pullOff = value;
            }
        }

        /// <summary>
        /// <para xml:lang="en">Gets a value indicating whether the PullOff collection is empty.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool PullOffSpecified
        {
            get
            {
                return (this.PullOff.Count != 0);
            }
        }

        [System.Xml.Serialization.XmlIgnoreAttribute()]
        private System.Collections.ObjectModel.Collection<Bend> _bend;

        [System.Xml.Serialization.XmlElementAttribute("bend")]
        public System.Collections.ObjectModel.Collection<Bend> Bend
        {
            get
            {
                return _bend;
            }
            private set
            {
                _bend = value;
            }
        }

        /// <summary>
        /// <para xml:lang="en">Gets a value indicating whether the Bend collection is empty.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool BendSpecified
        {
            get
            {
                return (this.Bend.Count != 0);
            }
        }

        [System.Xml.Serialization.XmlIgnoreAttribute()]
        private System.Collections.ObjectModel.Collection<Tap> _tap;

        [System.Xml.Serialization.XmlElementAttribute("tap")]
        public System.Collections.ObjectModel.Collection<Tap> Tap
        {
            get
            {
                return _tap;
            }
            private set
            {
                _tap = value;
            }
        }

        /// <summary>
        /// <para xml:lang="en">Gets a value indicating whether the Tap collection is empty.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool TapSpecified
        {
            get
            {
                return (this.Tap.Count != 0);
            }
        }

        [System.Xml.Serialization.XmlIgnoreAttribute()]
        private System.Collections.ObjectModel.Collection<HeelToe> _heel;

        [System.Xml.Serialization.XmlElementAttribute("heel")]
        public System.Collections.ObjectModel.Collection<HeelToe> Heel
        {
            get
            {
                return _heel;
            }
            private set
            {
                _heel = value;
            }
        }

        /// <summary>
        /// <para xml:lang="en">Gets a value indicating whether the Heel collection is empty.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool HeelSpecified
        {
            get
            {
                return (this.Heel.Count != 0);
            }
        }

        [System.Xml.Serialization.XmlIgnoreAttribute()]
        private System.Collections.ObjectModel.Collection<HeelToe> _toe;

        [System.Xml.Serialization.XmlElementAttribute("toe")]
        public System.Collections.ObjectModel.Collection<HeelToe> Toe
        {
            get
            {
                return _toe;
            }
            private set
            {
                _toe = value;
            }
        }

        /// <summary>
        /// <para xml:lang="en">Gets a value indicating whether the Toe collection is empty.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool ToeSpecified
        {
            get
            {
                return (this.Toe.Count != 0);
            }
        }

        [System.Xml.Serialization.XmlIgnoreAttribute()]
        private System.Collections.ObjectModel.Collection<EmptyPlacement> _fingernails;

        /// <summary>
        /// <para>The fingernails element is used in notation for harp and other plucked string instruments.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("The fingernails element is used in notation for harp and other plucked string ins" +
            "truments.")]
        [System.Xml.Serialization.XmlElementAttribute("fingernails")]
        public System.Collections.ObjectModel.Collection<EmptyPlacement> Fingernails
        {
            get
            {
                return _fingernails;
            }
            private set
            {
                _fingernails = value;
            }
        }

        /// <summary>
        /// <para xml:lang="en">Gets a value indicating whether the Fingernails collection is empty.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool FingernailsSpecified
        {
            get
            {
                return (this.Fingernails.Count != 0);
            }
        }

        [System.Xml.Serialization.XmlIgnoreAttribute()]
        private System.Collections.ObjectModel.Collection<Hole> _hole;

        [System.Xml.Serialization.XmlElementAttribute("hole")]
        public System.Collections.ObjectModel.Collection<Hole> Hole
        {
            get
            {
                return _hole;
            }
            private set
            {
                _hole = value;
            }
        }

        /// <summary>
        /// <para xml:lang="en">Gets a value indicating whether the Hole collection is empty.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool HoleSpecified
        {
            get
            {
                return (this.Hole.Count != 0);
            }
        }

        [System.Xml.Serialization.XmlIgnoreAttribute()]
        private System.Collections.ObjectModel.Collection<Arrow> _arrow;

        [System.Xml.Serialization.XmlElementAttribute("arrow")]
        public System.Collections.ObjectModel.Collection<Arrow> Arrow
        {
            get
            {
                return _arrow;
            }
            private set
            {
                _arrow = value;
            }
        }

        /// <summary>
        /// <para xml:lang="en">Gets a value indicating whether the Arrow collection is empty.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool ArrowSpecified
        {
            get
            {
                return (this.Arrow.Count != 0);
            }
        }

        [System.Xml.Serialization.XmlIgnoreAttribute()]
        private System.Collections.ObjectModel.Collection<Handbell> _handbell;

        [System.Xml.Serialization.XmlElementAttribute("handbell")]
        public System.Collections.ObjectModel.Collection<Handbell> Handbell
        {
            get
            {
                return _handbell;
            }
            private set
            {
                _handbell = value;
            }
        }

        /// <summary>
        /// <para xml:lang="en">Gets a value indicating whether the Handbell collection is empty.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool HandbellSpecified
        {
            get
            {
                return (this.Handbell.Count != 0);
            }
        }

        [System.Xml.Serialization.XmlIgnoreAttribute()]
        private System.Collections.ObjectModel.Collection<EmptyPlacement> _brassBend;

        /// <summary>
        /// <para>The brass-bend element represents the u-shaped bend symbol used in brass notation, distinct from the bend element used in guitar music.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("The brass-bend element represents the u-shaped bend symbol used in brass notation" +
            ", distinct from the bend element used in guitar music.")]
        [System.Xml.Serialization.XmlElementAttribute("brass-bend")]
        public System.Collections.ObjectModel.Collection<EmptyPlacement> BrassBend
        {
            get
            {
                return _brassBend;
            }
            private set
            {
                _brassBend = value;
            }
        }

        /// <summary>
        /// <para xml:lang="en">Gets a value indicating whether the BrassBend collection is empty.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool BrassBendSpecified
        {
            get
            {
                return (this.BrassBend.Count != 0);
            }
        }

        [System.Xml.Serialization.XmlIgnoreAttribute()]
        private System.Collections.ObjectModel.Collection<EmptyPlacement> _flip;

        /// <summary>
        /// <para>The flip element represents the flip symbol used in brass notation.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("The flip element represents the flip symbol used in brass notation.")]
        [System.Xml.Serialization.XmlElementAttribute("flip")]
        public System.Collections.ObjectModel.Collection<EmptyPlacement> Flip
        {
            get
            {
                return _flip;
            }
            private set
            {
                _flip = value;
            }
        }

        /// <summary>
        /// <para xml:lang="en">Gets a value indicating whether the Flip collection is empty.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool FlipSpecified
        {
            get
            {
                return (this.Flip.Count != 0);
            }
        }

        [System.Xml.Serialization.XmlIgnoreAttribute()]
        private System.Collections.ObjectModel.Collection<EmptyPlacement> _smear;

        /// <summary>
        /// <para>The smear element represents the tilde-shaped smear symbol used in brass notation.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("The smear element represents the tilde-shaped smear symbol used in brass notation" +
            ".")]
        [System.Xml.Serialization.XmlElementAttribute("smear")]
        public System.Collections.ObjectModel.Collection<EmptyPlacement> Smear
        {
            get
            {
                return _smear;
            }
            private set
            {
                _smear = value;
            }
        }

        /// <summary>
        /// <para xml:lang="en">Gets a value indicating whether the Smear collection is empty.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool SmearSpecified
        {
            get
            {
                return (this.Smear.Count != 0);
            }
        }

        [System.Xml.Serialization.XmlIgnoreAttribute()]
        private System.Collections.ObjectModel.Collection<EmptyPlacementSmufl> _open;

        /// <summary>
        /// <para>The open element represents the open symbol, which looks like a circle. The smufl attribute can be used to distinguish different SMuFL glyphs that have a similar appearance such as brassMuteOpen and guitarOpenPedal. If not present, the default glyph is brassMuteOpen.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute(@"The open element represents the open symbol, which looks like a circle. The smufl attribute can be used to distinguish different SMuFL glyphs that have a similar appearance such as brassMuteOpen and guitarOpenPedal. If not present, the default glyph is brassMuteOpen.")]
        [System.Xml.Serialization.XmlElementAttribute("open")]
        public System.Collections.ObjectModel.Collection<EmptyPlacementSmufl> Open
        {
            get
            {
                return _open;
            }
            private set
            {
                _open = value;
            }
        }

        /// <summary>
        /// <para xml:lang="en">Gets a value indicating whether the Open collection is empty.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool OpenSpecified
        {
            get
            {
                return (this.Open.Count != 0);
            }
        }

        [System.Xml.Serialization.XmlIgnoreAttribute()]
        private System.Collections.ObjectModel.Collection<EmptyPlacementSmufl> _halfMuted;

        /// <summary>
        /// <para>The half-muted element represents the half-muted symbol, which looks like a circle with a plus sign inside. The smufl attribute can be used to distinguish different SMuFL glyphs that have a similar appearance such as brassMuteHalfClosed and guitarHalfOpenPedal. If not present, the default glyph is brassMuteHalfClosed.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute(@"The half-muted element represents the half-muted symbol, which looks like a circle with a plus sign inside. The smufl attribute can be used to distinguish different SMuFL glyphs that have a similar appearance such as brassMuteHalfClosed and guitarHalfOpenPedal. If not present, the default glyph is brassMuteHalfClosed.")]
        [System.Xml.Serialization.XmlElementAttribute("half-muted")]
        public System.Collections.ObjectModel.Collection<EmptyPlacementSmufl> HalfMuted
        {
            get
            {
                return _halfMuted;
            }
            private set
            {
                _halfMuted = value;
            }
        }

        /// <summary>
        /// <para xml:lang="en">Gets a value indicating whether the HalfMuted collection is empty.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool HalfMutedSpecified
        {
            get
            {
                return (this.HalfMuted.Count != 0);
            }
        }

        [System.Xml.Serialization.XmlIgnoreAttribute()]
        private System.Collections.ObjectModel.Collection<HarmonMute> _harmonMute;

        [System.Xml.Serialization.XmlElementAttribute("harmon-mute")]
        public System.Collections.ObjectModel.Collection<HarmonMute> HarmonMute
        {
            get
            {
                return _harmonMute;
            }
            private set
            {
                _harmonMute = value;
            }
        }

        /// <summary>
        /// <para xml:lang="en">Gets a value indicating whether the HarmonMute collection is empty.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool HarmonMuteSpecified
        {
            get
            {
                return (this.HarmonMute.Count != 0);
            }
        }

        [System.Xml.Serialization.XmlIgnoreAttribute()]
        private System.Collections.ObjectModel.Collection<EmptyPlacement> _golpe;

        /// <summary>
        /// <para>The golpe element represents the golpe symbol that is used for tapping the pick guard in guitar music.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("The golpe element represents the golpe symbol that is used for tapping the pick g" +
            "uard in guitar music.")]
        [System.Xml.Serialization.XmlElementAttribute("golpe")]
        public System.Collections.ObjectModel.Collection<EmptyPlacement> Golpe
        {
            get
            {
                return _golpe;
            }
            private set
            {
                _golpe = value;
            }
        }

        /// <summary>
        /// <para xml:lang="en">Gets a value indicating whether the Golpe collection is empty.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool GolpeSpecified
        {
            get
            {
                return (this.Golpe.Count != 0);
            }
        }

        [System.Xml.Serialization.XmlIgnoreAttribute()]
        private System.Collections.ObjectModel.Collection<OtherPlacementText> _otherTechnical;

        /// <summary>
        /// <para>The other-technical element is used to define any technical indications not yet in the MusicXML format. The smufl attribute can be used to specify a particular glyph, allowing application interoperability without requiring every SMuFL technical indication to have a MusicXML element equivalent. Using the other-technical element without the smufl attribute allows for extended representation, though without application interoperability.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute(@"The other-technical element is used to define any technical indications not yet in the MusicXML format. The smufl attribute can be used to specify a particular glyph, allowing application interoperability without requiring every SMuFL technical indication to have a MusicXML element equivalent. Using the other-technical element without the smufl attribute allows for extended representation, though without application interoperability.")]
        [System.Xml.Serialization.XmlElementAttribute("other-technical")]
        public System.Collections.ObjectModel.Collection<OtherPlacementText> OtherTechnical
        {
            get
            {
                return _otherTechnical;
            }
            private set
            {
                _otherTechnical = value;
            }
        }

        /// <summary>
        /// <para xml:lang="en">Gets a value indicating whether the OtherTechnical collection is empty.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool OtherTechnicalSpecified
        {
            get
            {
                return (this.OtherTechnical.Count != 0);
            }
        }

        [System.Xml.Serialization.XmlAttributeAttribute("id")]
        public string Id { get; set; }
    }

    /// <summary>
    /// <para>The tap type indicates a tap on the fretboard. The text content allows specification of the notation; + and T are common choices. If the element is empty, the hand attribute is used to specify the symbol to use. The hand attribute is ignored if the tap glyph is already specified by the text content. If neither text content nor the hand attribute are present, the display is application-specific.</para>
    /// </summary>
    [System.ComponentModel.DescriptionAttribute(@"The tap type indicates a tap on the fretboard. The text content allows specification of the notation; + and T are common choices. If the element is empty, the hand attribute is used to specify the symbol to use. The hand attribute is ignored if the tap glyph is already specified by the text content. If neither text content nor the hand attribute are present, the display is application-specific.")]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XmlSchemaClassGenerator", "2.1.1142.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute("tap", Namespace="")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class Tap : IPrintStyle, IPlacement
    {

        /// <summary>
        /// <para xml:lang="en">Gets or sets the text value.</para>
        /// </summary>
        [System.Xml.Serialization.XmlTextAttribute()]
        public string Value { get; set; }

        [System.Xml.Serialization.XmlAttributeAttribute("hand")]
        public TapHand Hand { get; set; }

        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the Hand property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool HandSpecified { get; set; }

        /// <summary>
        /// <para>The tenths type is a number representing tenths of interline staff space (positive or negative). Both integer and decimal values are allowed, such as 5 for a half space and 2.5 for a quarter space. Interline space is measured from the middle of a staff line.
        ///
        ///Distances in a MusicXML file are measured in tenths of staff space. Tenths are then scaled to millimeters within the scaling element, used in the defaults element at the start of a score. Individual staves can apply a scaling factor to adjust staff size. When a MusicXML element or attribute refers to tenths, it means the global tenths defined by the scaling element, not the local tenths as adjusted by the staff-size element.</para>
        /// </summary>
        [System.Xml.Serialization.XmlAttributeAttribute("default-x")]
        public decimal DefaultX { get; set; }

        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the DefaultX property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool DefaultXSpecified { get; set; }

        /// <summary>
        /// <para>The tenths type is a number representing tenths of interline staff space (positive or negative). Both integer and decimal values are allowed, such as 5 for a half space and 2.5 for a quarter space. Interline space is measured from the middle of a staff line.
        ///
        ///Distances in a MusicXML file are measured in tenths of staff space. Tenths are then scaled to millimeters within the scaling element, used in the defaults element at the start of a score. Individual staves can apply a scaling factor to adjust staff size. When a MusicXML element or attribute refers to tenths, it means the global tenths defined by the scaling element, not the local tenths as adjusted by the staff-size element.</para>
        /// </summary>
        [System.Xml.Serialization.XmlAttributeAttribute("default-y")]
        public decimal DefaultY { get; set; }

        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the DefaultY property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool DefaultYSpecified { get; set; }

        /// <summary>
        /// <para>The tenths type is a number representing tenths of interline staff space (positive or negative). Both integer and decimal values are allowed, such as 5 for a half space and 2.5 for a quarter space. Interline space is measured from the middle of a staff line.
        ///
        ///Distances in a MusicXML file are measured in tenths of staff space. Tenths are then scaled to millimeters within the scaling element, used in the defaults element at the start of a score. Individual staves can apply a scaling factor to adjust staff size. When a MusicXML element or attribute refers to tenths, it means the global tenths defined by the scaling element, not the local tenths as adjusted by the staff-size element.</para>
        /// </summary>
        [System.Xml.Serialization.XmlAttributeAttribute("relative-x")]
        public decimal RelativeX { get; set; }

        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the RelativeX property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool RelativeXSpecified { get; set; }

        /// <summary>
        /// <para>The tenths type is a number representing tenths of interline staff space (positive or negative). Both integer and decimal values are allowed, such as 5 for a half space and 2.5 for a quarter space. Interline space is measured from the middle of a staff line.
        ///
        ///Distances in a MusicXML file are measured in tenths of staff space. Tenths are then scaled to millimeters within the scaling element, used in the defaults element at the start of a score. Individual staves can apply a scaling factor to adjust staff size. When a MusicXML element or attribute refers to tenths, it means the global tenths defined by the scaling element, not the local tenths as adjusted by the staff-size element.</para>
        /// </summary>
        [System.Xml.Serialization.XmlAttributeAttribute("relative-y")]
        public decimal RelativeY { get; set; }

        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the RelativeY property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool RelativeYSpecified { get; set; }

        /// <summary>
        /// <para>The font-family is a comma-separated list of font names. These can be specific font styles such as Maestro or Opus, or one of several generic font styles: music, engraved, handwritten, text, serif, sans-serif, handwritten, cursive, fantasy, and monospace. The music, engraved, and handwritten values refer to music fonts; the rest refer to text fonts. The fantasy style refers to decorative text such as found in older German-style printing.</para>
        /// <para xml:lang="en">Pattern: [^,]+(, ?[^,]+)*.</para>
        /// </summary>
        [System.ComponentModel.DataAnnotations.RegularExpressionAttribute("[^,]+(, ?[^,]+)*")]
        [System.Xml.Serialization.XmlAttributeAttribute("font-family")]
        public string FontFamily { get; set; }

        [System.Xml.Serialization.XmlAttributeAttribute("font-style")]
        public FontStyle FontStyle { get; set; }

        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the FontStyle property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool FontStyleSpecified { get; set; }

        /// <summary>
        /// <para>The font-size can be one of the CSS font sizes (xx-small, x-small, small, medium, large, x-large, xx-large) or a numeric point size.</para>
        /// </summary>
        [System.Xml.Serialization.XmlAttributeAttribute("font-size")]
        public string FontSize { get; set; }

        [System.Xml.Serialization.XmlAttributeAttribute("font-weight")]
        public FontWeight FontWeight { get; set; }

        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the FontWeight property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool FontWeightSpecified { get; set; }

        /// <summary>
        /// <para>The color type indicates the color of an element. Color may be represented as hexadecimal RGB triples, as in HTML, or as hexadecimal ARGB tuples, with the A indicating alpha of transparency. An alpha value of 00 is totally transparent; FF is totally opaque. If RGB is used, the A value is assumed to be FF.
        ///
        ///For instance, the RGB value "#800080" represents purple. An ARGB value of "#40800080" would be a transparent purple.
        ///
        ///As in SVG 1.1, colors are defined in terms of the sRGB color space (IEC 61966).</para>
        /// <para xml:lang="en">Pattern: #[\dA-F]{6}([\dA-F][\dA-F])?.</para>
        /// </summary>
        [System.ComponentModel.DataAnnotations.RegularExpressionAttribute("#[\\dA-F]{6}([\\dA-F][\\dA-F])?")]
        [System.Xml.Serialization.XmlAttributeAttribute("color")]
        public string Color { get; set; }

        [System.Xml.Serialization.XmlAttributeAttribute("placement")]
        public AboveBelow Placement { get; set; }

        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the Placement property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool PlacementSpecified { get; set; }
    }

    /// <summary>
    /// <para>The other-notation type is used to define any notations not yet in the MusicXML format. It handles notations where more specific extension elements such as other-dynamics and other-technical are not appropriate. The smufl attribute can be used to specify a particular notation, allowing application interoperability without requiring every SMuFL glyph to have a MusicXML element equivalent. Using the other-notation type without the smufl attribute allows for extended representation, though without application interoperability.</para>
    /// </summary>
    [System.ComponentModel.DescriptionAttribute(@"The other-notation type is used to define any notations not yet in the MusicXML format. It handles notations where more specific extension elements such as other-dynamics and other-technical are not appropriate. The smufl attribute can be used to specify a particular notation, allowing application interoperability without requiring every SMuFL glyph to have a MusicXML element equivalent. Using the other-notation type without the smufl attribute allows for extended representation, though without application interoperability.")]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XmlSchemaClassGenerator", "2.1.1142.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute("other-notation", Namespace="")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class OtherNotation : IPrintObject, IPrintStyle, IPlacement, ISmufl, IOptionalUniqueId
    {

        /// <summary>
        /// <para xml:lang="en">Gets or sets the text value.</para>
        /// </summary>
        [System.Xml.Serialization.XmlTextAttribute()]
        public string Value { get; set; }

        [System.ComponentModel.DataAnnotations.RequiredAttribute(AllowEmptyStrings=true)]
        [System.Xml.Serialization.XmlAttributeAttribute("type")]
        public StartStopSingle Type { get; set; }

        [System.Xml.Serialization.XmlIgnoreAttribute()]
        private byte _number = 1;

        /// <summary>
        /// <para>Slurs, tuplets, and many other features can be concurrent and overlap within a single musical part. The number-level entity distinguishes up to 16 concurrent objects of the same type when the objects overlap in MusicXML document order. Values greater than 6 are usually only needed for music with a large number of divisi staves in a single part, or if there are more than 6 cross-staff arpeggios in a single measure. When a number-level value is implied, the value is 1 by default.
        ///
        ///When polyphonic parts are involved, the ordering within a MusicXML document can differ from musical score order. As an example, say we have a piano part in 4/4 where within a single measure, all the notes on the top staff are followed by all the notes on the bottom staff. In this example, each staff has a slur that starts on beat 2 and stops on beat 3, and there is a third slur that goes from beat 1 of one staff to beat 4 of the other staff.
        ///
        ///In this situation, the two mid-measure slurs can use the same number because they do not overlap in MusicXML document order, even though they do overlap in musical score order. Within the MusicXML document, the top staff slur will both start and stop before the bottom staff slur starts and stops.
        ///
        ///If the cross-staff slur starts in the top staff and stops in the bottom staff, it will need a separate number from the mid-measure slurs because it overlaps those slurs in MusicXML document order. However, if the cross-staff slur starts in the bottom staff and stops in the top staff, all three slurs can use the same number. None of them overlap within the MusicXML document, even though they all overlap each other in the musical score order. Within the MusicXML document, the start and stop of the top-staff slur will be followed by the stop and start of the cross-staff slur, followed by the start and stop of the bottom-staff slur.
        ///
        ///As this example demonstrates, a reading program should be prepared to handle cases where the number-levels start and stop in an arbitrary order. Because the start and stop values refer to musical score order, a program may find the stopping point of an object earlier in the MusicXML document than it will find its starting point.</para>
        /// <para xml:lang="en">Minimum inclusive value: 1.</para>
        /// <para xml:lang="en">Maximum inclusive value: 16.</para>
        /// </summary>
        [System.ComponentModel.DefaultValueAttribute(1)]
        [System.ComponentModel.DataAnnotations.RangeAttribute(typeof(decimal), "1", "16")]
        [System.Xml.Serialization.XmlAttributeAttribute("number")]
        public byte Number
        {
            get
            {
                return _number;
            }
            set
            {
                _number = value;
            }
        }

        [System.Xml.Serialization.XmlAttributeAttribute("print-object")]
        public YesNo PrintObject { get; set; }

        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the PrintObject property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool PrintObjectSpecified { get; set; }

        /// <summary>
        /// <para>The tenths type is a number representing tenths of interline staff space (positive or negative). Both integer and decimal values are allowed, such as 5 for a half space and 2.5 for a quarter space. Interline space is measured from the middle of a staff line.
        ///
        ///Distances in a MusicXML file are measured in tenths of staff space. Tenths are then scaled to millimeters within the scaling element, used in the defaults element at the start of a score. Individual staves can apply a scaling factor to adjust staff size. When a MusicXML element or attribute refers to tenths, it means the global tenths defined by the scaling element, not the local tenths as adjusted by the staff-size element.</para>
        /// </summary>
        [System.Xml.Serialization.XmlAttributeAttribute("default-x")]
        public decimal DefaultX { get; set; }

        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the DefaultX property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool DefaultXSpecified { get; set; }

        /// <summary>
        /// <para>The tenths type is a number representing tenths of interline staff space (positive or negative). Both integer and decimal values are allowed, such as 5 for a half space and 2.5 for a quarter space. Interline space is measured from the middle of a staff line.
        ///
        ///Distances in a MusicXML file are measured in tenths of staff space. Tenths are then scaled to millimeters within the scaling element, used in the defaults element at the start of a score. Individual staves can apply a scaling factor to adjust staff size. When a MusicXML element or attribute refers to tenths, it means the global tenths defined by the scaling element, not the local tenths as adjusted by the staff-size element.</para>
        /// </summary>
        [System.Xml.Serialization.XmlAttributeAttribute("default-y")]
        public decimal DefaultY { get; set; }

        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the DefaultY property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool DefaultYSpecified { get; set; }

        /// <summary>
        /// <para>The tenths type is a number representing tenths of interline staff space (positive or negative). Both integer and decimal values are allowed, such as 5 for a half space and 2.5 for a quarter space. Interline space is measured from the middle of a staff line.
        ///
        ///Distances in a MusicXML file are measured in tenths of staff space. Tenths are then scaled to millimeters within the scaling element, used in the defaults element at the start of a score. Individual staves can apply a scaling factor to adjust staff size. When a MusicXML element or attribute refers to tenths, it means the global tenths defined by the scaling element, not the local tenths as adjusted by the staff-size element.</para>
        /// </summary>
        [System.Xml.Serialization.XmlAttributeAttribute("relative-x")]
        public decimal RelativeX { get; set; }

        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the RelativeX property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool RelativeXSpecified { get; set; }

        /// <summary>
        /// <para>The tenths type is a number representing tenths of interline staff space (positive or negative). Both integer and decimal values are allowed, such as 5 for a half space and 2.5 for a quarter space. Interline space is measured from the middle of a staff line.
        ///
        ///Distances in a MusicXML file are measured in tenths of staff space. Tenths are then scaled to millimeters within the scaling element, used in the defaults element at the start of a score. Individual staves can apply a scaling factor to adjust staff size. When a MusicXML element or attribute refers to tenths, it means the global tenths defined by the scaling element, not the local tenths as adjusted by the staff-size element.</para>
        /// </summary>
        [System.Xml.Serialization.XmlAttributeAttribute("relative-y")]
        public decimal RelativeY { get; set; }

        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the RelativeY property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool RelativeYSpecified { get; set; }

        /// <summary>
        /// <para>The font-family is a comma-separated list of font names. These can be specific font styles such as Maestro or Opus, or one of several generic font styles: music, engraved, handwritten, text, serif, sans-serif, handwritten, cursive, fantasy, and monospace. The music, engraved, and handwritten values refer to music fonts; the rest refer to text fonts. The fantasy style refers to decorative text such as found in older German-style printing.</para>
        /// <para xml:lang="en">Pattern: [^,]+(, ?[^,]+)*.</para>
        /// </summary>
        [System.ComponentModel.DataAnnotations.RegularExpressionAttribute("[^,]+(, ?[^,]+)*")]
        [System.Xml.Serialization.XmlAttributeAttribute("font-family")]
        public string FontFamily { get; set; }

        [System.Xml.Serialization.XmlAttributeAttribute("font-style")]
        public FontStyle FontStyle { get; set; }

        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the FontStyle property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool FontStyleSpecified { get; set; }

        /// <summary>
        /// <para>The font-size can be one of the CSS font sizes (xx-small, x-small, small, medium, large, x-large, xx-large) or a numeric point size.</para>
        /// </summary>
        [System.Xml.Serialization.XmlAttributeAttribute("font-size")]
        public string FontSize { get; set; }

        [System.Xml.Serialization.XmlAttributeAttribute("font-weight")]
        public FontWeight FontWeight { get; set; }

        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the FontWeight property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool FontWeightSpecified { get; set; }

        /// <summary>
        /// <para>The color type indicates the color of an element. Color may be represented as hexadecimal RGB triples, as in HTML, or as hexadecimal ARGB tuples, with the A indicating alpha of transparency. An alpha value of 00 is totally transparent; FF is totally opaque. If RGB is used, the A value is assumed to be FF.
        ///
        ///For instance, the RGB value "#800080" represents purple. An ARGB value of "#40800080" would be a transparent purple.
        ///
        ///As in SVG 1.1, colors are defined in terms of the sRGB color space (IEC 61966).</para>
        /// <para xml:lang="en">Pattern: #[\dA-F]{6}([\dA-F][\dA-F])?.</para>
        /// </summary>
        [System.ComponentModel.DataAnnotations.RegularExpressionAttribute("#[\\dA-F]{6}([\\dA-F][\\dA-F])?")]
        [System.Xml.Serialization.XmlAttributeAttribute("color")]
        public string Color { get; set; }

        [System.Xml.Serialization.XmlAttributeAttribute("placement")]
        public AboveBelow Placement { get; set; }

        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the Placement property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool PlacementSpecified { get; set; }

        /// <summary>
        /// <para>The smufl-glyph-name type is used for attributes that reference a specific Standard Music Font Layout (SMuFL) character. The value is a SMuFL canonical glyph name, not a code point. For instance, the value for a standard piano pedal mark would be keyboardPedalPed, not U+E650.</para>
        /// </summary>
        [System.Xml.Serialization.XmlAttributeAttribute("smufl")]
        public string Smufl { get; set; }

        [System.Xml.Serialization.XmlAttributeAttribute("id")]
        public string Id { get; set; }
    }

    /// <summary>
    /// <para>Notes are the most common type of MusicXML data. The MusicXML format distinguishes between elements used for sound information and elements used for notation information (e.g., tie is used for sound, tied for notation). Thus grace notes do not have a duration element. Cue notes have a duration element, as do forward elements, but no tie elements. Having these two types of information available can make interchange easier, as some programs handle one type of information more readily than the other.
    ///
    ///The print-leger attribute is used to indicate whether leger lines are printed. Notes without leger lines are used to indicate indeterminate high and low notes. By default, it is set to yes. If print-object is set to no, print-leger is interpreted to also be set to no if not present. This attribute is ignored for rests.
    ///
    ///The dynamics and end-dynamics attributes correspond to MIDI 1.0's Note On and Note Off velocities, respectively. They are expressed in terms of percentages of the default forte value (90 for MIDI 1.0).
    ///
    ///The attack and release attributes are used to alter the starting and stopping time of the note from when it would otherwise occur based on the flow of durations - information that is specific to a performance. They are expressed in terms of divisions, either positive or negative. A note that starts a tie should not have a release attribute, and a note that stops a tie should not have an attack attribute. The attack and release attributes are independent of each other. The attack attribute only changes the starting time of a note, and the release attribute only changes the stopping time of a note.
    ///
    ///If a note is played only particular times through a repeat, the time-only attribute shows which times to play the note.
    ///
    ///The pizzicato attribute is used when just this note is sounded pizzicato, vs. the pizzicato element which changes overall playback between pizzicato and arco.</para>
    /// </summary>
    [System.ComponentModel.DescriptionAttribute("Notes are the most common type of MusicXML data. The MusicXML format distinguishe" +
        "s between elements used for sound information and elements used for notation inf" +
        "ormation (e.g., tie is used for sound, tied for notation). Thus grace notes do n" +
        "ot have a duration element. Cue notes have a duration element, as do forward ele" +
        "ments, but no tie elements. Having these two types of information available can " +
        "make interchange easier, as some programs handle one type of information more re" +
        "adily than the other. The print-leger attribute is used to indicate whether lege" +
        "r lines are printed. Notes without leger lines are used to indicate indeterminat" +
        "e high and low notes. By default, it is set to yes. If print-object is set to no" +
        ", print-leger is interpreted to also be set to no if not present. This attribute" +
        " is ignored for rests. The dynamics and end-dynamics attributes correspond to MI" +
        "DI 1.0\'s Note On and Note Off velocities, respectively. They are expressed in te" +
        "rms of percentages of the default forte value (90 for MIDI 1.0). The attack and " +
        "release attributes are used to alter the starting and stopping time of the note " +
        "from when it would otherwise occur based on the flow of durations - information " +
        "that is specific to a performance. They are expressed in terms of divisions, eit" +
        "her positive or negative. A note that starts a tie should not have a release att" +
        "ribute, and a note that stops a tie should not have an attack attribute. The att" +
        "ack and release attributes are independent of each other. The attack attribute o" +
        "nly changes the starting time of a note, and the release attribute only changes " +
        "the stopping time of a note. If a note is played only particular times through a" +
        " repeat, the time-only attribute shows which times to play the note. The pizzica" +
        "to attribute is used when just this note is sounded pizzicato, vs. the pizzicato" +
        " element which changes overall playback between pizzicato and arco.")]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XmlSchemaClassGenerator", "2.1.1142.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute("note", Namespace="")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class Note : IFullNote, IDuration, IEditorialVoice, IStaff, IXPosition, IFont, IColor, IPrintout, IOptionalUniqueId
    {

        [System.Xml.Serialization.XmlElementAttribute("grace")]
        public Grace Grace { get; set; }

        /// <summary>
        /// <para>The chord element indicates that this note is an additional chord tone with the preceding note.
        ///
        ///The duration of a chord note does not move the musical position within a measure. That is done by the duration of the first preceding note without a chord element. Thus the duration of a chord note cannot be longer than the preceding note.
        ///							
        ///In most cases the duration will be the same as the preceding note. However it can be shorter in situations such as multiple stops for string instruments.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute(@"The chord element indicates that this note is an additional chord tone with the preceding note. The duration of a chord note does not move the musical position within a measure. That is done by the duration of the first preceding note without a chord element. Thus the duration of a chord note cannot be longer than the preceding note. In most cases the duration will be the same as the preceding note. However it can be shorter in situations such as multiple stops for string instruments.")]
        [System.Xml.Serialization.XmlElementAttribute("chord")]
        public Empty Chord { get; set; }

        [System.Xml.Serialization.XmlElementAttribute("pitch")]
        public Pitch Pitch { get; set; }

        [System.Xml.Serialization.XmlElementAttribute("unpitched")]
        public Unpitched Unpitched { get; set; }

        [System.Xml.Serialization.XmlElementAttribute("rest")]
        public Rest Rest { get; set; }

        [System.Xml.Serialization.XmlIgnoreAttribute()]
        private System.Collections.ObjectModel.Collection<Tie> _tie;

        [System.Xml.Serialization.XmlElementAttribute("tie")]
        public System.Collections.ObjectModel.Collection<Tie> Tie
        {
            get
            {
                return _tie;
            }
            private set
            {
                _tie = value;
            }
        }

        /// <summary>
        /// <para xml:lang="en">Gets a value indicating whether the Tie collection is empty.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool TieSpecified
        {
            get
            {
                return (this.Tie.Count != 0);
            }
        }

        /// <summary>
        /// <para xml:lang="en">Initializes a new instance of the <see cref="Note" /> class.</para>
        /// </summary>
        public Note()
        {
            this._tie = new System.Collections.ObjectModel.Collection<Tie>();
            this._cue = new System.Collections.ObjectModel.Collection<Empty>();
            this._instrument = new System.Collections.ObjectModel.Collection<Instrument>();
            this._dot = new System.Collections.ObjectModel.Collection<EmptyPlacement>();
            this._beam = new System.Collections.ObjectModel.Collection<Beam>();
            this._notations = new System.Collections.ObjectModel.Collection<Notations>();
            this._lyric = new System.Collections.ObjectModel.Collection<Lyric>();
        }

        [System.Xml.Serialization.XmlIgnoreAttribute()]
        private System.Collections.ObjectModel.Collection<Empty> _cue;

        [System.Xml.Serialization.XmlElementAttribute("cue")]
        public System.Collections.ObjectModel.Collection<Empty> Cue
        {
            get
            {
                return _cue;
            }
            private set
            {
                _cue = value;
            }
        }

        /// <summary>
        /// <para xml:lang="en">Gets a value indicating whether the Cue collection is empty.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool CueSpecified
        {
            get
            {
                return (this.Cue.Count != 0);
            }
        }

        /// <summary>
        /// <para>Duration is a positive number specified in division units. This is the intended duration vs. notated duration (for instance, differences in dotted notes in Baroque-era music). Differences in duration specific to an interpretation or performance should be represented using the note element's attack and release attributes.
        ///
        ///The duration element moves the musical position when used in backup elements, forward elements, and note elements that do not contain a chord child element.</para>
        /// <para>The positive-divisions type restricts divisions values to positive numbers.</para>
        /// <para xml:lang="en">Minimum exclusive value: 0.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute(@"Duration is a positive number specified in division units. This is the intended duration vs. notated duration (for instance, differences in dotted notes in Baroque-era music). Differences in duration specific to an interpretation or performance should be represented using the note element's attack and release attributes. The duration element moves the musical position when used in backup elements, forward elements, and note elements that do not contain a chord child element.")]
        [System.Xml.Serialization.XmlElementAttribute("duration")]
        public decimal Duration { get; set; }

        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the Duration property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool DurationSpecified { get; set; }

        [System.Xml.Serialization.XmlIgnoreAttribute()]
        private System.Collections.ObjectModel.Collection<Instrument> _instrument;

        [System.Xml.Serialization.XmlElementAttribute("instrument")]
        public System.Collections.ObjectModel.Collection<Instrument> Instrument
        {
            get
            {
                return _instrument;
            }
            private set
            {
                _instrument = value;
            }
        }

        /// <summary>
        /// <para xml:lang="en">Gets a value indicating whether the Instrument collection is empty.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool InstrumentSpecified
        {
            get
            {
                return (this.Instrument.Count != 0);
            }
        }

        [System.Xml.Serialization.XmlElementAttribute("footnote")]
        public FormattedText Footnote { get; set; }

        [System.Xml.Serialization.XmlElementAttribute("level")]
        public Level Level { get; set; }

        [System.Xml.Serialization.XmlElementAttribute("voice")]
        public string Voice { get; set; }

        [System.Xml.Serialization.XmlElementAttribute("type")]
        public NoteType Type { get; set; }

        [System.Xml.Serialization.XmlIgnoreAttribute()]
        private System.Collections.ObjectModel.Collection<EmptyPlacement> _dot;

        /// <summary>
        /// <para>One dot element is used for each dot of prolongation. The placement attribute is used to specify whether the dot should appear above or below the staff line. It is ignored for notes that appear on a staff space.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("One dot element is used for each dot of prolongation. The placement attribute is " +
            "used to specify whether the dot should appear above or below the staff line. It " +
            "is ignored for notes that appear on a staff space.")]
        [System.Xml.Serialization.XmlElementAttribute("dot")]
        public System.Collections.ObjectModel.Collection<EmptyPlacement> Dot
        {
            get
            {
                return _dot;
            }
            private set
            {
                _dot = value;
            }
        }

        /// <summary>
        /// <para xml:lang="en">Gets a value indicating whether the Dot collection is empty.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool DotSpecified
        {
            get
            {
                return (this.Dot.Count != 0);
            }
        }

        [System.Xml.Serialization.XmlElementAttribute("accidental")]
        public Accidental Accidental { get; set; }

        [System.Xml.Serialization.XmlElementAttribute("time-modification")]
        public TimeModification TimeModification { get; set; }

        [System.Xml.Serialization.XmlElementAttribute("stem")]
        public Stem Stem { get; set; }

        [System.Xml.Serialization.XmlElementAttribute("notehead")]
        public Notehead Notehead { get; set; }

        [System.Xml.Serialization.XmlElementAttribute("notehead-text")]
        public NoteheadText NoteheadText { get; set; }

        /// <summary>
        /// <para>Staff assignment is only needed for music notated on multiple staves. Used by both notes and directions. Staff values are numbers, with 1 referring to the top-most staff in a part.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Staff assignment is only needed for music notated on multiple staves. Used by bot" +
            "h notes and directions. Staff values are numbers, with 1 referring to the top-mo" +
            "st staff in a part.")]
        [System.Xml.Serialization.XmlElementAttribute("staff")]
        public string Staff { get; set; }

        [System.Xml.Serialization.XmlIgnoreAttribute()]
        private System.Collections.ObjectModel.Collection<Beam> _beam;

        [System.Xml.Serialization.XmlElementAttribute("beam")]
        public System.Collections.ObjectModel.Collection<Beam> Beam
        {
            get
            {
                return _beam;
            }
            private set
            {
                _beam = value;
            }
        }

        /// <summary>
        /// <para xml:lang="en">Gets a value indicating whether the Beam collection is empty.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool BeamSpecified
        {
            get
            {
                return (this.Beam.Count != 0);
            }
        }

        [System.Xml.Serialization.XmlIgnoreAttribute()]
        private System.Collections.ObjectModel.Collection<Notations> _notations;

        [System.Xml.Serialization.XmlElementAttribute("notations")]
        public System.Collections.ObjectModel.Collection<Notations> Notations
        {
            get
            {
                return _notations;
            }
            private set
            {
                _notations = value;
            }
        }

        /// <summary>
        /// <para xml:lang="en">Gets a value indicating whether the Notations collection is empty.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool NotationsSpecified
        {
            get
            {
                return (this.Notations.Count != 0);
            }
        }

        [System.Xml.Serialization.XmlIgnoreAttribute()]
        private System.Collections.ObjectModel.Collection<Lyric> _lyric;

        [System.Xml.Serialization.XmlElementAttribute("lyric")]
        public System.Collections.ObjectModel.Collection<Lyric> Lyric
        {
            get
            {
                return _lyric;
            }
            private set
            {
                _lyric = value;
            }
        }

        /// <summary>
        /// <para xml:lang="en">Gets a value indicating whether the Lyric collection is empty.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool LyricSpecified
        {
            get
            {
                return (this.Lyric.Count != 0);
            }
        }

        [System.Xml.Serialization.XmlElementAttribute("play")]
        public Play Play { get; set; }

        [System.Xml.Serialization.XmlElementAttribute("listen")]
        public Listen Listen { get; set; }

        /// <summary>
        /// <para>The tenths type is a number representing tenths of interline staff space (positive or negative). Both integer and decimal values are allowed, such as 5 for a half space and 2.5 for a quarter space. Interline space is measured from the middle of a staff line.
        ///
        ///Distances in a MusicXML file are measured in tenths of staff space. Tenths are then scaled to millimeters within the scaling element, used in the defaults element at the start of a score. Individual staves can apply a scaling factor to adjust staff size. When a MusicXML element or attribute refers to tenths, it means the global tenths defined by the scaling element, not the local tenths as adjusted by the staff-size element.</para>
        /// </summary>
        [System.Xml.Serialization.XmlAttributeAttribute("default-x")]
        public decimal DefaultX { get; set; }

        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the DefaultX property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool DefaultXSpecified { get; set; }

        /// <summary>
        /// <para>The tenths type is a number representing tenths of interline staff space (positive or negative). Both integer and decimal values are allowed, such as 5 for a half space and 2.5 for a quarter space. Interline space is measured from the middle of a staff line.
        ///
        ///Distances in a MusicXML file are measured in tenths of staff space. Tenths are then scaled to millimeters within the scaling element, used in the defaults element at the start of a score. Individual staves can apply a scaling factor to adjust staff size. When a MusicXML element or attribute refers to tenths, it means the global tenths defined by the scaling element, not the local tenths as adjusted by the staff-size element.</para>
        /// </summary>
        [System.Xml.Serialization.XmlAttributeAttribute("default-y")]
        public decimal DefaultY { get; set; }

        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the DefaultY property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool DefaultYSpecified { get; set; }

        /// <summary>
        /// <para>The tenths type is a number representing tenths of interline staff space (positive or negative). Both integer and decimal values are allowed, such as 5 for a half space and 2.5 for a quarter space. Interline space is measured from the middle of a staff line.
        ///
        ///Distances in a MusicXML file are measured in tenths of staff space. Tenths are then scaled to millimeters within the scaling element, used in the defaults element at the start of a score. Individual staves can apply a scaling factor to adjust staff size. When a MusicXML element or attribute refers to tenths, it means the global tenths defined by the scaling element, not the local tenths as adjusted by the staff-size element.</para>
        /// </summary>
        [System.Xml.Serialization.XmlAttributeAttribute("relative-x")]
        public decimal RelativeX { get; set; }

        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the RelativeX property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool RelativeXSpecified { get; set; }

        /// <summary>
        /// <para>The tenths type is a number representing tenths of interline staff space (positive or negative). Both integer and decimal values are allowed, such as 5 for a half space and 2.5 for a quarter space. Interline space is measured from the middle of a staff line.
        ///
        ///Distances in a MusicXML file are measured in tenths of staff space. Tenths are then scaled to millimeters within the scaling element, used in the defaults element at the start of a score. Individual staves can apply a scaling factor to adjust staff size. When a MusicXML element or attribute refers to tenths, it means the global tenths defined by the scaling element, not the local tenths as adjusted by the staff-size element.</para>
        /// </summary>
        [System.Xml.Serialization.XmlAttributeAttribute("relative-y")]
        public decimal RelativeY { get; set; }

        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the RelativeY property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool RelativeYSpecified { get; set; }

        /// <summary>
        /// <para>The font-family is a comma-separated list of font names. These can be specific font styles such as Maestro or Opus, or one of several generic font styles: music, engraved, handwritten, text, serif, sans-serif, handwritten, cursive, fantasy, and monospace. The music, engraved, and handwritten values refer to music fonts; the rest refer to text fonts. The fantasy style refers to decorative text such as found in older German-style printing.</para>
        /// <para xml:lang="en">Pattern: [^,]+(, ?[^,]+)*.</para>
        /// </summary>
        [System.ComponentModel.DataAnnotations.RegularExpressionAttribute("[^,]+(, ?[^,]+)*")]
        [System.Xml.Serialization.XmlAttributeAttribute("font-family")]
        public string FontFamily { get; set; }

        [System.Xml.Serialization.XmlAttributeAttribute("font-style")]
        public FontStyle FontStyle { get; set; }

        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the FontStyle property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool FontStyleSpecified { get; set; }

        /// <summary>
        /// <para>The font-size can be one of the CSS font sizes (xx-small, x-small, small, medium, large, x-large, xx-large) or a numeric point size.</para>
        /// </summary>
        [System.Xml.Serialization.XmlAttributeAttribute("font-size")]
        public string FontSize { get; set; }

        [System.Xml.Serialization.XmlAttributeAttribute("font-weight")]
        public FontWeight FontWeight { get; set; }

        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the FontWeight property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool FontWeightSpecified { get; set; }

        /// <summary>
        /// <para>The color type indicates the color of an element. Color may be represented as hexadecimal RGB triples, as in HTML, or as hexadecimal ARGB tuples, with the A indicating alpha of transparency. An alpha value of 00 is totally transparent; FF is totally opaque. If RGB is used, the A value is assumed to be FF.
        ///
        ///For instance, the RGB value "#800080" represents purple. An ARGB value of "#40800080" would be a transparent purple.
        ///
        ///As in SVG 1.1, colors are defined in terms of the sRGB color space (IEC 61966).</para>
        /// <para xml:lang="en">Pattern: #[\dA-F]{6}([\dA-F][\dA-F])?.</para>
        /// </summary>
        [System.ComponentModel.DataAnnotations.RegularExpressionAttribute("#[\\dA-F]{6}([\\dA-F][\\dA-F])?")]
        [System.Xml.Serialization.XmlAttributeAttribute("color")]
        public string Color { get; set; }

        [System.Xml.Serialization.XmlAttributeAttribute("print-object")]
        public YesNo PrintObject { get; set; }

        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the PrintObject property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool PrintObjectSpecified { get; set; }

        [System.Xml.Serialization.XmlAttributeAttribute("print-dot")]
        public YesNo PrintDot { get; set; }

        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the PrintDot property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool PrintDotSpecified { get; set; }

        [System.Xml.Serialization.XmlAttributeAttribute("print-spacing")]
        public YesNo PrintSpacing { get; set; }

        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the PrintSpacing property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool PrintSpacingSpecified { get; set; }

        [System.Xml.Serialization.XmlAttributeAttribute("print-lyric")]
        public YesNo PrintLyric { get; set; }

        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the PrintLyric property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool PrintLyricSpecified { get; set; }

        [System.Xml.Serialization.XmlAttributeAttribute("print-leger")]
        public YesNo PrintLeger { get; set; }

        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the PrintLeger property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool PrintLegerSpecified { get; set; }

        /// <summary>
        /// <para>The non-negative-decimal type specifies a non-negative decimal value.</para>
        /// <para xml:lang="en">Minimum inclusive value: 0.</para>
        /// </summary>
        [System.Xml.Serialization.XmlAttributeAttribute("dynamics")]
        public decimal Dynamics { get; set; }

        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the Dynamics property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool DynamicsSpecified { get; set; }

        /// <summary>
        /// <para>The non-negative-decimal type specifies a non-negative decimal value.</para>
        /// <para xml:lang="en">Minimum inclusive value: 0.</para>
        /// </summary>
        [System.Xml.Serialization.XmlAttributeAttribute("end-dynamics")]
        public decimal EndDynamics { get; set; }

        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the EndDynamics property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool EndDynamicsSpecified { get; set; }

        /// <summary>
        /// <para>The divisions type is used to express values in terms of the musical divisions defined by the divisions element. It is preferred that these be integer values both for MIDI interoperability and to avoid roundoff errors.</para>
        /// </summary>
        [System.Xml.Serialization.XmlAttributeAttribute("attack")]
        public decimal Attack { get; set; }

        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the Attack property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool AttackSpecified { get; set; }

        /// <summary>
        /// <para>The divisions type is used to express values in terms of the musical divisions defined by the divisions element. It is preferred that these be integer values both for MIDI interoperability and to avoid roundoff errors.</para>
        /// </summary>
        [System.Xml.Serialization.XmlAttributeAttribute("release")]
        public decimal Release { get; set; }

        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the Release property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool ReleaseSpecified { get; set; }

        /// <summary>
        /// <para>The time-only type is used to indicate that a particular playback- or listening-related element only applies particular times through a repeated section. The value is a comma-separated list of positive integers arranged in ascending order, indicating which times through the repeated section that the element applies.</para>
        /// <para xml:lang="en">Pattern: [1-9][0-9]*(, ?[1-9][0-9]*)*.</para>
        /// </summary>
        [System.ComponentModel.DataAnnotations.RegularExpressionAttribute("[1-9][0-9]*(, ?[1-9][0-9]*)*")]
        [System.Xml.Serialization.XmlAttributeAttribute("time-only")]
        public string TimeOnly { get; set; }

        [System.Xml.Serialization.XmlAttributeAttribute("pizzicato")]
        public YesNo Pizzicato { get; set; }

        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the Pizzicato property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool PizzicatoSpecified { get; set; }

        [System.Xml.Serialization.XmlAttributeAttribute("id")]
        public string Id { get; set; }
    }

    /// <summary>
    /// <para>The full-note group is a sequence of the common note elements between cue/grace notes and regular (full) notes: pitch, chord, and rest information, but not duration (cue and grace notes do not have duration encoded). Unpitched elements are used for unpitched percussion, speaking voice, and other musical elements lacking determinate pitch.</para>
    /// </summary>
    [System.ComponentModel.DescriptionAttribute(@"The full-note group is a sequence of the common note elements between cue/grace notes and regular (full) notes: pitch, chord, and rest information, but not duration (cue and grace notes do not have duration encoded). Unpitched elements are used for unpitched percussion, speaking voice, and other musical elements lacking determinate pitch.")]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XmlSchemaClassGenerator", "2.1.1142.0")]
    public partial interface IFullNote
    {

        /// <summary>
        /// <para>The chord element indicates that this note is an additional chord tone with the preceding note.
        ///
        ///The duration of a chord note does not move the musical position within a measure. That is done by the duration of the first preceding note without a chord element. Thus the duration of a chord note cannot be longer than the preceding note.
        ///							
        ///In most cases the duration will be the same as the preceding note. However it can be shorter in situations such as multiple stops for string instruments.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute(@"The chord element indicates that this note is an additional chord tone with the preceding note. The duration of a chord note does not move the musical position within a measure. That is done by the duration of the first preceding note without a chord element. Thus the duration of a chord note cannot be longer than the preceding note. In most cases the duration will be the same as the preceding note. However it can be shorter in situations such as multiple stops for string instruments.")]
        Empty Chord
        {
            get;
            set;
        }

        Pitch Pitch
        {
            get;
            set;
        }

        Unpitched Unpitched
        {
            get;
            set;
        }

        Rest Rest
        {
            get;
            set;
        }
    }

    /// <summary>
    /// <para>Pitch is represented as a combination of the step of the diatonic scale, the chromatic alteration, and the octave.</para>
    /// </summary>
    [System.ComponentModel.DescriptionAttribute("Pitch is represented as a combination of the step of the diatonic scale, the chro" +
        "matic alteration, and the octave.")]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XmlSchemaClassGenerator", "2.1.1142.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute("pitch", Namespace="")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class Pitch
    {

        [System.ComponentModel.DataAnnotations.RequiredAttribute(AllowEmptyStrings=true)]
        [System.Xml.Serialization.XmlElementAttribute("step")]
        public Step Step { get; set; }

        /// <summary>
        /// <para>The semitones type is a number representing semitones, used for chromatic alteration. A value of -1 corresponds to a flat and a value of 1 to a sharp. Decimal values like 0.5 (quarter tone sharp) are used for microtones.</para>
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute("alter")]
        public decimal Alter { get; set; }

        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the Alter property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool AlterSpecified { get; set; }

        /// <summary>
        /// <para>Octaves are represented by the numbers 0 to 9, where 4 indicates the octave started by middle C.</para>
        /// <para xml:lang="en">Minimum inclusive value: 0.</para>
        /// <para xml:lang="en">Maximum inclusive value: 9.</para>
        /// </summary>
        [System.ComponentModel.DataAnnotations.RangeAttribute(typeof(decimal), "0", "9")]
        [System.ComponentModel.DataAnnotations.RequiredAttribute(AllowEmptyStrings=true)]
        [System.Xml.Serialization.XmlElementAttribute("octave")]
        public byte Octave { get; set; }
    }

    /// <summary>
    /// <para>The unpitched type represents musical elements that are notated on the staff but lack definite pitch, such as unpitched percussion and speaking voice. If the child elements are not present, the note is placed on the middle line of the staff. This is generally used with a one-line staff. Notes in percussion clef should always use an unpitched element rather than a pitch element.</para>
    /// </summary>
    [System.ComponentModel.DescriptionAttribute(@"The unpitched type represents musical elements that are notated on the staff but lack definite pitch, such as unpitched percussion and speaking voice. If the child elements are not present, the note is placed on the middle line of the staff. This is generally used with a one-line staff. Notes in percussion clef should always use an unpitched element rather than a pitch element.")]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XmlSchemaClassGenerator", "2.1.1142.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute("unpitched", Namespace="")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class Unpitched : IDisplayStepOctave
    {

        [System.Xml.Serialization.XmlElementAttribute("display-step")]
        public Step DisplayStep { get; set; }

        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the DisplayStep property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool DisplayStepSpecified { get; set; }

        /// <summary>
        /// <para>Octaves are represented by the numbers 0 to 9, where 4 indicates the octave started by middle C.</para>
        /// <para xml:lang="en">Minimum inclusive value: 0.</para>
        /// <para xml:lang="en">Maximum inclusive value: 9.</para>
        /// </summary>
        [System.ComponentModel.DataAnnotations.RangeAttribute(typeof(decimal), "0", "9")]
        [System.Xml.Serialization.XmlElementAttribute("display-octave")]
        public byte DisplayOctave { get; set; }

        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the DisplayOctave property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool DisplayOctaveSpecified { get; set; }
    }

    /// <summary>
    /// <para>The display-step-octave group contains the sequence of elements used by both the rest and unpitched elements. This group is used to place rests and unpitched elements on the staff without implying that these elements have pitch. Positioning follows the current clef. If percussion clef is used, the display-step and display-octave elements are interpreted as if in treble clef, with a G in octave 4 on line 2.</para>
    /// </summary>
    [System.ComponentModel.DescriptionAttribute(@"The display-step-octave group contains the sequence of elements used by both the rest and unpitched elements. This group is used to place rests and unpitched elements on the staff without implying that these elements have pitch. Positioning follows the current clef. If percussion clef is used, the display-step and display-octave elements are interpreted as if in treble clef, with a G in octave 4 on line 2.")]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XmlSchemaClassGenerator", "2.1.1142.0")]
    public partial interface IDisplayStepOctave
    {

        Step DisplayStep
        {
            get;
            set;
        }

        /// <summary>
        /// <para>Octaves are represented by the numbers 0 to 9, where 4 indicates the octave started by middle C.</para>
        /// <para xml:lang="en">Minimum inclusive value: 0.</para>
        /// <para xml:lang="en">Maximum inclusive value: 9.</para>
        /// </summary>
        [System.ComponentModel.DataAnnotations.RangeAttribute(typeof(decimal), "0", "9")]
        byte DisplayOctave
        {
            get;
            set;
        }
    }

    /// <summary>
    /// <para>The rest element indicates notated rests or silences. Rest elements are usually empty, but placement on the staff can be specified using display-step and display-octave elements. If the measure attribute is set to yes, this indicates this is a complete measure rest.</para>
    /// </summary>
    [System.ComponentModel.DescriptionAttribute(@"The rest element indicates notated rests or silences. Rest elements are usually empty, but placement on the staff can be specified using display-step and display-octave elements. If the measure attribute is set to yes, this indicates this is a complete measure rest.")]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XmlSchemaClassGenerator", "2.1.1142.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute("rest", Namespace="")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class Rest : IDisplayStepOctave
    {

        [System.Xml.Serialization.XmlElementAttribute("display-step")]
        public Step DisplayStep { get; set; }

        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the DisplayStep property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool DisplayStepSpecified { get; set; }

        /// <summary>
        /// <para>Octaves are represented by the numbers 0 to 9, where 4 indicates the octave started by middle C.</para>
        /// <para xml:lang="en">Minimum inclusive value: 0.</para>
        /// <para xml:lang="en">Maximum inclusive value: 9.</para>
        /// </summary>
        [System.ComponentModel.DataAnnotations.RangeAttribute(typeof(decimal), "0", "9")]
        [System.Xml.Serialization.XmlElementAttribute("display-octave")]
        public byte DisplayOctave { get; set; }

        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the DisplayOctave property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool DisplayOctaveSpecified { get; set; }

        [System.Xml.Serialization.XmlAttributeAttribute("measure")]
        public YesNo Measure { get; set; }

        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the Measure property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool MeasureSpecified { get; set; }
    }

    /// <summary>
    /// <para>The tie element indicates that a tie begins or ends with this note. If the tie element applies only particular times through a repeat, the time-only attribute indicates which times to apply it. The tie element indicates sound; the tied element indicates notation.</para>
    /// </summary>
    [System.ComponentModel.DescriptionAttribute(@"The tie element indicates that a tie begins or ends with this note. If the tie element applies only particular times through a repeat, the time-only attribute indicates which times to apply it. The tie element indicates sound; the tied element indicates notation.")]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XmlSchemaClassGenerator", "2.1.1142.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute("tie", Namespace="")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class Tie
    {

        [System.ComponentModel.DataAnnotations.RequiredAttribute(AllowEmptyStrings=true)]
        [System.Xml.Serialization.XmlAttributeAttribute("type")]
        public StartStop Type { get; set; }

        /// <summary>
        /// <para>The time-only type is used to indicate that a particular playback- or listening-related element only applies particular times through a repeated section. The value is a comma-separated list of positive integers arranged in ascending order, indicating which times through the repeated section that the element applies.</para>
        /// <para xml:lang="en">Pattern: [1-9][0-9]*(, ?[1-9][0-9]*)*.</para>
        /// </summary>
        [System.ComponentModel.DataAnnotations.RegularExpressionAttribute("[1-9][0-9]*(, ?[1-9][0-9]*)*")]
        [System.Xml.Serialization.XmlAttributeAttribute("time-only")]
        public string TimeOnly { get; set; }
    }

    /// <summary>
    /// <para>The note-type type indicates the graphic note type. Values range from 1024th to maxima. The size attribute indicates full, cue, grace-cue, or large size. The default is full for regular notes, grace-cue for notes that contain both grace and cue elements, and cue for notes that contain either a cue or a grace element, but not both.</para>
    /// </summary>
    [System.ComponentModel.DescriptionAttribute(@"The note-type type indicates the graphic note type. Values range from 1024th to maxima. The size attribute indicates full, cue, grace-cue, or large size. The default is full for regular notes, grace-cue for notes that contain both grace and cue elements, and cue for notes that contain either a cue or a grace element, but not both.")]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XmlSchemaClassGenerator", "2.1.1142.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute("note-type", Namespace="")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class NoteType
    {

        /// <summary>
        /// <para xml:lang="en">Gets or sets the text value.</para>
        /// </summary>
        [System.Xml.Serialization.XmlTextAttribute()]
        public NoteTypeValue Value { get; set; }

        [System.Xml.Serialization.XmlAttributeAttribute("size")]
        public SymbolSize Size { get; set; }

        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the Size property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool SizeSpecified { get; set; }
    }

    /// <summary>
    /// <para>Stems can be down, up, none, or double. For down and up stems, the position attributes can be used to specify stem length. The relative values specify the end of the stem relative to the program default. Default values specify an absolute end stem position. Negative values of relative-y that would flip a stem instead of shortening it are ignored. A stem element associated with a rest refers to a stemlet.</para>
    /// </summary>
    [System.ComponentModel.DescriptionAttribute(@"Stems can be down, up, none, or double. For down and up stems, the position attributes can be used to specify stem length. The relative values specify the end of the stem relative to the program default. Default values specify an absolute end stem position. Negative values of relative-y that would flip a stem instead of shortening it are ignored. A stem element associated with a rest refers to a stemlet.")]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XmlSchemaClassGenerator", "2.1.1142.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute("stem", Namespace="")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class Stem : IYPosition, IColor
    {

        /// <summary>
        /// <para xml:lang="en">Gets or sets the text value.</para>
        /// </summary>
        [System.Xml.Serialization.XmlTextAttribute()]
        public StemValue Value { get; set; }

        /// <summary>
        /// <para>The tenths type is a number representing tenths of interline staff space (positive or negative). Both integer and decimal values are allowed, such as 5 for a half space and 2.5 for a quarter space. Interline space is measured from the middle of a staff line.
        ///
        ///Distances in a MusicXML file are measured in tenths of staff space. Tenths are then scaled to millimeters within the scaling element, used in the defaults element at the start of a score. Individual staves can apply a scaling factor to adjust staff size. When a MusicXML element or attribute refers to tenths, it means the global tenths defined by the scaling element, not the local tenths as adjusted by the staff-size element.</para>
        /// </summary>
        [System.Xml.Serialization.XmlAttributeAttribute("default-x")]
        public decimal DefaultX { get; set; }

        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the DefaultX property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool DefaultXSpecified { get; set; }

        /// <summary>
        /// <para>The tenths type is a number representing tenths of interline staff space (positive or negative). Both integer and decimal values are allowed, such as 5 for a half space and 2.5 for a quarter space. Interline space is measured from the middle of a staff line.
        ///
        ///Distances in a MusicXML file are measured in tenths of staff space. Tenths are then scaled to millimeters within the scaling element, used in the defaults element at the start of a score. Individual staves can apply a scaling factor to adjust staff size. When a MusicXML element or attribute refers to tenths, it means the global tenths defined by the scaling element, not the local tenths as adjusted by the staff-size element.</para>
        /// </summary>
        [System.Xml.Serialization.XmlAttributeAttribute("default-y")]
        public decimal DefaultY { get; set; }

        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the DefaultY property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool DefaultYSpecified { get; set; }

        /// <summary>
        /// <para>The tenths type is a number representing tenths of interline staff space (positive or negative). Both integer and decimal values are allowed, such as 5 for a half space and 2.5 for a quarter space. Interline space is measured from the middle of a staff line.
        ///
        ///Distances in a MusicXML file are measured in tenths of staff space. Tenths are then scaled to millimeters within the scaling element, used in the defaults element at the start of a score. Individual staves can apply a scaling factor to adjust staff size. When a MusicXML element or attribute refers to tenths, it means the global tenths defined by the scaling element, not the local tenths as adjusted by the staff-size element.</para>
        /// </summary>
        [System.Xml.Serialization.XmlAttributeAttribute("relative-x")]
        public decimal RelativeX { get; set; }

        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the RelativeX property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool RelativeXSpecified { get; set; }

        /// <summary>
        /// <para>The tenths type is a number representing tenths of interline staff space (positive or negative). Both integer and decimal values are allowed, such as 5 for a half space and 2.5 for a quarter space. Interline space is measured from the middle of a staff line.
        ///
        ///Distances in a MusicXML file are measured in tenths of staff space. Tenths are then scaled to millimeters within the scaling element, used in the defaults element at the start of a score. Individual staves can apply a scaling factor to adjust staff size. When a MusicXML element or attribute refers to tenths, it means the global tenths defined by the scaling element, not the local tenths as adjusted by the staff-size element.</para>
        /// </summary>
        [System.Xml.Serialization.XmlAttributeAttribute("relative-y")]
        public decimal RelativeY { get; set; }

        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the RelativeY property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool RelativeYSpecified { get; set; }

        /// <summary>
        /// <para>The color type indicates the color of an element. Color may be represented as hexadecimal RGB triples, as in HTML, or as hexadecimal ARGB tuples, with the A indicating alpha of transparency. An alpha value of 00 is totally transparent; FF is totally opaque. If RGB is used, the A value is assumed to be FF.
        ///
        ///For instance, the RGB value "#800080" represents purple. An ARGB value of "#40800080" would be a transparent purple.
        ///
        ///As in SVG 1.1, colors are defined in terms of the sRGB color space (IEC 61966).</para>
        /// <para xml:lang="en">Pattern: #[\dA-F]{6}([\dA-F][\dA-F])?.</para>
        /// </summary>
        [System.ComponentModel.DataAnnotations.RegularExpressionAttribute("#[\\dA-F]{6}([\\dA-F][\\dA-F])?")]
        [System.Xml.Serialization.XmlAttributeAttribute("color")]
        public string Color { get; set; }
    }

    /// <summary>
    /// <para>The y-position attribute group is used for elements like stems where specifying y position is common, but specifying x position is rare.</para>
    /// </summary>
    [System.ComponentModel.DescriptionAttribute("The y-position attribute group is used for elements like stems where specifying y" +
        " position is common, but specifying x position is rare.")]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XmlSchemaClassGenerator", "2.1.1142.0")]
    public partial interface IYPosition
    {

        /// <summary>
        /// <para>The tenths type is a number representing tenths of interline staff space (positive or negative). Both integer and decimal values are allowed, such as 5 for a half space and 2.5 for a quarter space. Interline space is measured from the middle of a staff line.
        ///
        ///Distances in a MusicXML file are measured in tenths of staff space. Tenths are then scaled to millimeters within the scaling element, used in the defaults element at the start of a score. Individual staves can apply a scaling factor to adjust staff size. When a MusicXML element or attribute refers to tenths, it means the global tenths defined by the scaling element, not the local tenths as adjusted by the staff-size element.</para>
        /// </summary>
        decimal DefaultX
        {
            get;
            set;
        }

        /// <summary>
        /// <para>The tenths type is a number representing tenths of interline staff space (positive or negative). Both integer and decimal values are allowed, such as 5 for a half space and 2.5 for a quarter space. Interline space is measured from the middle of a staff line.
        ///
        ///Distances in a MusicXML file are measured in tenths of staff space. Tenths are then scaled to millimeters within the scaling element, used in the defaults element at the start of a score. Individual staves can apply a scaling factor to adjust staff size. When a MusicXML element or attribute refers to tenths, it means the global tenths defined by the scaling element, not the local tenths as adjusted by the staff-size element.</para>
        /// </summary>
        decimal DefaultY
        {
            get;
            set;
        }

        /// <summary>
        /// <para>The tenths type is a number representing tenths of interline staff space (positive or negative). Both integer and decimal values are allowed, such as 5 for a half space and 2.5 for a quarter space. Interline space is measured from the middle of a staff line.
        ///
        ///Distances in a MusicXML file are measured in tenths of staff space. Tenths are then scaled to millimeters within the scaling element, used in the defaults element at the start of a score. Individual staves can apply a scaling factor to adjust staff size. When a MusicXML element or attribute refers to tenths, it means the global tenths defined by the scaling element, not the local tenths as adjusted by the staff-size element.</para>
        /// </summary>
        decimal RelativeX
        {
            get;
            set;
        }

        /// <summary>
        /// <para>The tenths type is a number representing tenths of interline staff space (positive or negative). Both integer and decimal values are allowed, such as 5 for a half space and 2.5 for a quarter space. Interline space is measured from the middle of a staff line.
        ///
        ///Distances in a MusicXML file are measured in tenths of staff space. Tenths are then scaled to millimeters within the scaling element, used in the defaults element at the start of a score. Individual staves can apply a scaling factor to adjust staff size. When a MusicXML element or attribute refers to tenths, it means the global tenths defined by the scaling element, not the local tenths as adjusted by the staff-size element.</para>
        /// </summary>
        decimal RelativeY
        {
            get;
            set;
        }
    }

    /// <summary>
    /// <para>The notehead type indicates shapes other than the open and closed ovals associated with note durations. 
    ///
    ///The smufl attribute can be used to specify a particular notehead, allowing application interoperability without requiring every SMuFL glyph to have a MusicXML element equivalent. This attribute can be used either with the "other" value, or to refine a specific notehead value such as "cluster". Noteheads in the SMuFL Note name noteheads and Note name noteheads supplement ranges (U+E150–U+E1AF and U+EEE0–U+EEFF) should not use the smufl attribute or the "other" value, but instead use the notehead-text element.
    ///
    ///For the enclosed shapes, the default is to be hollow for half notes and longer, and filled otherwise. The filled attribute can be set to change this if needed.
    ///
    ///If the parentheses attribute is set to yes, the notehead is parenthesized. It is no by default.</para>
    /// </summary>
    [System.ComponentModel.DescriptionAttribute(@"The notehead type indicates shapes other than the open and closed ovals associated with note durations. The smufl attribute can be used to specify a particular notehead, allowing application interoperability without requiring every SMuFL glyph to have a MusicXML element equivalent. This attribute can be used either with the ""other"" value, or to refine a specific notehead value such as ""cluster"". Noteheads in the SMuFL Note name noteheads and Note name noteheads supplement ranges (U+E150–U+E1AF and U+EEE0–U+EEFF) should not use the smufl attribute or the ""other"" value, but instead use the notehead-text element. For the enclosed shapes, the default is to be hollow for half notes and longer, and filled otherwise. The filled attribute can be set to change this if needed. If the parentheses attribute is set to yes, the notehead is parenthesized. It is no by default.")]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XmlSchemaClassGenerator", "2.1.1142.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute("notehead", Namespace="")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class Notehead : IFont, IColor, ISmufl
    {

        /// <summary>
        /// <para xml:lang="en">Gets or sets the text value.</para>
        /// </summary>
        [System.Xml.Serialization.XmlTextAttribute()]
        public NoteheadValue Value { get; set; }

        [System.Xml.Serialization.XmlAttributeAttribute("filled")]
        public YesNo Filled { get; set; }

        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the Filled property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool FilledSpecified { get; set; }

        [System.Xml.Serialization.XmlAttributeAttribute("parentheses")]
        public YesNo Parentheses { get; set; }

        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the Parentheses property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool ParenthesesSpecified { get; set; }

        /// <summary>
        /// <para>The font-family is a comma-separated list of font names. These can be specific font styles such as Maestro or Opus, or one of several generic font styles: music, engraved, handwritten, text, serif, sans-serif, handwritten, cursive, fantasy, and monospace. The music, engraved, and handwritten values refer to music fonts; the rest refer to text fonts. The fantasy style refers to decorative text such as found in older German-style printing.</para>
        /// <para xml:lang="en">Pattern: [^,]+(, ?[^,]+)*.</para>
        /// </summary>
        [System.ComponentModel.DataAnnotations.RegularExpressionAttribute("[^,]+(, ?[^,]+)*")]
        [System.Xml.Serialization.XmlAttributeAttribute("font-family")]
        public string FontFamily { get; set; }

        [System.Xml.Serialization.XmlAttributeAttribute("font-style")]
        public FontStyle FontStyle { get; set; }

        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the FontStyle property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool FontStyleSpecified { get; set; }

        /// <summary>
        /// <para>The font-size can be one of the CSS font sizes (xx-small, x-small, small, medium, large, x-large, xx-large) or a numeric point size.</para>
        /// </summary>
        [System.Xml.Serialization.XmlAttributeAttribute("font-size")]
        public string FontSize { get; set; }

        [System.Xml.Serialization.XmlAttributeAttribute("font-weight")]
        public FontWeight FontWeight { get; set; }

        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the FontWeight property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool FontWeightSpecified { get; set; }

        /// <summary>
        /// <para>The color type indicates the color of an element. Color may be represented as hexadecimal RGB triples, as in HTML, or as hexadecimal ARGB tuples, with the A indicating alpha of transparency. An alpha value of 00 is totally transparent; FF is totally opaque. If RGB is used, the A value is assumed to be FF.
        ///
        ///For instance, the RGB value "#800080" represents purple. An ARGB value of "#40800080" would be a transparent purple.
        ///
        ///As in SVG 1.1, colors are defined in terms of the sRGB color space (IEC 61966).</para>
        /// <para xml:lang="en">Pattern: #[\dA-F]{6}([\dA-F][\dA-F])?.</para>
        /// </summary>
        [System.ComponentModel.DataAnnotations.RegularExpressionAttribute("#[\\dA-F]{6}([\\dA-F][\\dA-F])?")]
        [System.Xml.Serialization.XmlAttributeAttribute("color")]
        public string Color { get; set; }

        /// <summary>
        /// <para>The smufl-glyph-name type is used for attributes that reference a specific Standard Music Font Layout (SMuFL) character. The value is a SMuFL canonical glyph name, not a code point. For instance, the value for a standard piano pedal mark would be keyboardPedalPed, not U+E650.</para>
        /// </summary>
        [System.Xml.Serialization.XmlAttributeAttribute("smufl")]
        public string Smufl { get; set; }
    }

    /// <summary>
    /// <para>The notehead-text type represents text that is displayed inside a notehead, as is done in some educational music. It is not needed for the numbers used in tablature or jianpu notation. The presence of a TAB or jianpu clefs is sufficient to indicate that numbers are used. The display-text and accidental-text elements allow display of fully formatted text and accidentals.</para>
    /// </summary>
    [System.ComponentModel.DescriptionAttribute(@"The notehead-text type represents text that is displayed inside a notehead, as is done in some educational music. It is not needed for the numbers used in tablature or jianpu notation. The presence of a TAB or jianpu clefs is sufficient to indicate that numbers are used. The display-text and accidental-text elements allow display of fully formatted text and accidentals.")]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XmlSchemaClassGenerator", "2.1.1142.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute("notehead-text", Namespace="")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class NoteheadText
    {

        [System.Xml.Serialization.XmlIgnoreAttribute()]
        private System.Collections.ObjectModel.Collection<FormattedText> _displayText;

        [System.Xml.Serialization.XmlElementAttribute("display-text")]
        public System.Collections.ObjectModel.Collection<FormattedText> DisplayText
        {
            get
            {
                return _displayText;
            }
            private set
            {
                _displayText = value;
            }
        }

        /// <summary>
        /// <para xml:lang="en">Gets a value indicating whether the DisplayText collection is empty.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool DisplayTextSpecified
        {
            get
            {
                return (this.DisplayText.Count != 0);
            }
        }

        /// <summary>
        /// <para xml:lang="en">Initializes a new instance of the <see cref="NoteheadText" /> class.</para>
        /// </summary>
        public NoteheadText()
        {
            this._displayText = new System.Collections.ObjectModel.Collection<FormattedText>();
            this._accidentalText = new System.Collections.ObjectModel.Collection<AccidentalText>();
        }

        [System.Xml.Serialization.XmlIgnoreAttribute()]
        private System.Collections.ObjectModel.Collection<AccidentalText> _accidentalText;

        [System.Xml.Serialization.XmlElementAttribute("accidental-text")]
        public System.Collections.ObjectModel.Collection<AccidentalText> AccidentalText
        {
            get
            {
                return _accidentalText;
            }
            private set
            {
                _accidentalText = value;
            }
        }

        /// <summary>
        /// <para xml:lang="en">Gets a value indicating whether the AccidentalText collection is empty.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool AccidentalTextSpecified
        {
            get
            {
                return (this.AccidentalText.Count != 0);
            }
        }
    }

    /// <summary>
    /// <para>The x-position attribute group is used for elements like notes where specifying x position is common, but specifying y position is rare.</para>
    /// </summary>
    [System.ComponentModel.DescriptionAttribute("The x-position attribute group is used for elements like notes where specifying x" +
        " position is common, but specifying y position is rare.")]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XmlSchemaClassGenerator", "2.1.1142.0")]
    public partial interface IXPosition
    {

        /// <summary>
        /// <para>The tenths type is a number representing tenths of interline staff space (positive or negative). Both integer and decimal values are allowed, such as 5 for a half space and 2.5 for a quarter space. Interline space is measured from the middle of a staff line.
        ///
        ///Distances in a MusicXML file are measured in tenths of staff space. Tenths are then scaled to millimeters within the scaling element, used in the defaults element at the start of a score. Individual staves can apply a scaling factor to adjust staff size. When a MusicXML element or attribute refers to tenths, it means the global tenths defined by the scaling element, not the local tenths as adjusted by the staff-size element.</para>
        /// </summary>
        decimal DefaultX
        {
            get;
            set;
        }

        /// <summary>
        /// <para>The tenths type is a number representing tenths of interline staff space (positive or negative). Both integer and decimal values are allowed, such as 5 for a half space and 2.5 for a quarter space. Interline space is measured from the middle of a staff line.
        ///
        ///Distances in a MusicXML file are measured in tenths of staff space. Tenths are then scaled to millimeters within the scaling element, used in the defaults element at the start of a score. Individual staves can apply a scaling factor to adjust staff size. When a MusicXML element or attribute refers to tenths, it means the global tenths defined by the scaling element, not the local tenths as adjusted by the staff-size element.</para>
        /// </summary>
        decimal DefaultY
        {
            get;
            set;
        }

        /// <summary>
        /// <para>The tenths type is a number representing tenths of interline staff space (positive or negative). Both integer and decimal values are allowed, such as 5 for a half space and 2.5 for a quarter space. Interline space is measured from the middle of a staff line.
        ///
        ///Distances in a MusicXML file are measured in tenths of staff space. Tenths are then scaled to millimeters within the scaling element, used in the defaults element at the start of a score. Individual staves can apply a scaling factor to adjust staff size. When a MusicXML element or attribute refers to tenths, it means the global tenths defined by the scaling element, not the local tenths as adjusted by the staff-size element.</para>
        /// </summary>
        decimal RelativeX
        {
            get;
            set;
        }

        /// <summary>
        /// <para>The tenths type is a number representing tenths of interline staff space (positive or negative). Both integer and decimal values are allowed, such as 5 for a half space and 2.5 for a quarter space. Interline space is measured from the middle of a staff line.
        ///
        ///Distances in a MusicXML file are measured in tenths of staff space. Tenths are then scaled to millimeters within the scaling element, used in the defaults element at the start of a score. Individual staves can apply a scaling factor to adjust staff size. When a MusicXML element or attribute refers to tenths, it means the global tenths defined by the scaling element, not the local tenths as adjusted by the staff-size element.</para>
        /// </summary>
        decimal RelativeY
        {
            get;
            set;
        }
    }

    /// <summary>
    /// <para>The credit type represents the appearance of the title, composer, arranger, lyricist, copyright, dedication, and other text, symbols, and graphics that commonly appear on the first page of a score. The credit-words, credit-symbol, and credit-image elements are similar to the words, symbol, and image elements for directions. However, since the credit is not part of a measure, the default-x and default-y attributes adjust the origin relative to the bottom left-hand corner of the page. The enclosure for credit-words and credit-symbol is none by default.
    ///
    ///By default, a series of credit-words and credit-symbol elements within a single credit element follow one another in sequence visually. Non-positional formatting attributes are carried over from the previous element by default.
    ///
    ///The page attribute for the credit element specifies the page number where the credit should appear. This is an integer value that starts with 1 for the first page. Its value is 1 by default. Since credits occur before the music, these page numbers do not refer to the page numbering specified by the print element's page-number attribute.
    ///
    ///The credit-type element indicates the purpose behind a credit. Multiple types of data may be combined in a single credit, so multiple elements may be used. Standard values include page number, title, subtitle, composer, arranger, lyricist, rights, and part name.</para>
    /// </summary>
    [System.ComponentModel.DescriptionAttribute(@"The credit type represents the appearance of the title, composer, arranger, lyricist, copyright, dedication, and other text, symbols, and graphics that commonly appear on the first page of a score. The credit-words, credit-symbol, and credit-image elements are similar to the words, symbol, and image elements for directions. However, since the credit is not part of a measure, the default-x and default-y attributes adjust the origin relative to the bottom left-hand corner of the page. The enclosure for credit-words and credit-symbol is none by default. By default, a series of credit-words and credit-symbol elements within a single credit element follow one another in sequence visually. Non-positional formatting attributes are carried over from the previous element by default. The page attribute for the credit element specifies the page number where the credit should appear. This is an integer value that starts with 1 for the first page. Its value is 1 by default. Since credits occur before the music, these page numbers do not refer to the page numbering specified by the print element's page-number attribute. The credit-type element indicates the purpose behind a credit. Multiple types of data may be combined in a single credit, so multiple elements may be used. Standard values include page number, title, subtitle, composer, arranger, lyricist, rights, and part name.")]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XmlSchemaClassGenerator", "2.1.1142.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute("credit", Namespace="")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class Credit : IOptionalUniqueId
    {

        [System.Xml.Serialization.XmlIgnoreAttribute()]
        private System.Collections.ObjectModel.Collection<string> _creditType;

        [System.Xml.Serialization.XmlElementAttribute("credit-type")]
        public System.Collections.ObjectModel.Collection<string> CreditType
        {
            get
            {
                return _creditType;
            }
            private set
            {
                _creditType = value;
            }
        }

        /// <summary>
        /// <para xml:lang="en">Gets a value indicating whether the CreditType collection is empty.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool CreditTypeSpecified
        {
            get
            {
                return (this.CreditType.Count != 0);
            }
        }

        /// <summary>
        /// <para xml:lang="en">Initializes a new instance of the <see cref="Credit" /> class.</para>
        /// </summary>
        public Credit()
        {
            this._creditType = new System.Collections.ObjectModel.Collection<string>();
            this._link = new System.Collections.ObjectModel.Collection<Link>();
            this._bookmark = new System.Collections.ObjectModel.Collection<Bookmark>();
            this._creditWords = new System.Collections.ObjectModel.Collection<FormattedTextId>();
            this._creditSymbol = new System.Collections.ObjectModel.Collection<FormattedSymbolId>();
        }

        [System.Xml.Serialization.XmlIgnoreAttribute()]
        private System.Collections.ObjectModel.Collection<Link> _link;

        [System.Xml.Serialization.XmlElementAttribute("link")]
        public System.Collections.ObjectModel.Collection<Link> Link
        {
            get
            {
                return _link;
            }
            private set
            {
                _link = value;
            }
        }

        /// <summary>
        /// <para xml:lang="en">Gets a value indicating whether the Link collection is empty.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool LinkSpecified
        {
            get
            {
                return (this.Link.Count != 0);
            }
        }

        [System.Xml.Serialization.XmlIgnoreAttribute()]
        private System.Collections.ObjectModel.Collection<Bookmark> _bookmark;

        [System.Xml.Serialization.XmlElementAttribute("bookmark")]
        public System.Collections.ObjectModel.Collection<Bookmark> Bookmark
        {
            get
            {
                return _bookmark;
            }
            private set
            {
                _bookmark = value;
            }
        }

        /// <summary>
        /// <para xml:lang="en">Gets a value indicating whether the Bookmark collection is empty.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool BookmarkSpecified
        {
            get
            {
                return (this.Bookmark.Count != 0);
            }
        }

        [System.Xml.Serialization.XmlElementAttribute("credit-image")]
        public Image CreditImage { get; set; }

        [System.Xml.Serialization.XmlIgnoreAttribute()]
        private System.Collections.ObjectModel.Collection<FormattedTextId> _creditWords;

        [System.Xml.Serialization.XmlElementAttribute("credit-words")]
        public System.Collections.ObjectModel.Collection<FormattedTextId> CreditWords
        {
            get
            {
                return _creditWords;
            }
            private set
            {
                _creditWords = value;
            }
        }

        /// <summary>
        /// <para xml:lang="en">Gets a value indicating whether the CreditWords collection is empty.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool CreditWordsSpecified
        {
            get
            {
                return (this.CreditWords.Count != 0);
            }
        }

        [System.Xml.Serialization.XmlIgnoreAttribute()]
        private System.Collections.ObjectModel.Collection<FormattedSymbolId> _creditSymbol;

        [System.Xml.Serialization.XmlElementAttribute("credit-symbol")]
        public System.Collections.ObjectModel.Collection<FormattedSymbolId> CreditSymbol
        {
            get
            {
                return _creditSymbol;
            }
            private set
            {
                _creditSymbol = value;
            }
        }

        /// <summary>
        /// <para xml:lang="en">Gets a value indicating whether the CreditSymbol collection is empty.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool CreditSymbolSpecified
        {
            get
            {
                return (this.CreditSymbol.Count != 0);
            }
        }

        [System.Xml.Serialization.XmlAttributeAttribute("page")]
        public string Page { get; set; }

        [System.Xml.Serialization.XmlAttributeAttribute("id")]
        public string Id { get; set; }
    }

    /// <summary>
    /// <para>The defaults type specifies score-wide defaults for scaling; whether or not the file is a concert score; layout; and default values for the music font, word font, lyric font, and lyric language. Except for the concert-score element, if any defaults are missing, the choice of what to use is determined by the application.</para>
    /// </summary>
    [System.ComponentModel.DescriptionAttribute(@"The defaults type specifies score-wide defaults for scaling; whether or not the file is a concert score; layout; and default values for the music font, word font, lyric font, and lyric language. Except for the concert-score element, if any defaults are missing, the choice of what to use is determined by the application.")]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XmlSchemaClassGenerator", "2.1.1142.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute("defaults", Namespace="")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class Defaults : ILayout
    {

        [System.Xml.Serialization.XmlElementAttribute("scaling")]
        public Scaling Scaling { get; set; }

        /// <summary>
        /// <para>The presence of a concert-score element indicates that a score is displayed in concert pitch. It is used for scores that contain parts for transposing instruments.
        ///
        ///A document with a concert-score element may not contain any transpose elements that have non-zero values for either the diatonic or chromatic elements. Concert scores may include octave transpositions, so transpose elements with a double element or a non-zero octave-change element value are permitted.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute(@"The presence of a concert-score element indicates that a score is displayed in concert pitch. It is used for scores that contain parts for transposing instruments. A document with a concert-score element may not contain any transpose elements that have non-zero values for either the diatonic or chromatic elements. Concert scores may include octave transpositions, so transpose elements with a double element or a non-zero octave-change element value are permitted.")]
        [System.Xml.Serialization.XmlElementAttribute("concert-score")]
        public Empty ConcertScore { get; set; }

        [System.Xml.Serialization.XmlElementAttribute("page-layout")]
        public PageLayout PageLayout { get; set; }

        [System.Xml.Serialization.XmlElementAttribute("system-layout")]
        public SystemLayout SystemLayout { get; set; }

        [System.Xml.Serialization.XmlIgnoreAttribute()]
        private System.Collections.ObjectModel.Collection<StaffLayout> _staffLayout;

        [System.Xml.Serialization.XmlElementAttribute("staff-layout")]
        public System.Collections.ObjectModel.Collection<StaffLayout> StaffLayout
        {
            get
            {
                return _staffLayout;
            }
            private set
            {
                _staffLayout = value;
            }
        }

        /// <summary>
        /// <para xml:lang="en">Gets a value indicating whether the StaffLayout collection is empty.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool StaffLayoutSpecified
        {
            get
            {
                return (this.StaffLayout.Count != 0);
            }
        }

        /// <summary>
        /// <para xml:lang="en">Initializes a new instance of the <see cref="Defaults" /> class.</para>
        /// </summary>
        public Defaults()
        {
            this._staffLayout = new System.Collections.ObjectModel.Collection<StaffLayout>();
            this._lyricFont = new System.Collections.ObjectModel.Collection<LyricFont>();
            this._lyricLanguage = new System.Collections.ObjectModel.Collection<LyricLanguage>();
        }

        [System.Xml.Serialization.XmlElementAttribute("appearance")]
        public Appearance Appearance { get; set; }

        [System.Xml.Serialization.XmlElementAttribute("music-font")]
        public EmptyFont MusicFont { get; set; }

        [System.Xml.Serialization.XmlElementAttribute("word-font")]
        public EmptyFont WordFont { get; set; }

        [System.Xml.Serialization.XmlIgnoreAttribute()]
        private System.Collections.ObjectModel.Collection<LyricFont> _lyricFont;

        [System.Xml.Serialization.XmlElementAttribute("lyric-font")]
        public System.Collections.ObjectModel.Collection<LyricFont> LyricFont
        {
            get
            {
                return _lyricFont;
            }
            private set
            {
                _lyricFont = value;
            }
        }

        /// <summary>
        /// <para xml:lang="en">Gets a value indicating whether the LyricFont collection is empty.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool LyricFontSpecified
        {
            get
            {
                return (this.LyricFont.Count != 0);
            }
        }

        [System.Xml.Serialization.XmlIgnoreAttribute()]
        private System.Collections.ObjectModel.Collection<LyricLanguage> _lyricLanguage;

        [System.Xml.Serialization.XmlElementAttribute("lyric-language")]
        public System.Collections.ObjectModel.Collection<LyricLanguage> LyricLanguage
        {
            get
            {
                return _lyricLanguage;
            }
            private set
            {
                _lyricLanguage = value;
            }
        }

        /// <summary>
        /// <para xml:lang="en">Gets a value indicating whether the LyricLanguage collection is empty.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool LyricLanguageSpecified
        {
            get
            {
                return (this.LyricLanguage.Count != 0);
            }
        }
    }

    /// <summary>
    /// <para>The empty-font type represents an empty element with font attributes.</para>
    /// </summary>
    [System.ComponentModel.DescriptionAttribute("The empty-font type represents an empty element with font attributes.")]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XmlSchemaClassGenerator", "2.1.1142.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute("empty-font", Namespace="")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class EmptyFont : IFont
    {

        /// <summary>
        /// <para>The font-family is a comma-separated list of font names. These can be specific font styles such as Maestro or Opus, or one of several generic font styles: music, engraved, handwritten, text, serif, sans-serif, handwritten, cursive, fantasy, and monospace. The music, engraved, and handwritten values refer to music fonts; the rest refer to text fonts. The fantasy style refers to decorative text such as found in older German-style printing.</para>
        /// <para xml:lang="en">Pattern: [^,]+(, ?[^,]+)*.</para>
        /// </summary>
        [System.ComponentModel.DataAnnotations.RegularExpressionAttribute("[^,]+(, ?[^,]+)*")]
        [System.Xml.Serialization.XmlAttributeAttribute("font-family")]
        public string FontFamily { get; set; }

        [System.Xml.Serialization.XmlAttributeAttribute("font-style")]
        public FontStyle FontStyle { get; set; }

        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the FontStyle property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool FontStyleSpecified { get; set; }

        /// <summary>
        /// <para>The font-size can be one of the CSS font sizes (xx-small, x-small, small, medium, large, x-large, xx-large) or a numeric point size.</para>
        /// </summary>
        [System.Xml.Serialization.XmlAttributeAttribute("font-size")]
        public string FontSize { get; set; }

        [System.Xml.Serialization.XmlAttributeAttribute("font-weight")]
        public FontWeight FontWeight { get; set; }

        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the FontWeight property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool FontWeightSpecified { get; set; }
    }

    /// <summary>
    /// <para>The lyric-font type specifies the default font for a particular name and number of lyric.</para>
    /// </summary>
    [System.ComponentModel.DescriptionAttribute("The lyric-font type specifies the default font for a particular name and number o" +
        "f lyric.")]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XmlSchemaClassGenerator", "2.1.1142.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute("lyric-font", Namespace="")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class LyricFont : IFont
    {

        [System.Xml.Serialization.XmlAttributeAttribute("number")]
        public string Number { get; set; }

        [System.Xml.Serialization.XmlAttributeAttribute("name")]
        public string Name { get; set; }

        /// <summary>
        /// <para>The font-family is a comma-separated list of font names. These can be specific font styles such as Maestro or Opus, or one of several generic font styles: music, engraved, handwritten, text, serif, sans-serif, handwritten, cursive, fantasy, and monospace. The music, engraved, and handwritten values refer to music fonts; the rest refer to text fonts. The fantasy style refers to decorative text such as found in older German-style printing.</para>
        /// <para xml:lang="en">Pattern: [^,]+(, ?[^,]+)*.</para>
        /// </summary>
        [System.ComponentModel.DataAnnotations.RegularExpressionAttribute("[^,]+(, ?[^,]+)*")]
        [System.Xml.Serialization.XmlAttributeAttribute("font-family")]
        public string FontFamily { get; set; }

        [System.Xml.Serialization.XmlAttributeAttribute("font-style")]
        public FontStyle FontStyle { get; set; }

        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the FontStyle property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool FontStyleSpecified { get; set; }

        /// <summary>
        /// <para>The font-size can be one of the CSS font sizes (xx-small, x-small, small, medium, large, x-large, xx-large) or a numeric point size.</para>
        /// </summary>
        [System.Xml.Serialization.XmlAttributeAttribute("font-size")]
        public string FontSize { get; set; }

        [System.Xml.Serialization.XmlAttributeAttribute("font-weight")]
        public FontWeight FontWeight { get; set; }

        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the FontWeight property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool FontWeightSpecified { get; set; }
    }

    /// <summary>
    /// <para>The lyric-language type specifies the default language for a particular name and number of lyric.</para>
    /// </summary>
    [System.ComponentModel.DescriptionAttribute("The lyric-language type specifies the default language for a particular name and " +
        "number of lyric.")]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XmlSchemaClassGenerator", "2.1.1142.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute("lyric-language", Namespace="")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class LyricLanguage
    {

        [System.Xml.Serialization.XmlAttributeAttribute("number")]
        public string Number { get; set; }

        [System.Xml.Serialization.XmlAttributeAttribute("name")]
        public string Name { get; set; }

        [System.ComponentModel.DataAnnotations.RequiredAttribute(AllowEmptyStrings=true)]
        [System.Xml.Serialization.XmlAttributeAttribute("lang", Namespace="http://www.w3.org/XML/1998/namespace", Form=System.Xml.Schema.XmlSchemaForm.Qualified)]
        public string Lang { get; set; }
    }

    /// <summary>
    /// <para>The group-barline type indicates if the group should have common barlines.</para>
    /// </summary>
    [System.ComponentModel.DescriptionAttribute("The group-barline type indicates if the group should have common barlines.")]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XmlSchemaClassGenerator", "2.1.1142.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute("group-barline", Namespace="")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GroupBarline : IColor
    {

        /// <summary>
        /// <para xml:lang="en">Gets or sets the text value.</para>
        /// </summary>
        [System.Xml.Serialization.XmlTextAttribute()]
        public GroupBarlineValue Value { get; set; }

        /// <summary>
        /// <para>The color type indicates the color of an element. Color may be represented as hexadecimal RGB triples, as in HTML, or as hexadecimal ARGB tuples, with the A indicating alpha of transparency. An alpha value of 00 is totally transparent; FF is totally opaque. If RGB is used, the A value is assumed to be FF.
        ///
        ///For instance, the RGB value "#800080" represents purple. An ARGB value of "#40800080" would be a transparent purple.
        ///
        ///As in SVG 1.1, colors are defined in terms of the sRGB color space (IEC 61966).</para>
        /// <para xml:lang="en">Pattern: #[\dA-F]{6}([\dA-F][\dA-F])?.</para>
        /// </summary>
        [System.ComponentModel.DataAnnotations.RegularExpressionAttribute("#[\\dA-F]{6}([\\dA-F][\\dA-F])?")]
        [System.Xml.Serialization.XmlAttributeAttribute("color")]
        public string Color { get; set; }
    }

    /// <summary>
    /// <para>The group-name type describes the name or abbreviation of a part-group element. Formatting attributes in the group-name type are deprecated in Version 2.0 in favor of the new group-name-display and group-abbreviation-display elements.</para>
    /// </summary>
    [System.ComponentModel.DescriptionAttribute("The group-name type describes the name or abbreviation of a part-group element. F" +
        "ormatting attributes in the group-name type are deprecated in Version 2.0 in fav" +
        "or of the new group-name-display and group-abbreviation-display elements.")]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XmlSchemaClassGenerator", "2.1.1142.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute("group-name", Namespace="")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GroupName : IGroupNameText
    {

        /// <summary>
        /// <para xml:lang="en">Gets or sets the text value.</para>
        /// </summary>
        [System.Xml.Serialization.XmlTextAttribute()]
        public string Value { get; set; }

        /// <summary>
        /// <para>The tenths type is a number representing tenths of interline staff space (positive or negative). Both integer and decimal values are allowed, such as 5 for a half space and 2.5 for a quarter space. Interline space is measured from the middle of a staff line.
        ///
        ///Distances in a MusicXML file are measured in tenths of staff space. Tenths are then scaled to millimeters within the scaling element, used in the defaults element at the start of a score. Individual staves can apply a scaling factor to adjust staff size. When a MusicXML element or attribute refers to tenths, it means the global tenths defined by the scaling element, not the local tenths as adjusted by the staff-size element.</para>
        /// </summary>
        [System.Xml.Serialization.XmlAttributeAttribute("default-x")]
        public decimal DefaultX { get; set; }

        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the DefaultX property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool DefaultXSpecified { get; set; }

        /// <summary>
        /// <para>The tenths type is a number representing tenths of interline staff space (positive or negative). Both integer and decimal values are allowed, such as 5 for a half space and 2.5 for a quarter space. Interline space is measured from the middle of a staff line.
        ///
        ///Distances in a MusicXML file are measured in tenths of staff space. Tenths are then scaled to millimeters within the scaling element, used in the defaults element at the start of a score. Individual staves can apply a scaling factor to adjust staff size. When a MusicXML element or attribute refers to tenths, it means the global tenths defined by the scaling element, not the local tenths as adjusted by the staff-size element.</para>
        /// </summary>
        [System.Xml.Serialization.XmlAttributeAttribute("default-y")]
        public decimal DefaultY { get; set; }

        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the DefaultY property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool DefaultYSpecified { get; set; }

        /// <summary>
        /// <para>The tenths type is a number representing tenths of interline staff space (positive or negative). Both integer and decimal values are allowed, such as 5 for a half space and 2.5 for a quarter space. Interline space is measured from the middle of a staff line.
        ///
        ///Distances in a MusicXML file are measured in tenths of staff space. Tenths are then scaled to millimeters within the scaling element, used in the defaults element at the start of a score. Individual staves can apply a scaling factor to adjust staff size. When a MusicXML element or attribute refers to tenths, it means the global tenths defined by the scaling element, not the local tenths as adjusted by the staff-size element.</para>
        /// </summary>
        [System.Xml.Serialization.XmlAttributeAttribute("relative-x")]
        public decimal RelativeX { get; set; }

        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the RelativeX property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool RelativeXSpecified { get; set; }

        /// <summary>
        /// <para>The tenths type is a number representing tenths of interline staff space (positive or negative). Both integer and decimal values are allowed, such as 5 for a half space and 2.5 for a quarter space. Interline space is measured from the middle of a staff line.
        ///
        ///Distances in a MusicXML file are measured in tenths of staff space. Tenths are then scaled to millimeters within the scaling element, used in the defaults element at the start of a score. Individual staves can apply a scaling factor to adjust staff size. When a MusicXML element or attribute refers to tenths, it means the global tenths defined by the scaling element, not the local tenths as adjusted by the staff-size element.</para>
        /// </summary>
        [System.Xml.Serialization.XmlAttributeAttribute("relative-y")]
        public decimal RelativeY { get; set; }

        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the RelativeY property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool RelativeYSpecified { get; set; }

        /// <summary>
        /// <para>The font-family is a comma-separated list of font names. These can be specific font styles such as Maestro or Opus, or one of several generic font styles: music, engraved, handwritten, text, serif, sans-serif, handwritten, cursive, fantasy, and monospace. The music, engraved, and handwritten values refer to music fonts; the rest refer to text fonts. The fantasy style refers to decorative text such as found in older German-style printing.</para>
        /// <para xml:lang="en">Pattern: [^,]+(, ?[^,]+)*.</para>
        /// </summary>
        [System.ComponentModel.DataAnnotations.RegularExpressionAttribute("[^,]+(, ?[^,]+)*")]
        [System.Xml.Serialization.XmlAttributeAttribute("font-family")]
        public string FontFamily { get; set; }

        [System.Xml.Serialization.XmlAttributeAttribute("font-style")]
        public FontStyle FontStyle { get; set; }

        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the FontStyle property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool FontStyleSpecified { get; set; }

        /// <summary>
        /// <para>The font-size can be one of the CSS font sizes (xx-small, x-small, small, medium, large, x-large, xx-large) or a numeric point size.</para>
        /// </summary>
        [System.Xml.Serialization.XmlAttributeAttribute("font-size")]
        public string FontSize { get; set; }

        [System.Xml.Serialization.XmlAttributeAttribute("font-weight")]
        public FontWeight FontWeight { get; set; }

        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the FontWeight property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool FontWeightSpecified { get; set; }

        /// <summary>
        /// <para>The color type indicates the color of an element. Color may be represented as hexadecimal RGB triples, as in HTML, or as hexadecimal ARGB tuples, with the A indicating alpha of transparency. An alpha value of 00 is totally transparent; FF is totally opaque. If RGB is used, the A value is assumed to be FF.
        ///
        ///For instance, the RGB value "#800080" represents purple. An ARGB value of "#40800080" would be a transparent purple.
        ///
        ///As in SVG 1.1, colors are defined in terms of the sRGB color space (IEC 61966).</para>
        /// <para xml:lang="en">Pattern: #[\dA-F]{6}([\dA-F][\dA-F])?.</para>
        /// </summary>
        [System.ComponentModel.DataAnnotations.RegularExpressionAttribute("#[\\dA-F]{6}([\\dA-F][\\dA-F])?")]
        [System.Xml.Serialization.XmlAttributeAttribute("color")]
        public string Color { get; set; }

        [System.Xml.Serialization.XmlAttributeAttribute("justify")]
        public LeftCenterRight Justify { get; set; }

        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the Justify property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool JustifySpecified { get; set; }
    }

    /// <summary>
    /// <para>The group-name-text attribute group is used by the group-name and group-abbreviation elements. The print-style and justify attribute groups are deprecated in MusicXML 2.0 in favor of the new group-name-display and group-abbreviation-display elements.</para>
    /// </summary>
    [System.ComponentModel.DescriptionAttribute("The group-name-text attribute group is used by the group-name and group-abbreviat" +
        "ion elements. The print-style and justify attribute groups are deprecated in Mus" +
        "icXML 2.0 in favor of the new group-name-display and group-abbreviation-display " +
        "elements.")]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XmlSchemaClassGenerator", "2.1.1142.0")]
    public partial interface IGroupNameText : IPrintStyle, IJustify
    {
    }

    /// <summary>
    /// <para>The group-symbol type indicates how the symbol for a group is indicated in the score. It is none if not specified.</para>
    /// </summary>
    [System.ComponentModel.DescriptionAttribute("The group-symbol type indicates how the symbol for a group is indicated in the sc" +
        "ore. It is none if not specified.")]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XmlSchemaClassGenerator", "2.1.1142.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute("group-symbol", Namespace="")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GroupSymbol : IPosition, IColor
    {

        /// <summary>
        /// <para xml:lang="en">Gets or sets the text value.</para>
        /// </summary>
        [System.Xml.Serialization.XmlTextAttribute()]
        public GroupSymbolValue Value { get; set; }

        /// <summary>
        /// <para>The tenths type is a number representing tenths of interline staff space (positive or negative). Both integer and decimal values are allowed, such as 5 for a half space and 2.5 for a quarter space. Interline space is measured from the middle of a staff line.
        ///
        ///Distances in a MusicXML file are measured in tenths of staff space. Tenths are then scaled to millimeters within the scaling element, used in the defaults element at the start of a score. Individual staves can apply a scaling factor to adjust staff size. When a MusicXML element or attribute refers to tenths, it means the global tenths defined by the scaling element, not the local tenths as adjusted by the staff-size element.</para>
        /// </summary>
        [System.Xml.Serialization.XmlAttributeAttribute("default-x")]
        public decimal DefaultX { get; set; }

        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the DefaultX property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool DefaultXSpecified { get; set; }

        /// <summary>
        /// <para>The tenths type is a number representing tenths of interline staff space (positive or negative). Both integer and decimal values are allowed, such as 5 for a half space and 2.5 for a quarter space. Interline space is measured from the middle of a staff line.
        ///
        ///Distances in a MusicXML file are measured in tenths of staff space. Tenths are then scaled to millimeters within the scaling element, used in the defaults element at the start of a score. Individual staves can apply a scaling factor to adjust staff size. When a MusicXML element or attribute refers to tenths, it means the global tenths defined by the scaling element, not the local tenths as adjusted by the staff-size element.</para>
        /// </summary>
        [System.Xml.Serialization.XmlAttributeAttribute("default-y")]
        public decimal DefaultY { get; set; }

        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the DefaultY property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool DefaultYSpecified { get; set; }

        /// <summary>
        /// <para>The tenths type is a number representing tenths of interline staff space (positive or negative). Both integer and decimal values are allowed, such as 5 for a half space and 2.5 for a quarter space. Interline space is measured from the middle of a staff line.
        ///
        ///Distances in a MusicXML file are measured in tenths of staff space. Tenths are then scaled to millimeters within the scaling element, used in the defaults element at the start of a score. Individual staves can apply a scaling factor to adjust staff size. When a MusicXML element or attribute refers to tenths, it means the global tenths defined by the scaling element, not the local tenths as adjusted by the staff-size element.</para>
        /// </summary>
        [System.Xml.Serialization.XmlAttributeAttribute("relative-x")]
        public decimal RelativeX { get; set; }

        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the RelativeX property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool RelativeXSpecified { get; set; }

        /// <summary>
        /// <para>The tenths type is a number representing tenths of interline staff space (positive or negative). Both integer and decimal values are allowed, such as 5 for a half space and 2.5 for a quarter space. Interline space is measured from the middle of a staff line.
        ///
        ///Distances in a MusicXML file are measured in tenths of staff space. Tenths are then scaled to millimeters within the scaling element, used in the defaults element at the start of a score. Individual staves can apply a scaling factor to adjust staff size. When a MusicXML element or attribute refers to tenths, it means the global tenths defined by the scaling element, not the local tenths as adjusted by the staff-size element.</para>
        /// </summary>
        [System.Xml.Serialization.XmlAttributeAttribute("relative-y")]
        public decimal RelativeY { get; set; }

        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the RelativeY property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool RelativeYSpecified { get; set; }

        /// <summary>
        /// <para>The color type indicates the color of an element. Color may be represented as hexadecimal RGB triples, as in HTML, or as hexadecimal ARGB tuples, with the A indicating alpha of transparency. An alpha value of 00 is totally transparent; FF is totally opaque. If RGB is used, the A value is assumed to be FF.
        ///
        ///For instance, the RGB value "#800080" represents purple. An ARGB value of "#40800080" would be a transparent purple.
        ///
        ///As in SVG 1.1, colors are defined in terms of the sRGB color space (IEC 61966).</para>
        /// <para xml:lang="en">Pattern: #[\dA-F]{6}([\dA-F][\dA-F])?.</para>
        /// </summary>
        [System.ComponentModel.DataAnnotations.RegularExpressionAttribute("#[\\dA-F]{6}([\\dA-F][\\dA-F])?")]
        [System.Xml.Serialization.XmlAttributeAttribute("color")]
        public string Color { get; set; }
    }

    /// <summary>
    /// <para>Multiple part-link elements can link a condensed part within a score file to multiple MusicXML parts files. For example, a "Clarinet 1 and 2" part in a score file could link to separate "Clarinet 1" and "Clarinet 2" part files. The instrument-link type distinguish which of the score-instruments within a score-part are in which part file. The instrument-link id attribute refers to a score-instrument id attribute.</para>
    /// </summary>
    [System.ComponentModel.DescriptionAttribute(@"Multiple part-link elements can link a condensed part within a score file to multiple MusicXML parts files. For example, a ""Clarinet 1 and 2"" part in a score file could link to separate ""Clarinet 1"" and ""Clarinet 2"" part files. The instrument-link type distinguish which of the score-instruments within a score-part are in which part file. The instrument-link id attribute refers to a score-instrument id attribute.")]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XmlSchemaClassGenerator", "2.1.1142.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute("instrument-link", Namespace="")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class InstrumentLink
    {

        [System.ComponentModel.DataAnnotations.RequiredAttribute(AllowEmptyStrings=true)]
        [System.Xml.Serialization.XmlAttributeAttribute("id")]
        public string Id { get; set; }
    }

    /// <summary>
    /// <para>The opus type represents a link to a MusicXML opus document that composes multiple MusicXML scores into a collection.</para>
    /// </summary>
    [System.ComponentModel.DescriptionAttribute("The opus type represents a link to a MusicXML opus document that composes multipl" +
        "e MusicXML scores into a collection.")]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XmlSchemaClassGenerator", "2.1.1142.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute("opus", Namespace="")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class Opus : ILinkAttributes
    {

        [System.ComponentModel.DataAnnotations.RequiredAttribute(AllowEmptyStrings=true)]
        [System.Xml.Serialization.XmlAttributeAttribute("href", Namespace="http://www.w3.org/1999/xlink", Form=System.Xml.Schema.XmlSchemaForm.Qualified)]
        public string Href { get; set; }

        [System.Xml.Serialization.XmlIgnoreAttribute()]
        private OpenUtau.Core.Format.MusicXMLSchema.Type _type = OpenUtau.Core.Format.MusicXMLSchema.Type.Simple;

        [System.ComponentModel.DefaultValueAttribute(OpenUtau.Core.Format.MusicXMLSchema.Type.Simple)]
        [System.Xml.Serialization.XmlAttributeAttribute("type", Namespace="http://www.w3.org/1999/xlink", Form=System.Xml.Schema.XmlSchemaForm.Qualified)]
        public OpenUtau.Core.Format.MusicXMLSchema.Type Type
        {
            get
            {
                return _type;
            }
            set
            {
                _type = value;
            }
        }

        [System.Xml.Serialization.XmlAttributeAttribute("role", Namespace="http://www.w3.org/1999/xlink", Form=System.Xml.Schema.XmlSchemaForm.Qualified)]
        public string Role { get; set; }

        [System.Xml.Serialization.XmlAttributeAttribute("title", Namespace="http://www.w3.org/1999/xlink", Form=System.Xml.Schema.XmlSchemaForm.Qualified)]
        public string Title { get; set; }

        [System.Xml.Serialization.XmlIgnoreAttribute()]
        private OpenUtau.Core.Format.MusicXMLSchema.Show _show = OpenUtau.Core.Format.MusicXMLSchema.Show.Replace;

        [System.ComponentModel.DefaultValueAttribute(OpenUtau.Core.Format.MusicXMLSchema.Show.Replace)]
        [System.Xml.Serialization.XmlAttributeAttribute("show", Namespace="http://www.w3.org/1999/xlink", Form=System.Xml.Schema.XmlSchemaForm.Qualified)]
        public OpenUtau.Core.Format.MusicXMLSchema.Show Show
        {
            get
            {
                return _show;
            }
            set
            {
                _show = value;
            }
        }

        [System.Xml.Serialization.XmlIgnoreAttribute()]
        private OpenUtau.Core.Format.MusicXMLSchema.Actuate _actuate = OpenUtau.Core.Format.MusicXMLSchema.Actuate.OnRequest;

        [System.ComponentModel.DefaultValueAttribute(OpenUtau.Core.Format.MusicXMLSchema.Actuate.OnRequest)]
        [System.Xml.Serialization.XmlAttributeAttribute("actuate", Namespace="http://www.w3.org/1999/xlink", Form=System.Xml.Schema.XmlSchemaForm.Qualified)]
        public OpenUtau.Core.Format.MusicXMLSchema.Actuate Actuate
        {
            get
            {
                return _actuate;
            }
            set
            {
                _actuate = value;
            }
        }
    }

    /// <summary>
    /// <para>The part-group element indicates groupings of parts in the score, usually indicated by braces and brackets. Braces that are used for multi-staff parts should be defined in the attributes element for that part. The part-group start element appears before the first score-part in the group. The part-group stop element appears after the last score-part in the group.
    ///
    ///The number attribute is used to distinguish overlapping and nested part-groups, not the sequence of groups. As with parts, groups can have a name and abbreviation. Values for the child elements are ignored at the stop of a group.
    ///
    ///A part-group element is not needed for a single multi-staff part. By default, multi-staff parts include a brace symbol and (if appropriate given the bar-style) common barlines. The symbol formatting for a multi-staff part can be more fully specified using the part-symbol element.</para>
    /// </summary>
    [System.ComponentModel.DescriptionAttribute(@"The part-group element indicates groupings of parts in the score, usually indicated by braces and brackets. Braces that are used for multi-staff parts should be defined in the attributes element for that part. The part-group start element appears before the first score-part in the group. The part-group stop element appears after the last score-part in the group. The number attribute is used to distinguish overlapping and nested part-groups, not the sequence of groups. As with parts, groups can have a name and abbreviation. Values for the child elements are ignored at the stop of a group. A part-group element is not needed for a single multi-staff part. By default, multi-staff parts include a brace symbol and (if appropriate given the bar-style) common barlines. The symbol formatting for a multi-staff part can be more fully specified using the part-symbol element.")]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XmlSchemaClassGenerator", "2.1.1142.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute("part-group", Namespace="")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class PartGroup : IEditorial
    {

        [System.Xml.Serialization.XmlElementAttribute("group-name")]
        public GroupName GroupName { get; set; }

        /// <summary>
        /// <para>Formatting specified in the group-name-display element overrides formatting specified in the group-name element.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Formatting specified in the group-name-display element overrides formatting speci" +
            "fied in the group-name element.")]
        [System.Xml.Serialization.XmlElementAttribute("group-name-display")]
        public NameDisplay GroupNameDisplay { get; set; }

        [System.Xml.Serialization.XmlElementAttribute("group-abbreviation")]
        public GroupName GroupAbbreviation { get; set; }

        /// <summary>
        /// <para>Formatting specified in the group-abbreviation-display element overrides formatting specified in the group-abbreviation element.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Formatting specified in the group-abbreviation-display element overrides formatti" +
            "ng specified in the group-abbreviation element.")]
        [System.Xml.Serialization.XmlElementAttribute("group-abbreviation-display")]
        public NameDisplay GroupAbbreviationDisplay { get; set; }

        [System.Xml.Serialization.XmlElementAttribute("group-symbol")]
        public GroupSymbol GroupSymbol { get; set; }

        [System.Xml.Serialization.XmlElementAttribute("group-barline")]
        public GroupBarline GroupBarline { get; set; }

        /// <summary>
        /// <para>The group-time element indicates that the displayed time signatures should stretch across all parts and staves in the group.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("The group-time element indicates that the displayed time signatures should stretc" +
            "h across all parts and staves in the group.")]
        [System.Xml.Serialization.XmlElementAttribute("group-time")]
        public Empty GroupTime { get; set; }

        [System.Xml.Serialization.XmlElementAttribute("footnote")]
        public FormattedText Footnote { get; set; }

        [System.Xml.Serialization.XmlElementAttribute("level")]
        public Level Level { get; set; }

        [System.ComponentModel.DataAnnotations.RequiredAttribute(AllowEmptyStrings=true)]
        [System.Xml.Serialization.XmlAttributeAttribute("type")]
        public StartStop Type { get; set; }

        [System.Xml.Serialization.XmlIgnoreAttribute()]
        private string _number = "1";

        [System.ComponentModel.DefaultValueAttribute("1")]
        [System.Xml.Serialization.XmlAttributeAttribute("number")]
        public string Number
        {
            get
            {
                return _number;
            }
            set
            {
                _number = value;
            }
        }
    }

    /// <summary>
    /// <para>The part-link type allows MusicXML data for both score and parts to be contained within a single compressed MusicXML file. It links a score-part from a score document to MusicXML documents that contain parts data. In the case of a single compressed MusicXML file, the link href values are paths that are relative to the root folder of the zip file.</para>
    /// </summary>
    [System.ComponentModel.DescriptionAttribute(@"The part-link type allows MusicXML data for both score and parts to be contained within a single compressed MusicXML file. It links a score-part from a score document to MusicXML documents that contain parts data. In the case of a single compressed MusicXML file, the link href values are paths that are relative to the root folder of the zip file.")]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XmlSchemaClassGenerator", "2.1.1142.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute("part-link", Namespace="")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class PartLink : ILinkAttributes
    {

        [System.Xml.Serialization.XmlIgnoreAttribute()]
        private System.Collections.ObjectModel.Collection<InstrumentLink> _instrumentLink;

        [System.Xml.Serialization.XmlElementAttribute("instrument-link")]
        public System.Collections.ObjectModel.Collection<InstrumentLink> InstrumentLink
        {
            get
            {
                return _instrumentLink;
            }
            private set
            {
                _instrumentLink = value;
            }
        }

        /// <summary>
        /// <para xml:lang="en">Gets a value indicating whether the InstrumentLink collection is empty.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool InstrumentLinkSpecified
        {
            get
            {
                return (this.InstrumentLink.Count != 0);
            }
        }

        /// <summary>
        /// <para xml:lang="en">Initializes a new instance of the <see cref="PartLink" /> class.</para>
        /// </summary>
        public PartLink()
        {
            this._instrumentLink = new System.Collections.ObjectModel.Collection<InstrumentLink>();
            this._groupLink = new System.Collections.ObjectModel.Collection<string>();
        }

        [System.Xml.Serialization.XmlIgnoreAttribute()]
        private System.Collections.ObjectModel.Collection<string> _groupLink;

        /// <summary>
        /// <para>Multiple part-link elements can reference different types of linked documents, such as parts and condensed score. The optional group-link elements identify the groups used in the linked document. The content of a group-link element should match the content of a group element in the linked document.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute(@"Multiple part-link elements can reference different types of linked documents, such as parts and condensed score. The optional group-link elements identify the groups used in the linked document. The content of a group-link element should match the content of a group element in the linked document.")]
        [System.Xml.Serialization.XmlElementAttribute("group-link")]
        public System.Collections.ObjectModel.Collection<string> GroupLink
        {
            get
            {
                return _groupLink;
            }
            private set
            {
                _groupLink = value;
            }
        }

        /// <summary>
        /// <para xml:lang="en">Gets a value indicating whether the GroupLink collection is empty.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool GroupLinkSpecified
        {
            get
            {
                return (this.GroupLink.Count != 0);
            }
        }

        [System.ComponentModel.DataAnnotations.RequiredAttribute(AllowEmptyStrings=true)]
        [System.Xml.Serialization.XmlAttributeAttribute("href", Namespace="http://www.w3.org/1999/xlink", Form=System.Xml.Schema.XmlSchemaForm.Qualified)]
        public string Href { get; set; }

        [System.Xml.Serialization.XmlIgnoreAttribute()]
        private OpenUtau.Core.Format.MusicXMLSchema.Type _type = OpenUtau.Core.Format.MusicXMLSchema.Type.Simple;

        [System.ComponentModel.DefaultValueAttribute(OpenUtau.Core.Format.MusicXMLSchema.Type.Simple)]
        [System.Xml.Serialization.XmlAttributeAttribute("type", Namespace="http://www.w3.org/1999/xlink", Form=System.Xml.Schema.XmlSchemaForm.Qualified)]
        public OpenUtau.Core.Format.MusicXMLSchema.Type Type
        {
            get
            {
                return _type;
            }
            set
            {
                _type = value;
            }
        }

        [System.Xml.Serialization.XmlAttributeAttribute("role", Namespace="http://www.w3.org/1999/xlink", Form=System.Xml.Schema.XmlSchemaForm.Qualified)]
        public string Role { get; set; }

        [System.Xml.Serialization.XmlAttributeAttribute("title", Namespace="http://www.w3.org/1999/xlink", Form=System.Xml.Schema.XmlSchemaForm.Qualified)]
        public string Title { get; set; }

        [System.Xml.Serialization.XmlIgnoreAttribute()]
        private OpenUtau.Core.Format.MusicXMLSchema.Show _show = OpenUtau.Core.Format.MusicXMLSchema.Show.Replace;

        [System.ComponentModel.DefaultValueAttribute(OpenUtau.Core.Format.MusicXMLSchema.Show.Replace)]
        [System.Xml.Serialization.XmlAttributeAttribute("show", Namespace="http://www.w3.org/1999/xlink", Form=System.Xml.Schema.XmlSchemaForm.Qualified)]
        public OpenUtau.Core.Format.MusicXMLSchema.Show Show
        {
            get
            {
                return _show;
            }
            set
            {
                _show = value;
            }
        }

        [System.Xml.Serialization.XmlIgnoreAttribute()]
        private OpenUtau.Core.Format.MusicXMLSchema.Actuate _actuate = OpenUtau.Core.Format.MusicXMLSchema.Actuate.OnRequest;

        [System.ComponentModel.DefaultValueAttribute(OpenUtau.Core.Format.MusicXMLSchema.Actuate.OnRequest)]
        [System.Xml.Serialization.XmlAttributeAttribute("actuate", Namespace="http://www.w3.org/1999/xlink", Form=System.Xml.Schema.XmlSchemaForm.Qualified)]
        public OpenUtau.Core.Format.MusicXMLSchema.Actuate Actuate
        {
            get
            {
                return _actuate;
            }
            set
            {
                _actuate = value;
            }
        }
    }

    /// <summary>
    /// <para>The part-list identifies the different musical parts in this document. Each part has an ID that is used later within the musical data. Since parts may be encoded separately and combined later, identification elements are present at both the score and score-part levels. There must be at least one score-part, combined as desired with part-group elements that indicate braces and brackets. Parts are ordered from top to bottom in a score based on the order in which they appear in the part-list.</para>
    /// </summary>
    [System.ComponentModel.DescriptionAttribute(@"The part-list identifies the different musical parts in this document. Each part has an ID that is used later within the musical data. Since parts may be encoded separately and combined later, identification elements are present at both the score and score-part levels. There must be at least one score-part, combined as desired with part-group elements that indicate braces and brackets. Parts are ordered from top to bottom in a score based on the order in which they appear in the part-list.")]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XmlSchemaClassGenerator", "2.1.1142.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute("part-list", Namespace="")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class PartList : IPartGroup, IScorePart
    {

        [System.Xml.Serialization.XmlIgnoreAttribute()]
        private System.Collections.ObjectModel.Collection<PartGroup> _partGroup;

        [System.Xml.Serialization.XmlElementAttribute("part-group")]
        public System.Collections.ObjectModel.Collection<PartGroup> PartGroup
        {
            get
            {
                return _partGroup;
            }
            private set
            {
                _partGroup = value;
            }
        }

        /// <summary>
        /// <para xml:lang="en">Gets a value indicating whether the PartGroup collection is empty.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool PartGroupSpecified
        {
            get
            {
                return (this.PartGroup.Count != 0);
            }
        }

        /// <summary>
        /// <para xml:lang="en">Initializes a new instance of the <see cref="PartList" /> class.</para>
        /// </summary>
        public PartList()
        {
            this._partGroup = new System.Collections.ObjectModel.Collection<PartGroup>();
            this._scorePart = new System.Collections.ObjectModel.Collection<ScorePart>();
        }

        [System.Xml.Serialization.XmlIgnoreAttribute()]
        private System.Collections.ObjectModel.Collection<ScorePart> _scorePart;

        /// <summary>
        /// <para>Each MusicXML part corresponds to a track in a Standard MIDI Format 1 file. The score-instrument elements are used when there are multiple instruments per track. The midi-device element is used to make a MIDI device or port assignment for the given track. Initial midi-instrument assignments may be made here as well.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute(@"Each MusicXML part corresponds to a track in a Standard MIDI Format 1 file. The score-instrument elements are used when there are multiple instruments per track. The midi-device element is used to make a MIDI device or port assignment for the given track. Initial midi-instrument assignments may be made here as well.")]
        [System.ComponentModel.DataAnnotations.RequiredAttribute(AllowEmptyStrings=true)]
        [System.Xml.Serialization.XmlElementAttribute("score-part")]
        public System.Collections.ObjectModel.Collection<ScorePart> ScorePart
        {
            get
            {
                return _scorePart;
            }
            private set
            {
                _scorePart = value;
            }
        }
    }

    /// <summary>
    /// <para>The part-group element is defined within a group due to its multiple uses within the part-list element.</para>
    /// </summary>
    [System.ComponentModel.DescriptionAttribute("The part-group element is defined within a group due to its multiple uses within " +
        "the part-list element.")]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XmlSchemaClassGenerator", "2.1.1142.0")]
    public partial interface IPartGroup
    {

        System.Collections.ObjectModel.Collection<PartGroup> PartGroup
        {
            get;
        }
    }

    /// <summary>
    /// <para>The score-part element is defined within a group due to its multiple uses within the part-list element.</para>
    /// </summary>
    [System.ComponentModel.DescriptionAttribute("The score-part element is defined within a group due to its multiple uses within " +
        "the part-list element.")]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XmlSchemaClassGenerator", "2.1.1142.0")]
    public partial interface IScorePart
    {

        /// <summary>
        /// <para>Each MusicXML part corresponds to a track in a Standard MIDI Format 1 file. The score-instrument elements are used when there are multiple instruments per track. The midi-device element is used to make a MIDI device or port assignment for the given track. Initial midi-instrument assignments may be made here as well.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute(@"Each MusicXML part corresponds to a track in a Standard MIDI Format 1 file. The score-instrument elements are used when there are multiple instruments per track. The midi-device element is used to make a MIDI device or port assignment for the given track. Initial midi-instrument assignments may be made here as well.")]
        System.Collections.ObjectModel.Collection<ScorePart> ScorePart
        {
            get;
        }
    }

    /// <summary>
    /// <para>The score-part type collects part-wide information for each part in a score. Often, each MusicXML part corresponds to a track in a Standard MIDI Format 1 file. In this case, the midi-device element is used to make a MIDI device or port assignment for the given track or specific MIDI instruments. Initial midi-instrument assignments may be made here as well. The score-instrument elements are used when there are multiple instruments per track.</para>
    /// </summary>
    [System.ComponentModel.DescriptionAttribute(@"The score-part type collects part-wide information for each part in a score. Often, each MusicXML part corresponds to a track in a Standard MIDI Format 1 file. In this case, the midi-device element is used to make a MIDI device or port assignment for the given track or specific MIDI instruments. Initial midi-instrument assignments may be made here as well. The score-instrument elements are used when there are multiple instruments per track.")]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XmlSchemaClassGenerator", "2.1.1142.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute("score-part", Namespace="")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class ScorePart
    {

        [System.Xml.Serialization.XmlElementAttribute("identification")]
        public Identification Identification { get; set; }

        [System.Xml.Serialization.XmlIgnoreAttribute()]
        private System.Collections.ObjectModel.Collection<PartLink> _partLink;

        [System.Xml.Serialization.XmlElementAttribute("part-link")]
        public System.Collections.ObjectModel.Collection<PartLink> PartLink
        {
            get
            {
                return _partLink;
            }
            private set
            {
                _partLink = value;
            }
        }

        /// <summary>
        /// <para xml:lang="en">Gets a value indicating whether the PartLink collection is empty.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool PartLinkSpecified
        {
            get
            {
                return (this.PartLink.Count != 0);
            }
        }

        /// <summary>
        /// <para xml:lang="en">Initializes a new instance of the <see cref="ScorePart" /> class.</para>
        /// </summary>
        public ScorePart()
        {
            this._partLink = new System.Collections.ObjectModel.Collection<PartLink>();
            this._group = new System.Collections.ObjectModel.Collection<string>();
            this._scoreInstrument = new System.Collections.ObjectModel.Collection<ScoreInstrument>();
            this._player = new System.Collections.ObjectModel.Collection<Player>();
            this._midiDevice = new System.Collections.ObjectModel.Collection<MidiDevice>();
            this._midiInstrument = new System.Collections.ObjectModel.Collection<MidiInstrument>();
        }

        [System.ComponentModel.DataAnnotations.RequiredAttribute(AllowEmptyStrings=true)]
        [System.Xml.Serialization.XmlElementAttribute("part-name")]
        public PartName PartName { get; set; }

        [System.Xml.Serialization.XmlElementAttribute("part-name-display")]
        public NameDisplay PartNameDisplay { get; set; }

        [System.Xml.Serialization.XmlElementAttribute("part-abbreviation")]
        public PartName PartAbbreviation { get; set; }

        [System.Xml.Serialization.XmlElementAttribute("part-abbreviation-display")]
        public NameDisplay PartAbbreviationDisplay { get; set; }

        [System.Xml.Serialization.XmlIgnoreAttribute()]
        private System.Collections.ObjectModel.Collection<string> _group;

        /// <summary>
        /// <para>The group element allows the use of different versions of the part for different purposes. Typical values include score, parts, sound, and data. Ordering information can be derived from the ordering within a MusicXML score or opus.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("The group element allows the use of different versions of the part for different " +
            "purposes. Typical values include score, parts, sound, and data. Ordering informa" +
            "tion can be derived from the ordering within a MusicXML score or opus.")]
        [System.Xml.Serialization.XmlElementAttribute("group")]
        public System.Collections.ObjectModel.Collection<string> Group
        {
            get
            {
                return _group;
            }
            private set
            {
                _group = value;
            }
        }

        /// <summary>
        /// <para xml:lang="en">Gets a value indicating whether the Group collection is empty.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool GroupSpecified
        {
            get
            {
                return (this.Group.Count != 0);
            }
        }

        [System.Xml.Serialization.XmlIgnoreAttribute()]
        private System.Collections.ObjectModel.Collection<ScoreInstrument> _scoreInstrument;

        [System.Xml.Serialization.XmlElementAttribute("score-instrument")]
        public System.Collections.ObjectModel.Collection<ScoreInstrument> ScoreInstrument
        {
            get
            {
                return _scoreInstrument;
            }
            private set
            {
                _scoreInstrument = value;
            }
        }

        /// <summary>
        /// <para xml:lang="en">Gets a value indicating whether the ScoreInstrument collection is empty.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool ScoreInstrumentSpecified
        {
            get
            {
                return (this.ScoreInstrument.Count != 0);
            }
        }

        [System.Xml.Serialization.XmlIgnoreAttribute()]
        private System.Collections.ObjectModel.Collection<Player> _player;

        [System.Xml.Serialization.XmlElementAttribute("player")]
        public System.Collections.ObjectModel.Collection<Player> Player
        {
            get
            {
                return _player;
            }
            private set
            {
                _player = value;
            }
        }

        /// <summary>
        /// <para xml:lang="en">Gets a value indicating whether the Player collection is empty.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool PlayerSpecified
        {
            get
            {
                return (this.Player.Count != 0);
            }
        }

        [System.Xml.Serialization.XmlIgnoreAttribute()]
        private System.Collections.ObjectModel.Collection<MidiDevice> _midiDevice;

        [System.Xml.Serialization.XmlElementAttribute("midi-device")]
        public System.Collections.ObjectModel.Collection<MidiDevice> MidiDevice
        {
            get
            {
                return _midiDevice;
            }
            private set
            {
                _midiDevice = value;
            }
        }

        /// <summary>
        /// <para xml:lang="en">Gets a value indicating whether the MidiDevice collection is empty.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool MidiDeviceSpecified
        {
            get
            {
                return (this.MidiDevice.Count != 0);
            }
        }

        [System.Xml.Serialization.XmlIgnoreAttribute()]
        private System.Collections.ObjectModel.Collection<MidiInstrument> _midiInstrument;

        [System.Xml.Serialization.XmlElementAttribute("midi-instrument")]
        public System.Collections.ObjectModel.Collection<MidiInstrument> MidiInstrument
        {
            get
            {
                return _midiInstrument;
            }
            private set
            {
                _midiInstrument = value;
            }
        }

        /// <summary>
        /// <para xml:lang="en">Gets a value indicating whether the MidiInstrument collection is empty.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool MidiInstrumentSpecified
        {
            get
            {
                return (this.MidiInstrument.Count != 0);
            }
        }

        [System.ComponentModel.DataAnnotations.RequiredAttribute(AllowEmptyStrings=true)]
        [System.Xml.Serialization.XmlAttributeAttribute("id")]
        public string Id { get; set; }
    }

    /// <summary>
    /// <para>The part-name type describes the name or abbreviation of a score-part element. Formatting attributes for the part-name element are deprecated in Version 2.0 in favor of the new part-name-display and part-abbreviation-display elements.</para>
    /// </summary>
    [System.ComponentModel.DescriptionAttribute("The part-name type describes the name or abbreviation of a score-part element. Fo" +
        "rmatting attributes for the part-name element are deprecated in Version 2.0 in f" +
        "avor of the new part-name-display and part-abbreviation-display elements.")]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XmlSchemaClassGenerator", "2.1.1142.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute("part-name", Namespace="")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class PartName : IPartNameText
    {

        /// <summary>
        /// <para xml:lang="en">Gets or sets the text value.</para>
        /// </summary>
        [System.Xml.Serialization.XmlTextAttribute()]
        public string Value { get; set; }

        /// <summary>
        /// <para>The tenths type is a number representing tenths of interline staff space (positive or negative). Both integer and decimal values are allowed, such as 5 for a half space and 2.5 for a quarter space. Interline space is measured from the middle of a staff line.
        ///
        ///Distances in a MusicXML file are measured in tenths of staff space. Tenths are then scaled to millimeters within the scaling element, used in the defaults element at the start of a score. Individual staves can apply a scaling factor to adjust staff size. When a MusicXML element or attribute refers to tenths, it means the global tenths defined by the scaling element, not the local tenths as adjusted by the staff-size element.</para>
        /// </summary>
        [System.Xml.Serialization.XmlAttributeAttribute("default-x")]
        public decimal DefaultX { get; set; }

        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the DefaultX property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool DefaultXSpecified { get; set; }

        /// <summary>
        /// <para>The tenths type is a number representing tenths of interline staff space (positive or negative). Both integer and decimal values are allowed, such as 5 for a half space and 2.5 for a quarter space. Interline space is measured from the middle of a staff line.
        ///
        ///Distances in a MusicXML file are measured in tenths of staff space. Tenths are then scaled to millimeters within the scaling element, used in the defaults element at the start of a score. Individual staves can apply a scaling factor to adjust staff size. When a MusicXML element or attribute refers to tenths, it means the global tenths defined by the scaling element, not the local tenths as adjusted by the staff-size element.</para>
        /// </summary>
        [System.Xml.Serialization.XmlAttributeAttribute("default-y")]
        public decimal DefaultY { get; set; }

        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the DefaultY property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool DefaultYSpecified { get; set; }

        /// <summary>
        /// <para>The tenths type is a number representing tenths of interline staff space (positive or negative). Both integer and decimal values are allowed, such as 5 for a half space and 2.5 for a quarter space. Interline space is measured from the middle of a staff line.
        ///
        ///Distances in a MusicXML file are measured in tenths of staff space. Tenths are then scaled to millimeters within the scaling element, used in the defaults element at the start of a score. Individual staves can apply a scaling factor to adjust staff size. When a MusicXML element or attribute refers to tenths, it means the global tenths defined by the scaling element, not the local tenths as adjusted by the staff-size element.</para>
        /// </summary>
        [System.Xml.Serialization.XmlAttributeAttribute("relative-x")]
        public decimal RelativeX { get; set; }

        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the RelativeX property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool RelativeXSpecified { get; set; }

        /// <summary>
        /// <para>The tenths type is a number representing tenths of interline staff space (positive or negative). Both integer and decimal values are allowed, such as 5 for a half space and 2.5 for a quarter space. Interline space is measured from the middle of a staff line.
        ///
        ///Distances in a MusicXML file are measured in tenths of staff space. Tenths are then scaled to millimeters within the scaling element, used in the defaults element at the start of a score. Individual staves can apply a scaling factor to adjust staff size. When a MusicXML element or attribute refers to tenths, it means the global tenths defined by the scaling element, not the local tenths as adjusted by the staff-size element.</para>
        /// </summary>
        [System.Xml.Serialization.XmlAttributeAttribute("relative-y")]
        public decimal RelativeY { get; set; }

        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the RelativeY property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool RelativeYSpecified { get; set; }

        /// <summary>
        /// <para>The font-family is a comma-separated list of font names. These can be specific font styles such as Maestro or Opus, or one of several generic font styles: music, engraved, handwritten, text, serif, sans-serif, handwritten, cursive, fantasy, and monospace. The music, engraved, and handwritten values refer to music fonts; the rest refer to text fonts. The fantasy style refers to decorative text such as found in older German-style printing.</para>
        /// <para xml:lang="en">Pattern: [^,]+(, ?[^,]+)*.</para>
        /// </summary>
        [System.ComponentModel.DataAnnotations.RegularExpressionAttribute("[^,]+(, ?[^,]+)*")]
        [System.Xml.Serialization.XmlAttributeAttribute("font-family")]
        public string FontFamily { get; set; }

        [System.Xml.Serialization.XmlAttributeAttribute("font-style")]
        public FontStyle FontStyle { get; set; }

        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the FontStyle property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool FontStyleSpecified { get; set; }

        /// <summary>
        /// <para>The font-size can be one of the CSS font sizes (xx-small, x-small, small, medium, large, x-large, xx-large) or a numeric point size.</para>
        /// </summary>
        [System.Xml.Serialization.XmlAttributeAttribute("font-size")]
        public string FontSize { get; set; }

        [System.Xml.Serialization.XmlAttributeAttribute("font-weight")]
        public FontWeight FontWeight { get; set; }

        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the FontWeight property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool FontWeightSpecified { get; set; }

        /// <summary>
        /// <para>The color type indicates the color of an element. Color may be represented as hexadecimal RGB triples, as in HTML, or as hexadecimal ARGB tuples, with the A indicating alpha of transparency. An alpha value of 00 is totally transparent; FF is totally opaque. If RGB is used, the A value is assumed to be FF.
        ///
        ///For instance, the RGB value "#800080" represents purple. An ARGB value of "#40800080" would be a transparent purple.
        ///
        ///As in SVG 1.1, colors are defined in terms of the sRGB color space (IEC 61966).</para>
        /// <para xml:lang="en">Pattern: #[\dA-F]{6}([\dA-F][\dA-F])?.</para>
        /// </summary>
        [System.ComponentModel.DataAnnotations.RegularExpressionAttribute("#[\\dA-F]{6}([\\dA-F][\\dA-F])?")]
        [System.Xml.Serialization.XmlAttributeAttribute("color")]
        public string Color { get; set; }

        [System.Xml.Serialization.XmlAttributeAttribute("print-object")]
        public YesNo PrintObject { get; set; }

        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the PrintObject property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool PrintObjectSpecified { get; set; }

        [System.Xml.Serialization.XmlAttributeAttribute("justify")]
        public LeftCenterRight Justify { get; set; }

        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the Justify property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool JustifySpecified { get; set; }
    }

    /// <summary>
    /// <para>The part-name-text attribute group is used by the part-name and part-abbreviation elements. The print-style and justify attribute groups are deprecated in MusicXML 2.0 in favor of the new part-name-display and part-abbreviation-display elements.</para>
    /// </summary>
    [System.ComponentModel.DescriptionAttribute("The part-name-text attribute group is used by the part-name and part-abbreviation" +
        " elements. The print-style and justify attribute groups are deprecated in MusicX" +
        "ML 2.0 in favor of the new part-name-display and part-abbreviation-display eleme" +
        "nts.")]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XmlSchemaClassGenerator", "2.1.1142.0")]
    public partial interface IPartNameText : IPrintStyle, IPrintObject, IJustify
    {
    }

    /// <summary>
    /// <para>The score-instrument type represents a single instrument within a score-part. As with the score-part type, each score-instrument has a required ID attribute, a name, and an optional abbreviation.
    ///
    ///A score-instrument type is also required if the score specifies MIDI 1.0 channels, banks, or programs. An initial midi-instrument assignment can also be made here. MusicXML software should be able to automatically assign reasonable channels and instruments without these elements in simple cases, such as where part names match General MIDI instrument names.
    ///
    ///The score-instrument element can also distinguish multiple instruments of the same type that are on the same part, such as Clarinet 1 and Clarinet 2 instruments within a Clarinets 1 and 2 part.</para>
    /// </summary>
    [System.ComponentModel.DescriptionAttribute(@"The score-instrument type represents a single instrument within a score-part. As with the score-part type, each score-instrument has a required ID attribute, a name, and an optional abbreviation. A score-instrument type is also required if the score specifies MIDI 1.0 channels, banks, or programs. An initial midi-instrument assignment can also be made here. MusicXML software should be able to automatically assign reasonable channels and instruments without these elements in simple cases, such as where part names match General MIDI instrument names. The score-instrument element can also distinguish multiple instruments of the same type that are on the same part, such as Clarinet 1 and Clarinet 2 instruments within a Clarinets 1 and 2 part.")]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XmlSchemaClassGenerator", "2.1.1142.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute("score-instrument", Namespace="")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class ScoreInstrument : IVirtualInstrumentData
    {

        /// <summary>
        /// <para>The instrument-name element is typically used within a software application, rather than appearing on the printed page of a score.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("The instrument-name element is typically used within a software application, rath" +
            "er than appearing on the printed page of a score.")]
        [System.ComponentModel.DataAnnotations.RequiredAttribute(AllowEmptyStrings=true)]
        [System.Xml.Serialization.XmlElementAttribute("instrument-name")]
        public string InstrumentName { get; set; }

        /// <summary>
        /// <para>The optional instrument-abbreviation element is typically used within a software application, rather than appearing on the printed page of a score.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("The optional instrument-abbreviation element is typically used within a software " +
            "application, rather than appearing on the printed page of a score.")]
        [System.Xml.Serialization.XmlElementAttribute("instrument-abbreviation")]
        public string InstrumentAbbreviation { get; set; }

        /// <summary>
        /// <para>The instrument-sound element describes the default timbre of the score-instrument. This description is independent of a particular virtual or MIDI instrument specification and allows playback to be shared more easily between applications and libraries.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("The instrument-sound element describes the default timbre of the score-instrument" +
            ". This description is independent of a particular virtual or MIDI instrument spe" +
            "cification and allows playback to be shared more easily between applications and" +
            " libraries.")]
        [System.Xml.Serialization.XmlElementAttribute("instrument-sound")]
        public string InstrumentSound { get; set; }

        /// <summary>
        /// <para>The solo element is present if performance is intended by a solo instrument.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("The solo element is present if performance is intended by a solo instrument.")]
        [System.Xml.Serialization.XmlElementAttribute("solo")]
        public Empty Solo { get; set; }

        /// <summary>
        /// <para>The ensemble element is present if performance is intended by an ensemble such as an orchestral section. The text of the ensemble element contains the size of the section, or is empty if the ensemble size is not specified.</para>
        /// <para>The positive-integer-or-empty values can be either a positive integer or an empty string.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("The ensemble element is present if performance is intended by an ensemble such as" +
            " an orchestral section. The text of the ensemble element contains the size of th" +
            "e section, or is empty if the ensemble size is not specified.")]
        [System.Xml.Serialization.XmlElementAttribute("ensemble")]
        public string Ensemble { get; set; }

        [System.Xml.Serialization.XmlElementAttribute("virtual-instrument")]
        public VirtualInstrument VirtualInstrument { get; set; }

        [System.ComponentModel.DataAnnotations.RequiredAttribute(AllowEmptyStrings=true)]
        [System.Xml.Serialization.XmlAttributeAttribute("id")]
        public string Id { get; set; }
    }

    /// <summary>
    /// <para>The player type allows for multiple players per score-part for use in listening applications. One player may play multiple instruments, while a single instrument may include multiple players in divisi sections.</para>
    /// </summary>
    [System.ComponentModel.DescriptionAttribute("The player type allows for multiple players per score-part for use in listening a" +
        "pplications. One player may play multiple instruments, while a single instrument" +
        " may include multiple players in divisi sections.")]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XmlSchemaClassGenerator", "2.1.1142.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute("player", Namespace="")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class Player
    {

        /// <summary>
        /// <para>The player-name element is typically used within a software application, rather than appearing on the printed page of a score.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("The player-name element is typically used within a software application, rather t" +
            "han appearing on the printed page of a score.")]
        [System.ComponentModel.DataAnnotations.RequiredAttribute(AllowEmptyStrings=true)]
        [System.Xml.Serialization.XmlElementAttribute("player-name")]
        public string PlayerName { get; set; }

        [System.ComponentModel.DataAnnotations.RequiredAttribute(AllowEmptyStrings=true)]
        [System.Xml.Serialization.XmlAttributeAttribute("id")]
        public string Id { get; set; }
    }

    /// <summary>
    /// <para>Works are optionally identified by number and title. The work type also may indicate a link to the opus document that composes multiple scores into a collection.</para>
    /// </summary>
    [System.ComponentModel.DescriptionAttribute("Works are optionally identified by number and title. The work type also may indic" +
        "ate a link to the opus document that composes multiple scores into a collection." +
        "")]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XmlSchemaClassGenerator", "2.1.1142.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute("work", Namespace="")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class Work
    {

        /// <summary>
        /// <para>The work-number element specifies the number of a work, such as its opus number.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("The work-number element specifies the number of a work, such as its opus number.")]
        [System.Xml.Serialization.XmlElementAttribute("work-number")]
        public string WorkNumber { get; set; }

        /// <summary>
        /// <para>The work-title element specifies the title of a work, not including its opus or other work number.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("The work-title element specifies the title of a work, not including its opus or o" +
            "ther work number.")]
        [System.Xml.Serialization.XmlElementAttribute("work-title")]
        public string WorkTitle { get; set; }

        [System.Xml.Serialization.XmlElementAttribute("opus")]
        public Opus Opus { get; set; }
    }

    /// <summary>
    /// <para>The score-partwise element is the root element for a partwise MusicXML score. It includes a score-header group followed by a series of parts with measures inside. The document-attributes attribute group includes the version attribute.</para>
    /// </summary>
    [System.ComponentModel.DescriptionAttribute("The score-partwise element is the root element for a partwise MusicXML score. It " +
        "includes a score-header group followed by a series of parts with measures inside" +
        ". The document-attributes attribute group includes the version attribute.")]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XmlSchemaClassGenerator", "2.1.1142.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute("score-partwise", Namespace="", AnonymousType=true)]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlRootAttribute("score-partwise", Namespace="")]
    public partial class ScorePartwise : IScoreHeader, IDocumentAttributes
    {

        [System.Xml.Serialization.XmlElementAttribute("work")]
        public Work Work { get; set; }

        /// <summary>
        /// <para>The movement-number element specifies the number of a movement.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("The movement-number element specifies the number of a movement.")]
        [System.Xml.Serialization.XmlElementAttribute("movement-number")]
        public string MovementNumber { get; set; }

        /// <summary>
        /// <para>The movement-title element specifies the title of a movement, not including its number.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("The movement-title element specifies the title of a movement, not including its n" +
            "umber.")]
        [System.Xml.Serialization.XmlElementAttribute("movement-title")]
        public string MovementTitle { get; set; }

        [System.Xml.Serialization.XmlElementAttribute("identification")]
        public Identification Identification { get; set; }

        [System.Xml.Serialization.XmlElementAttribute("defaults")]
        public Defaults Defaults { get; set; }

        [System.Xml.Serialization.XmlIgnoreAttribute()]
        private System.Collections.ObjectModel.Collection<Credit> _credit;

        [System.Xml.Serialization.XmlElementAttribute("credit")]
        public System.Collections.ObjectModel.Collection<Credit> Credit
        {
            get
            {
                return _credit;
            }
            private set
            {
                _credit = value;
            }
        }

        /// <summary>
        /// <para xml:lang="en">Gets a value indicating whether the Credit collection is empty.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool CreditSpecified
        {
            get
            {
                return (this.Credit.Count != 0);
            }
        }

        /// <summary>
        /// <para xml:lang="en">Initializes a new instance of the <see cref="ScorePartwise" /> class.</para>
        /// </summary>
        public ScorePartwise()
        {
            this._credit = new System.Collections.ObjectModel.Collection<Credit>();
            this._part = new System.Collections.ObjectModel.Collection<ScorePartwisePart>();
        }

        [System.ComponentModel.DataAnnotations.RequiredAttribute(AllowEmptyStrings=true)]
        [System.Xml.Serialization.XmlElementAttribute("part-list")]
        public PartList PartList { get; set; }

        [System.Xml.Serialization.XmlIgnoreAttribute()]
        private System.Collections.ObjectModel.Collection<ScorePartwisePart> _part;

        [System.ComponentModel.DataAnnotations.RequiredAttribute(AllowEmptyStrings=true)]
        [System.Xml.Serialization.XmlElementAttribute("part")]
        public System.Collections.ObjectModel.Collection<ScorePartwisePart> Part
        {
            get
            {
                return _part;
            }
            private set
            {
                _part = value;
            }
        }

        [System.Xml.Serialization.XmlIgnoreAttribute()]
        private string _version = "1.0";

        [System.ComponentModel.DefaultValueAttribute("1.0")]
        [System.Xml.Serialization.XmlAttributeAttribute("version")]
        public string Version
        {
            get
            {
                return _version;
            }
            set
            {
                _version = value;
            }
        }
    }

    /// <summary>
    /// <para>The score-header group contains basic score metadata about the work and movement, score-wide defaults for layout and fonts, credits that appear on the first or following pages, and the part list.</para>
    /// </summary>
    [System.ComponentModel.DescriptionAttribute("The score-header group contains basic score metadata about the work and movement," +
        " score-wide defaults for layout and fonts, credits that appear on the first or f" +
        "ollowing pages, and the part list.")]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XmlSchemaClassGenerator", "2.1.1142.0")]
    public partial interface IScoreHeader
    {

        Work Work
        {
            get;
            set;
        }

        /// <summary>
        /// <para>The movement-number element specifies the number of a movement.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("The movement-number element specifies the number of a movement.")]
        string MovementNumber
        {
            get;
            set;
        }

        /// <summary>
        /// <para>The movement-title element specifies the title of a movement, not including its number.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("The movement-title element specifies the title of a movement, not including its n" +
            "umber.")]
        string MovementTitle
        {
            get;
            set;
        }

        Identification Identification
        {
            get;
            set;
        }

        Defaults Defaults
        {
            get;
            set;
        }

        System.Collections.ObjectModel.Collection<Credit> Credit
        {
            get;
        }

        PartList PartList
        {
            get;
            set;
        }
    }

    [System.CodeDom.Compiler.GeneratedCodeAttribute("XmlSchemaClassGenerator", "2.1.1142.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute("ScorePartwisePart", Namespace="", AnonymousType=true)]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class ScorePartwisePart : IPartAttributes
    {

        [System.Xml.Serialization.XmlIgnoreAttribute()]
        private System.Collections.ObjectModel.Collection<ScorePartwisePartMeasure> _measure;

        [System.ComponentModel.DataAnnotations.RequiredAttribute(AllowEmptyStrings=true)]
        [System.Xml.Serialization.XmlElementAttribute("measure")]
        public System.Collections.ObjectModel.Collection<ScorePartwisePartMeasure> Measure
        {
            get
            {
                return _measure;
            }
            private set
            {
                _measure = value;
            }
        }

        /// <summary>
        /// <para xml:lang="en">Initializes a new instance of the <see cref="ScorePartwisePart" /> class.</para>
        /// </summary>
        public ScorePartwisePart()
        {
            this._measure = new System.Collections.ObjectModel.Collection<ScorePartwisePartMeasure>();
        }

        [System.ComponentModel.DataAnnotations.RequiredAttribute(AllowEmptyStrings=true)]
        [System.Xml.Serialization.XmlAttributeAttribute("id")]
        public string Id { get; set; }
    }

    [System.CodeDom.Compiler.GeneratedCodeAttribute("XmlSchemaClassGenerator", "2.1.1142.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute("ScorePartwisePartMeasure", Namespace="", AnonymousType=true)]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class ScorePartwisePartMeasure : IMusicData, IMeasureAttributes
    {

        /// <summary>
        /// <para xml:lang="en">Initializes a new instance of the <see cref="ScorePartwisePartMeasure" /> class.</para>
        /// </summary>
        public ScorePartwisePartMeasure()
        {
            this._note = new System.Collections.ObjectModel.Collection<Note>();
            this._backup = new System.Collections.ObjectModel.Collection<Backup>();
            this._forward = new System.Collections.ObjectModel.Collection<Forward>();
            this._direction = new System.Collections.ObjectModel.Collection<Direction>();
            this._attributes = new System.Collections.ObjectModel.Collection<Attributes>();
            this._harmony = new System.Collections.ObjectModel.Collection<Harmony>();
            this._figuredBass = new System.Collections.ObjectModel.Collection<FiguredBass>();
            this._print = new System.Collections.ObjectModel.Collection<Print>();
            this._sound = new System.Collections.ObjectModel.Collection<Sound>();
            this._listening = new System.Collections.ObjectModel.Collection<Listening>();
            this._barline = new System.Collections.ObjectModel.Collection<Barline>();
            this._grouping = new System.Collections.ObjectModel.Collection<Grouping>();
            this._link = new System.Collections.ObjectModel.Collection<Link>();
            this._bookmark = new System.Collections.ObjectModel.Collection<Bookmark>();
        }

        [System.Xml.Serialization.XmlIgnoreAttribute()]
        private System.Collections.ObjectModel.Collection<Backup> _backup;

        [System.Xml.Serialization.XmlElementAttribute("backup")]
        public System.Collections.ObjectModel.Collection<Backup> Backup
        {
            get
            {
                return _backup;
            }
            private set
            {
                _backup = value;
            }
        }

        /// <summary>
        /// <para xml:lang="en">Gets a value indicating whether the Backup collection is empty.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool BackupSpecified
        {
            get
            {
                return (this.Backup.Count != 0);
            }
        }

        [System.Xml.Serialization.XmlIgnoreAttribute()]
        private System.Collections.ObjectModel.Collection<Forward> _forward;

        [System.Xml.Serialization.XmlElementAttribute("forward")]
        public System.Collections.ObjectModel.Collection<Forward> Forward
        {
            get
            {
                return _forward;
            }
            private set
            {
                _forward = value;
            }
        }

        /// <summary>
        /// <para xml:lang="en">Gets a value indicating whether the Forward collection is empty.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool ForwardSpecified
        {
            get
            {
                return (this.Forward.Count != 0);
            }
        }

        /// <summary>
        /// <para xml:lang="en">Gets a value indicating whether the Direction collection is empty.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool DirectionSpecified
        {
            get
            {
                return (this.Direction.Count != 0);
            }
        }

        [System.Xml.Serialization.XmlIgnoreAttribute()]
        private System.Collections.ObjectModel.Collection<Attributes> _attributes;

        [System.Xml.Serialization.XmlElementAttribute("attributes")]
        public System.Collections.ObjectModel.Collection<Attributes> Attributes
        {
            get
            {
                return _attributes;
            }
            private set
            {
                _attributes = value;
            }
        }

        /// <summary>
        /// <para xml:lang="en">Gets a value indicating whether the Attributes collection is empty.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool AttributesSpecified
        {
            get
            {
                return (this.Attributes.Count != 0);
            }
        }

        [System.Xml.Serialization.XmlIgnoreAttribute()]
        private System.Collections.ObjectModel.Collection<Direction> _direction;

        [System.Xml.Serialization.XmlElementAttribute("direction")]
        public System.Collections.ObjectModel.Collection<Direction> Direction
        {
            get
            {
                return _direction;
            }
            private set
            {
                _direction = value;
            }
        }

        [System.Xml.Serialization.XmlIgnoreAttribute()]
        private System.Collections.ObjectModel.Collection<Note> _note;

        [System.Xml.Serialization.XmlElementAttribute("note")]
        public System.Collections.ObjectModel.Collection<Note> Note
        {
            get
            {
                return _note;
            }
            private set
            {
                _note = value;
            }
        }

        /// <summary>
        /// <para xml:lang="en">Gets a value indicating whether the Note collection is empty.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool NoteSpecified
        {
            get
            {
                return (this.Note.Count != 0);
            }
        }

        [System.Xml.Serialization.XmlIgnoreAttribute()]
        private System.Collections.ObjectModel.Collection<Harmony> _harmony;

        [System.Xml.Serialization.XmlElementAttribute("harmony")]
        public System.Collections.ObjectModel.Collection<Harmony> Harmony
        {
            get
            {
                return _harmony;
            }
            private set
            {
                _harmony = value;
            }
        }

        /// <summary>
        /// <para xml:lang="en">Gets a value indicating whether the Harmony collection is empty.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool HarmonySpecified
        {
            get
            {
                return (this.Harmony.Count != 0);
            }
        }

        [System.Xml.Serialization.XmlIgnoreAttribute()]
        private System.Collections.ObjectModel.Collection<FiguredBass> _figuredBass;

        [System.Xml.Serialization.XmlElementAttribute("figured-bass")]
        public System.Collections.ObjectModel.Collection<FiguredBass> FiguredBass
        {
            get
            {
                return _figuredBass;
            }
            private set
            {
                _figuredBass = value;
            }
        }

        /// <summary>
        /// <para xml:lang="en">Gets a value indicating whether the FiguredBass collection is empty.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool FiguredBassSpecified
        {
            get
            {
                return (this.FiguredBass.Count != 0);
            }
        }

        [System.Xml.Serialization.XmlIgnoreAttribute()]
        private System.Collections.ObjectModel.Collection<Print> _print;

        [System.Xml.Serialization.XmlElementAttribute("print")]
        public System.Collections.ObjectModel.Collection<Print> Print
        {
            get
            {
                return _print;
            }
            private set
            {
                _print = value;
            }
        }

        /// <summary>
        /// <para xml:lang="en">Gets a value indicating whether the Print collection is empty.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool PrintSpecified
        {
            get
            {
                return (this.Print.Count != 0);
            }
        }

        [System.Xml.Serialization.XmlIgnoreAttribute()]
        private System.Collections.ObjectModel.Collection<Sound> _sound;

        [System.Xml.Serialization.XmlElementAttribute("sound")]
        public System.Collections.ObjectModel.Collection<Sound> Sound
        {
            get
            {
                return _sound;
            }
            private set
            {
                _sound = value;
            }
        }

        /// <summary>
        /// <para xml:lang="en">Gets a value indicating whether the Sound collection is empty.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool SoundSpecified
        {
            get
            {
                return (this.Sound.Count != 0);
            }
        }

        [System.Xml.Serialization.XmlIgnoreAttribute()]
        private System.Collections.ObjectModel.Collection<Listening> _listening;

        [System.Xml.Serialization.XmlElementAttribute("listening")]
        public System.Collections.ObjectModel.Collection<Listening> Listening
        {
            get
            {
                return _listening;
            }
            private set
            {
                _listening = value;
            }
        }

        /// <summary>
        /// <para xml:lang="en">Gets a value indicating whether the Listening collection is empty.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool ListeningSpecified
        {
            get
            {
                return (this.Listening.Count != 0);
            }
        }

        [System.Xml.Serialization.XmlIgnoreAttribute()]
        private System.Collections.ObjectModel.Collection<Barline> _barline;

        [System.Xml.Serialization.XmlElementAttribute("barline")]
        public System.Collections.ObjectModel.Collection<Barline> Barline
        {
            get
            {
                return _barline;
            }
            private set
            {
                _barline = value;
            }
        }

        /// <summary>
        /// <para xml:lang="en">Gets a value indicating whether the Barline collection is empty.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool BarlineSpecified
        {
            get
            {
                return (this.Barline.Count != 0);
            }
        }

        [System.Xml.Serialization.XmlIgnoreAttribute()]
        private System.Collections.ObjectModel.Collection<Grouping> _grouping;

        [System.Xml.Serialization.XmlElementAttribute("grouping")]
        public System.Collections.ObjectModel.Collection<Grouping> Grouping
        {
            get
            {
                return _grouping;
            }
            private set
            {
                _grouping = value;
            }
        }

        /// <summary>
        /// <para xml:lang="en">Gets a value indicating whether the Grouping collection is empty.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool GroupingSpecified
        {
            get
            {
                return (this.Grouping.Count != 0);
            }
        }

        [System.Xml.Serialization.XmlIgnoreAttribute()]
        private System.Collections.ObjectModel.Collection<Link> _link;

        [System.Xml.Serialization.XmlElementAttribute("link")]
        public System.Collections.ObjectModel.Collection<Link> Link
        {
            get
            {
                return _link;
            }
            private set
            {
                _link = value;
            }
        }

        /// <summary>
        /// <para xml:lang="en">Gets a value indicating whether the Link collection is empty.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool LinkSpecified
        {
            get
            {
                return (this.Link.Count != 0);
            }
        }

        [System.Xml.Serialization.XmlIgnoreAttribute()]
        private System.Collections.ObjectModel.Collection<Bookmark> _bookmark;

        [System.Xml.Serialization.XmlElementAttribute("bookmark")]
        public System.Collections.ObjectModel.Collection<Bookmark> Bookmark
        {
            get
            {
                return _bookmark;
            }
            private set
            {
                _bookmark = value;
            }
        }

        /// <summary>
        /// <para xml:lang="en">Gets a value indicating whether the Bookmark collection is empty.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool BookmarkSpecified
        {
            get
            {
                return (this.Bookmark.Count != 0);
            }
        }

        [System.ComponentModel.DataAnnotations.RequiredAttribute(AllowEmptyStrings=true)]
        [System.Xml.Serialization.XmlAttributeAttribute("number")]
        public string Number { get; set; }

        /// <summary>
        /// <para>The measure-text type is used for the text attribute of measure elements. It has at least one character. The implicit attribute of the measure element should be set to "yes" rather than setting the text attribute to an empty string.</para>
        /// <para xml:lang="en">Minimum length: 1.</para>
        /// </summary>
        [System.ComponentModel.DataAnnotations.MinLengthAttribute(1)]
        [System.Xml.Serialization.XmlAttributeAttribute("text")]
        public string Text { get; set; }

        [System.Xml.Serialization.XmlAttributeAttribute("implicit")]
        public YesNo Implicit { get; set; }

        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the Implicit property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool ImplicitSpecified { get; set; }

        [System.Xml.Serialization.XmlAttributeAttribute("non-controlling")]
        public YesNo NonControlling { get; set; }

        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the NonControlling property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool NonControllingSpecified { get; set; }

        /// <summary>
        /// <para>The tenths type is a number representing tenths of interline staff space (positive or negative). Both integer and decimal values are allowed, such as 5 for a half space and 2.5 for a quarter space. Interline space is measured from the middle of a staff line.
        ///
        ///Distances in a MusicXML file are measured in tenths of staff space. Tenths are then scaled to millimeters within the scaling element, used in the defaults element at the start of a score. Individual staves can apply a scaling factor to adjust staff size. When a MusicXML element or attribute refers to tenths, it means the global tenths defined by the scaling element, not the local tenths as adjusted by the staff-size element.</para>
        /// </summary>
        [System.Xml.Serialization.XmlAttributeAttribute("width")]
        public decimal Width { get; set; }

        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the Width property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool WidthSpecified { get; set; }

        [System.Xml.Serialization.XmlAttributeAttribute("id")]
        public string Id { get; set; }
    }

    /// <summary>
    /// <para>The music-data group contains the basic musical data that is either associated with a part or a measure, depending on whether the partwise or timewise hierarchy is used.</para>
    /// </summary>
    [System.ComponentModel.DescriptionAttribute("The music-data group contains the basic musical data that is either associated wi" +
        "th a part or a measure, depending on whether the partwise or timewise hierarchy " +
        "is used.")]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XmlSchemaClassGenerator", "2.1.1142.0")]
    public partial interface IMusicData
    {

        System.Collections.ObjectModel.Collection<Note> Note
        {
            get;
        }

        System.Collections.ObjectModel.Collection<Backup> Backup
        {
            get;
        }

        System.Collections.ObjectModel.Collection<Forward> Forward
        {
            get;
        }

        System.Collections.ObjectModel.Collection<Direction> Direction
        {
            get;
        }

        System.Collections.ObjectModel.Collection<Attributes> Attributes
        {
            get;
        }

        System.Collections.ObjectModel.Collection<Harmony> Harmony
        {
            get;
        }

        System.Collections.ObjectModel.Collection<FiguredBass> FiguredBass
        {
            get;
        }

        System.Collections.ObjectModel.Collection<Print> Print
        {
            get;
        }

        System.Collections.ObjectModel.Collection<Sound> Sound
        {
            get;
        }

        System.Collections.ObjectModel.Collection<Listening> Listening
        {
            get;
        }

        System.Collections.ObjectModel.Collection<Barline> Barline
        {
            get;
        }

        System.Collections.ObjectModel.Collection<Grouping> Grouping
        {
            get;
        }

        System.Collections.ObjectModel.Collection<Link> Link
        {
            get;
        }

        System.Collections.ObjectModel.Collection<Bookmark> Bookmark
        {
            get;
        }
    }

    /// <summary>
    /// <para>The measure-attributes group is used by the measure element. Measures have a required number attribute (going from partwise to timewise, measures are grouped via the number).
    ///
    ///The implicit attribute is set to "yes" for measures where the measure number should never appear, such as pickup measures and the last half of mid-measure repeats. The value is "no" if not specified.
    ///
    ///The non-controlling attribute is intended for use in multimetric music like the Don Giovanni minuet. If set to "yes", the left barline in this measure does not coincide with the left barline of measures in other parts. The value is "no" if not specified.
    ///
    ///In partwise files, the number attribute should be the same for measures in different parts that share the same left barline. While the number attribute is often numeric, it does not have to be. Non-numeric values are typically used together with the implicit or non-controlling attributes being set to "yes". For a pickup measure, the number attribute is typically set to "0" and the implicit attribute is typically set to "yes". 
    ///
    ///If measure numbers are not unique within a part, this can cause problems for conversions between partwise and timewise formats. The text attribute allows specification of displayed measure numbers that are different than what is used in the number attribute. This attribute is ignored for measures where the implicit attribute is set to "yes". Further details about measure numbering can be specified using the measure-numbering element.
    ///
    ///Measure width is specified in tenths. These are the global tenths specified in the scaling element, not local tenths as modified by the staff-size element.	The width covers the entire measure from barline or system start to barline or system end.</para>
    /// </summary>
    [System.ComponentModel.DescriptionAttribute("The measure-attributes group is used by the measure element. Measures have a requ" +
        "ired number attribute (going from partwise to timewise, measures are grouped via" +
        " the number). The implicit attribute is set to \"yes\" for measures where the meas" +
        "ure number should never appear, such as pickup measures and the last half of mid" +
        "-measure repeats. The value is \"no\" if not specified. The non-controlling attrib" +
        "ute is intended for use in multimetric music like the Don Giovanni minuet. If se" +
        "t to \"yes\", the left barline in this measure does not coincide with the left bar" +
        "line of measures in other parts. The value is \"no\" if not specified. In partwise" +
        " files, the number attribute should be the same for measures in different parts " +
        "that share the same left barline. While the number attribute is often numeric, i" +
        "t does not have to be. Non-numeric values are typically used together with the i" +
        "mplicit or non-controlling attributes being set to \"yes\". For a pickup measure, " +
        "the number attribute is typically set to \"0\" and the implicit attribute is typic" +
        "ally set to \"yes\". If measure numbers are not unique within a part, this can cau" +
        "se problems for conversions between partwise and timewise formats. The text attr" +
        "ibute allows specification of displayed measure numbers that are different than " +
        "what is used in the number attribute. This attribute is ignored for measures whe" +
        "re the implicit attribute is set to \"yes\". Further details about measure numberi" +
        "ng can be specified using the measure-numbering element. Measure width is specif" +
        "ied in tenths. These are the global tenths specified in the scaling element, not" +
        " local tenths as modified by the staff-size element. The width covers the entire" +
        " measure from barline or system start to barline or system end.")]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XmlSchemaClassGenerator", "2.1.1142.0")]
    public partial interface IMeasureAttributes : IOptionalUniqueId
    {

        string Number
        {
            get;
            set;
        }

        /// <summary>
        /// <para>The measure-text type is used for the text attribute of measure elements. It has at least one character. The implicit attribute of the measure element should be set to "yes" rather than setting the text attribute to an empty string.</para>
        /// <para xml:lang="en">Minimum length: 1.</para>
        /// </summary>
        [System.ComponentModel.DataAnnotations.MinLengthAttribute(1)]
        string Text
        {
            get;
            set;
        }

        YesNo Implicit
        {
            get;
            set;
        }

        YesNo NonControlling
        {
            get;
            set;
        }

        /// <summary>
        /// <para>The tenths type is a number representing tenths of interline staff space (positive or negative). Both integer and decimal values are allowed, such as 5 for a half space and 2.5 for a quarter space. Interline space is measured from the middle of a staff line.
        ///
        ///Distances in a MusicXML file are measured in tenths of staff space. Tenths are then scaled to millimeters within the scaling element, used in the defaults element at the start of a score. Individual staves can apply a scaling factor to adjust staff size. When a MusicXML element or attribute refers to tenths, it means the global tenths defined by the scaling element, not the local tenths as adjusted by the staff-size element.</para>
        /// </summary>
        decimal Width
        {
            get;
            set;
        }
    }

    /// <summary>
    /// <para>In either partwise or timewise format, the part element has an id attribute that is an IDREF back to a score-part in the part-list.</para>
    /// </summary>
    [System.ComponentModel.DescriptionAttribute("In either partwise or timewise format, the part element has an id attribute that " +
        "is an IDREF back to a score-part in the part-list.")]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XmlSchemaClassGenerator", "2.1.1142.0")]
    public partial interface IPartAttributes
    {

        string Id
        {
            get;
            set;
        }
    }

    /// <summary>
    /// <para>The document-attributes attribute group is used to specify the attributes for an entire MusicXML document. Currently this is used for the version attribute.
    ///
    ///The version attribute was added in Version 1.1 for the score-partwise and score-timewise documents. It provides an easier way to get version information than through the MusicXML public ID. The default value is 1.0 to make it possible for programs that handle later versions to distinguish earlier version files reliably. Programs that write MusicXML 1.1 or later files should set this attribute.</para>
    /// </summary>
    [System.ComponentModel.DescriptionAttribute(@"The document-attributes attribute group is used to specify the attributes for an entire MusicXML document. Currently this is used for the version attribute. The version attribute was added in Version 1.1 for the score-partwise and score-timewise documents. It provides an easier way to get version information than through the MusicXML public ID. The default value is 1.0 to make it possible for programs that handle later versions to distinguish earlier version files reliably. Programs that write MusicXML 1.1 or later files should set this attribute.")]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XmlSchemaClassGenerator", "2.1.1142.0")]
    public partial interface IDocumentAttributes
    {

        [System.ComponentModel.DefaultValueAttribute("1.0")]
        string Version
        {
            get;
            set;
        }
    }

    /// <summary>
    /// <para>The score-timewise element is the root element for a timewise MusicXML score. It includes a score-header group followed by a series of measures with parts inside. The document-attributes attribute group includes the version attribute.</para>
    /// </summary>
    [System.ComponentModel.DescriptionAttribute("The score-timewise element is the root element for a timewise MusicXML score. It " +
        "includes a score-header group followed by a series of measures with parts inside" +
        ". The document-attributes attribute group includes the version attribute.")]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XmlSchemaClassGenerator", "2.1.1142.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute("score-timewise", Namespace="", AnonymousType=true)]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlRootAttribute("score-timewise", Namespace="")]
    public partial class ScoreTimewise : IScoreHeader, IDocumentAttributes
    {

        [System.Xml.Serialization.XmlElementAttribute("work")]
        public Work Work { get; set; }

        /// <summary>
        /// <para>The movement-number element specifies the number of a movement.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("The movement-number element specifies the number of a movement.")]
        [System.Xml.Serialization.XmlElementAttribute("movement-number")]
        public string MovementNumber { get; set; }

        /// <summary>
        /// <para>The movement-title element specifies the title of a movement, not including its number.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("The movement-title element specifies the title of a movement, not including its n" +
            "umber.")]
        [System.Xml.Serialization.XmlElementAttribute("movement-title")]
        public string MovementTitle { get; set; }

        [System.Xml.Serialization.XmlElementAttribute("identification")]
        public Identification Identification { get; set; }

        [System.Xml.Serialization.XmlElementAttribute("defaults")]
        public Defaults Defaults { get; set; }

        [System.Xml.Serialization.XmlIgnoreAttribute()]
        private System.Collections.ObjectModel.Collection<Credit> _credit;

        [System.Xml.Serialization.XmlElementAttribute("credit")]
        public System.Collections.ObjectModel.Collection<Credit> Credit
        {
            get
            {
                return _credit;
            }
            private set
            {
                _credit = value;
            }
        }

        /// <summary>
        /// <para xml:lang="en">Gets a value indicating whether the Credit collection is empty.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool CreditSpecified
        {
            get
            {
                return (this.Credit.Count != 0);
            }
        }

        /// <summary>
        /// <para xml:lang="en">Initializes a new instance of the <see cref="ScoreTimewise" /> class.</para>
        /// </summary>
        public ScoreTimewise()
        {
            this._credit = new System.Collections.ObjectModel.Collection<Credit>();
            this._measure = new System.Collections.ObjectModel.Collection<ScoreTimewiseMeasure>();
        }

        [System.ComponentModel.DataAnnotations.RequiredAttribute(AllowEmptyStrings=true)]
        [System.Xml.Serialization.XmlElementAttribute("part-list")]
        public PartList PartList { get; set; }

        [System.Xml.Serialization.XmlIgnoreAttribute()]
        private System.Collections.ObjectModel.Collection<ScoreTimewiseMeasure> _measure;

        [System.ComponentModel.DataAnnotations.RequiredAttribute(AllowEmptyStrings=true)]
        [System.Xml.Serialization.XmlElementAttribute("measure")]
        public System.Collections.ObjectModel.Collection<ScoreTimewiseMeasure> Measure
        {
            get
            {
                return _measure;
            }
            private set
            {
                _measure = value;
            }
        }

        [System.Xml.Serialization.XmlIgnoreAttribute()]
        private string _version = "1.0";

        [System.ComponentModel.DefaultValueAttribute("1.0")]
        [System.Xml.Serialization.XmlAttributeAttribute("version")]
        public string Version
        {
            get
            {
                return _version;
            }
            set
            {
                _version = value;
            }
        }
    }

    [System.CodeDom.Compiler.GeneratedCodeAttribute("XmlSchemaClassGenerator", "2.1.1142.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute("ScoreTimewiseMeasure", Namespace="", AnonymousType=true)]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class ScoreTimewiseMeasure : IMeasureAttributes
    {

        [System.Xml.Serialization.XmlIgnoreAttribute()]
        private System.Collections.ObjectModel.Collection<ScoreTimewiseMeasurePart> _part;

        [System.ComponentModel.DataAnnotations.RequiredAttribute(AllowEmptyStrings=true)]
        [System.Xml.Serialization.XmlElementAttribute("part")]
        public System.Collections.ObjectModel.Collection<ScoreTimewiseMeasurePart> Part
        {
            get
            {
                return _part;
            }
            private set
            {
                _part = value;
            }
        }

        /// <summary>
        /// <para xml:lang="en">Initializes a new instance of the <see cref="ScoreTimewiseMeasure" /> class.</para>
        /// </summary>
        public ScoreTimewiseMeasure()
        {
            this._part = new System.Collections.ObjectModel.Collection<ScoreTimewiseMeasurePart>();
        }

        [System.ComponentModel.DataAnnotations.RequiredAttribute(AllowEmptyStrings=true)]
        [System.Xml.Serialization.XmlAttributeAttribute("number")]
        public string Number { get; set; }

        /// <summary>
        /// <para>The measure-text type is used for the text attribute of measure elements. It has at least one character. The implicit attribute of the measure element should be set to "yes" rather than setting the text attribute to an empty string.</para>
        /// <para xml:lang="en">Minimum length: 1.</para>
        /// </summary>
        [System.ComponentModel.DataAnnotations.MinLengthAttribute(1)]
        [System.Xml.Serialization.XmlAttributeAttribute("text")]
        public string Text { get; set; }

        [System.Xml.Serialization.XmlAttributeAttribute("implicit")]
        public YesNo Implicit { get; set; }

        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the Implicit property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool ImplicitSpecified { get; set; }

        [System.Xml.Serialization.XmlAttributeAttribute("non-controlling")]
        public YesNo NonControlling { get; set; }

        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the NonControlling property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool NonControllingSpecified { get; set; }

        /// <summary>
        /// <para>The tenths type is a number representing tenths of interline staff space (positive or negative). Both integer and decimal values are allowed, such as 5 for a half space and 2.5 for a quarter space. Interline space is measured from the middle of a staff line.
        ///
        ///Distances in a MusicXML file are measured in tenths of staff space. Tenths are then scaled to millimeters within the scaling element, used in the defaults element at the start of a score. Individual staves can apply a scaling factor to adjust staff size. When a MusicXML element or attribute refers to tenths, it means the global tenths defined by the scaling element, not the local tenths as adjusted by the staff-size element.</para>
        /// </summary>
        [System.Xml.Serialization.XmlAttributeAttribute("width")]
        public decimal Width { get; set; }

        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the Width property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool WidthSpecified { get; set; }

        [System.Xml.Serialization.XmlAttributeAttribute("id")]
        public string Id { get; set; }
    }

    [System.CodeDom.Compiler.GeneratedCodeAttribute("XmlSchemaClassGenerator", "2.1.1142.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute("ScoreTimewiseMeasurePart", Namespace="", AnonymousType=true)]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class ScoreTimewiseMeasurePart : IMusicData, IPartAttributes
    {

        [System.Xml.Serialization.XmlIgnoreAttribute()]
        private System.Collections.ObjectModel.Collection<Note> _note;

        [System.Xml.Serialization.XmlElementAttribute("note")]
        public System.Collections.ObjectModel.Collection<Note> Note
        {
            get
            {
                return _note;
            }
            private set
            {
                _note = value;
            }
        }

        /// <summary>
        /// <para xml:lang="en">Gets a value indicating whether the Note collection is empty.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool NoteSpecified
        {
            get
            {
                return (this.Note.Count != 0);
            }
        }

        /// <summary>
        /// <para xml:lang="en">Initializes a new instance of the <see cref="ScoreTimewiseMeasurePart" /> class.</para>
        /// </summary>
        public ScoreTimewiseMeasurePart()
        {
            this._note = new System.Collections.ObjectModel.Collection<Note>();
            this._backup = new System.Collections.ObjectModel.Collection<Backup>();
            this._forward = new System.Collections.ObjectModel.Collection<Forward>();
            this._direction = new System.Collections.ObjectModel.Collection<Direction>();
            this._attributes = new System.Collections.ObjectModel.Collection<Attributes>();
            this._harmony = new System.Collections.ObjectModel.Collection<Harmony>();
            this._figuredBass = new System.Collections.ObjectModel.Collection<FiguredBass>();
            this._print = new System.Collections.ObjectModel.Collection<Print>();
            this._sound = new System.Collections.ObjectModel.Collection<Sound>();
            this._listening = new System.Collections.ObjectModel.Collection<Listening>();
            this._barline = new System.Collections.ObjectModel.Collection<Barline>();
            this._grouping = new System.Collections.ObjectModel.Collection<Grouping>();
            this._link = new System.Collections.ObjectModel.Collection<Link>();
            this._bookmark = new System.Collections.ObjectModel.Collection<Bookmark>();
        }

        [System.Xml.Serialization.XmlIgnoreAttribute()]
        private System.Collections.ObjectModel.Collection<Backup> _backup;

        [System.Xml.Serialization.XmlElementAttribute("backup")]
        public System.Collections.ObjectModel.Collection<Backup> Backup
        {
            get
            {
                return _backup;
            }
            private set
            {
                _backup = value;
            }
        }

        /// <summary>
        /// <para xml:lang="en">Gets a value indicating whether the Backup collection is empty.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool BackupSpecified
        {
            get
            {
                return (this.Backup.Count != 0);
            }
        }

        [System.Xml.Serialization.XmlIgnoreAttribute()]
        private System.Collections.ObjectModel.Collection<Forward> _forward;

        [System.Xml.Serialization.XmlElementAttribute("forward")]
        public System.Collections.ObjectModel.Collection<Forward> Forward
        {
            get
            {
                return _forward;
            }
            private set
            {
                _forward = value;
            }
        }

        /// <summary>
        /// <para xml:lang="en">Gets a value indicating whether the Forward collection is empty.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool ForwardSpecified
        {
            get
            {
                return (this.Forward.Count != 0);
            }
        }

        [System.Xml.Serialization.XmlIgnoreAttribute()]
        private System.Collections.ObjectModel.Collection<Direction> _direction;

        [System.Xml.Serialization.XmlElementAttribute("direction")]
        public System.Collections.ObjectModel.Collection<Direction> Direction
        {
            get
            {
                return _direction;
            }
            private set
            {
                _direction = value;
            }
        }

        /// <summary>
        /// <para xml:lang="en">Gets a value indicating whether the Direction collection is empty.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool DirectionSpecified
        {
            get
            {
                return (this.Direction.Count != 0);
            }
        }

        [System.Xml.Serialization.XmlIgnoreAttribute()]
        private System.Collections.ObjectModel.Collection<Attributes> _attributes;

        [System.Xml.Serialization.XmlElementAttribute("attributes")]
        public System.Collections.ObjectModel.Collection<Attributes> Attributes
        {
            get
            {
                return _attributes;
            }
            private set
            {
                _attributes = value;
            }
        }

        /// <summary>
        /// <para xml:lang="en">Gets a value indicating whether the Attributes collection is empty.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool AttributesSpecified
        {
            get
            {
                return (this.Attributes.Count != 0);
            }
        }

        [System.Xml.Serialization.XmlIgnoreAttribute()]
        private System.Collections.ObjectModel.Collection<Harmony> _harmony;

        [System.Xml.Serialization.XmlElementAttribute("harmony")]
        public System.Collections.ObjectModel.Collection<Harmony> Harmony
        {
            get
            {
                return _harmony;
            }
            private set
            {
                _harmony = value;
            }
        }

        /// <summary>
        /// <para xml:lang="en">Gets a value indicating whether the Harmony collection is empty.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool HarmonySpecified
        {
            get
            {
                return (this.Harmony.Count != 0);
            }
        }

        [System.Xml.Serialization.XmlIgnoreAttribute()]
        private System.Collections.ObjectModel.Collection<FiguredBass> _figuredBass;

        [System.Xml.Serialization.XmlElementAttribute("figured-bass")]
        public System.Collections.ObjectModel.Collection<FiguredBass> FiguredBass
        {
            get
            {
                return _figuredBass;
            }
            private set
            {
                _figuredBass = value;
            }
        }

        /// <summary>
        /// <para xml:lang="en">Gets a value indicating whether the FiguredBass collection is empty.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool FiguredBassSpecified
        {
            get
            {
                return (this.FiguredBass.Count != 0);
            }
        }

        [System.Xml.Serialization.XmlIgnoreAttribute()]
        private System.Collections.ObjectModel.Collection<Print> _print;

        [System.Xml.Serialization.XmlElementAttribute("print")]
        public System.Collections.ObjectModel.Collection<Print> Print
        {
            get
            {
                return _print;
            }
            private set
            {
                _print = value;
            }
        }

        /// <summary>
        /// <para xml:lang="en">Gets a value indicating whether the Print collection is empty.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool PrintSpecified
        {
            get
            {
                return (this.Print.Count != 0);
            }
        }

        [System.Xml.Serialization.XmlIgnoreAttribute()]
        private System.Collections.ObjectModel.Collection<Sound> _sound;

        [System.Xml.Serialization.XmlElementAttribute("sound")]
        public System.Collections.ObjectModel.Collection<Sound> Sound
        {
            get
            {
                return _sound;
            }
            private set
            {
                _sound = value;
            }
        }

        /// <summary>
        /// <para xml:lang="en">Gets a value indicating whether the Sound collection is empty.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool SoundSpecified
        {
            get
            {
                return (this.Sound.Count != 0);
            }
        }

        [System.Xml.Serialization.XmlIgnoreAttribute()]
        private System.Collections.ObjectModel.Collection<Listening> _listening;

        [System.Xml.Serialization.XmlElementAttribute("listening")]
        public System.Collections.ObjectModel.Collection<Listening> Listening
        {
            get
            {
                return _listening;
            }
            private set
            {
                _listening = value;
            }
        }

        /// <summary>
        /// <para xml:lang="en">Gets a value indicating whether the Listening collection is empty.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool ListeningSpecified
        {
            get
            {
                return (this.Listening.Count != 0);
            }
        }

        [System.Xml.Serialization.XmlIgnoreAttribute()]
        private System.Collections.ObjectModel.Collection<Barline> _barline;

        [System.Xml.Serialization.XmlElementAttribute("barline")]
        public System.Collections.ObjectModel.Collection<Barline> Barline
        {
            get
            {
                return _barline;
            }
            private set
            {
                _barline = value;
            }
        }

        /// <summary>
        /// <para xml:lang="en">Gets a value indicating whether the Barline collection is empty.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool BarlineSpecified
        {
            get
            {
                return (this.Barline.Count != 0);
            }
        }

        [System.Xml.Serialization.XmlIgnoreAttribute()]
        private System.Collections.ObjectModel.Collection<Grouping> _grouping;

        [System.Xml.Serialization.XmlElementAttribute("grouping")]
        public System.Collections.ObjectModel.Collection<Grouping> Grouping
        {
            get
            {
                return _grouping;
            }
            private set
            {
                _grouping = value;
            }
        }

        /// <summary>
        /// <para xml:lang="en">Gets a value indicating whether the Grouping collection is empty.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool GroupingSpecified
        {
            get
            {
                return (this.Grouping.Count != 0);
            }
        }

        [System.Xml.Serialization.XmlIgnoreAttribute()]
        private System.Collections.ObjectModel.Collection<Link> _link;

        [System.Xml.Serialization.XmlElementAttribute("link")]
        public System.Collections.ObjectModel.Collection<Link> Link
        {
            get
            {
                return _link;
            }
            private set
            {
                _link = value;
            }
        }

        /// <summary>
        /// <para xml:lang="en">Gets a value indicating whether the Link collection is empty.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool LinkSpecified
        {
            get
            {
                return (this.Link.Count != 0);
            }
        }

        [System.Xml.Serialization.XmlIgnoreAttribute()]
        private System.Collections.ObjectModel.Collection<Bookmark> _bookmark;

        [System.Xml.Serialization.XmlElementAttribute("bookmark")]
        public System.Collections.ObjectModel.Collection<Bookmark> Bookmark
        {
            get
            {
                return _bookmark;
            }
            private set
            {
                _bookmark = value;
            }
        }

        /// <summary>
        /// <para xml:lang="en">Gets a value indicating whether the Bookmark collection is empty.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool BookmarkSpecified
        {
            get
            {
                return (this.Bookmark.Count != 0);
            }
        }

        [System.ComponentModel.DataAnnotations.RequiredAttribute(AllowEmptyStrings=true)]
        [System.Xml.Serialization.XmlAttributeAttribute("id")]
        public string Id { get; set; }
    }

    [System.CodeDom.Compiler.GeneratedCodeAttribute("XmlSchemaClassGenerator", "2.1.1142.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute("space", Namespace="http://www.w3.org/XML/1998/namespace", AnonymousType=true)]
    public enum Space
    {

        [System.Xml.Serialization.XmlEnumAttribute("default")]
        Default,

        [System.Xml.Serialization.XmlEnumAttribute("preserve")]
        Preserve,
    }

    [System.CodeDom.Compiler.GeneratedCodeAttribute("XmlSchemaClassGenerator", "2.1.1142.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute("type", Namespace="http://www.w3.org/1999/xlink", AnonymousType=true)]
    public enum Type
    {

        [System.Xml.Serialization.XmlEnumAttribute("simple")]
        Simple,
    }

    [System.CodeDom.Compiler.GeneratedCodeAttribute("XmlSchemaClassGenerator", "2.1.1142.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute("show", Namespace="http://www.w3.org/1999/xlink", AnonymousType=true)]
    public enum Show
    {

        [System.Xml.Serialization.XmlEnumAttribute("new")]
        New,

        [System.Xml.Serialization.XmlEnumAttribute("replace")]
        Replace,

        [System.Xml.Serialization.XmlEnumAttribute("embed")]
        Embed,

        [System.Xml.Serialization.XmlEnumAttribute("other")]
        Other,

        [System.Xml.Serialization.XmlEnumAttribute("none")]
        None,
    }

    [System.CodeDom.Compiler.GeneratedCodeAttribute("XmlSchemaClassGenerator", "2.1.1142.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute("actuate", Namespace="http://www.w3.org/1999/xlink", AnonymousType=true)]
    public enum Actuate
    {

        [System.Xml.Serialization.XmlEnumAttribute("onRequest")]
        OnRequest,

        [System.Xml.Serialization.XmlEnumAttribute("onLoad")]
        OnLoad,

        [System.Xml.Serialization.XmlEnumAttribute("other")]
        Other,

        [System.Xml.Serialization.XmlEnumAttribute("none")]
        None,
    }
}
